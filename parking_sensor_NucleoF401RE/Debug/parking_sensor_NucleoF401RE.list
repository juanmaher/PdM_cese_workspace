
parking_sensor_NucleoF401RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bb0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08003d50  08003d50  00013d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003da4  08003da4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003da4  08003da4  00013da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dac  08003dac  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dac  08003dac  00013dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003db0  08003db0  00013db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000078  08003e2c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08003e2c  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006b5e  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000160e  00000000  00000000  00026c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d0  00000000  00000000  00028258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000511  00000000  00000000  00028928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016531  00000000  00000000  00028e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008774  00000000  00000000  0003f36a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008848a  00000000  00000000  00047ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f7c  00000000  00000000  000cff68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  000d1ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003d38 	.word	0x08003d38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08003d38 	.word	0x08003d38

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000590:	e7fe      	b.n	8000590 <NMI_Handler+0x4>

08000592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000596:	e7fe      	b.n	8000596 <HardFault_Handler+0x4>

08000598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800059c:	e7fe      	b.n	800059c <MemManage_Handler+0x4>

0800059e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <BusFault_Handler+0x4>

080005a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <UsageFault_Handler+0x4>

080005aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d8:	f001 f886 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}

080005e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005e8:	4a14      	ldr	r2, [pc, #80]	; (800063c <_sbrk+0x5c>)
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <_sbrk+0x60>)
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005f4:	4b13      	ldr	r3, [pc, #76]	; (8000644 <_sbrk+0x64>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d102      	bne.n	8000602 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <_sbrk+0x64>)
 80005fe:	4a12      	ldr	r2, [pc, #72]	; (8000648 <_sbrk+0x68>)
 8000600:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <_sbrk+0x64>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	693a      	ldr	r2, [r7, #16]
 800060c:	429a      	cmp	r2, r3
 800060e:	d207      	bcs.n	8000620 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000610:	f002 ff16 	bl	8003440 <__errno>
 8000614:	4603      	mov	r3, r0
 8000616:	220c      	movs	r2, #12
 8000618:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800061a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800061e:	e009      	b.n	8000634 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <_sbrk+0x64>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <_sbrk+0x64>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4413      	add	r3, r2
 800062e:	4a05      	ldr	r2, [pc, #20]	; (8000644 <_sbrk+0x64>)
 8000630:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000632:	68fb      	ldr	r3, [r7, #12]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20018000 	.word	0x20018000
 8000640:	00000400 	.word	0x00000400
 8000644:	20000094 	.word	0x20000094
 8000648:	20000260 	.word	0x20000260

0800064c <nRF24_Reset>:
static uint8_t DYNPD_DFT_VALUE = 0x00; // 0x00
static uint8_t FEATURE_DFT_VALUE = 0x00; // 0x00

/* Private functions ---------------------------------------------------------*/
static nRF24_Status_t nRF24_Reset()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | CONFIG, &CONFIG_DFT_VALUE));
 8000650:	2201      	movs	r2, #1
 8000652:	49ba      	ldr	r1, [pc, #744]	; (800093c <nRF24_Reset+0x2f0>)
 8000654:	2020      	movs	r0, #32
 8000656:	f000 faab 	bl	8000bb0 <nRF24_SendCmd>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d006      	beq.n	800066e <nRF24_Reset+0x22>
 8000660:	2201      	movs	r2, #1
 8000662:	49b6      	ldr	r1, [pc, #728]	; (800093c <nRF24_Reset+0x2f0>)
 8000664:	2020      	movs	r0, #32
 8000666:	f000 faa3 	bl	8000bb0 <nRF24_SendCmd>
 800066a:	4603      	mov	r3, r0
 800066c:	e1b1      	b.n	80009d2 <nRF24_Reset+0x386>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | EN_AA, &EN_AA_DFT_VALUE));
 800066e:	2201      	movs	r2, #1
 8000670:	49b3      	ldr	r1, [pc, #716]	; (8000940 <nRF24_Reset+0x2f4>)
 8000672:	2021      	movs	r0, #33	; 0x21
 8000674:	f000 fa9c 	bl	8000bb0 <nRF24_SendCmd>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d006      	beq.n	800068c <nRF24_Reset+0x40>
 800067e:	2201      	movs	r2, #1
 8000680:	49af      	ldr	r1, [pc, #700]	; (8000940 <nRF24_Reset+0x2f4>)
 8000682:	2021      	movs	r0, #33	; 0x21
 8000684:	f000 fa94 	bl	8000bb0 <nRF24_SendCmd>
 8000688:	4603      	mov	r3, r0
 800068a:	e1a2      	b.n	80009d2 <nRF24_Reset+0x386>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | EN_RXADDR, &EN_RXADDR_DFT_VALUE));
 800068c:	2201      	movs	r2, #1
 800068e:	49ad      	ldr	r1, [pc, #692]	; (8000944 <nRF24_Reset+0x2f8>)
 8000690:	2022      	movs	r0, #34	; 0x22
 8000692:	f000 fa8d 	bl	8000bb0 <nRF24_SendCmd>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d006      	beq.n	80006aa <nRF24_Reset+0x5e>
 800069c:	2201      	movs	r2, #1
 800069e:	49a9      	ldr	r1, [pc, #676]	; (8000944 <nRF24_Reset+0x2f8>)
 80006a0:	2022      	movs	r0, #34	; 0x22
 80006a2:	f000 fa85 	bl	8000bb0 <nRF24_SendCmd>
 80006a6:	4603      	mov	r3, r0
 80006a8:	e193      	b.n	80009d2 <nRF24_Reset+0x386>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | SETUP_AW, &SETUP_AW_DFT_VALUE));
 80006aa:	2201      	movs	r2, #1
 80006ac:	49a6      	ldr	r1, [pc, #664]	; (8000948 <nRF24_Reset+0x2fc>)
 80006ae:	2023      	movs	r0, #35	; 0x23
 80006b0:	f000 fa7e 	bl	8000bb0 <nRF24_SendCmd>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d006      	beq.n	80006c8 <nRF24_Reset+0x7c>
 80006ba:	2201      	movs	r2, #1
 80006bc:	49a2      	ldr	r1, [pc, #648]	; (8000948 <nRF24_Reset+0x2fc>)
 80006be:	2023      	movs	r0, #35	; 0x23
 80006c0:	f000 fa76 	bl	8000bb0 <nRF24_SendCmd>
 80006c4:	4603      	mov	r3, r0
 80006c6:	e184      	b.n	80009d2 <nRF24_Reset+0x386>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | SETUP_RETR, &SETUP_RETR_DFT_VALUE));
 80006c8:	2201      	movs	r2, #1
 80006ca:	49a0      	ldr	r1, [pc, #640]	; (800094c <nRF24_Reset+0x300>)
 80006cc:	2024      	movs	r0, #36	; 0x24
 80006ce:	f000 fa6f 	bl	8000bb0 <nRF24_SendCmd>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d006      	beq.n	80006e6 <nRF24_Reset+0x9a>
 80006d8:	2201      	movs	r2, #1
 80006da:	499c      	ldr	r1, [pc, #624]	; (800094c <nRF24_Reset+0x300>)
 80006dc:	2024      	movs	r0, #36	; 0x24
 80006de:	f000 fa67 	bl	8000bb0 <nRF24_SendCmd>
 80006e2:	4603      	mov	r3, r0
 80006e4:	e175      	b.n	80009d2 <nRF24_Reset+0x386>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RF_CH, &RF_CH_DFT_VALUE));
 80006e6:	2201      	movs	r2, #1
 80006e8:	4999      	ldr	r1, [pc, #612]	; (8000950 <nRF24_Reset+0x304>)
 80006ea:	2025      	movs	r0, #37	; 0x25
 80006ec:	f000 fa60 	bl	8000bb0 <nRF24_SendCmd>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d006      	beq.n	8000704 <nRF24_Reset+0xb8>
 80006f6:	2201      	movs	r2, #1
 80006f8:	4995      	ldr	r1, [pc, #596]	; (8000950 <nRF24_Reset+0x304>)
 80006fa:	2025      	movs	r0, #37	; 0x25
 80006fc:	f000 fa58 	bl	8000bb0 <nRF24_SendCmd>
 8000700:	4603      	mov	r3, r0
 8000702:	e166      	b.n	80009d2 <nRF24_Reset+0x386>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RF_SETUP, &RF_SETUP_DFT_VALUE));
 8000704:	2201      	movs	r2, #1
 8000706:	4993      	ldr	r1, [pc, #588]	; (8000954 <nRF24_Reset+0x308>)
 8000708:	2026      	movs	r0, #38	; 0x26
 800070a:	f000 fa51 	bl	8000bb0 <nRF24_SendCmd>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d006      	beq.n	8000722 <nRF24_Reset+0xd6>
 8000714:	2201      	movs	r2, #1
 8000716:	498f      	ldr	r1, [pc, #572]	; (8000954 <nRF24_Reset+0x308>)
 8000718:	2026      	movs	r0, #38	; 0x26
 800071a:	f000 fa49 	bl	8000bb0 <nRF24_SendCmd>
 800071e:	4603      	mov	r3, r0
 8000720:	e157      	b.n	80009d2 <nRF24_Reset+0x386>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | STATUS, &STATUS_DFT_VALUE));
 8000722:	2201      	movs	r2, #1
 8000724:	498c      	ldr	r1, [pc, #560]	; (8000958 <nRF24_Reset+0x30c>)
 8000726:	2027      	movs	r0, #39	; 0x27
 8000728:	f000 fa42 	bl	8000bb0 <nRF24_SendCmd>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d006      	beq.n	8000740 <nRF24_Reset+0xf4>
 8000732:	2201      	movs	r2, #1
 8000734:	4988      	ldr	r1, [pc, #544]	; (8000958 <nRF24_Reset+0x30c>)
 8000736:	2027      	movs	r0, #39	; 0x27
 8000738:	f000 fa3a 	bl	8000bb0 <nRF24_SendCmd>
 800073c:	4603      	mov	r3, r0
 800073e:	e148      	b.n	80009d2 <nRF24_Reset+0x386>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_ADDR_P0, RX_ADDR_PO_DFT_VALUE));
 8000740:	2201      	movs	r2, #1
 8000742:	4986      	ldr	r1, [pc, #536]	; (800095c <nRF24_Reset+0x310>)
 8000744:	202a      	movs	r0, #42	; 0x2a
 8000746:	f000 fa33 	bl	8000bb0 <nRF24_SendCmd>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d006      	beq.n	800075e <nRF24_Reset+0x112>
 8000750:	2201      	movs	r2, #1
 8000752:	4982      	ldr	r1, [pc, #520]	; (800095c <nRF24_Reset+0x310>)
 8000754:	202a      	movs	r0, #42	; 0x2a
 8000756:	f000 fa2b 	bl	8000bb0 <nRF24_SendCmd>
 800075a:	4603      	mov	r3, r0
 800075c:	e139      	b.n	80009d2 <nRF24_Reset+0x386>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_ADDR_P1, RX_ADDR_P1_DFT_VALUE));
 800075e:	2201      	movs	r2, #1
 8000760:	497f      	ldr	r1, [pc, #508]	; (8000960 <nRF24_Reset+0x314>)
 8000762:	202b      	movs	r0, #43	; 0x2b
 8000764:	f000 fa24 	bl	8000bb0 <nRF24_SendCmd>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d006      	beq.n	800077c <nRF24_Reset+0x130>
 800076e:	2201      	movs	r2, #1
 8000770:	497b      	ldr	r1, [pc, #492]	; (8000960 <nRF24_Reset+0x314>)
 8000772:	202b      	movs	r0, #43	; 0x2b
 8000774:	f000 fa1c 	bl	8000bb0 <nRF24_SendCmd>
 8000778:	4603      	mov	r3, r0
 800077a:	e12a      	b.n	80009d2 <nRF24_Reset+0x386>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_ADDR_P2, &RX_ADDR_P2_DFT_VALUE));
 800077c:	2201      	movs	r2, #1
 800077e:	4979      	ldr	r1, [pc, #484]	; (8000964 <nRF24_Reset+0x318>)
 8000780:	202c      	movs	r0, #44	; 0x2c
 8000782:	f000 fa15 	bl	8000bb0 <nRF24_SendCmd>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d006      	beq.n	800079a <nRF24_Reset+0x14e>
 800078c:	2201      	movs	r2, #1
 800078e:	4975      	ldr	r1, [pc, #468]	; (8000964 <nRF24_Reset+0x318>)
 8000790:	202c      	movs	r0, #44	; 0x2c
 8000792:	f000 fa0d 	bl	8000bb0 <nRF24_SendCmd>
 8000796:	4603      	mov	r3, r0
 8000798:	e11b      	b.n	80009d2 <nRF24_Reset+0x386>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_ADDR_P3, &RX_ADDR_P3_DFT_VALUE));
 800079a:	2201      	movs	r2, #1
 800079c:	4972      	ldr	r1, [pc, #456]	; (8000968 <nRF24_Reset+0x31c>)
 800079e:	202d      	movs	r0, #45	; 0x2d
 80007a0:	f000 fa06 	bl	8000bb0 <nRF24_SendCmd>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d006      	beq.n	80007b8 <nRF24_Reset+0x16c>
 80007aa:	2201      	movs	r2, #1
 80007ac:	496e      	ldr	r1, [pc, #440]	; (8000968 <nRF24_Reset+0x31c>)
 80007ae:	202d      	movs	r0, #45	; 0x2d
 80007b0:	f000 f9fe 	bl	8000bb0 <nRF24_SendCmd>
 80007b4:	4603      	mov	r3, r0
 80007b6:	e10c      	b.n	80009d2 <nRF24_Reset+0x386>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_ADDR_P4, &RX_ADDR_P4_DFT_VALUE));
 80007b8:	2201      	movs	r2, #1
 80007ba:	496c      	ldr	r1, [pc, #432]	; (800096c <nRF24_Reset+0x320>)
 80007bc:	202e      	movs	r0, #46	; 0x2e
 80007be:	f000 f9f7 	bl	8000bb0 <nRF24_SendCmd>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d006      	beq.n	80007d6 <nRF24_Reset+0x18a>
 80007c8:	2201      	movs	r2, #1
 80007ca:	4968      	ldr	r1, [pc, #416]	; (800096c <nRF24_Reset+0x320>)
 80007cc:	202e      	movs	r0, #46	; 0x2e
 80007ce:	f000 f9ef 	bl	8000bb0 <nRF24_SendCmd>
 80007d2:	4603      	mov	r3, r0
 80007d4:	e0fd      	b.n	80009d2 <nRF24_Reset+0x386>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_ADDR_P5, &RX_ADDR_P5_DFT_VALUE));
 80007d6:	2201      	movs	r2, #1
 80007d8:	4965      	ldr	r1, [pc, #404]	; (8000970 <nRF24_Reset+0x324>)
 80007da:	202f      	movs	r0, #47	; 0x2f
 80007dc:	f000 f9e8 	bl	8000bb0 <nRF24_SendCmd>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d006      	beq.n	80007f4 <nRF24_Reset+0x1a8>
 80007e6:	2201      	movs	r2, #1
 80007e8:	4961      	ldr	r1, [pc, #388]	; (8000970 <nRF24_Reset+0x324>)
 80007ea:	202f      	movs	r0, #47	; 0x2f
 80007ec:	f000 f9e0 	bl	8000bb0 <nRF24_SendCmd>
 80007f0:	4603      	mov	r3, r0
 80007f2:	e0ee      	b.n	80009d2 <nRF24_Reset+0x386>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | TX_ADDR, TX_ADDR_DFT_VALUE));
 80007f4:	2201      	movs	r2, #1
 80007f6:	495f      	ldr	r1, [pc, #380]	; (8000974 <nRF24_Reset+0x328>)
 80007f8:	2030      	movs	r0, #48	; 0x30
 80007fa:	f000 f9d9 	bl	8000bb0 <nRF24_SendCmd>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d006      	beq.n	8000812 <nRF24_Reset+0x1c6>
 8000804:	2201      	movs	r2, #1
 8000806:	495b      	ldr	r1, [pc, #364]	; (8000974 <nRF24_Reset+0x328>)
 8000808:	2030      	movs	r0, #48	; 0x30
 800080a:	f000 f9d1 	bl	8000bb0 <nRF24_SendCmd>
 800080e:	4603      	mov	r3, r0
 8000810:	e0df      	b.n	80009d2 <nRF24_Reset+0x386>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_PW_P0, &RX_PW_P0_DFT_VALUE));
 8000812:	2201      	movs	r2, #1
 8000814:	4958      	ldr	r1, [pc, #352]	; (8000978 <nRF24_Reset+0x32c>)
 8000816:	2031      	movs	r0, #49	; 0x31
 8000818:	f000 f9ca 	bl	8000bb0 <nRF24_SendCmd>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d006      	beq.n	8000830 <nRF24_Reset+0x1e4>
 8000822:	2201      	movs	r2, #1
 8000824:	4954      	ldr	r1, [pc, #336]	; (8000978 <nRF24_Reset+0x32c>)
 8000826:	2031      	movs	r0, #49	; 0x31
 8000828:	f000 f9c2 	bl	8000bb0 <nRF24_SendCmd>
 800082c:	4603      	mov	r3, r0
 800082e:	e0d0      	b.n	80009d2 <nRF24_Reset+0x386>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_PW_P1, &RX_PW_P1_DFT_VALUE));
 8000830:	2201      	movs	r2, #1
 8000832:	4952      	ldr	r1, [pc, #328]	; (800097c <nRF24_Reset+0x330>)
 8000834:	2032      	movs	r0, #50	; 0x32
 8000836:	f000 f9bb 	bl	8000bb0 <nRF24_SendCmd>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d006      	beq.n	800084e <nRF24_Reset+0x202>
 8000840:	2201      	movs	r2, #1
 8000842:	494e      	ldr	r1, [pc, #312]	; (800097c <nRF24_Reset+0x330>)
 8000844:	2032      	movs	r0, #50	; 0x32
 8000846:	f000 f9b3 	bl	8000bb0 <nRF24_SendCmd>
 800084a:	4603      	mov	r3, r0
 800084c:	e0c1      	b.n	80009d2 <nRF24_Reset+0x386>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_PW_P2, &RX_PW_P2_DFT_VALUE));
 800084e:	2201      	movs	r2, #1
 8000850:	494b      	ldr	r1, [pc, #300]	; (8000980 <nRF24_Reset+0x334>)
 8000852:	2033      	movs	r0, #51	; 0x33
 8000854:	f000 f9ac 	bl	8000bb0 <nRF24_SendCmd>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d006      	beq.n	800086c <nRF24_Reset+0x220>
 800085e:	2201      	movs	r2, #1
 8000860:	4947      	ldr	r1, [pc, #284]	; (8000980 <nRF24_Reset+0x334>)
 8000862:	2033      	movs	r0, #51	; 0x33
 8000864:	f000 f9a4 	bl	8000bb0 <nRF24_SendCmd>
 8000868:	4603      	mov	r3, r0
 800086a:	e0b2      	b.n	80009d2 <nRF24_Reset+0x386>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_PW_P3, &RX_PW_P3_DFT_VALUE));
 800086c:	2201      	movs	r2, #1
 800086e:	4945      	ldr	r1, [pc, #276]	; (8000984 <nRF24_Reset+0x338>)
 8000870:	2034      	movs	r0, #52	; 0x34
 8000872:	f000 f99d 	bl	8000bb0 <nRF24_SendCmd>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d006      	beq.n	800088a <nRF24_Reset+0x23e>
 800087c:	2201      	movs	r2, #1
 800087e:	4941      	ldr	r1, [pc, #260]	; (8000984 <nRF24_Reset+0x338>)
 8000880:	2034      	movs	r0, #52	; 0x34
 8000882:	f000 f995 	bl	8000bb0 <nRF24_SendCmd>
 8000886:	4603      	mov	r3, r0
 8000888:	e0a3      	b.n	80009d2 <nRF24_Reset+0x386>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_PW_P4, &RX_PW_P4_DFT_VALUE));
 800088a:	2201      	movs	r2, #1
 800088c:	493e      	ldr	r1, [pc, #248]	; (8000988 <nRF24_Reset+0x33c>)
 800088e:	2035      	movs	r0, #53	; 0x35
 8000890:	f000 f98e 	bl	8000bb0 <nRF24_SendCmd>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d006      	beq.n	80008a8 <nRF24_Reset+0x25c>
 800089a:	2201      	movs	r2, #1
 800089c:	493a      	ldr	r1, [pc, #232]	; (8000988 <nRF24_Reset+0x33c>)
 800089e:	2035      	movs	r0, #53	; 0x35
 80008a0:	f000 f986 	bl	8000bb0 <nRF24_SendCmd>
 80008a4:	4603      	mov	r3, r0
 80008a6:	e094      	b.n	80009d2 <nRF24_Reset+0x386>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_PW_P5, &RX_PW_P5_DFT_VALUE));
 80008a8:	2201      	movs	r2, #1
 80008aa:	4938      	ldr	r1, [pc, #224]	; (800098c <nRF24_Reset+0x340>)
 80008ac:	2036      	movs	r0, #54	; 0x36
 80008ae:	f000 f97f 	bl	8000bb0 <nRF24_SendCmd>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d006      	beq.n	80008c6 <nRF24_Reset+0x27a>
 80008b8:	2201      	movs	r2, #1
 80008ba:	4934      	ldr	r1, [pc, #208]	; (800098c <nRF24_Reset+0x340>)
 80008bc:	2036      	movs	r0, #54	; 0x36
 80008be:	f000 f977 	bl	8000bb0 <nRF24_SendCmd>
 80008c2:	4603      	mov	r3, r0
 80008c4:	e085      	b.n	80009d2 <nRF24_Reset+0x386>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | FIFO_STATUS, &FIFO_STATUS_DFT_VALUE));
 80008c6:	2201      	movs	r2, #1
 80008c8:	4931      	ldr	r1, [pc, #196]	; (8000990 <nRF24_Reset+0x344>)
 80008ca:	2037      	movs	r0, #55	; 0x37
 80008cc:	f000 f970 	bl	8000bb0 <nRF24_SendCmd>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d006      	beq.n	80008e4 <nRF24_Reset+0x298>
 80008d6:	2201      	movs	r2, #1
 80008d8:	492d      	ldr	r1, [pc, #180]	; (8000990 <nRF24_Reset+0x344>)
 80008da:	2037      	movs	r0, #55	; 0x37
 80008dc:	f000 f968 	bl	8000bb0 <nRF24_SendCmd>
 80008e0:	4603      	mov	r3, r0
 80008e2:	e076      	b.n	80009d2 <nRF24_Reset+0x386>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | DYNPD, &DYNPD_DFT_VALUE));
 80008e4:	2201      	movs	r2, #1
 80008e6:	492b      	ldr	r1, [pc, #172]	; (8000994 <nRF24_Reset+0x348>)
 80008e8:	203c      	movs	r0, #60	; 0x3c
 80008ea:	f000 f961 	bl	8000bb0 <nRF24_SendCmd>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d006      	beq.n	8000902 <nRF24_Reset+0x2b6>
 80008f4:	2201      	movs	r2, #1
 80008f6:	4927      	ldr	r1, [pc, #156]	; (8000994 <nRF24_Reset+0x348>)
 80008f8:	203c      	movs	r0, #60	; 0x3c
 80008fa:	f000 f959 	bl	8000bb0 <nRF24_SendCmd>
 80008fe:	4603      	mov	r3, r0
 8000900:	e067      	b.n	80009d2 <nRF24_Reset+0x386>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | FEATURE, &FEATURE_DFT_VALUE));
 8000902:	2201      	movs	r2, #1
 8000904:	4924      	ldr	r1, [pc, #144]	; (8000998 <nRF24_Reset+0x34c>)
 8000906:	203d      	movs	r0, #61	; 0x3d
 8000908:	f000 f952 	bl	8000bb0 <nRF24_SendCmd>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d006      	beq.n	8000920 <nRF24_Reset+0x2d4>
 8000912:	2201      	movs	r2, #1
 8000914:	4920      	ldr	r1, [pc, #128]	; (8000998 <nRF24_Reset+0x34c>)
 8000916:	203d      	movs	r0, #61	; 0x3d
 8000918:	f000 f94a 	bl	8000bb0 <nRF24_SendCmd>
 800091c:	4603      	mov	r3, r0
 800091e:	e058      	b.n	80009d2 <nRF24_Reset+0x386>

    // Clean IRQ registers
    CHECK_INTERNAL(nRF24_SetRegister(STATUS, RX_DR));
 8000920:	2140      	movs	r1, #64	; 0x40
 8000922:	2007      	movs	r0, #7
 8000924:	f000 f99a 	bl	8000c5c <nRF24_SetRegister>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d036      	beq.n	800099c <nRF24_Reset+0x350>
 800092e:	2140      	movs	r1, #64	; 0x40
 8000930:	2007      	movs	r0, #7
 8000932:	f000 f993 	bl	8000c5c <nRF24_SetRegister>
 8000936:	4603      	mov	r3, r0
 8000938:	e04b      	b.n	80009d2 <nRF24_Reset+0x386>
 800093a:	bf00      	nop
 800093c:	20000000 	.word	0x20000000
 8000940:	20000001 	.word	0x20000001
 8000944:	20000002 	.word	0x20000002
 8000948:	20000003 	.word	0x20000003
 800094c:	20000004 	.word	0x20000004
 8000950:	20000005 	.word	0x20000005
 8000954:	20000006 	.word	0x20000006
 8000958:	20000007 	.word	0x20000007
 800095c:	20000008 	.word	0x20000008
 8000960:	2000000c 	.word	0x2000000c
 8000964:	20000010 	.word	0x20000010
 8000968:	20000011 	.word	0x20000011
 800096c:	20000012 	.word	0x20000012
 8000970:	20000013 	.word	0x20000013
 8000974:	20000014 	.word	0x20000014
 8000978:	200000f8 	.word	0x200000f8
 800097c:	200000f9 	.word	0x200000f9
 8000980:	200000fa 	.word	0x200000fa
 8000984:	200000fb 	.word	0x200000fb
 8000988:	200000fc 	.word	0x200000fc
 800098c:	200000fd 	.word	0x200000fd
 8000990:	20000018 	.word	0x20000018
 8000994:	200000fe 	.word	0x200000fe
 8000998:	200000ff 	.word	0x200000ff
    CHECK_INTERNAL(nRF24_SetRegister(STATUS, TX_DS));
 800099c:	2120      	movs	r1, #32
 800099e:	2007      	movs	r0, #7
 80009a0:	f000 f95c 	bl	8000c5c <nRF24_SetRegister>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d005      	beq.n	80009b6 <nRF24_Reset+0x36a>
 80009aa:	2120      	movs	r1, #32
 80009ac:	2007      	movs	r0, #7
 80009ae:	f000 f955 	bl	8000c5c <nRF24_SetRegister>
 80009b2:	4603      	mov	r3, r0
 80009b4:	e00d      	b.n	80009d2 <nRF24_Reset+0x386>
    CHECK_INTERNAL(nRF24_SetRegister(STATUS, MAX_RT));
 80009b6:	2110      	movs	r1, #16
 80009b8:	2007      	movs	r0, #7
 80009ba:	f000 f94f 	bl	8000c5c <nRF24_SetRegister>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d005      	beq.n	80009d0 <nRF24_Reset+0x384>
 80009c4:	2110      	movs	r1, #16
 80009c6:	2007      	movs	r0, #7
 80009c8:	f000 f948 	bl	8000c5c <nRF24_SetRegister>
 80009cc:	4603      	mov	r3, r0
 80009ce:	e000      	b.n	80009d2 <nRF24_Reset+0x386>

    return NRF24_OK;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop

080009d8 <nRF24_UpdateMode>:

static nRF24_Status_t nRF24_UpdateMode(const operationModes_t mode)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
    uint8_t register_value = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	73fb      	strb	r3, [r7, #15]

    if (operationCurrentMode == mode) {
 80009e6:	4b70      	ldr	r3, [pc, #448]	; (8000ba8 <nRF24_UpdateMode+0x1d0>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	79fa      	ldrb	r2, [r7, #7]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d101      	bne.n	80009f4 <nRF24_UpdateMode+0x1c>
        return NRF24_OK;
 80009f0:	2300      	movs	r3, #0
 80009f2:	e0d4      	b.n	8000b9e <nRF24_UpdateMode+0x1c6>
    }

    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | CONFIG, &register_value));
 80009f4:	f107 030f 	add.w	r3, r7, #15
 80009f8:	2201      	movs	r2, #1
 80009fa:	4619      	mov	r1, r3
 80009fc:	2000      	movs	r0, #0
 80009fe:	f000 f8d7 	bl	8000bb0 <nRF24_SendCmd>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d008      	beq.n	8000a1a <nRF24_UpdateMode+0x42>
 8000a08:	f107 030f 	add.w	r3, r7, #15
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	4619      	mov	r1, r3
 8000a10:	2000      	movs	r0, #0
 8000a12:	f000 f8cd 	bl	8000bb0 <nRF24_SendCmd>
 8000a16:	4603      	mov	r3, r0
 8000a18:	e0c1      	b.n	8000b9e <nRF24_UpdateMode+0x1c6>

    switch (operationCurrentMode) {
 8000a1a:	4b63      	ldr	r3, [pc, #396]	; (8000ba8 <nRF24_UpdateMode+0x1d0>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b04      	cmp	r3, #4
 8000a20:	f300 80b4 	bgt.w	8000b8c <nRF24_UpdateMode+0x1b4>
 8000a24:	2b03      	cmp	r3, #3
 8000a26:	f280 80a7 	bge.w	8000b78 <nRF24_UpdateMode+0x1a0>
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d002      	beq.n	8000a34 <nRF24_UpdateMode+0x5c>
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d020      	beq.n	8000a74 <nRF24_UpdateMode+0x9c>
            if (mode == STANDBYI) {
                nRF24_CE_LOW();
            }
            break;
        default:
            break;
 8000a32:	e0ab      	b.n	8000b8c <nRF24_UpdateMode+0x1b4>
            if (mode == STANDBYI) {
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	f040 80aa 	bne.w	8000b90 <nRF24_UpdateMode+0x1b8>
                register_value |= PWR_UP;
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	f043 0302 	orr.w	r3, r3, #2
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	73fb      	strb	r3, [r7, #15]
                CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | CONFIG, &(register_value)));
 8000a46:	f107 030f 	add.w	r3, r7, #15
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	2020      	movs	r0, #32
 8000a50:	f000 f8ae 	bl	8000bb0 <nRF24_SendCmd>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d008      	beq.n	8000a6c <nRF24_UpdateMode+0x94>
 8000a5a:	f107 030f 	add.w	r3, r7, #15
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4619      	mov	r1, r3
 8000a62:	2020      	movs	r0, #32
 8000a64:	f000 f8a4 	bl	8000bb0 <nRF24_SendCmd>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	e098      	b.n	8000b9e <nRF24_UpdateMode+0x1c6>
                HAL_Delay(START_UP_DELAY_MS);
 8000a6c:	2002      	movs	r0, #2
 8000a6e:	f000 fe5b 	bl	8001728 <HAL_Delay>
            break;
 8000a72:	e08d      	b.n	8000b90 <nRF24_UpdateMode+0x1b8>
            switch (mode) {
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	2b04      	cmp	r3, #4
 8000a78:	d040      	beq.n	8000afc <nRF24_UpdateMode+0x124>
 8000a7a:	2b04      	cmp	r3, #4
 8000a7c:	dc60      	bgt.n	8000b40 <nRF24_UpdateMode+0x168>
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d002      	beq.n	8000a88 <nRF24_UpdateMode+0xb0>
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d018      	beq.n	8000ab8 <nRF24_UpdateMode+0xe0>
 8000a86:	e05b      	b.n	8000b40 <nRF24_UpdateMode+0x168>
                    register_value &= ~PWR_UP;
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	f023 0302 	bic.w	r3, r3, #2
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	73fb      	strb	r3, [r7, #15]
                    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | CONFIG, &(register_value)));
 8000a92:	f107 030f 	add.w	r3, r7, #15
 8000a96:	2201      	movs	r2, #1
 8000a98:	4619      	mov	r1, r3
 8000a9a:	2020      	movs	r0, #32
 8000a9c:	f000 f888 	bl	8000bb0 <nRF24_SendCmd>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d064      	beq.n	8000b70 <nRF24_UpdateMode+0x198>
 8000aa6:	f107 030f 	add.w	r3, r7, #15
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4619      	mov	r1, r3
 8000aae:	2020      	movs	r0, #32
 8000ab0:	f000 f87e 	bl	8000bb0 <nRF24_SendCmd>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	e072      	b.n	8000b9e <nRF24_UpdateMode+0x1c6>
                    register_value |= PRIM_RX;
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	73fb      	strb	r3, [r7, #15]
                    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | CONFIG, &(register_value)));
 8000ac2:	f107 030f 	add.w	r3, r7, #15
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	2020      	movs	r0, #32
 8000acc:	f000 f870 	bl	8000bb0 <nRF24_SendCmd>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d008      	beq.n	8000ae8 <nRF24_UpdateMode+0x110>
 8000ad6:	f107 030f 	add.w	r3, r7, #15
 8000ada:	2201      	movs	r2, #1
 8000adc:	4619      	mov	r1, r3
 8000ade:	2020      	movs	r0, #32
 8000ae0:	f000 f866 	bl	8000bb0 <nRF24_SendCmd>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	e05a      	b.n	8000b9e <nRF24_UpdateMode+0x1c6>
                    nRF24_CE_HIGH();
 8000ae8:	2201      	movs	r2, #1
 8000aea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aee:	482f      	ldr	r0, [pc, #188]	; (8000bac <nRF24_UpdateMode+0x1d4>)
 8000af0:	f001 f8d4 	bl	8001c9c <HAL_GPIO_WritePin>
                    HAL_Delay(RX_DELAY_MS);
 8000af4:	2001      	movs	r0, #1
 8000af6:	f000 fe17 	bl	8001728 <HAL_Delay>
                    break;
 8000afa:	e03c      	b.n	8000b76 <nRF24_UpdateMode+0x19e>
                    register_value &= ~PRIM_RX;
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	f023 0301 	bic.w	r3, r3, #1
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	73fb      	strb	r3, [r7, #15]
                    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | CONFIG, &(register_value)));
 8000b06:	f107 030f 	add.w	r3, r7, #15
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	2020      	movs	r0, #32
 8000b10:	f000 f84e 	bl	8000bb0 <nRF24_SendCmd>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d008      	beq.n	8000b2c <nRF24_UpdateMode+0x154>
 8000b1a:	f107 030f 	add.w	r3, r7, #15
 8000b1e:	2201      	movs	r2, #1
 8000b20:	4619      	mov	r1, r3
 8000b22:	2020      	movs	r0, #32
 8000b24:	f000 f844 	bl	8000bb0 <nRF24_SendCmd>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	e038      	b.n	8000b9e <nRF24_UpdateMode+0x1c6>
                    nRF24_CE_HIGH();
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b32:	481e      	ldr	r0, [pc, #120]	; (8000bac <nRF24_UpdateMode+0x1d4>)
 8000b34:	f001 f8b2 	bl	8001c9c <HAL_GPIO_WritePin>
                    HAL_Delay(TX_DELAY_MS);
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f000 fdf5 	bl	8001728 <HAL_Delay>
                    break;
 8000b3e:	e01a      	b.n	8000b76 <nRF24_UpdateMode+0x19e>
                    register_value &= ~PWR_UP;
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	f023 0302 	bic.w	r3, r3, #2
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	73fb      	strb	r3, [r7, #15]
                    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | CONFIG, &(register_value)));
 8000b4a:	f107 030f 	add.w	r3, r7, #15
 8000b4e:	2201      	movs	r2, #1
 8000b50:	4619      	mov	r1, r3
 8000b52:	2020      	movs	r0, #32
 8000b54:	f000 f82c 	bl	8000bb0 <nRF24_SendCmd>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d00a      	beq.n	8000b74 <nRF24_UpdateMode+0x19c>
 8000b5e:	f107 030f 	add.w	r3, r7, #15
 8000b62:	2201      	movs	r2, #1
 8000b64:	4619      	mov	r1, r3
 8000b66:	2020      	movs	r0, #32
 8000b68:	f000 f822 	bl	8000bb0 <nRF24_SendCmd>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	e016      	b.n	8000b9e <nRF24_UpdateMode+0x1c6>
                    break;
 8000b70:	bf00      	nop
 8000b72:	e010      	b.n	8000b96 <nRF24_UpdateMode+0x1be>
                    break;
 8000b74:	bf00      	nop
            break;
 8000b76:	e00e      	b.n	8000b96 <nRF24_UpdateMode+0x1be>
            if (mode == STANDBYI) {
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d10a      	bne.n	8000b94 <nRF24_UpdateMode+0x1bc>
                nRF24_CE_LOW();
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b84:	4809      	ldr	r0, [pc, #36]	; (8000bac <nRF24_UpdateMode+0x1d4>)
 8000b86:	f001 f889 	bl	8001c9c <HAL_GPIO_WritePin>
            break;
 8000b8a:	e003      	b.n	8000b94 <nRF24_UpdateMode+0x1bc>
            break;
 8000b8c:	bf00      	nop
 8000b8e:	e002      	b.n	8000b96 <nRF24_UpdateMode+0x1be>
            break;
 8000b90:	bf00      	nop
 8000b92:	e000      	b.n	8000b96 <nRF24_UpdateMode+0x1be>
            break;
 8000b94:	bf00      	nop
    }

    operationCurrentMode = mode;
 8000b96:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <nRF24_UpdateMode+0x1d0>)
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	7013      	strb	r3, [r2, #0]

    return NRF24_OK;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000098 	.word	0x20000098
 8000bac:	40020000 	.word	0x40020000

08000bb0 <nRF24_SendCmd>:

static nRF24_Status_t nRF24_SendCmd(uint8_t cmd, uint8_t * value, const uint8_t length)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af02      	add	r7, sp, #8
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	6039      	str	r1, [r7, #0]
 8000bba:	71fb      	strb	r3, [r7, #7]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	71bb      	strb	r3, [r7, #6]
    /* Start SPI communication */
    SPIx_CS_LOW();
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2110      	movs	r1, #16
 8000bc4:	4822      	ldr	r0, [pc, #136]	; (8000c50 <nRF24_SendCmd+0xa0>)
 8000bc6:	f001 f869 	bl	8001c9c <HAL_GPIO_WritePin>

    //HAL_Delay(1);

    /* Send command */
    CHECK_SPI(HAL_SPI_TransmitReceive(&hspi1, &cmd, &(hnrf24->StatusRegister), 1, SPIx_TIMEOUT_MAX));
 8000bca:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <nRF24_SendCmd+0xa4>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f103 020d 	add.w	r2, r3, #13
 8000bd2:	1df9      	adds	r1, r7, #7
 8000bd4:	f242 7310 	movw	r3, #10000	; 0x2710
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	2301      	movs	r3, #1
 8000bdc:	481e      	ldr	r0, [pc, #120]	; (8000c58 <nRF24_SendCmd+0xa8>)
 8000bde:	f001 ffc9 	bl	8002b74 <HAL_SPI_TransmitReceive>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <nRF24_SendCmd+0x3c>
 8000be8:	2303      	movs	r3, #3
 8000bea:	e02d      	b.n	8000c48 <nRF24_SendCmd+0x98>

    if (cmd & W_REGISTER || cmd == W_TX_PAYLOAD || cmd == W_TX_PAYLOAD_NOACK || cmd == W_ACK_PAYLOAD) {
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	f003 0320 	and.w	r3, r3, #32
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d108      	bne.n	8000c08 <nRF24_SendCmd+0x58>
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	2ba0      	cmp	r3, #160	; 0xa0
 8000bfa:	d005      	beq.n	8000c08 <nRF24_SendCmd+0x58>
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	2bb0      	cmp	r3, #176	; 0xb0
 8000c00:	d002      	beq.n	8000c08 <nRF24_SendCmd+0x58>
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2ba8      	cmp	r3, #168	; 0xa8
 8000c06:	d10c      	bne.n	8000c22 <nRF24_SendCmd+0x72>
        CHECK_SPI(HAL_SPI_Transmit(&hspi1, value, length, SPIx_TIMEOUT_MAX));
 8000c08:	79bb      	ldrb	r3, [r7, #6]
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c10:	6839      	ldr	r1, [r7, #0]
 8000c12:	4811      	ldr	r0, [pc, #68]	; (8000c58 <nRF24_SendCmd+0xa8>)
 8000c14:	f001 fd61 	bl	80026da <HAL_SPI_Transmit>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d00e      	beq.n	8000c3c <nRF24_SendCmd+0x8c>
 8000c1e:	2303      	movs	r3, #3
 8000c20:	e012      	b.n	8000c48 <nRF24_SendCmd+0x98>
    //} else if (cmd == R_REGISTER || cmd & R_REGISTER || cmd == R_RX_PAYLOAD || cmd == R_RX_PL_WID) {
    } else {
        CHECK_SPI(HAL_SPI_Receive(&hspi1, value, length, SPIx_TIMEOUT_MAX));
 8000c22:	79bb      	ldrb	r3, [r7, #6]
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c2a:	6839      	ldr	r1, [r7, #0]
 8000c2c:	480a      	ldr	r0, [pc, #40]	; (8000c58 <nRF24_SendCmd+0xa8>)
 8000c2e:	f001 fe90 	bl	8002952 <HAL_SPI_Receive>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <nRF24_SendCmd+0x8c>
 8000c38:	2303      	movs	r3, #3
 8000c3a:	e005      	b.n	8000c48 <nRF24_SendCmd+0x98>
    }

    //HAL_Delay(1);

    /* Stop SPI communication */
    SPIx_CS_HIGH();
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2110      	movs	r1, #16
 8000c40:	4803      	ldr	r0, [pc, #12]	; (8000c50 <nRF24_SendCmd+0xa0>)
 8000c42:	f001 f82b 	bl	8001c9c <HAL_GPIO_WritePin>

    //HAL_Delay(1);

    return NRF24_OK;
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40020000 	.word	0x40020000
 8000c54:	200000f4 	.word	0x200000f4
 8000c58:	2000009c 	.word	0x2000009c

08000c5c <nRF24_SetRegister>:

static nRF24_Status_t nRF24_SetRegister(const uint8_t registerName, const uint8_t bit)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	460a      	mov	r2, r1
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	71bb      	strb	r3, [r7, #6]
    uint8_t registerValue = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	73fb      	strb	r3, [r7, #15]

    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | registerName, &registerValue));
 8000c70:	f107 010f 	add.w	r1, r7, #15
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2201      	movs	r2, #1
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff99 	bl	8000bb0 <nRF24_SendCmd>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d008      	beq.n	8000c96 <nRF24_SetRegister+0x3a>
 8000c84:	f107 010f 	add.w	r1, r7, #15
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff8f 	bl	8000bb0 <nRF24_SendCmd>
 8000c92:	4603      	mov	r3, r0
 8000c94:	e01e      	b.n	8000cd4 <nRF24_SetRegister+0x78>
    registerValue |= bit;
 8000c96:	7bfa      	ldrb	r2, [r7, #15]
 8000c98:	79bb      	ldrb	r3, [r7, #6]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | registerName, &(registerValue)));
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f043 0320 	orr.w	r3, r3, #32
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	f107 010f 	add.w	r1, r7, #15
 8000cac:	2201      	movs	r2, #1
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff7e 	bl	8000bb0 <nRF24_SendCmd>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d00b      	beq.n	8000cd2 <nRF24_SetRegister+0x76>
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f043 0320 	orr.w	r3, r3, #32
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	f107 010f 	add.w	r1, r7, #15
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff71 	bl	8000bb0 <nRF24_SendCmd>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	e000      	b.n	8000cd4 <nRF24_SetRegister+0x78>

    return NRF24_OK;
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <nRF24_ResetRegister>:

static nRF24_Status_t nRF24_ResetRegister(const uint8_t registerName, const uint8_t bit)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	460a      	mov	r2, r1
 8000ce6:	71fb      	strb	r3, [r7, #7]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	71bb      	strb	r3, [r7, #6]
    uint8_t registerValue = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	73fb      	strb	r3, [r7, #15]

    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | registerName, &registerValue));
 8000cf0:	f107 010f 	add.w	r1, r7, #15
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff59 	bl	8000bb0 <nRF24_SendCmd>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d008      	beq.n	8000d16 <nRF24_ResetRegister+0x3a>
 8000d04:	f107 010f 	add.w	r1, r7, #15
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff4f 	bl	8000bb0 <nRF24_SendCmd>
 8000d12:	4603      	mov	r3, r0
 8000d14:	e023      	b.n	8000d5e <nRF24_ResetRegister+0x82>
    registerValue &= ~(bit);
 8000d16:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	b25a      	sxtb	r2, r3
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
 8000d20:	b25b      	sxtb	r3, r3
 8000d22:	4013      	ands	r3, r2
 8000d24:	b25b      	sxtb	r3, r3
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | registerName, &(registerValue)));
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	f043 0320 	orr.w	r3, r3, #32
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	f107 010f 	add.w	r1, r7, #15
 8000d36:	2201      	movs	r2, #1
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff39 	bl	8000bb0 <nRF24_SendCmd>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d00b      	beq.n	8000d5c <nRF24_ResetRegister+0x80>
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	f043 0320 	orr.w	r3, r3, #32
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	f107 010f 	add.w	r1, r7, #15
 8000d50:	2201      	movs	r2, #1
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ff2c 	bl	8000bb0 <nRF24_SendCmd>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	e000      	b.n	8000d5e <nRF24_ResetRegister+0x82>

    return NRF24_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <HAL_SPI_MspInit>:

/**
  * @brief  Initializes SPI MSP.
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08c      	sub	sp, #48	; 0x30
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef  GPIO_InitStruct;

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    SPIx_SCK_GPIO_CLK_ENABLE();
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
 8000d74:	4b37      	ldr	r3, [pc, #220]	; (8000e54 <HAL_SPI_MspInit+0xec>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	4a36      	ldr	r2, [pc, #216]	; (8000e54 <HAL_SPI_MspInit+0xec>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d80:	4b34      	ldr	r3, [pc, #208]	; (8000e54 <HAL_SPI_MspInit+0xec>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	61bb      	str	r3, [r7, #24]
 8000d8a:	69bb      	ldr	r3, [r7, #24]
    SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	4b30      	ldr	r3, [pc, #192]	; (8000e54 <HAL_SPI_MspInit+0xec>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	4a2f      	ldr	r2, [pc, #188]	; (8000e54 <HAL_SPI_MspInit+0xec>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9c:	4b2d      	ldr	r3, [pc, #180]	; (8000e54 <HAL_SPI_MspInit+0xec>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	697b      	ldr	r3, [r7, #20]
    SPIx_CS_GPIO_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <HAL_SPI_MspInit+0xec>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	4a28      	ldr	r2, [pc, #160]	; (8000e54 <HAL_SPI_MspInit+0xec>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6313      	str	r3, [r2, #48]	; 0x30
 8000db8:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <HAL_SPI_MspInit+0xec>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	693b      	ldr	r3, [r7, #16]

    /* Configure SPI SCK */
    GPIO_InitStruct.Pin = SPIx_SCK_PIN;
 8000dc4:	2320      	movs	r3, #32
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 8000dd4:	2305      	movs	r3, #5
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	4619      	mov	r1, r3
 8000dde:	481e      	ldr	r0, [pc, #120]	; (8000e58 <HAL_SPI_MspInit+0xf0>)
 8000de0:	f000 fdd8 	bl	8001994 <HAL_GPIO_Init>

    /* Configure SPI MISO and MOSI */
    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000dec:	2303      	movs	r3, #3
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = SPIx_MISO_MOSI_AF;
 8000df0:	2305      	movs	r3, #5
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    //GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
    HAL_GPIO_Init(SPIx_MISO_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4817      	ldr	r0, [pc, #92]	; (8000e58 <HAL_SPI_MspInit+0xf0>)
 8000dfc:	f000 fdca 	bl	8001994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8000e00:	2340      	movs	r3, #64	; 0x40
 8000e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 8000e04:	2302      	movs	r3, #2
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPIx_MISO_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4812      	ldr	r0, [pc, #72]	; (8000e58 <HAL_SPI_MspInit+0xf0>)
 8000e10:	f000 fdc0 	bl	8001994 <HAL_GPIO_Init>

    /* Configure SPI CS */
    GPIO_InitStruct.Pin = SPIx_CS_PIN;
 8000e14:	2310      	movs	r3, #16
 8000e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(SPIx_CS_GPIO_PORT, &GPIO_InitStruct);
 8000e24:	f107 031c 	add.w	r3, r7, #28
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480b      	ldr	r0, [pc, #44]	; (8000e58 <HAL_SPI_MspInit+0xf0>)
 8000e2c:	f000 fdb2 	bl	8001994 <HAL_GPIO_Init>

    /*** Configure the SPI peripheral ***/
    /* Enable SPI clock */
    SPIx_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <HAL_SPI_MspInit+0xec>)
 8000e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e38:	4a06      	ldr	r2, [pc, #24]	; (8000e54 <HAL_SPI_MspInit+0xec>)
 8000e3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e3e:	6453      	str	r3, [r2, #68]	; 0x44
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <HAL_SPI_MspInit+0xec>)
 8000e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
}
 8000e4c:	bf00      	nop
 8000e4e:	3730      	adds	r7, #48	; 0x30
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020000 	.word	0x40020000

08000e5c <mySPIx_Init>:

/**
  * @brief  Initializes SPI.
  */
static void mySPIx_Init()
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
    if(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET) {
 8000e60:	4818      	ldr	r0, [pc, #96]	; (8000ec4 <mySPIx_Init+0x68>)
 8000e62:	f002 f829 	bl	8002eb8 <HAL_SPI_GetState>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d128      	bne.n	8000ebe <mySPIx_Init+0x62>
        /* SPI Config */
        hspi1.Instance = SPIx;
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <mySPIx_Init+0x68>)
 8000e6e:	4a16      	ldr	r2, [pc, #88]	; (8000ec8 <mySPIx_Init+0x6c>)
 8000e70:	601a      	str	r2, [r3, #0]
            - SD card SPI interface max baudrate is 25MHz for write/read
        to feat these constraints SPI baudrate is set to:
            - For STM32F412ZG devices: 12,5 MHz maximum (PCLK2/SPI_BAUDRATEPRESCALER_8 = 100 MHz/8 = 12,5 MHz)
            - For STM32F446ZE/STM32F429ZI devices: 11,25 MHz maximum (PCLK2/SPI_BAUDRATEPRESCALER_8 = 90 MHz/8 = 11,25 MHz)
        */
        hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e72:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <mySPIx_Init+0x68>)
 8000e74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e78:	605a      	str	r2, [r3, #4]
        hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e7a:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <mySPIx_Init+0x68>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
        hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e80:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <mySPIx_Init+0x68>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
        hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <mySPIx_Init+0x68>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
        hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <mySPIx_Init+0x68>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	615a      	str	r2, [r3, #20]
        hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <mySPIx_Init+0x68>)
 8000e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e98:	619a      	str	r2, [r3, #24]
        hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <mySPIx_Init+0x68>)
 8000e9c:	2238      	movs	r2, #56	; 0x38
 8000e9e:	61da      	str	r2, [r3, #28]
        hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <mySPIx_Init+0x68>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	621a      	str	r2, [r3, #32]
        hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ea6:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <mySPIx_Init+0x68>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	625a      	str	r2, [r3, #36]	; 0x24
        hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <mySPIx_Init+0x68>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	629a      	str	r2, [r3, #40]	; 0x28
        hspi1.Init.CRCPolynomial = 10;
 8000eb2:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <mySPIx_Init+0x68>)
 8000eb4:	220a      	movs	r2, #10
 8000eb6:	62da      	str	r2, [r3, #44]	; 0x2c

        //HAL_SPI_MspInit(&hspi1);
        HAL_SPI_Init(&hspi1);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <mySPIx_Init+0x68>)
 8000eba:	f001 fb85 	bl	80025c8 <HAL_SPI_Init>
    }
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000009c 	.word	0x2000009c
 8000ec8:	40013000 	.word	0x40013000

08000ecc <myGPIO_Init>:

static void myGPIO_Init()
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStruct;

    /* GPIO Ports Clock Enable */
    nRF24_CE_GPIO_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <myGPIO_Init+0x9c>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a23      	ldr	r2, [pc, #140]	; (8000f68 <myGPIO_Init+0x9c>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <myGPIO_Init+0x9c>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
    nRF24_IRQ_GPIO_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <myGPIO_Init+0x9c>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a1c      	ldr	r2, [pc, #112]	; (8000f68 <myGPIO_Init+0x9c>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <myGPIO_Init+0x9c>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]

    HAL_GPIO_WritePin(nRF24_CE_GPIO_PORT, nRF24_CE_PIN, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f10:	4816      	ldr	r0, [pc, #88]	; (8000f6c <myGPIO_Init+0xa0>)
 8000f12:	f000 fec3 	bl	8001c9c <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = nRF24_CE_PIN;
 8000f16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f24:	2302      	movs	r3, #2
 8000f26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(nRF24_CE_GPIO_PORT, &GPIO_InitStruct);
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480f      	ldr	r0, [pc, #60]	; (8000f6c <myGPIO_Init+0xa0>)
 8000f30:	f000 fd30 	bl	8001994 <HAL_GPIO_Init>

    /* Configure IRQ GPIO pin */
    GPIO_InitStruct.Pin = nRF24_IRQ_PIN;
 8000f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f3a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(nRF24_IRQ_GPIO_PORT, &GPIO_InitStruct);
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4808      	ldr	r0, [pc, #32]	; (8000f6c <myGPIO_Init+0xa0>)
 8000f4c:	f000 fd22 	bl	8001994 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    /* PROBABLEMENTE ESTO ESTE MAL */
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 15);
 8000f50:	220f      	movs	r2, #15
 8000f52:	210f      	movs	r1, #15
 8000f54:	2028      	movs	r0, #40	; 0x28
 8000f56:	f000 fce6 	bl	8001926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f5a:	2028      	movs	r0, #40	; 0x28
 8000f5c:	f000 fcff 	bl	800195e <HAL_NVIC_EnableIRQ>
}
 8000f60:	bf00      	nop
 8000f62:	3720      	adds	r7, #32
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020000 	.word	0x40020000

08000f70 <nRF24_Init>:

/* Public functions ----------------------------------------------------------*/
nRF24_Status_t nRF24_Init(nRF24_HandleTypeDef * pHnrf24)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
    uint8_t register_value = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]

    hnrf24 = pHnrf24;
 8000f7c:	4aa8      	ldr	r2, [pc, #672]	; (8001220 <nRF24_Init+0x2b0>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]

    myGPIO_Init();
 8000f82:	f7ff ffa3 	bl	8000ecc <myGPIO_Init>
    mySPIx_Init();
 8000f86:	f7ff ff69 	bl	8000e5c <mySPIx_Init>

    HAL_Delay(10);
 8000f8a:	200a      	movs	r0, #10
 8000f8c:	f000 fbcc 	bl	8001728 <HAL_Delay>
    CHECK_INTERNAL(nRF24_Reset());
 8000f90:	f7ff fb5c 	bl	800064c <nRF24_Reset>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <nRF24_Init+0x32>
 8000f9a:	f7ff fb57 	bl	800064c <nRF24_Reset>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	e1e3      	b.n	800136a <nRF24_Init+0x3fa>
    HAL_Delay(10);
 8000fa2:	200a      	movs	r0, #10
 8000fa4:	f000 fbc0 	bl	8001728 <HAL_Delay>
    CHECK_INTERNAL(nRF24_UpdateMode(POWER_DOWN));
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f7ff fd15 	bl	80009d8 <nRF24_UpdateMode>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d004      	beq.n	8000fbe <nRF24_Init+0x4e>
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f7ff fd0f 	bl	80009d8 <nRF24_UpdateMode>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	e1d5      	b.n	800136a <nRF24_Init+0x3fa>
    HAL_Delay(10);
 8000fbe:	200a      	movs	r0, #10
 8000fc0:	f000 fbb2 	bl	8001728 <HAL_Delay>
    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | CONFIG, &register_value));
 8000fc4:	f107 030f 	add.w	r3, r7, #15
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4619      	mov	r1, r3
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f7ff fdef 	bl	8000bb0 <nRF24_SendCmd>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d008      	beq.n	8000fea <nRF24_Init+0x7a>
 8000fd8:	f107 030f 	add.w	r3, r7, #15
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4619      	mov	r1, r3
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f7ff fde5 	bl	8000bb0 <nRF24_SendCmd>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	e1bf      	b.n	800136a <nRF24_Init+0x3fa>
    // Responde 0x08
    //register_value |= hnrf24->Init.CrcEnable ? EN_CRC : 0x00;
    //register_value |= hnrf24->Init.CrcEncodingScheme ? CRCO : 0x00;
    //register_value |= hnrf24->Init.PrimRx ? PRIM_RX : ~PRIM_RX;

    register_value &= ~(EN_CRC | CRCO); // Limpiar los bits EN_CRC y CRCO en register_value
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	f023 030c 	bic.w	r3, r3, #12
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	73fb      	strb	r3, [r7, #15]
    if (hnrf24->Init.CrcEnable) {
 8000ff4:	4b8a      	ldr	r3, [pc, #552]	; (8001220 <nRF24_Init+0x2b0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d004      	beq.n	8001008 <nRF24_Init+0x98>
        register_value |= EN_CRC; // Establecer el bit EN_CRC si CrcEnable es verdadero
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	b2db      	uxtb	r3, r3
 8001006:	73fb      	strb	r3, [r7, #15]
    }
    if (hnrf24->Init.CrcEncodingScheme == CRC_ENCODING_2_BYTES) {
 8001008:	4b85      	ldr	r3, [pc, #532]	; (8001220 <nRF24_Init+0x2b0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	785b      	ldrb	r3, [r3, #1]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d104      	bne.n	800101c <nRF24_Init+0xac>
        register_value |= CRCO; // Establecer el bit CRCO si CrcEncodingScheme es CRC_ENCODING_2_BYTES
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	b2db      	uxtb	r3, r3
 800101a:	73fb      	strb	r3, [r7, #15]
    }
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | CONFIG, &register_value));
 800101c:	f107 030f 	add.w	r3, r7, #15
 8001020:	2201      	movs	r2, #1
 8001022:	4619      	mov	r1, r3
 8001024:	2020      	movs	r0, #32
 8001026:	f7ff fdc3 	bl	8000bb0 <nRF24_SendCmd>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d008      	beq.n	8001042 <nRF24_Init+0xd2>
 8001030:	f107 030f 	add.w	r3, r7, #15
 8001034:	2201      	movs	r2, #1
 8001036:	4619      	mov	r1, r3
 8001038:	2020      	movs	r0, #32
 800103a:	f7ff fdb9 	bl	8000bb0 <nRF24_SendCmd>
 800103e:	4603      	mov	r3, r0
 8001040:	e193      	b.n	800136a <nRF24_Init+0x3fa>

    nRF24_SetFeature(EN_ACK_PAY, hnrf24->Init.AutoAckEnable);
 8001042:	4b77      	ldr	r3, [pc, #476]	; (8001220 <nRF24_Init+0x2b0>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	789b      	ldrb	r3, [r3, #2]
 8001048:	2b00      	cmp	r3, #0
 800104a:	bf14      	ite	ne
 800104c:	2301      	movne	r3, #1
 800104e:	2300      	moveq	r3, #0
 8001050:	b2db      	uxtb	r3, r3
 8001052:	4619      	mov	r1, r3
 8001054:	2002      	movs	r0, #2
 8001056:	f000 f9c3 	bl	80013e0 <nRF24_SetFeature>
    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | EN_AA, &register_value));
 800105a:	f107 030f 	add.w	r3, r7, #15
 800105e:	2201      	movs	r2, #1
 8001060:	4619      	mov	r1, r3
 8001062:	2001      	movs	r0, #1
 8001064:	f7ff fda4 	bl	8000bb0 <nRF24_SendCmd>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d008      	beq.n	8001080 <nRF24_Init+0x110>
 800106e:	f107 030f 	add.w	r3, r7, #15
 8001072:	2201      	movs	r2, #1
 8001074:	4619      	mov	r1, r3
 8001076:	2001      	movs	r0, #1
 8001078:	f7ff fd9a 	bl	8000bb0 <nRF24_SendCmd>
 800107c:	4603      	mov	r3, r0
 800107e:	e174      	b.n	800136a <nRF24_Init+0x3fa>
    // Protection for AutoAckDataPipes
    hnrf24->Init.AutoAckDataPipes &= ~(0b11000000);
 8001080:	4b67      	ldr	r3, [pc, #412]	; (8001220 <nRF24_Init+0x2b0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	78da      	ldrb	r2, [r3, #3]
 8001086:	4b66      	ldr	r3, [pc, #408]	; (8001220 <nRF24_Init+0x2b0>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	70da      	strb	r2, [r3, #3]
    register_value |= hnrf24->Init.AutoAckDataPipes;
 8001092:	4b63      	ldr	r3, [pc, #396]	; (8001220 <nRF24_Init+0x2b0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	78da      	ldrb	r2, [r3, #3]
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	4313      	orrs	r3, r2
 800109c:	b2db      	uxtb	r3, r3
 800109e:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | EN_AA, &register_value));
 80010a0:	f107 030f 	add.w	r3, r7, #15
 80010a4:	2201      	movs	r2, #1
 80010a6:	4619      	mov	r1, r3
 80010a8:	2021      	movs	r0, #33	; 0x21
 80010aa:	f7ff fd81 	bl	8000bb0 <nRF24_SendCmd>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d008      	beq.n	80010c6 <nRF24_Init+0x156>
 80010b4:	f107 030f 	add.w	r3, r7, #15
 80010b8:	2201      	movs	r2, #1
 80010ba:	4619      	mov	r1, r3
 80010bc:	2021      	movs	r0, #33	; 0x21
 80010be:	f7ff fd77 	bl	8000bb0 <nRF24_SendCmd>
 80010c2:	4603      	mov	r3, r0
 80010c4:	e151      	b.n	800136a <nRF24_Init+0x3fa>

    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | EN_RXADDR, &register_value));
 80010c6:	f107 030f 	add.w	r3, r7, #15
 80010ca:	2201      	movs	r2, #1
 80010cc:	4619      	mov	r1, r3
 80010ce:	2002      	movs	r0, #2
 80010d0:	f7ff fd6e 	bl	8000bb0 <nRF24_SendCmd>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d008      	beq.n	80010ec <nRF24_Init+0x17c>
 80010da:	f107 030f 	add.w	r3, r7, #15
 80010de:	2201      	movs	r2, #1
 80010e0:	4619      	mov	r1, r3
 80010e2:	2002      	movs	r0, #2
 80010e4:	f7ff fd64 	bl	8000bb0 <nRF24_SendCmd>
 80010e8:	4603      	mov	r3, r0
 80010ea:	e13e      	b.n	800136a <nRF24_Init+0x3fa>
    // Protection for RxDataPipes
    hnrf24->Init.RxDataPipes &= ~(0b11000000);
 80010ec:	4b4c      	ldr	r3, [pc, #304]	; (8001220 <nRF24_Init+0x2b0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	791a      	ldrb	r2, [r3, #4]
 80010f2:	4b4b      	ldr	r3, [pc, #300]	; (8001220 <nRF24_Init+0x2b0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	711a      	strb	r2, [r3, #4]
    register_value |= hnrf24->Init.RxDataPipes;
 80010fe:	4b48      	ldr	r3, [pc, #288]	; (8001220 <nRF24_Init+0x2b0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	791a      	ldrb	r2, [r3, #4]
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	4313      	orrs	r3, r2
 8001108:	b2db      	uxtb	r3, r3
 800110a:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | EN_RXADDR, &register_value));
 800110c:	f107 030f 	add.w	r3, r7, #15
 8001110:	2201      	movs	r2, #1
 8001112:	4619      	mov	r1, r3
 8001114:	2022      	movs	r0, #34	; 0x22
 8001116:	f7ff fd4b 	bl	8000bb0 <nRF24_SendCmd>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d008      	beq.n	8001132 <nRF24_Init+0x1c2>
 8001120:	f107 030f 	add.w	r3, r7, #15
 8001124:	2201      	movs	r2, #1
 8001126:	4619      	mov	r1, r3
 8001128:	2022      	movs	r0, #34	; 0x22
 800112a:	f7ff fd41 	bl	8000bb0 <nRF24_SendCmd>
 800112e:	4603      	mov	r3, r0
 8001130:	e11b      	b.n	800136a <nRF24_Init+0x3fa>

    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | SETUP_AW, &register_value));
 8001132:	f107 030f 	add.w	r3, r7, #15
 8001136:	2201      	movs	r2, #1
 8001138:	4619      	mov	r1, r3
 800113a:	2003      	movs	r0, #3
 800113c:	f7ff fd38 	bl	8000bb0 <nRF24_SendCmd>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d008      	beq.n	8001158 <nRF24_Init+0x1e8>
 8001146:	f107 030f 	add.w	r3, r7, #15
 800114a:	2201      	movs	r2, #1
 800114c:	4619      	mov	r1, r3
 800114e:	2003      	movs	r0, #3
 8001150:	f7ff fd2e 	bl	8000bb0 <nRF24_SendCmd>
 8001154:	4603      	mov	r3, r0
 8001156:	e108      	b.n	800136a <nRF24_Init+0x3fa>
    register_value |= hnrf24->Init.Aw;
 8001158:	4b31      	ldr	r3, [pc, #196]	; (8001220 <nRF24_Init+0x2b0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	795a      	ldrb	r2, [r3, #5]
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	4313      	orrs	r3, r2
 8001162:	b2db      	uxtb	r3, r3
 8001164:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | SETUP_AW, &register_value));
 8001166:	f107 030f 	add.w	r3, r7, #15
 800116a:	2201      	movs	r2, #1
 800116c:	4619      	mov	r1, r3
 800116e:	2023      	movs	r0, #35	; 0x23
 8001170:	f7ff fd1e 	bl	8000bb0 <nRF24_SendCmd>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d008      	beq.n	800118c <nRF24_Init+0x21c>
 800117a:	f107 030f 	add.w	r3, r7, #15
 800117e:	2201      	movs	r2, #1
 8001180:	4619      	mov	r1, r3
 8001182:	2023      	movs	r0, #35	; 0x23
 8001184:	f7ff fd14 	bl	8000bb0 <nRF24_SendCmd>
 8001188:	4603      	mov	r3, r0
 800118a:	e0ee      	b.n	800136a <nRF24_Init+0x3fa>

    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | RF_CH, &register_value));
 800118c:	f107 030f 	add.w	r3, r7, #15
 8001190:	2201      	movs	r2, #1
 8001192:	4619      	mov	r1, r3
 8001194:	2005      	movs	r0, #5
 8001196:	f7ff fd0b 	bl	8000bb0 <nRF24_SendCmd>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d008      	beq.n	80011b2 <nRF24_Init+0x242>
 80011a0:	f107 030f 	add.w	r3, r7, #15
 80011a4:	2201      	movs	r2, #1
 80011a6:	4619      	mov	r1, r3
 80011a8:	2005      	movs	r0, #5
 80011aa:	f7ff fd01 	bl	8000bb0 <nRF24_SendCmd>
 80011ae:	4603      	mov	r3, r0
 80011b0:	e0db      	b.n	800136a <nRF24_Init+0x3fa>
    hnrf24->Init.RfChannel &= ~(0b10000000);
 80011b2:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <nRF24_Init+0x2b0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	799a      	ldrb	r2, [r3, #6]
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <nRF24_Init+0x2b0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	719a      	strb	r2, [r3, #6]
    register_value |= hnrf24->Init.RfChannel;
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <nRF24_Init+0x2b0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	799a      	ldrb	r2, [r3, #6]
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RF_CH, &register_value));
 80011d2:	f107 030f 	add.w	r3, r7, #15
 80011d6:	2201      	movs	r2, #1
 80011d8:	4619      	mov	r1, r3
 80011da:	2025      	movs	r0, #37	; 0x25
 80011dc:	f7ff fce8 	bl	8000bb0 <nRF24_SendCmd>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d008      	beq.n	80011f8 <nRF24_Init+0x288>
 80011e6:	f107 030f 	add.w	r3, r7, #15
 80011ea:	2201      	movs	r2, #1
 80011ec:	4619      	mov	r1, r3
 80011ee:	2025      	movs	r0, #37	; 0x25
 80011f0:	f7ff fcde 	bl	8000bb0 <nRF24_SendCmd>
 80011f4:	4603      	mov	r3, r0
 80011f6:	e0b8      	b.n	800136a <nRF24_Init+0x3fa>

    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | RF_SETUP, &register_value));
 80011f8:	f107 030f 	add.w	r3, r7, #15
 80011fc:	2201      	movs	r2, #1
 80011fe:	4619      	mov	r1, r3
 8001200:	2006      	movs	r0, #6
 8001202:	f7ff fcd5 	bl	8000bb0 <nRF24_SendCmd>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00b      	beq.n	8001224 <nRF24_Init+0x2b4>
 800120c:	f107 030f 	add.w	r3, r7, #15
 8001210:	2201      	movs	r2, #1
 8001212:	4619      	mov	r1, r3
 8001214:	2006      	movs	r0, #6
 8001216:	f7ff fccb 	bl	8000bb0 <nRF24_SendCmd>
 800121a:	4603      	mov	r3, r0
 800121c:	e0a5      	b.n	800136a <nRF24_Init+0x3fa>
 800121e:	bf00      	nop
 8001220:	200000f4 	.word	0x200000f4
    register_value &= ~(CONT_WAVE); // Limpiar los bits CONT_WAVE en register_value
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800122a:	b2db      	uxtb	r3, r3
 800122c:	73fb      	strb	r3, [r7, #15]
    if (hnrf24->Init.ContWave) {
 800122e:	4b51      	ldr	r3, [pc, #324]	; (8001374 <nRF24_Init+0x404>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	79db      	ldrb	r3, [r3, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d004      	beq.n	8001242 <nRF24_Init+0x2d2>
        register_value |= CONT_WAVE; // Establecer el bit CONT_WAVE si ContWave es verdadero
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800123e:	b2db      	uxtb	r3, r3
 8001240:	73fb      	strb	r3, [r7, #15]
    }
    //register_value |= hnrf24->Init.ContWave ? CONT_WAVE : ~CONT_WAVE;
    register_value &= ~(RF_DR_LOW | RF_DR_HIGH);
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001248:	b2db      	uxtb	r3, r3
 800124a:	73fb      	strb	r3, [r7, #15]
    register_value |= hnrf24->Init.RfDataRate;
 800124c:	4b49      	ldr	r3, [pc, #292]	; (8001374 <nRF24_Init+0x404>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	7a5a      	ldrb	r2, [r3, #9]
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	4313      	orrs	r3, r2
 8001256:	b2db      	uxtb	r3, r3
 8001258:	73fb      	strb	r3, [r7, #15]
    register_value &= ~(RF_PWR_2 | RF_PWR_1);
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	f023 0306 	bic.w	r3, r3, #6
 8001260:	b2db      	uxtb	r3, r3
 8001262:	73fb      	strb	r3, [r7, #15]
    register_value |= hnrf24->Init.RfPower;
 8001264:	4b43      	ldr	r3, [pc, #268]	; (8001374 <nRF24_Init+0x404>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	7a1a      	ldrb	r2, [r3, #8]
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	4313      	orrs	r3, r2
 800126e:	b2db      	uxtb	r3, r3
 8001270:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RF_SETUP, &register_value));
 8001272:	f107 030f 	add.w	r3, r7, #15
 8001276:	2201      	movs	r2, #1
 8001278:	4619      	mov	r1, r3
 800127a:	2026      	movs	r0, #38	; 0x26
 800127c:	f7ff fc98 	bl	8000bb0 <nRF24_SendCmd>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d008      	beq.n	8001298 <nRF24_Init+0x328>
 8001286:	f107 030f 	add.w	r3, r7, #15
 800128a:	2201      	movs	r2, #1
 800128c:	4619      	mov	r1, r3
 800128e:	2026      	movs	r0, #38	; 0x26
 8001290:	f7ff fc8e 	bl	8000bb0 <nRF24_SendCmd>
 8001294:	4603      	mov	r3, r0
 8001296:	e068      	b.n	800136a <nRF24_Init+0x3fa>

    nRF24_SetFeature(EN_DPL, hnrf24->Init.DplEnable);
 8001298:	4b36      	ldr	r3, [pc, #216]	; (8001374 <nRF24_Init+0x404>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	7a9b      	ldrb	r3, [r3, #10]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	bf14      	ite	ne
 80012a2:	2301      	movne	r3, #1
 80012a4:	2300      	moveq	r3, #0
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	4619      	mov	r1, r3
 80012aa:	2004      	movs	r0, #4
 80012ac:	f000 f898 	bl	80013e0 <nRF24_SetFeature>
    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | DYNPD, &register_value));
 80012b0:	f107 030f 	add.w	r3, r7, #15
 80012b4:	2201      	movs	r2, #1
 80012b6:	4619      	mov	r1, r3
 80012b8:	201c      	movs	r0, #28
 80012ba:	f7ff fc79 	bl	8000bb0 <nRF24_SendCmd>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d008      	beq.n	80012d6 <nRF24_Init+0x366>
 80012c4:	f107 030f 	add.w	r3, r7, #15
 80012c8:	2201      	movs	r2, #1
 80012ca:	4619      	mov	r1, r3
 80012cc:	201c      	movs	r0, #28
 80012ce:	f7ff fc6f 	bl	8000bb0 <nRF24_SendCmd>
 80012d2:	4603      	mov	r3, r0
 80012d4:	e049      	b.n	800136a <nRF24_Init+0x3fa>
    //Protection for DplEnableDataPipes
    hnrf24->Init.DplEnableDataPipes &= ~(0b11000000);
 80012d6:	4b27      	ldr	r3, [pc, #156]	; (8001374 <nRF24_Init+0x404>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	7ada      	ldrb	r2, [r3, #11]
 80012dc:	4b25      	ldr	r3, [pc, #148]	; (8001374 <nRF24_Init+0x404>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	72da      	strb	r2, [r3, #11]
    register_value |= hnrf24->Init.DplEnableDataPipes;
 80012e8:	4b22      	ldr	r3, [pc, #136]	; (8001374 <nRF24_Init+0x404>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	7ada      	ldrb	r2, [r3, #11]
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | DYNPD, &register_value));
 80012f6:	f107 030f 	add.w	r3, r7, #15
 80012fa:	2201      	movs	r2, #1
 80012fc:	4619      	mov	r1, r3
 80012fe:	203c      	movs	r0, #60	; 0x3c
 8001300:	f7ff fc56 	bl	8000bb0 <nRF24_SendCmd>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d008      	beq.n	800131c <nRF24_Init+0x3ac>
 800130a:	f107 030f 	add.w	r3, r7, #15
 800130e:	2201      	movs	r2, #1
 8001310:	4619      	mov	r1, r3
 8001312:	203c      	movs	r0, #60	; 0x3c
 8001314:	f7ff fc4c 	bl	8000bb0 <nRF24_SendCmd>
 8001318:	4603      	mov	r3, r0
 800131a:	e026      	b.n	800136a <nRF24_Init+0x3fa>

    nRF24_SetFeature(EN_DYN_ACK, hnrf24->Init.DynAckEnable);
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <nRF24_Init+0x404>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	7b1b      	ldrb	r3, [r3, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	bf14      	ite	ne
 8001326:	2301      	movne	r3, #1
 8001328:	2300      	moveq	r3, #0
 800132a:	b2db      	uxtb	r3, r3
 800132c:	4619      	mov	r1, r3
 800132e:	2001      	movs	r0, #1
 8001330:	f000 f856 	bl	80013e0 <nRF24_SetFeature>
    HAL_Delay(10);
 8001334:	200a      	movs	r0, #10
 8001336:	f000 f9f7 	bl	8001728 <HAL_Delay>
    nRF24_UpdateMode(STANDBYI);
 800133a:	2001      	movs	r0, #1
 800133c:	f7ff fb4c 	bl	80009d8 <nRF24_UpdateMode>
    HAL_Delay(10);
 8001340:	200a      	movs	r0, #10
 8001342:	f000 f9f1 	bl	8001728 <HAL_Delay>
    if (hnrf24->DeviceMode == TRANSMITTER_MODE) {
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <nRF24_Init+0x404>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	7b9b      	ldrb	r3, [r3, #14]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d103      	bne.n	8001358 <nRF24_Init+0x3e8>
        nRF24_UpdateMode(PTX);
 8001350:	2004      	movs	r0, #4
 8001352:	f7ff fb41 	bl	80009d8 <nRF24_UpdateMode>
 8001356:	e007      	b.n	8001368 <nRF24_Init+0x3f8>
    } else if (hnrf24->DeviceMode == RECEIVER_MODE) {
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <nRF24_Init+0x404>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	7b9b      	ldrb	r3, [r3, #14]
 800135e:	2b02      	cmp	r3, #2
 8001360:	d102      	bne.n	8001368 <nRF24_Init+0x3f8>
        nRF24_UpdateMode(PRX);
 8001362:	2003      	movs	r0, #3
 8001364:	f7ff fb38 	bl	80009d8 <nRF24_UpdateMode>
    }

    return NRF24_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200000f4 	.word	0x200000f4

08001378 <nRF24_Transmit>:

nRF24_Status_t nRF24_Transmit(uint8_t * pTxBuffer, uint8_t length)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	70fb      	strb	r3, [r7, #3]
    CHECK_NULL(pTxBuffer);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <nRF24_Transmit+0x16>
 800138a:	2301      	movs	r3, #1
 800138c:	e021      	b.n	80013d2 <nRF24_Transmit+0x5a>

    // TODO: Agregar chequeo del largo
    // Maximo aceptable
    // Que no sea mas grande que el buffer

    if (operationCurrentMode != PTX) {
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <nRF24_Transmit+0x64>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b04      	cmp	r3, #4
 8001394:	d001      	beq.n	800139a <nRF24_Transmit+0x22>
        return ERROR_INVALID_MODE;
 8001396:	2305      	movs	r3, #5
 8001398:	e01b      	b.n	80013d2 <nRF24_Transmit+0x5a>
    }

    if (nRF24_IsTxFull()) {
 800139a:	f000 f84f 	bl	800143c <nRF24_IsTxFull>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d004      	beq.n	80013ae <nRF24_Transmit+0x36>
        nRF24_SendFlushTx();
 80013a4:	2201      	movs	r2, #1
 80013a6:	2100      	movs	r1, #0
 80013a8:	20e1      	movs	r0, #225	; 0xe1
 80013aa:	f7ff fc01 	bl	8000bb0 <nRF24_SendCmd>
    }

    // TODO: Puedo transmitir con ACK y sin ACK
    // W_TX_PAYLOAD o W_TX_PAYLOAD_NOACK
    CHECK_INTERNAL(nRF24_SendWriteTxPlCmd(pTxBuffer, length));
 80013ae:	78fb      	ldrb	r3, [r7, #3]
 80013b0:	461a      	mov	r2, r3
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	20a0      	movs	r0, #160	; 0xa0
 80013b6:	f7ff fbfb 	bl	8000bb0 <nRF24_SendCmd>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d007      	beq.n	80013d0 <nRF24_Transmit+0x58>
 80013c0:	78fb      	ldrb	r3, [r7, #3]
 80013c2:	461a      	mov	r2, r3
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	20a0      	movs	r0, #160	; 0xa0
 80013c8:	f7ff fbf2 	bl	8000bb0 <nRF24_SendCmd>
 80013cc:	4603      	mov	r3, r0
 80013ce:	e000      	b.n	80013d2 <nRF24_Transmit+0x5a>

    return NRF24_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000098 	.word	0x20000098

080013e0 <nRF24_SetFeature>:

    return NRF24_OK;
}

nRF24_Status_t nRF24_SetFeature(const uint8_t bit, const bool_t enable)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	460a      	mov	r2, r1
 80013ea:	71fb      	strb	r3, [r7, #7]
 80013ec:	4613      	mov	r3, r2
 80013ee:	71bb      	strb	r3, [r7, #6]
    if (enable) {
 80013f0:	79bb      	ldrb	r3, [r7, #6]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00e      	beq.n	8001414 <nRF24_SetFeature+0x34>
        CHECK_INTERNAL(nRF24_SetRegister(FEATURE, bit));
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	4619      	mov	r1, r3
 80013fa:	201d      	movs	r0, #29
 80013fc:	f7ff fc2e 	bl	8000c5c <nRF24_SetRegister>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d015      	beq.n	8001432 <nRF24_SetFeature+0x52>
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	4619      	mov	r1, r3
 800140a:	201d      	movs	r0, #29
 800140c:	f7ff fc26 	bl	8000c5c <nRF24_SetRegister>
 8001410:	4603      	mov	r3, r0
 8001412:	e00f      	b.n	8001434 <nRF24_SetFeature+0x54>
    } else {
        CHECK_INTERNAL(nRF24_ResetRegister(FEATURE, bit));
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	4619      	mov	r1, r3
 8001418:	201d      	movs	r0, #29
 800141a:	f7ff fc5f 	bl	8000cdc <nRF24_ResetRegister>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d006      	beq.n	8001432 <nRF24_SetFeature+0x52>
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	4619      	mov	r1, r3
 8001428:	201d      	movs	r0, #29
 800142a:	f7ff fc57 	bl	8000cdc <nRF24_ResetRegister>
 800142e:	4603      	mov	r3, r0
 8001430:	e000      	b.n	8001434 <nRF24_SetFeature+0x54>
    }

    return NRF24_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <nRF24_IsTxFull>:

    return NRF24_OK;
}

bool_t nRF24_IsTxFull()
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
    uint8_t register_fifo_status = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	71fb      	strb	r3, [r7, #7]

    if (nRF24_SendReadCmd(R_REGISTER | FIFO_STATUS, &register_fifo_status) != NRF24_OK) {
 8001446:	1dfb      	adds	r3, r7, #7
 8001448:	2201      	movs	r2, #1
 800144a:	4619      	mov	r1, r3
 800144c:	2017      	movs	r0, #23
 800144e:	f7ff fbaf 	bl	8000bb0 <nRF24_SendCmd>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <nRF24_IsTxFull+0x20>
        return false;
 8001458:	2300      	movs	r3, #0
 800145a:	e007      	b.n	800146c <nRF24_IsTxFull+0x30>
    }

    if (register_fifo_status & TX_FULL) {
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	f003 0320 	and.w	r3, r3, #32
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <nRF24_IsTxFull+0x2e>
        return true;
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <nRF24_IsTxFull+0x30>
    }

    return false;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <nRF24_GetStatus>:

    return false;
}

nRF24_Status_t nRF24_GetStatus(uint8_t *status)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
    CHECK_NULL(status);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <nRF24_GetStatus+0x12>
 8001482:	2301      	movs	r3, #1
 8001484:	e00f      	b.n	80014a6 <nRF24_GetStatus+0x32>

    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | STATUS, status));
 8001486:	2201      	movs	r2, #1
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	2007      	movs	r0, #7
 800148c:	f7ff fb90 	bl	8000bb0 <nRF24_SendCmd>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d006      	beq.n	80014a4 <nRF24_GetStatus+0x30>
 8001496:	2201      	movs	r2, #1
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	2007      	movs	r0, #7
 800149c:	f7ff fb88 	bl	8000bb0 <nRF24_SendCmd>
 80014a0:	4603      	mov	r3, r0
 80014a2:	e000      	b.n	80014a6 <nRF24_GetStatus+0x32>
    return NRF24_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <HAL_GPIO_EXTI_Callback>:
    }
    return NRF24_OK;
}

void HAL_GPIO_EXTI_Callback(uint16_t gpio)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08c      	sub	sp, #48	; 0x30
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]
    uint8_t status = 0, event_type = 0, width = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80014c0:	2300      	movs	r3, #0
 80014c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80014c6:	2300      	movs	r3, #0
 80014c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint16_t data_src = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint8_t buf[32];

    memset(buf, 0, sizeof(buf));
 80014d0:	f107 0308 	add.w	r3, r7, #8
 80014d4:	2220      	movs	r2, #32
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f001 ffa9 	bl	8003430 <memset>
    if (gpio == nRF24_IRQ_PIN) {
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e4:	f040 8082 	bne.w	80015ec <HAL_GPIO_EXTI_Callback+0x13c>
        nRF24_GetStatus(&status);
 80014e8:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ffc1 	bl	8001474 <nRF24_GetStatus>
        data_src = (status & 0x0E) >> 1;
 80014f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80014f6:	105b      	asrs	r3, r3, #1
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
        if ((status & 0x40) >> EVENT_RX_DR) {  // RX_DR
 8001500:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001508:	2b00      	cmp	r3, #0
 800150a:	d03f      	beq.n	800158c <HAL_GPIO_EXTI_Callback+0xdc>
            event_type = EVENT_RX_DR;
 800150c:	2306      	movs	r3, #6
 800150e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            if (nRF24_SendReadRxPlWidthCmd(&width) == NRF24_OK) {
 8001512:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8001516:	2201      	movs	r2, #1
 8001518:	4619      	mov	r1, r3
 800151a:	2060      	movs	r0, #96	; 0x60
 800151c:	f7ff fb48 	bl	8000bb0 <nRF24_SendCmd>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d132      	bne.n	800158c <HAL_GPIO_EXTI_Callback+0xdc>
                if (width > 32) {
 8001526:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800152a:	2b20      	cmp	r3, #32
 800152c:	d919      	bls.n	8001562 <HAL_GPIO_EXTI_Callback+0xb2>
                    nRF24_UpdateMode(STANDBYI);
 800152e:	2001      	movs	r0, #1
 8001530:	f7ff fa52 	bl	80009d8 <nRF24_UpdateMode>
                    nRF24_SendFlushRx();
 8001534:	2201      	movs	r2, #1
 8001536:	2100      	movs	r1, #0
 8001538:	20e2      	movs	r0, #226	; 0xe2
 800153a:	f7ff fb39 	bl	8000bb0 <nRF24_SendCmd>
                    if (hnrf24->DeviceMode == TRANSMITTER_MODE) {
 800153e:	4b33      	ldr	r3, [pc, #204]	; (800160c <HAL_GPIO_EXTI_Callback+0x15c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	7b9b      	ldrb	r3, [r3, #14]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d103      	bne.n	8001550 <HAL_GPIO_EXTI_Callback+0xa0>
                        nRF24_UpdateMode(PTX);
 8001548:	2004      	movs	r0, #4
 800154a:	f7ff fa45 	bl	80009d8 <nRF24_UpdateMode>
 800154e:	e019      	b.n	8001584 <HAL_GPIO_EXTI_Callback+0xd4>
                    } else if (hnrf24->DeviceMode == RECEIVER_MODE) {
 8001550:	4b2e      	ldr	r3, [pc, #184]	; (800160c <HAL_GPIO_EXTI_Callback+0x15c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	7b9b      	ldrb	r3, [r3, #14]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d114      	bne.n	8001584 <HAL_GPIO_EXTI_Callback+0xd4>
                        nRF24_UpdateMode(PRX);
 800155a:	2003      	movs	r0, #3
 800155c:	f7ff fa3c 	bl	80009d8 <nRF24_UpdateMode>
 8001560:	e010      	b.n	8001584 <HAL_GPIO_EXTI_Callback+0xd4>
                    }
                }
                else {
                    nRF24_SendReadRxPlCmd(buf, width);
 8001562:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001566:	f107 0308 	add.w	r3, r7, #8
 800156a:	4619      	mov	r1, r3
 800156c:	2061      	movs	r0, #97	; 0x61
 800156e:	f7ff fb1f 	bl	8000bb0 <nRF24_SendCmd>
                    nRF24_IRQ_Callback(event_type, data_src, buf, width);
 8001572:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001576:	f107 0208 	add.w	r2, r7, #8
 800157a:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800157c:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 8001580:	f001 fe00 	bl	8003184 <nRF24_IRQ_Callback>
                }
                nRF24_SetRegister(STATUS, RX_DR);
 8001584:	2140      	movs	r1, #64	; 0x40
 8001586:	2007      	movs	r0, #7
 8001588:	f7ff fb68 	bl	8000c5c <nRF24_SetRegister>
            }
        }

        if ((status & 0x20) >> EVENT_TX_DS) {  // TX_DS
 800158c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001590:	f003 0320 	and.w	r3, r3, #32
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00e      	beq.n	80015b6 <HAL_GPIO_EXTI_Callback+0x106>
            event_type = EVENT_TX_DS;
 8001598:	2305      	movs	r3, #5
 800159a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            nRF24_IRQ_Callback(event_type, data_src, buf, 0);
 800159e:	f107 0208 	add.w	r2, r7, #8
 80015a2:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80015a4:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 80015a8:	2300      	movs	r3, #0
 80015aa:	f001 fdeb 	bl	8003184 <nRF24_IRQ_Callback>
            nRF24_SetRegister(STATUS, TX_DS);
 80015ae:	2120      	movs	r1, #32
 80015b0:	2007      	movs	r0, #7
 80015b2:	f7ff fb53 	bl	8000c5c <nRF24_SetRegister>
        }

        if ((status & 0x10) >> EVENT_MAX_RT) {  // MAX_RT
 80015b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80015ba:	f003 0310 	and.w	r3, r3, #16
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d020      	beq.n	8001604 <HAL_GPIO_EXTI_Callback+0x154>
            event_type = EVENT_MAX_RT;
 80015c2:	2304      	movs	r3, #4
 80015c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            nRF24_IRQ_Callback(event_type, data_src, buf, 0);
 80015c8:	f107 0208 	add.w	r2, r7, #8
 80015cc:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80015ce:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 80015d2:	2300      	movs	r3, #0
 80015d4:	f001 fdd6 	bl	8003184 <nRF24_IRQ_Callback>
            nRF24_SetRegister(STATUS, MAX_RT);
 80015d8:	2110      	movs	r1, #16
 80015da:	2007      	movs	r0, #7
 80015dc:	f7ff fb3e 	bl	8000c5c <nRF24_SetRegister>
            nRF24_SendFlushTx();
 80015e0:	2201      	movs	r2, #1
 80015e2:	2100      	movs	r1, #0
 80015e4:	20e1      	movs	r0, #225	; 0xe1
 80015e6:	f7ff fae3 	bl	8000bb0 <nRF24_SendCmd>

    } else {
        event_type = EVENT_GPIO_IRQ;  // STM32 gpio irq except nRF24L01 IRQ
        nRF24_IRQ_Callback(event_type, gpio, buf, width);
    }
}
 80015ea:	e00b      	b.n	8001604 <HAL_GPIO_EXTI_Callback+0x154>
        event_type = EVENT_GPIO_IRQ;  // STM32 gpio irq except nRF24L01 IRQ
 80015ec:	2307      	movs	r3, #7
 80015ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        nRF24_IRQ_Callback(event_type, gpio, buf, width);
 80015f2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80015f6:	f107 0208 	add.w	r2, r7, #8
 80015fa:	88f9      	ldrh	r1, [r7, #6]
 80015fc:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 8001600:	f001 fdc0 	bl	8003184 <nRF24_IRQ_Callback>
}
 8001604:	bf00      	nop
 8001606:	3730      	adds	r7, #48	; 0x30
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200000f4 	.word	0x200000f4

08001610 <EXTI15_10_IRQHandler>:
            break;
    }
}

void EXTI15_10_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nRF24_IRQ_PIN);
 8001614:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001618:	f000 fb5a 	bl	8001cd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}

08001620 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <SystemInit+0x20>)
 8001626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162a:	4a05      	ldr	r2, [pc, #20]	; (8001640 <SystemInit+0x20>)
 800162c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001630:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001648:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <HAL_Init+0x40>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <HAL_Init+0x40>)
 800164e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001652:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_Init+0x40>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <HAL_Init+0x40>)
 800165a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800165e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_Init+0x40>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <HAL_Init+0x40>)
 8001666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166c:	2003      	movs	r0, #3
 800166e:	f000 f94f 	bl	8001910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001672:	2000      	movs	r0, #0
 8001674:	f000 f808 	bl	8001688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001678:	f001 fd5c 	bl	8003134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023c00 	.word	0x40023c00

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_InitTick+0x54>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_InitTick+0x58>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169e:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 f967 	bl	800197a <HAL_SYSTICK_Config>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00e      	b.n	80016d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b0f      	cmp	r3, #15
 80016ba:	d80a      	bhi.n	80016d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016bc:	2200      	movs	r2, #0
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016c4:	f000 f92f 	bl	8001926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c8:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <HAL_InitTick+0x5c>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e000      	b.n	80016d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	2000001c 	.word	0x2000001c
 80016e0:	20000024 	.word	0x20000024
 80016e4:	20000020 	.word	0x20000020

080016e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_IncTick+0x20>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_IncTick+0x24>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <HAL_IncTick+0x24>)
 80016fa:	6013      	str	r3, [r2, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000024 	.word	0x20000024
 800170c:	20000100 	.word	0x20000100

08001710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return uwTick;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <HAL_GetTick+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000100 	.word	0x20000100

08001728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001730:	f7ff ffee 	bl	8001710 <HAL_GetTick>
 8001734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001740:	d005      	beq.n	800174e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <HAL_Delay+0x44>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800174e:	bf00      	nop
 8001750:	f7ff ffde 	bl	8001710 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	429a      	cmp	r2, r3
 800175e:	d8f7      	bhi.n	8001750 <HAL_Delay+0x28>
  {
  }
}
 8001760:	bf00      	nop
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000024 	.word	0x20000024

08001770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800178c:	4013      	ands	r3, r2
 800178e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800179c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a2:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	60d3      	str	r3, [r2, #12]
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <__NVIC_GetPriorityGrouping+0x18>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	0a1b      	lsrs	r3, r3, #8
 80017c2:	f003 0307 	and.w	r3, r3, #7
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	db0b      	blt.n	80017fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	f003 021f 	and.w	r2, r3, #31
 80017ec:	4907      	ldr	r1, [pc, #28]	; (800180c <__NVIC_EnableIRQ+0x38>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	095b      	lsrs	r3, r3, #5
 80017f4:	2001      	movs	r0, #1
 80017f6:	fa00 f202 	lsl.w	r2, r0, r2
 80017fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000e100 	.word	0xe000e100

08001810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	2b00      	cmp	r3, #0
 8001822:	db0a      	blt.n	800183a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	b2da      	uxtb	r2, r3
 8001828:	490c      	ldr	r1, [pc, #48]	; (800185c <__NVIC_SetPriority+0x4c>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	0112      	lsls	r2, r2, #4
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	440b      	add	r3, r1
 8001834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001838:	e00a      	b.n	8001850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4908      	ldr	r1, [pc, #32]	; (8001860 <__NVIC_SetPriority+0x50>)
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	3b04      	subs	r3, #4
 8001848:	0112      	lsls	r2, r2, #4
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	440b      	add	r3, r1
 800184e:	761a      	strb	r2, [r3, #24]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000e100 	.word	0xe000e100
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f1c3 0307 	rsb	r3, r3, #7
 800187e:	2b04      	cmp	r3, #4
 8001880:	bf28      	it	cs
 8001882:	2304      	movcs	r3, #4
 8001884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3304      	adds	r3, #4
 800188a:	2b06      	cmp	r3, #6
 800188c:	d902      	bls.n	8001894 <NVIC_EncodePriority+0x30>
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3b03      	subs	r3, #3
 8001892:	e000      	b.n	8001896 <NVIC_EncodePriority+0x32>
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43da      	mvns	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	401a      	ands	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	43d9      	mvns	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	4313      	orrs	r3, r2
         );
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3724      	adds	r7, #36	; 0x24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018dc:	d301      	bcc.n	80018e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018de:	2301      	movs	r3, #1
 80018e0:	e00f      	b.n	8001902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <SysTick_Config+0x40>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ea:	210f      	movs	r1, #15
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018f0:	f7ff ff8e 	bl	8001810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <SysTick_Config+0x40>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fa:	4b04      	ldr	r3, [pc, #16]	; (800190c <SysTick_Config+0x40>)
 80018fc:	2207      	movs	r2, #7
 80018fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	e000e010 	.word	0xe000e010

08001910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff29 	bl	8001770 <__NVIC_SetPriorityGrouping>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001938:	f7ff ff3e 	bl	80017b8 <__NVIC_GetPriorityGrouping>
 800193c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	6978      	ldr	r0, [r7, #20]
 8001944:	f7ff ff8e 	bl	8001864 <NVIC_EncodePriority>
 8001948:	4602      	mov	r2, r0
 800194a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff5d 	bl	8001810 <__NVIC_SetPriority>
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff31 	bl	80017d4 <__NVIC_EnableIRQ>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ffa2 	bl	80018cc <SysTick_Config>
 8001988:	4603      	mov	r3, r0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001994:	b480      	push	{r7}
 8001996:	b089      	sub	sp, #36	; 0x24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
 80019ae:	e159      	b.n	8001c64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019b0:	2201      	movs	r2, #1
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	f040 8148 	bne.w	8001c5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d005      	beq.n	80019e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d130      	bne.n	8001a48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	2203      	movs	r2, #3
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4013      	ands	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	68da      	ldr	r2, [r3, #12]
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	f003 0201 	and.w	r2, r3, #1
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d017      	beq.n	8001a84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	2203      	movs	r2, #3
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d123      	bne.n	8001ad8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	08da      	lsrs	r2, r3, #3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3208      	adds	r2, #8
 8001a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	220f      	movs	r2, #15
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	08da      	lsrs	r2, r3, #3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3208      	adds	r2, #8
 8001ad2:	69b9      	ldr	r1, [r7, #24]
 8001ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0203 	and.w	r2, r3, #3
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 80a2 	beq.w	8001c5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	4b57      	ldr	r3, [pc, #348]	; (8001c7c <HAL_GPIO_Init+0x2e8>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	4a56      	ldr	r2, [pc, #344]	; (8001c7c <HAL_GPIO_Init+0x2e8>)
 8001b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b28:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2a:	4b54      	ldr	r3, [pc, #336]	; (8001c7c <HAL_GPIO_Init+0x2e8>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b36:	4a52      	ldr	r2, [pc, #328]	; (8001c80 <HAL_GPIO_Init+0x2ec>)
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	089b      	lsrs	r3, r3, #2
 8001b3c:	3302      	adds	r3, #2
 8001b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a49      	ldr	r2, [pc, #292]	; (8001c84 <HAL_GPIO_Init+0x2f0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d019      	beq.n	8001b96 <HAL_GPIO_Init+0x202>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a48      	ldr	r2, [pc, #288]	; (8001c88 <HAL_GPIO_Init+0x2f4>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d013      	beq.n	8001b92 <HAL_GPIO_Init+0x1fe>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a47      	ldr	r2, [pc, #284]	; (8001c8c <HAL_GPIO_Init+0x2f8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d00d      	beq.n	8001b8e <HAL_GPIO_Init+0x1fa>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a46      	ldr	r2, [pc, #280]	; (8001c90 <HAL_GPIO_Init+0x2fc>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d007      	beq.n	8001b8a <HAL_GPIO_Init+0x1f6>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a45      	ldr	r2, [pc, #276]	; (8001c94 <HAL_GPIO_Init+0x300>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d101      	bne.n	8001b86 <HAL_GPIO_Init+0x1f2>
 8001b82:	2304      	movs	r3, #4
 8001b84:	e008      	b.n	8001b98 <HAL_GPIO_Init+0x204>
 8001b86:	2307      	movs	r3, #7
 8001b88:	e006      	b.n	8001b98 <HAL_GPIO_Init+0x204>
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e004      	b.n	8001b98 <HAL_GPIO_Init+0x204>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e002      	b.n	8001b98 <HAL_GPIO_Init+0x204>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <HAL_GPIO_Init+0x204>
 8001b96:	2300      	movs	r3, #0
 8001b98:	69fa      	ldr	r2, [r7, #28]
 8001b9a:	f002 0203 	and.w	r2, r2, #3
 8001b9e:	0092      	lsls	r2, r2, #2
 8001ba0:	4093      	lsls	r3, r2
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ba8:	4935      	ldr	r1, [pc, #212]	; (8001c80 <HAL_GPIO_Init+0x2ec>)
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	3302      	adds	r3, #2
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bb6:	4b38      	ldr	r3, [pc, #224]	; (8001c98 <HAL_GPIO_Init+0x304>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bda:	4a2f      	ldr	r2, [pc, #188]	; (8001c98 <HAL_GPIO_Init+0x304>)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001be0:	4b2d      	ldr	r3, [pc, #180]	; (8001c98 <HAL_GPIO_Init+0x304>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c04:	4a24      	ldr	r2, [pc, #144]	; (8001c98 <HAL_GPIO_Init+0x304>)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c0a:	4b23      	ldr	r3, [pc, #140]	; (8001c98 <HAL_GPIO_Init+0x304>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4013      	ands	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c2e:	4a1a      	ldr	r2, [pc, #104]	; (8001c98 <HAL_GPIO_Init+0x304>)
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c34:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <HAL_GPIO_Init+0x304>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c58:	4a0f      	ldr	r2, [pc, #60]	; (8001c98 <HAL_GPIO_Init+0x304>)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3301      	adds	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	2b0f      	cmp	r3, #15
 8001c68:	f67f aea2 	bls.w	80019b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	bf00      	nop
 8001c70:	3724      	adds	r7, #36	; 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40013800 	.word	0x40013800
 8001c84:	40020000 	.word	0x40020000
 8001c88:	40020400 	.word	0x40020400
 8001c8c:	40020800 	.word	0x40020800
 8001c90:	40020c00 	.word	0x40020c00
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40013c00 	.word	0x40013c00

08001c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	807b      	strh	r3, [r7, #2]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cac:	787b      	ldrb	r3, [r7, #1]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cb2:	887a      	ldrh	r2, [r7, #2]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cb8:	e003      	b.n	8001cc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cba:	887b      	ldrh	r3, [r7, #2]
 8001cbc:	041a      	lsls	r2, r3, #16
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	619a      	str	r2, [r3, #24]
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d006      	beq.n	8001cf4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ce6:	4a05      	ldr	r2, [pc, #20]	; (8001cfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cec:	88fb      	ldrh	r3, [r7, #6]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fbde 	bl	80014b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40013c00 	.word	0x40013c00

08001d00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e267      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d075      	beq.n	8001e0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d1e:	4b88      	ldr	r3, [pc, #544]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d00c      	beq.n	8001d44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d2a:	4b85      	ldr	r3, [pc, #532]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d112      	bne.n	8001d5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d36:	4b82      	ldr	r3, [pc, #520]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d42:	d10b      	bne.n	8001d5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d44:	4b7e      	ldr	r3, [pc, #504]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d05b      	beq.n	8001e08 <HAL_RCC_OscConfig+0x108>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d157      	bne.n	8001e08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e242      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d64:	d106      	bne.n	8001d74 <HAL_RCC_OscConfig+0x74>
 8001d66:	4b76      	ldr	r3, [pc, #472]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a75      	ldr	r2, [pc, #468]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	e01d      	b.n	8001db0 <HAL_RCC_OscConfig+0xb0>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x98>
 8001d7e:	4b70      	ldr	r3, [pc, #448]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a6f      	ldr	r2, [pc, #444]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	4b6d      	ldr	r3, [pc, #436]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a6c      	ldr	r2, [pc, #432]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	e00b      	b.n	8001db0 <HAL_RCC_OscConfig+0xb0>
 8001d98:	4b69      	ldr	r3, [pc, #420]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a68      	ldr	r2, [pc, #416]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	4b66      	ldr	r3, [pc, #408]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a65      	ldr	r2, [pc, #404]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d013      	beq.n	8001de0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff fcaa 	bl	8001710 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc0:	f7ff fca6 	bl	8001710 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b64      	cmp	r3, #100	; 0x64
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e207      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd2:	4b5b      	ldr	r3, [pc, #364]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0xc0>
 8001dde:	e014      	b.n	8001e0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7ff fc96 	bl	8001710 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de8:	f7ff fc92 	bl	8001710 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b64      	cmp	r3, #100	; 0x64
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e1f3      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfa:	4b51      	ldr	r3, [pc, #324]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0xe8>
 8001e06:	e000      	b.n	8001e0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d063      	beq.n	8001ede <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e16:	4b4a      	ldr	r3, [pc, #296]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00b      	beq.n	8001e3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e22:	4b47      	ldr	r3, [pc, #284]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d11c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e2e:	4b44      	ldr	r3, [pc, #272]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d116      	bne.n	8001e68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3a:	4b41      	ldr	r3, [pc, #260]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d005      	beq.n	8001e52 <HAL_RCC_OscConfig+0x152>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d001      	beq.n	8001e52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e1c7      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e52:	4b3b      	ldr	r3, [pc, #236]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4937      	ldr	r1, [pc, #220]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e66:	e03a      	b.n	8001ede <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d020      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e70:	4b34      	ldr	r3, [pc, #208]	; (8001f44 <HAL_RCC_OscConfig+0x244>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e76:	f7ff fc4b 	bl	8001710 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e7e:	f7ff fc47 	bl	8001710 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e1a8      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e90:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0f0      	beq.n	8001e7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9c:	4b28      	ldr	r3, [pc, #160]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4925      	ldr	r1, [pc, #148]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	600b      	str	r3, [r1, #0]
 8001eb0:	e015      	b.n	8001ede <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb2:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <HAL_RCC_OscConfig+0x244>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fc2a 	bl	8001710 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec0:	f7ff fc26 	bl	8001710 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e187      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed2:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d036      	beq.n	8001f58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d016      	beq.n	8001f20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef2:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <HAL_RCC_OscConfig+0x248>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef8:	f7ff fc0a 	bl	8001710 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f00:	f7ff fc06 	bl	8001710 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e167      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f12:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x200>
 8001f1e:	e01b      	b.n	8001f58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <HAL_RCC_OscConfig+0x248>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f26:	f7ff fbf3 	bl	8001710 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f2c:	e00e      	b.n	8001f4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f2e:	f7ff fbef 	bl	8001710 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d907      	bls.n	8001f4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e150      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
 8001f40:	40023800 	.word	0x40023800
 8001f44:	42470000 	.word	0x42470000
 8001f48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f4c:	4b88      	ldr	r3, [pc, #544]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1ea      	bne.n	8001f2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 8097 	beq.w	8002094 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f66:	2300      	movs	r3, #0
 8001f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f6a:	4b81      	ldr	r3, [pc, #516]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10f      	bne.n	8001f96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	4b7d      	ldr	r3, [pc, #500]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	4a7c      	ldr	r2, [pc, #496]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f84:	6413      	str	r3, [r2, #64]	; 0x40
 8001f86:	4b7a      	ldr	r3, [pc, #488]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f92:	2301      	movs	r3, #1
 8001f94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f96:	4b77      	ldr	r3, [pc, #476]	; (8002174 <HAL_RCC_OscConfig+0x474>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d118      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fa2:	4b74      	ldr	r3, [pc, #464]	; (8002174 <HAL_RCC_OscConfig+0x474>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a73      	ldr	r2, [pc, #460]	; (8002174 <HAL_RCC_OscConfig+0x474>)
 8001fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fae:	f7ff fbaf 	bl	8001710 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb6:	f7ff fbab 	bl	8001710 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e10c      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc8:	4b6a      	ldr	r3, [pc, #424]	; (8002174 <HAL_RCC_OscConfig+0x474>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0f0      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d106      	bne.n	8001fea <HAL_RCC_OscConfig+0x2ea>
 8001fdc:	4b64      	ldr	r3, [pc, #400]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe0:	4a63      	ldr	r2, [pc, #396]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe8:	e01c      	b.n	8002024 <HAL_RCC_OscConfig+0x324>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b05      	cmp	r3, #5
 8001ff0:	d10c      	bne.n	800200c <HAL_RCC_OscConfig+0x30c>
 8001ff2:	4b5f      	ldr	r3, [pc, #380]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff6:	4a5e      	ldr	r2, [pc, #376]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001ff8:	f043 0304 	orr.w	r3, r3, #4
 8001ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffe:	4b5c      	ldr	r3, [pc, #368]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8002000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002002:	4a5b      	ldr	r2, [pc, #364]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6713      	str	r3, [r2, #112]	; 0x70
 800200a:	e00b      	b.n	8002024 <HAL_RCC_OscConfig+0x324>
 800200c:	4b58      	ldr	r3, [pc, #352]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002010:	4a57      	ldr	r2, [pc, #348]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8002012:	f023 0301 	bic.w	r3, r3, #1
 8002016:	6713      	str	r3, [r2, #112]	; 0x70
 8002018:	4b55      	ldr	r3, [pc, #340]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 800201a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201c:	4a54      	ldr	r2, [pc, #336]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 800201e:	f023 0304 	bic.w	r3, r3, #4
 8002022:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d015      	beq.n	8002058 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202c:	f7ff fb70 	bl	8001710 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002032:	e00a      	b.n	800204a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002034:	f7ff fb6c 	bl	8001710 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e0cb      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204a:	4b49      	ldr	r3, [pc, #292]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0ee      	beq.n	8002034 <HAL_RCC_OscConfig+0x334>
 8002056:	e014      	b.n	8002082 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002058:	f7ff fb5a 	bl	8001710 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800205e:	e00a      	b.n	8002076 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002060:	f7ff fb56 	bl	8001710 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f241 3288 	movw	r2, #5000	; 0x1388
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e0b5      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002076:	4b3e      	ldr	r3, [pc, #248]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8002078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1ee      	bne.n	8002060 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002082:	7dfb      	ldrb	r3, [r7, #23]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d105      	bne.n	8002094 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002088:	4b39      	ldr	r3, [pc, #228]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	4a38      	ldr	r2, [pc, #224]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 800208e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002092:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 80a1 	beq.w	80021e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800209e:	4b34      	ldr	r3, [pc, #208]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d05c      	beq.n	8002164 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d141      	bne.n	8002136 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b2:	4b31      	ldr	r3, [pc, #196]	; (8002178 <HAL_RCC_OscConfig+0x478>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7ff fb2a 	bl	8001710 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c0:	f7ff fb26 	bl	8001710 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e087      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d2:	4b27      	ldr	r3, [pc, #156]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69da      	ldr	r2, [r3, #28]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	019b      	lsls	r3, r3, #6
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f4:	085b      	lsrs	r3, r3, #1
 80020f6:	3b01      	subs	r3, #1
 80020f8:	041b      	lsls	r3, r3, #16
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	061b      	lsls	r3, r3, #24
 8002102:	491b      	ldr	r1, [pc, #108]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002108:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <HAL_RCC_OscConfig+0x478>)
 800210a:	2201      	movs	r2, #1
 800210c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210e:	f7ff faff 	bl	8001710 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002116:	f7ff fafb 	bl	8001710 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e05c      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002128:	4b11      	ldr	r3, [pc, #68]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x416>
 8002134:	e054      	b.n	80021e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <HAL_RCC_OscConfig+0x478>)
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213c:	f7ff fae8 	bl	8001710 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002144:	f7ff fae4 	bl	8001710 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e045      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x444>
 8002162:	e03d      	b.n	80021e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d107      	bne.n	800217c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e038      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
 8002170:	40023800 	.word	0x40023800
 8002174:	40007000 	.word	0x40007000
 8002178:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800217c:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <HAL_RCC_OscConfig+0x4ec>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d028      	beq.n	80021dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002194:	429a      	cmp	r2, r3
 8002196:	d121      	bne.n	80021dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d11a      	bne.n	80021dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021ac:	4013      	ands	r3, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d111      	bne.n	80021dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c2:	085b      	lsrs	r3, r3, #1
 80021c4:	3b01      	subs	r3, #1
 80021c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d107      	bne.n	80021dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800

080021f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0cc      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002204:	4b68      	ldr	r3, [pc, #416]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d90c      	bls.n	800222c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002212:	4b65      	ldr	r3, [pc, #404]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	4b63      	ldr	r3, [pc, #396]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0b8      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d020      	beq.n	800227a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002244:	4b59      	ldr	r3, [pc, #356]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	4a58      	ldr	r2, [pc, #352]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800224e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800225c:	4b53      	ldr	r3, [pc, #332]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4a52      	ldr	r2, [pc, #328]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002266:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002268:	4b50      	ldr	r3, [pc, #320]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	494d      	ldr	r1, [pc, #308]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d044      	beq.n	8002310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d107      	bne.n	800229e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	4b47      	ldr	r3, [pc, #284]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d119      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e07f      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d003      	beq.n	80022ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d107      	bne.n	80022be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ae:	4b3f      	ldr	r3, [pc, #252]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e06f      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022be:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e067      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ce:	4b37      	ldr	r3, [pc, #220]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f023 0203 	bic.w	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4934      	ldr	r1, [pc, #208]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e0:	f7ff fa16 	bl	8001710 <HAL_GetTick>
 80022e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e6:	e00a      	b.n	80022fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e8:	f7ff fa12 	bl	8001710 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e04f      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fe:	4b2b      	ldr	r3, [pc, #172]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 020c 	and.w	r2, r3, #12
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	429a      	cmp	r2, r3
 800230e:	d1eb      	bne.n	80022e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002310:	4b25      	ldr	r3, [pc, #148]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d20c      	bcs.n	8002338 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b22      	ldr	r3, [pc, #136]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e032      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002344:	4b19      	ldr	r3, [pc, #100]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4916      	ldr	r1, [pc, #88]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	4313      	orrs	r3, r2
 8002354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d009      	beq.n	8002376 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002362:	4b12      	ldr	r3, [pc, #72]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	490e      	ldr	r1, [pc, #56]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002376:	f000 f821 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 800237a:	4602      	mov	r2, r0
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	490a      	ldr	r1, [pc, #40]	; (80023b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	5ccb      	ldrb	r3, [r1, r3]
 800238a:	fa22 f303 	lsr.w	r3, r2, r3
 800238e:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff f976 	bl	8001688 <HAL_InitTick>

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40023c00 	.word	0x40023c00
 80023ac:	40023800 	.word	0x40023800
 80023b0:	08003d60 	.word	0x08003d60
 80023b4:	2000001c 	.word	0x2000001c
 80023b8:	20000020 	.word	0x20000020

080023bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023c0:	b094      	sub	sp, #80	; 0x50
 80023c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	647b      	str	r3, [r7, #68]	; 0x44
 80023c8:	2300      	movs	r3, #0
 80023ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023cc:	2300      	movs	r3, #0
 80023ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023d4:	4b79      	ldr	r3, [pc, #484]	; (80025bc <HAL_RCC_GetSysClockFreq+0x200>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 030c 	and.w	r3, r3, #12
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d00d      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0x40>
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	f200 80e1 	bhi.w	80025a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x34>
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d003      	beq.n	80023f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80023ee:	e0db      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023f0:	4b73      	ldr	r3, [pc, #460]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80023f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80023f4:	e0db      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023f6:	4b73      	ldr	r3, [pc, #460]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80023f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023fa:	e0d8      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023fc:	4b6f      	ldr	r3, [pc, #444]	; (80025bc <HAL_RCC_GetSysClockFreq+0x200>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002404:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002406:	4b6d      	ldr	r3, [pc, #436]	; (80025bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d063      	beq.n	80024da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002412:	4b6a      	ldr	r3, [pc, #424]	; (80025bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	099b      	lsrs	r3, r3, #6
 8002418:	2200      	movs	r2, #0
 800241a:	63bb      	str	r3, [r7, #56]	; 0x38
 800241c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800241e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002424:	633b      	str	r3, [r7, #48]	; 0x30
 8002426:	2300      	movs	r3, #0
 8002428:	637b      	str	r3, [r7, #52]	; 0x34
 800242a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800242e:	4622      	mov	r2, r4
 8002430:	462b      	mov	r3, r5
 8002432:	f04f 0000 	mov.w	r0, #0
 8002436:	f04f 0100 	mov.w	r1, #0
 800243a:	0159      	lsls	r1, r3, #5
 800243c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002440:	0150      	lsls	r0, r2, #5
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4621      	mov	r1, r4
 8002448:	1a51      	subs	r1, r2, r1
 800244a:	6139      	str	r1, [r7, #16]
 800244c:	4629      	mov	r1, r5
 800244e:	eb63 0301 	sbc.w	r3, r3, r1
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002460:	4659      	mov	r1, fp
 8002462:	018b      	lsls	r3, r1, #6
 8002464:	4651      	mov	r1, sl
 8002466:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800246a:	4651      	mov	r1, sl
 800246c:	018a      	lsls	r2, r1, #6
 800246e:	4651      	mov	r1, sl
 8002470:	ebb2 0801 	subs.w	r8, r2, r1
 8002474:	4659      	mov	r1, fp
 8002476:	eb63 0901 	sbc.w	r9, r3, r1
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002486:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800248a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800248e:	4690      	mov	r8, r2
 8002490:	4699      	mov	r9, r3
 8002492:	4623      	mov	r3, r4
 8002494:	eb18 0303 	adds.w	r3, r8, r3
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	462b      	mov	r3, r5
 800249c:	eb49 0303 	adc.w	r3, r9, r3
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024ae:	4629      	mov	r1, r5
 80024b0:	024b      	lsls	r3, r1, #9
 80024b2:	4621      	mov	r1, r4
 80024b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024b8:	4621      	mov	r1, r4
 80024ba:	024a      	lsls	r2, r1, #9
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c2:	2200      	movs	r2, #0
 80024c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80024c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024cc:	f7fd fee0 	bl	8000290 <__aeabi_uldivmod>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4613      	mov	r3, r2
 80024d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024d8:	e058      	b.n	800258c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024da:	4b38      	ldr	r3, [pc, #224]	; (80025bc <HAL_RCC_GetSysClockFreq+0x200>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	099b      	lsrs	r3, r3, #6
 80024e0:	2200      	movs	r2, #0
 80024e2:	4618      	mov	r0, r3
 80024e4:	4611      	mov	r1, r2
 80024e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024ea:	623b      	str	r3, [r7, #32]
 80024ec:	2300      	movs	r3, #0
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
 80024f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024f4:	4642      	mov	r2, r8
 80024f6:	464b      	mov	r3, r9
 80024f8:	f04f 0000 	mov.w	r0, #0
 80024fc:	f04f 0100 	mov.w	r1, #0
 8002500:	0159      	lsls	r1, r3, #5
 8002502:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002506:	0150      	lsls	r0, r2, #5
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4641      	mov	r1, r8
 800250e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002512:	4649      	mov	r1, r9
 8002514:	eb63 0b01 	sbc.w	fp, r3, r1
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002524:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002528:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800252c:	ebb2 040a 	subs.w	r4, r2, sl
 8002530:	eb63 050b 	sbc.w	r5, r3, fp
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	f04f 0300 	mov.w	r3, #0
 800253c:	00eb      	lsls	r3, r5, #3
 800253e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002542:	00e2      	lsls	r2, r4, #3
 8002544:	4614      	mov	r4, r2
 8002546:	461d      	mov	r5, r3
 8002548:	4643      	mov	r3, r8
 800254a:	18e3      	adds	r3, r4, r3
 800254c:	603b      	str	r3, [r7, #0]
 800254e:	464b      	mov	r3, r9
 8002550:	eb45 0303 	adc.w	r3, r5, r3
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002562:	4629      	mov	r1, r5
 8002564:	028b      	lsls	r3, r1, #10
 8002566:	4621      	mov	r1, r4
 8002568:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800256c:	4621      	mov	r1, r4
 800256e:	028a      	lsls	r2, r1, #10
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002576:	2200      	movs	r2, #0
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	61fa      	str	r2, [r7, #28]
 800257c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002580:	f7fd fe86 	bl	8000290 <__aeabi_uldivmod>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4613      	mov	r3, r2
 800258a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCC_GetSysClockFreq+0x200>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	0c1b      	lsrs	r3, r3, #16
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	3301      	adds	r3, #1
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800259c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800259e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025a6:	e002      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80025aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3750      	adds	r7, #80	; 0x50
 80025b4:	46bd      	mov	sp, r7
 80025b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ba:	bf00      	nop
 80025bc:	40023800 	.word	0x40023800
 80025c0:	00f42400 	.word	0x00f42400
 80025c4:	007a1200 	.word	0x007a1200

080025c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e07b      	b.n	80026d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d108      	bne.n	80025f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025ea:	d009      	beq.n	8002600 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	61da      	str	r2, [r3, #28]
 80025f2:	e005      	b.n	8002600 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7fe fba4 	bl	8000d68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2202      	movs	r2, #2
 8002624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002636:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002684:	ea42 0103 	orr.w	r1, r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	0c1b      	lsrs	r3, r3, #16
 800269e:	f003 0104 	and.w	r1, r3, #4
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	f003 0210 	and.w	r2, r3, #16
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69da      	ldr	r2, [r3, #28]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b088      	sub	sp, #32
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	603b      	str	r3, [r7, #0]
 80026e6:	4613      	mov	r3, r2
 80026e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026ea:	2300      	movs	r3, #0
 80026ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_SPI_Transmit+0x22>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e126      	b.n	800294a <HAL_SPI_Transmit+0x270>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002704:	f7ff f804 	bl	8001710 <HAL_GetTick>
 8002708:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b01      	cmp	r3, #1
 8002718:	d002      	beq.n	8002720 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800271a:	2302      	movs	r3, #2
 800271c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800271e:	e10b      	b.n	8002938 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <HAL_SPI_Transmit+0x52>
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d102      	bne.n	8002732 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002730:	e102      	b.n	8002938 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2203      	movs	r2, #3
 8002736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	88fa      	ldrh	r2, [r7, #6]
 800274a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	88fa      	ldrh	r2, [r7, #6]
 8002750:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002778:	d10f      	bne.n	800279a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002788:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002798:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a4:	2b40      	cmp	r3, #64	; 0x40
 80027a6:	d007      	beq.n	80027b8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027c0:	d14b      	bne.n	800285a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <HAL_SPI_Transmit+0xf6>
 80027ca:	8afb      	ldrh	r3, [r7, #22]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d13e      	bne.n	800284e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	881a      	ldrh	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	1c9a      	adds	r2, r3, #2
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027f4:	e02b      	b.n	800284e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b02      	cmp	r3, #2
 8002802:	d112      	bne.n	800282a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	881a      	ldrh	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	1c9a      	adds	r2, r3, #2
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800281e:	b29b      	uxth	r3, r3
 8002820:	3b01      	subs	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	86da      	strh	r2, [r3, #54]	; 0x36
 8002828:	e011      	b.n	800284e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800282a:	f7fe ff71 	bl	8001710 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d803      	bhi.n	8002842 <HAL_SPI_Transmit+0x168>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002840:	d102      	bne.n	8002848 <HAL_SPI_Transmit+0x16e>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d102      	bne.n	800284e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800284c:	e074      	b.n	8002938 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002852:	b29b      	uxth	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1ce      	bne.n	80027f6 <HAL_SPI_Transmit+0x11c>
 8002858:	e04c      	b.n	80028f4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <HAL_SPI_Transmit+0x18e>
 8002862:	8afb      	ldrh	r3, [r7, #22]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d140      	bne.n	80028ea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	330c      	adds	r3, #12
 8002872:	7812      	ldrb	r2, [r2, #0]
 8002874:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002884:	b29b      	uxth	r3, r3
 8002886:	3b01      	subs	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800288e:	e02c      	b.n	80028ea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b02      	cmp	r3, #2
 800289c:	d113      	bne.n	80028c6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	330c      	adds	r3, #12
 80028a8:	7812      	ldrb	r2, [r2, #0]
 80028aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80028c4:	e011      	b.n	80028ea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028c6:	f7fe ff23 	bl	8001710 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d803      	bhi.n	80028de <HAL_SPI_Transmit+0x204>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028dc:	d102      	bne.n	80028e4 <HAL_SPI_Transmit+0x20a>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d102      	bne.n	80028ea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028e8:	e026      	b.n	8002938 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1cd      	bne.n	8002890 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	6839      	ldr	r1, [r7, #0]
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 fbd9 	bl	80030b0 <SPI_EndRxTxTransaction>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2220      	movs	r2, #32
 8002908:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10a      	bne.n	8002928 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	77fb      	strb	r3, [r7, #31]
 8002934:	e000      	b.n	8002938 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002936:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002948:	7ffb      	ldrb	r3, [r7, #31]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3720      	adds	r7, #32
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b088      	sub	sp, #32
 8002956:	af02      	add	r7, sp, #8
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	603b      	str	r3, [r7, #0]
 800295e:	4613      	mov	r3, r2
 8002960:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800296e:	d112      	bne.n	8002996 <HAL_SPI_Receive+0x44>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10e      	bne.n	8002996 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2204      	movs	r2, #4
 800297c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002980:	88fa      	ldrh	r2, [r7, #6]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	4613      	mov	r3, r2
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	68b9      	ldr	r1, [r7, #8]
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 f8f1 	bl	8002b74 <HAL_SPI_TransmitReceive>
 8002992:	4603      	mov	r3, r0
 8002994:	e0ea      	b.n	8002b6c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800299c:	2b01      	cmp	r3, #1
 800299e:	d101      	bne.n	80029a4 <HAL_SPI_Receive+0x52>
 80029a0:	2302      	movs	r3, #2
 80029a2:	e0e3      	b.n	8002b6c <HAL_SPI_Receive+0x21a>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029ac:	f7fe feb0 	bl	8001710 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d002      	beq.n	80029c4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80029be:	2302      	movs	r3, #2
 80029c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029c2:	e0ca      	b.n	8002b5a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_SPI_Receive+0x7e>
 80029ca:	88fb      	ldrh	r3, [r7, #6]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d102      	bne.n	80029d6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029d4:	e0c1      	b.n	8002b5a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2204      	movs	r2, #4
 80029da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	88fa      	ldrh	r2, [r7, #6]
 80029ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	88fa      	ldrh	r2, [r7, #6]
 80029f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a1c:	d10f      	bne.n	8002a3e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a3c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a48:	2b40      	cmp	r3, #64	; 0x40
 8002a4a:	d007      	beq.n	8002a5c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a5a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d162      	bne.n	8002b2a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002a64:	e02e      	b.n	8002ac4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d115      	bne.n	8002aa0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f103 020c 	add.w	r2, r3, #12
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	7812      	ldrb	r2, [r2, #0]
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a9e:	e011      	b.n	8002ac4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aa0:	f7fe fe36 	bl	8001710 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d803      	bhi.n	8002ab8 <HAL_SPI_Receive+0x166>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ab6:	d102      	bne.n	8002abe <HAL_SPI_Receive+0x16c>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d102      	bne.n	8002ac4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ac2:	e04a      	b.n	8002b5a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1cb      	bne.n	8002a66 <HAL_SPI_Receive+0x114>
 8002ace:	e031      	b.n	8002b34 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d113      	bne.n	8002b06 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	b292      	uxth	r2, r2
 8002aea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af0:	1c9a      	adds	r2, r3, #2
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b04:	e011      	b.n	8002b2a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b06:	f7fe fe03 	bl	8001710 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d803      	bhi.n	8002b1e <HAL_SPI_Receive+0x1cc>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b1c:	d102      	bne.n	8002b24 <HAL_SPI_Receive+0x1d2>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d102      	bne.n	8002b2a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002b28:	e017      	b.n	8002b5a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1cd      	bne.n	8002ad0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	6839      	ldr	r1, [r7, #0]
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 fa53 	bl	8002fe4 <SPI_EndRxTransaction>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d002      	beq.n	8002b4a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2220      	movs	r2, #32
 8002b48:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	75fb      	strb	r3, [r7, #23]
 8002b56:	e000      	b.n	8002b5a <HAL_SPI_Receive+0x208>
  }

error :
 8002b58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08c      	sub	sp, #48	; 0x30
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b82:	2301      	movs	r3, #1
 8002b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d101      	bne.n	8002b9a <HAL_SPI_TransmitReceive+0x26>
 8002b96:	2302      	movs	r3, #2
 8002b98:	e18a      	b.n	8002eb0 <HAL_SPI_TransmitReceive+0x33c>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ba2:	f7fe fdb5 	bl	8001710 <HAL_GetTick>
 8002ba6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002bb8:	887b      	ldrh	r3, [r7, #2]
 8002bba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d00f      	beq.n	8002be4 <HAL_SPI_TransmitReceive+0x70>
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bca:	d107      	bne.n	8002bdc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d103      	bne.n	8002bdc <HAL_SPI_TransmitReceive+0x68>
 8002bd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d003      	beq.n	8002be4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002be2:	e15b      	b.n	8002e9c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d005      	beq.n	8002bf6 <HAL_SPI_TransmitReceive+0x82>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d002      	beq.n	8002bf6 <HAL_SPI_TransmitReceive+0x82>
 8002bf0:	887b      	ldrh	r3, [r7, #2]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d103      	bne.n	8002bfe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002bfc:	e14e      	b.n	8002e9c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d003      	beq.n	8002c12 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2205      	movs	r2, #5
 8002c0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	887a      	ldrh	r2, [r7, #2]
 8002c22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	887a      	ldrh	r2, [r7, #2]
 8002c28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	887a      	ldrh	r2, [r7, #2]
 8002c34:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	887a      	ldrh	r2, [r7, #2]
 8002c3a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c52:	2b40      	cmp	r3, #64	; 0x40
 8002c54:	d007      	beq.n	8002c66 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c6e:	d178      	bne.n	8002d62 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <HAL_SPI_TransmitReceive+0x10a>
 8002c78:	8b7b      	ldrh	r3, [r7, #26]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d166      	bne.n	8002d4c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	881a      	ldrh	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	1c9a      	adds	r2, r3, #2
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ca2:	e053      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d11b      	bne.n	8002cea <HAL_SPI_TransmitReceive+0x176>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d016      	beq.n	8002cea <HAL_SPI_TransmitReceive+0x176>
 8002cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d113      	bne.n	8002cea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	881a      	ldrh	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	1c9a      	adds	r2, r3, #2
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d119      	bne.n	8002d2c <HAL_SPI_TransmitReceive+0x1b8>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d014      	beq.n	8002d2c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0c:	b292      	uxth	r2, r2
 8002d0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	1c9a      	adds	r2, r3, #2
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d2c:	f7fe fcf0 	bl	8001710 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d807      	bhi.n	8002d4c <HAL_SPI_TransmitReceive+0x1d8>
 8002d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d42:	d003      	beq.n	8002d4c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d4a:	e0a7      	b.n	8002e9c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1a6      	bne.n	8002ca4 <HAL_SPI_TransmitReceive+0x130>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1a1      	bne.n	8002ca4 <HAL_SPI_TransmitReceive+0x130>
 8002d60:	e07c      	b.n	8002e5c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <HAL_SPI_TransmitReceive+0x1fc>
 8002d6a:	8b7b      	ldrh	r3, [r7, #26]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d16b      	bne.n	8002e48 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	330c      	adds	r3, #12
 8002d7a:	7812      	ldrb	r2, [r2, #0]
 8002d7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d96:	e057      	b.n	8002e48 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d11c      	bne.n	8002de0 <HAL_SPI_TransmitReceive+0x26c>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d017      	beq.n	8002de0 <HAL_SPI_TransmitReceive+0x26c>
 8002db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d114      	bne.n	8002de0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	330c      	adds	r3, #12
 8002dc0:	7812      	ldrb	r2, [r2, #0]
 8002dc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d119      	bne.n	8002e22 <HAL_SPI_TransmitReceive+0x2ae>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d014      	beq.n	8002e22 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e22:	f7fe fc75 	bl	8001710 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d803      	bhi.n	8002e3a <HAL_SPI_TransmitReceive+0x2c6>
 8002e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e38:	d102      	bne.n	8002e40 <HAL_SPI_TransmitReceive+0x2cc>
 8002e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d103      	bne.n	8002e48 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e46:	e029      	b.n	8002e9c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1a2      	bne.n	8002d98 <HAL_SPI_TransmitReceive+0x224>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d19d      	bne.n	8002d98 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 f925 	bl	80030b0 <SPI_EndRxTxTransaction>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d006      	beq.n	8002e7a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002e78:	e010      	b.n	8002e9c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10b      	bne.n	8002e9a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e82:	2300      	movs	r3, #0
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	e000      	b.n	8002e9c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002e9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002eac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3730      	adds	r7, #48	; 0x30
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ec6:	b2db      	uxtb	r3, r3
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ee4:	f7fe fc14 	bl	8001710 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ef4:	f7fe fc0c 	bl	8001710 <HAL_GetTick>
 8002ef8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002efa:	4b39      	ldr	r3, [pc, #228]	; (8002fe0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	015b      	lsls	r3, r3, #5
 8002f00:	0d1b      	lsrs	r3, r3, #20
 8002f02:	69fa      	ldr	r2, [r7, #28]
 8002f04:	fb02 f303 	mul.w	r3, r2, r3
 8002f08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f0a:	e054      	b.n	8002fb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f12:	d050      	beq.n	8002fb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f14:	f7fe fbfc 	bl	8001710 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d902      	bls.n	8002f2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d13d      	bne.n	8002fa6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f42:	d111      	bne.n	8002f68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f4c:	d004      	beq.n	8002f58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f56:	d107      	bne.n	8002f68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f70:	d10f      	bne.n	8002f92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e017      	b.n	8002fd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	bf0c      	ite	eq
 8002fc6:	2301      	moveq	r3, #1
 8002fc8:	2300      	movne	r3, #0
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d19b      	bne.n	8002f0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3720      	adds	r7, #32
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	2000001c 	.word	0x2000001c

08002fe4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af02      	add	r7, sp, #8
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ff8:	d111      	bne.n	800301e <SPI_EndRxTransaction+0x3a>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003002:	d004      	beq.n	800300e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800300c:	d107      	bne.n	800301e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800301c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003026:	d12a      	bne.n	800307e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003030:	d012      	beq.n	8003058 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2200      	movs	r2, #0
 800303a:	2180      	movs	r1, #128	; 0x80
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f7ff ff49 	bl	8002ed4 <SPI_WaitFlagStateUntilTimeout>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d02d      	beq.n	80030a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304c:	f043 0220 	orr.w	r2, r3, #32
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e026      	b.n	80030a6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2200      	movs	r2, #0
 8003060:	2101      	movs	r1, #1
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f7ff ff36 	bl	8002ed4 <SPI_WaitFlagStateUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d01a      	beq.n	80030a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003072:	f043 0220 	orr.w	r2, r3, #32
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e013      	b.n	80030a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2200      	movs	r2, #0
 8003086:	2101      	movs	r1, #1
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f7ff ff23 	bl	8002ed4 <SPI_WaitFlagStateUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d007      	beq.n	80030a4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003098:	f043 0220 	orr.w	r2, r3, #32
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e000      	b.n	80030a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80030bc:	4b1b      	ldr	r3, [pc, #108]	; (800312c <SPI_EndRxTxTransaction+0x7c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a1b      	ldr	r2, [pc, #108]	; (8003130 <SPI_EndRxTxTransaction+0x80>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	0d5b      	lsrs	r3, r3, #21
 80030c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030cc:	fb02 f303 	mul.w	r3, r2, r3
 80030d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030da:	d112      	bne.n	8003102 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2200      	movs	r2, #0
 80030e4:	2180      	movs	r1, #128	; 0x80
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f7ff fef4 	bl	8002ed4 <SPI_WaitFlagStateUntilTimeout>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d016      	beq.n	8003120 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f6:	f043 0220 	orr.w	r2, r3, #32
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e00f      	b.n	8003122 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00a      	beq.n	800311e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	3b01      	subs	r3, #1
 800310c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003118:	2b80      	cmp	r3, #128	; 0x80
 800311a:	d0f2      	beq.n	8003102 <SPI_EndRxTxTransaction+0x52>
 800311c:	e000      	b.n	8003120 <SPI_EndRxTxTransaction+0x70>
        break;
 800311e:	bf00      	nop
  }

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	2000001c 	.word	0x2000001c
 8003130:	165e9f81 	.word	0x165e9f81

08003134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	607b      	str	r3, [r7, #4]
 800313e:	4b10      	ldr	r3, [pc, #64]	; (8003180 <HAL_MspInit+0x4c>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	4a0f      	ldr	r2, [pc, #60]	; (8003180 <HAL_MspInit+0x4c>)
 8003144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003148:	6453      	str	r3, [r2, #68]	; 0x44
 800314a:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <HAL_MspInit+0x4c>)
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003152:	607b      	str	r3, [r7, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	603b      	str	r3, [r7, #0]
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <HAL_MspInit+0x4c>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	4a08      	ldr	r2, [pc, #32]	; (8003180 <HAL_MspInit+0x4c>)
 8003160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003164:	6413      	str	r3, [r2, #64]	; 0x40
 8003166:	4b06      	ldr	r3, [pc, #24]	; (8003180 <HAL_MspInit+0x4c>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316e:	603b      	str	r3, [r7, #0]
 8003170:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003172:	2007      	movs	r0, #7
 8003174:	f7fe fbcc 	bl	8001910 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40023800 	.word	0x40023800

08003184 <nRF24_IRQ_Callback>:
  count++;
}

/* Private functions ---------------------------------------------------------*/
void nRF24_IRQ_Callback(uint8_t event_type, uint16_t data_src, uint8_t* data, uint8_t width)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	603a      	str	r2, [r7, #0]
 800318c:	461a      	mov	r2, r3
 800318e:	4603      	mov	r3, r0
 8003190:	71fb      	strb	r3, [r7, #7]
 8003192:	460b      	mov	r3, r1
 8003194:	80bb      	strh	r3, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	71bb      	strb	r3, [r7, #6]
	switch(event_type) {
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	3b04      	subs	r3, #4
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d80f      	bhi.n	80031c2 <nRF24_IRQ_Callback+0x3e>
 80031a2:	a201      	add	r2, pc, #4	; (adr r2, 80031a8 <nRF24_IRQ_Callback+0x24>)
 80031a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a8:	080031c1 	.word	0x080031c1
 80031ac:	080031b9 	.word	0x080031b9
 80031b0:	080031c1 	.word	0x080031c1
 80031b4:	080031c1 	.word	0x080031c1
		case EVENT_RX_DR:
			//BSP_LED_On(LED2);
			break;
		case EVENT_TX_DS:
			can_transmit = true;
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <nRF24_IRQ_Callback+0x4c>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	701a      	strb	r2, [r3, #0]
			break;
 80031be:	e000      	b.n	80031c2 <nRF24_IRQ_Callback+0x3e>
		case EVENT_MAX_RT:
			break;
 80031c0:	bf00      	nop
		case EVENT_GPIO_IRQ:
			break;
	}
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	20000025 	.word	0x20000025

080031d4 <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08a      	sub	sp, #40	; 0x28
 80031d8:	af00      	add	r7, sp, #0
	/* STM32F4xx HAL library initialization */
	HAL_Init();
 80031da:	f7fe fa33 	bl	8001644 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 80031de:	f000 f86b 	bl	80032b8 <SystemClock_Config>
  /* Initialize BSP LED1 */
	//BSP_LED_Init(LED2);
  //BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);

	/* CONFIG */
	hnrf24.Init.CrcEnable = 1;
 80031e2:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <main+0xd4>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	701a      	strb	r2, [r3, #0]
	hnrf24.Init.CrcEncodingScheme = CRC_ENCODING_1_BYTE;
 80031e8:	4b2f      	ldr	r3, [pc, #188]	; (80032a8 <main+0xd4>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	705a      	strb	r2, [r3, #1]
	/* EN_AA */
	hnrf24.Init.AutoAckEnable = 1;
 80031ee:	4b2e      	ldr	r3, [pc, #184]	; (80032a8 <main+0xd4>)
 80031f0:	2201      	movs	r2, #1
 80031f2:	709a      	strb	r2, [r3, #2]
	hnrf24.Init.AutoAckDataPipes = 0b00000011;
 80031f4:	4b2c      	ldr	r3, [pc, #176]	; (80032a8 <main+0xd4>)
 80031f6:	2203      	movs	r2, #3
 80031f8:	70da      	strb	r2, [r3, #3]
	/* EN_RXADDR */
	hnrf24.Init.RxDataPipes = 0b00000001;
 80031fa:	4b2b      	ldr	r3, [pc, #172]	; (80032a8 <main+0xd4>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	711a      	strb	r2, [r3, #4]
	/* SETUP_AW */
	hnrf24.Init.Aw = AW_3_BYTES;
 8003200:	4b29      	ldr	r3, [pc, #164]	; (80032a8 <main+0xd4>)
 8003202:	2201      	movs	r2, #1
 8003204:	715a      	strb	r2, [r3, #5]
	/* RF_CH */
	hnrf24.Init.RfChannel = 0b00000010;
 8003206:	4b28      	ldr	r3, [pc, #160]	; (80032a8 <main+0xd4>)
 8003208:	2202      	movs	r2, #2
 800320a:	719a      	strb	r2, [r3, #6]
	/* RF_SETUP */
	hnrf24.Init.ContWave = 0;
 800320c:	4b26      	ldr	r3, [pc, #152]	; (80032a8 <main+0xd4>)
 800320e:	2200      	movs	r2, #0
 8003210:	71da      	strb	r2, [r3, #7]
	hnrf24.Init.RfPower = RF_POWER_0DBM;
 8003212:	4b25      	ldr	r3, [pc, #148]	; (80032a8 <main+0xd4>)
 8003214:	2206      	movs	r2, #6
 8003216:	721a      	strb	r2, [r3, #8]
	hnrf24.Init.RfDataRate = RF_DR_2MBPS;
 8003218:	4b23      	ldr	r3, [pc, #140]	; (80032a8 <main+0xd4>)
 800321a:	2208      	movs	r2, #8
 800321c:	725a      	strb	r2, [r3, #9]
	/* DPL */
	hnrf24.Init.DplEnable = 1;
 800321e:	4b22      	ldr	r3, [pc, #136]	; (80032a8 <main+0xd4>)
 8003220:	2201      	movs	r2, #1
 8003222:	729a      	strb	r2, [r3, #10]
	hnrf24.Init.DplEnableDataPipes = 0b00000011;
 8003224:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <main+0xd4>)
 8003226:	2203      	movs	r2, #3
 8003228:	72da      	strb	r2, [r3, #11]
	/* EN_DYN_ACK */
	hnrf24.Init.DynAckEnable = 0;
 800322a:	4b1f      	ldr	r3, [pc, #124]	; (80032a8 <main+0xd4>)
 800322c:	2200      	movs	r2, #0
 800322e:	731a      	strb	r2, [r3, #12]

	hnrf24.StatusRegister = 0;
 8003230:	4b1d      	ldr	r3, [pc, #116]	; (80032a8 <main+0xd4>)
 8003232:	2200      	movs	r2, #0
 8003234:	735a      	strb	r2, [r3, #13]
	hnrf24.DeviceMode = TRANSMITTER_MODE;
 8003236:	4b1c      	ldr	r3, [pc, #112]	; (80032a8 <main+0xd4>)
 8003238:	2201      	movs	r2, #1
 800323a:	739a      	strb	r2, [r3, #14]

	if (nRF24_Init(&hnrf24) != NRF24_OK) {
 800323c:	481a      	ldr	r0, [pc, #104]	; (80032a8 <main+0xd4>)
 800323e:	f7fd fe97 	bl	8000f70 <nRF24_Init>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <main+0x78>
		Error_Handler();
 8003248:	f000 f8a2 	bl	8003390 <Error_Handler>
	}
uint8_t send_buffer[33];
  int count=0;
 800324c:	2300      	movs	r3, #0
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
  //nRF24_TxStatus_t tx_status = TRANSMITTION_INIT;

	/* Infinite loop */
	while (1)
	{
		if (can_transmit) {
 8003250:	4b16      	ldr	r3, [pc, #88]	; (80032ac <main+0xd8>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d022      	beq.n	800329e <main+0xca>
			can_transmit = false;
 8003258:	4b14      	ldr	r3, [pc, #80]	; (80032ac <main+0xd8>)
 800325a:	2200      	movs	r2, #0
 800325c:	701a      	strb	r2, [r3, #0]
			sprintf((char*)send_buffer, "0:abcdefgh%d", count++);
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	627a      	str	r2, [r7, #36]	; 0x24
 8003264:	4638      	mov	r0, r7
 8003266:	461a      	mov	r2, r3
 8003268:	4911      	ldr	r1, [pc, #68]	; (80032b0 <main+0xdc>)
 800326a:	f000 f8c1 	bl	80033f0 <siprintf>
			count %=10000;
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	4a10      	ldr	r2, [pc, #64]	; (80032b4 <main+0xe0>)
 8003272:	fb82 1203 	smull	r1, r2, r2, r3
 8003276:	1311      	asrs	r1, r2, #12
 8003278:	17da      	asrs	r2, r3, #31
 800327a:	1a8a      	subs	r2, r1, r2
 800327c:	f242 7110 	movw	r1, #10000	; 0x2710
 8003280:	fb01 f202 	mul.w	r2, r1, r2
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
			nRF24_Transmit(send_buffer, strlen((char*)send_buffer));
 8003288:	463b      	mov	r3, r7
 800328a:	4618      	mov	r0, r3
 800328c:	f7fc ffa8 	bl	80001e0 <strlen>
 8003290:	4603      	mov	r3, r0
 8003292:	b2da      	uxtb	r2, r3
 8003294:	463b      	mov	r3, r7
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f7fe f86d 	bl	8001378 <nRF24_Transmit>
		}

		HAL_Delay(100);
 800329e:	2064      	movs	r0, #100	; 0x64
 80032a0:	f7fe fa42 	bl	8001728 <HAL_Delay>
		if (can_transmit) {
 80032a4:	e7d4      	b.n	8003250 <main+0x7c>
 80032a6:	bf00      	nop
 80032a8:	20000104 	.word	0x20000104
 80032ac:	20000025 	.word	0x20000025
 80032b0:	08003d50 	.word	0x08003d50
 80032b4:	68db8bad 	.word	0x68db8bad

080032b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b094      	sub	sp, #80	; 0x50
 80032bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032be:	f107 0320 	add.w	r3, r7, #32
 80032c2:	2230      	movs	r2, #48	; 0x30
 80032c4:	2100      	movs	r1, #0
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 f8b2 	bl	8003430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032cc:	f107 030c 	add.w	r3, r7, #12
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032dc:	2300      	movs	r3, #0
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	4b29      	ldr	r3, [pc, #164]	; (8003388 <SystemClock_Config+0xd0>)
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	4a28      	ldr	r2, [pc, #160]	; (8003388 <SystemClock_Config+0xd0>)
 80032e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ea:	6413      	str	r3, [r2, #64]	; 0x40
 80032ec:	4b26      	ldr	r3, [pc, #152]	; (8003388 <SystemClock_Config+0xd0>)
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80032f8:	2300      	movs	r3, #0
 80032fa:	607b      	str	r3, [r7, #4]
 80032fc:	4b23      	ldr	r3, [pc, #140]	; (800338c <SystemClock_Config+0xd4>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003304:	4a21      	ldr	r2, [pc, #132]	; (800338c <SystemClock_Config+0xd4>)
 8003306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	4b1f      	ldr	r3, [pc, #124]	; (800338c <SystemClock_Config+0xd4>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003314:	607b      	str	r3, [r7, #4]
 8003316:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003318:	2302      	movs	r3, #2
 800331a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800331c:	2301      	movs	r3, #1
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003320:	2310      	movs	r3, #16
 8003322:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003324:	2302      	movs	r3, #2
 8003326:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003328:	2300      	movs	r3, #0
 800332a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800332c:	2310      	movs	r3, #16
 800332e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003330:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003334:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003336:	2304      	movs	r3, #4
 8003338:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800333a:	2307      	movs	r3, #7
 800333c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800333e:	f107 0320 	add.w	r3, r7, #32
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe fcdc 	bl	8001d00 <HAL_RCC_OscConfig>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800334e:	f000 f81f 	bl	8003390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003352:	230f      	movs	r3, #15
 8003354:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003356:	2302      	movs	r3, #2
 8003358:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800335e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003362:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003364:	2300      	movs	r3, #0
 8003366:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003368:	f107 030c 	add.w	r3, r7, #12
 800336c:	2102      	movs	r1, #2
 800336e:	4618      	mov	r0, r3
 8003370:	f7fe ff3e 	bl	80021f0 <HAL_RCC_ClockConfig>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800337a:	f000 f809 	bl	8003390 <Error_Handler>
  }
}
 800337e:	bf00      	nop
 8003380:	3750      	adds	r7, #80	; 0x50
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40023800 	.word	0x40023800
 800338c:	40007000 	.word	0x40007000

08003390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Error_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003394:	b672      	cpsid	i
}
 8003396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003398:	e7fe      	b.n	8003398 <Error_Handler+0x8>
	...

0800339c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800339c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80033a0:	f7fe f93e 	bl	8001620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033a4:	480c      	ldr	r0, [pc, #48]	; (80033d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80033a6:	490d      	ldr	r1, [pc, #52]	; (80033dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80033a8:	4a0d      	ldr	r2, [pc, #52]	; (80033e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80033aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033ac:	e002      	b.n	80033b4 <LoopCopyDataInit>

080033ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033b2:	3304      	adds	r3, #4

080033b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033b8:	d3f9      	bcc.n	80033ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033ba:	4a0a      	ldr	r2, [pc, #40]	; (80033e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80033bc:	4c0a      	ldr	r4, [pc, #40]	; (80033e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80033be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033c0:	e001      	b.n	80033c6 <LoopFillZerobss>

080033c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033c4:	3204      	adds	r2, #4

080033c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033c8:	d3fb      	bcc.n	80033c2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80033ca:	f000 f83f 	bl	800344c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033ce:	f7ff ff01 	bl	80031d4 <main>
  bx  lr    
 80033d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80033d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80033d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033dc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80033e0:	08003db4 	.word	0x08003db4
  ldr r2, =_sbss
 80033e4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80033e8:	2000025c 	.word	0x2000025c

080033ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033ec:	e7fe      	b.n	80033ec <ADC_IRQHandler>
	...

080033f0 <siprintf>:
 80033f0:	b40e      	push	{r1, r2, r3}
 80033f2:	b500      	push	{lr}
 80033f4:	b09c      	sub	sp, #112	; 0x70
 80033f6:	ab1d      	add	r3, sp, #116	; 0x74
 80033f8:	9002      	str	r0, [sp, #8]
 80033fa:	9006      	str	r0, [sp, #24]
 80033fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003400:	4809      	ldr	r0, [pc, #36]	; (8003428 <siprintf+0x38>)
 8003402:	9107      	str	r1, [sp, #28]
 8003404:	9104      	str	r1, [sp, #16]
 8003406:	4909      	ldr	r1, [pc, #36]	; (800342c <siprintf+0x3c>)
 8003408:	f853 2b04 	ldr.w	r2, [r3], #4
 800340c:	9105      	str	r1, [sp, #20]
 800340e:	6800      	ldr	r0, [r0, #0]
 8003410:	9301      	str	r3, [sp, #4]
 8003412:	a902      	add	r1, sp, #8
 8003414:	f000 f992 	bl	800373c <_svfiprintf_r>
 8003418:	9b02      	ldr	r3, [sp, #8]
 800341a:	2200      	movs	r2, #0
 800341c:	701a      	strb	r2, [r3, #0]
 800341e:	b01c      	add	sp, #112	; 0x70
 8003420:	f85d eb04 	ldr.w	lr, [sp], #4
 8003424:	b003      	add	sp, #12
 8003426:	4770      	bx	lr
 8003428:	20000074 	.word	0x20000074
 800342c:	ffff0208 	.word	0xffff0208

08003430 <memset>:
 8003430:	4402      	add	r2, r0
 8003432:	4603      	mov	r3, r0
 8003434:	4293      	cmp	r3, r2
 8003436:	d100      	bne.n	800343a <memset+0xa>
 8003438:	4770      	bx	lr
 800343a:	f803 1b01 	strb.w	r1, [r3], #1
 800343e:	e7f9      	b.n	8003434 <memset+0x4>

08003440 <__errno>:
 8003440:	4b01      	ldr	r3, [pc, #4]	; (8003448 <__errno+0x8>)
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	20000074 	.word	0x20000074

0800344c <__libc_init_array>:
 800344c:	b570      	push	{r4, r5, r6, lr}
 800344e:	4d0d      	ldr	r5, [pc, #52]	; (8003484 <__libc_init_array+0x38>)
 8003450:	4c0d      	ldr	r4, [pc, #52]	; (8003488 <__libc_init_array+0x3c>)
 8003452:	1b64      	subs	r4, r4, r5
 8003454:	10a4      	asrs	r4, r4, #2
 8003456:	2600      	movs	r6, #0
 8003458:	42a6      	cmp	r6, r4
 800345a:	d109      	bne.n	8003470 <__libc_init_array+0x24>
 800345c:	4d0b      	ldr	r5, [pc, #44]	; (800348c <__libc_init_array+0x40>)
 800345e:	4c0c      	ldr	r4, [pc, #48]	; (8003490 <__libc_init_array+0x44>)
 8003460:	f000 fc6a 	bl	8003d38 <_init>
 8003464:	1b64      	subs	r4, r4, r5
 8003466:	10a4      	asrs	r4, r4, #2
 8003468:	2600      	movs	r6, #0
 800346a:	42a6      	cmp	r6, r4
 800346c:	d105      	bne.n	800347a <__libc_init_array+0x2e>
 800346e:	bd70      	pop	{r4, r5, r6, pc}
 8003470:	f855 3b04 	ldr.w	r3, [r5], #4
 8003474:	4798      	blx	r3
 8003476:	3601      	adds	r6, #1
 8003478:	e7ee      	b.n	8003458 <__libc_init_array+0xc>
 800347a:	f855 3b04 	ldr.w	r3, [r5], #4
 800347e:	4798      	blx	r3
 8003480:	3601      	adds	r6, #1
 8003482:	e7f2      	b.n	800346a <__libc_init_array+0x1e>
 8003484:	08003dac 	.word	0x08003dac
 8003488:	08003dac 	.word	0x08003dac
 800348c:	08003dac 	.word	0x08003dac
 8003490:	08003db0 	.word	0x08003db0

08003494 <__retarget_lock_acquire_recursive>:
 8003494:	4770      	bx	lr

08003496 <__retarget_lock_release_recursive>:
 8003496:	4770      	bx	lr

08003498 <_free_r>:
 8003498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800349a:	2900      	cmp	r1, #0
 800349c:	d044      	beq.n	8003528 <_free_r+0x90>
 800349e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034a2:	9001      	str	r0, [sp, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f1a1 0404 	sub.w	r4, r1, #4
 80034aa:	bfb8      	it	lt
 80034ac:	18e4      	addlt	r4, r4, r3
 80034ae:	f000 f8df 	bl	8003670 <__malloc_lock>
 80034b2:	4a1e      	ldr	r2, [pc, #120]	; (800352c <_free_r+0x94>)
 80034b4:	9801      	ldr	r0, [sp, #4]
 80034b6:	6813      	ldr	r3, [r2, #0]
 80034b8:	b933      	cbnz	r3, 80034c8 <_free_r+0x30>
 80034ba:	6063      	str	r3, [r4, #4]
 80034bc:	6014      	str	r4, [r2, #0]
 80034be:	b003      	add	sp, #12
 80034c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80034c4:	f000 b8da 	b.w	800367c <__malloc_unlock>
 80034c8:	42a3      	cmp	r3, r4
 80034ca:	d908      	bls.n	80034de <_free_r+0x46>
 80034cc:	6825      	ldr	r5, [r4, #0]
 80034ce:	1961      	adds	r1, r4, r5
 80034d0:	428b      	cmp	r3, r1
 80034d2:	bf01      	itttt	eq
 80034d4:	6819      	ldreq	r1, [r3, #0]
 80034d6:	685b      	ldreq	r3, [r3, #4]
 80034d8:	1949      	addeq	r1, r1, r5
 80034da:	6021      	streq	r1, [r4, #0]
 80034dc:	e7ed      	b.n	80034ba <_free_r+0x22>
 80034de:	461a      	mov	r2, r3
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	b10b      	cbz	r3, 80034e8 <_free_r+0x50>
 80034e4:	42a3      	cmp	r3, r4
 80034e6:	d9fa      	bls.n	80034de <_free_r+0x46>
 80034e8:	6811      	ldr	r1, [r2, #0]
 80034ea:	1855      	adds	r5, r2, r1
 80034ec:	42a5      	cmp	r5, r4
 80034ee:	d10b      	bne.n	8003508 <_free_r+0x70>
 80034f0:	6824      	ldr	r4, [r4, #0]
 80034f2:	4421      	add	r1, r4
 80034f4:	1854      	adds	r4, r2, r1
 80034f6:	42a3      	cmp	r3, r4
 80034f8:	6011      	str	r1, [r2, #0]
 80034fa:	d1e0      	bne.n	80034be <_free_r+0x26>
 80034fc:	681c      	ldr	r4, [r3, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	6053      	str	r3, [r2, #4]
 8003502:	440c      	add	r4, r1
 8003504:	6014      	str	r4, [r2, #0]
 8003506:	e7da      	b.n	80034be <_free_r+0x26>
 8003508:	d902      	bls.n	8003510 <_free_r+0x78>
 800350a:	230c      	movs	r3, #12
 800350c:	6003      	str	r3, [r0, #0]
 800350e:	e7d6      	b.n	80034be <_free_r+0x26>
 8003510:	6825      	ldr	r5, [r4, #0]
 8003512:	1961      	adds	r1, r4, r5
 8003514:	428b      	cmp	r3, r1
 8003516:	bf04      	itt	eq
 8003518:	6819      	ldreq	r1, [r3, #0]
 800351a:	685b      	ldreq	r3, [r3, #4]
 800351c:	6063      	str	r3, [r4, #4]
 800351e:	bf04      	itt	eq
 8003520:	1949      	addeq	r1, r1, r5
 8003522:	6021      	streq	r1, [r4, #0]
 8003524:	6054      	str	r4, [r2, #4]
 8003526:	e7ca      	b.n	80034be <_free_r+0x26>
 8003528:	b003      	add	sp, #12
 800352a:	bd30      	pop	{r4, r5, pc}
 800352c:	20000254 	.word	0x20000254

08003530 <sbrk_aligned>:
 8003530:	b570      	push	{r4, r5, r6, lr}
 8003532:	4e0e      	ldr	r6, [pc, #56]	; (800356c <sbrk_aligned+0x3c>)
 8003534:	460c      	mov	r4, r1
 8003536:	6831      	ldr	r1, [r6, #0]
 8003538:	4605      	mov	r5, r0
 800353a:	b911      	cbnz	r1, 8003542 <sbrk_aligned+0x12>
 800353c:	f000 fba6 	bl	8003c8c <_sbrk_r>
 8003540:	6030      	str	r0, [r6, #0]
 8003542:	4621      	mov	r1, r4
 8003544:	4628      	mov	r0, r5
 8003546:	f000 fba1 	bl	8003c8c <_sbrk_r>
 800354a:	1c43      	adds	r3, r0, #1
 800354c:	d00a      	beq.n	8003564 <sbrk_aligned+0x34>
 800354e:	1cc4      	adds	r4, r0, #3
 8003550:	f024 0403 	bic.w	r4, r4, #3
 8003554:	42a0      	cmp	r0, r4
 8003556:	d007      	beq.n	8003568 <sbrk_aligned+0x38>
 8003558:	1a21      	subs	r1, r4, r0
 800355a:	4628      	mov	r0, r5
 800355c:	f000 fb96 	bl	8003c8c <_sbrk_r>
 8003560:	3001      	adds	r0, #1
 8003562:	d101      	bne.n	8003568 <sbrk_aligned+0x38>
 8003564:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003568:	4620      	mov	r0, r4
 800356a:	bd70      	pop	{r4, r5, r6, pc}
 800356c:	20000258 	.word	0x20000258

08003570 <_malloc_r>:
 8003570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003574:	1ccd      	adds	r5, r1, #3
 8003576:	f025 0503 	bic.w	r5, r5, #3
 800357a:	3508      	adds	r5, #8
 800357c:	2d0c      	cmp	r5, #12
 800357e:	bf38      	it	cc
 8003580:	250c      	movcc	r5, #12
 8003582:	2d00      	cmp	r5, #0
 8003584:	4607      	mov	r7, r0
 8003586:	db01      	blt.n	800358c <_malloc_r+0x1c>
 8003588:	42a9      	cmp	r1, r5
 800358a:	d905      	bls.n	8003598 <_malloc_r+0x28>
 800358c:	230c      	movs	r3, #12
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	2600      	movs	r6, #0
 8003592:	4630      	mov	r0, r6
 8003594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003598:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800366c <_malloc_r+0xfc>
 800359c:	f000 f868 	bl	8003670 <__malloc_lock>
 80035a0:	f8d8 3000 	ldr.w	r3, [r8]
 80035a4:	461c      	mov	r4, r3
 80035a6:	bb5c      	cbnz	r4, 8003600 <_malloc_r+0x90>
 80035a8:	4629      	mov	r1, r5
 80035aa:	4638      	mov	r0, r7
 80035ac:	f7ff ffc0 	bl	8003530 <sbrk_aligned>
 80035b0:	1c43      	adds	r3, r0, #1
 80035b2:	4604      	mov	r4, r0
 80035b4:	d155      	bne.n	8003662 <_malloc_r+0xf2>
 80035b6:	f8d8 4000 	ldr.w	r4, [r8]
 80035ba:	4626      	mov	r6, r4
 80035bc:	2e00      	cmp	r6, #0
 80035be:	d145      	bne.n	800364c <_malloc_r+0xdc>
 80035c0:	2c00      	cmp	r4, #0
 80035c2:	d048      	beq.n	8003656 <_malloc_r+0xe6>
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	4631      	mov	r1, r6
 80035c8:	4638      	mov	r0, r7
 80035ca:	eb04 0903 	add.w	r9, r4, r3
 80035ce:	f000 fb5d 	bl	8003c8c <_sbrk_r>
 80035d2:	4581      	cmp	r9, r0
 80035d4:	d13f      	bne.n	8003656 <_malloc_r+0xe6>
 80035d6:	6821      	ldr	r1, [r4, #0]
 80035d8:	1a6d      	subs	r5, r5, r1
 80035da:	4629      	mov	r1, r5
 80035dc:	4638      	mov	r0, r7
 80035de:	f7ff ffa7 	bl	8003530 <sbrk_aligned>
 80035e2:	3001      	adds	r0, #1
 80035e4:	d037      	beq.n	8003656 <_malloc_r+0xe6>
 80035e6:	6823      	ldr	r3, [r4, #0]
 80035e8:	442b      	add	r3, r5
 80035ea:	6023      	str	r3, [r4, #0]
 80035ec:	f8d8 3000 	ldr.w	r3, [r8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d038      	beq.n	8003666 <_malloc_r+0xf6>
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	42a2      	cmp	r2, r4
 80035f8:	d12b      	bne.n	8003652 <_malloc_r+0xe2>
 80035fa:	2200      	movs	r2, #0
 80035fc:	605a      	str	r2, [r3, #4]
 80035fe:	e00f      	b.n	8003620 <_malloc_r+0xb0>
 8003600:	6822      	ldr	r2, [r4, #0]
 8003602:	1b52      	subs	r2, r2, r5
 8003604:	d41f      	bmi.n	8003646 <_malloc_r+0xd6>
 8003606:	2a0b      	cmp	r2, #11
 8003608:	d917      	bls.n	800363a <_malloc_r+0xca>
 800360a:	1961      	adds	r1, r4, r5
 800360c:	42a3      	cmp	r3, r4
 800360e:	6025      	str	r5, [r4, #0]
 8003610:	bf18      	it	ne
 8003612:	6059      	strne	r1, [r3, #4]
 8003614:	6863      	ldr	r3, [r4, #4]
 8003616:	bf08      	it	eq
 8003618:	f8c8 1000 	streq.w	r1, [r8]
 800361c:	5162      	str	r2, [r4, r5]
 800361e:	604b      	str	r3, [r1, #4]
 8003620:	4638      	mov	r0, r7
 8003622:	f104 060b 	add.w	r6, r4, #11
 8003626:	f000 f829 	bl	800367c <__malloc_unlock>
 800362a:	f026 0607 	bic.w	r6, r6, #7
 800362e:	1d23      	adds	r3, r4, #4
 8003630:	1af2      	subs	r2, r6, r3
 8003632:	d0ae      	beq.n	8003592 <_malloc_r+0x22>
 8003634:	1b9b      	subs	r3, r3, r6
 8003636:	50a3      	str	r3, [r4, r2]
 8003638:	e7ab      	b.n	8003592 <_malloc_r+0x22>
 800363a:	42a3      	cmp	r3, r4
 800363c:	6862      	ldr	r2, [r4, #4]
 800363e:	d1dd      	bne.n	80035fc <_malloc_r+0x8c>
 8003640:	f8c8 2000 	str.w	r2, [r8]
 8003644:	e7ec      	b.n	8003620 <_malloc_r+0xb0>
 8003646:	4623      	mov	r3, r4
 8003648:	6864      	ldr	r4, [r4, #4]
 800364a:	e7ac      	b.n	80035a6 <_malloc_r+0x36>
 800364c:	4634      	mov	r4, r6
 800364e:	6876      	ldr	r6, [r6, #4]
 8003650:	e7b4      	b.n	80035bc <_malloc_r+0x4c>
 8003652:	4613      	mov	r3, r2
 8003654:	e7cc      	b.n	80035f0 <_malloc_r+0x80>
 8003656:	230c      	movs	r3, #12
 8003658:	603b      	str	r3, [r7, #0]
 800365a:	4638      	mov	r0, r7
 800365c:	f000 f80e 	bl	800367c <__malloc_unlock>
 8003660:	e797      	b.n	8003592 <_malloc_r+0x22>
 8003662:	6025      	str	r5, [r4, #0]
 8003664:	e7dc      	b.n	8003620 <_malloc_r+0xb0>
 8003666:	605b      	str	r3, [r3, #4]
 8003668:	deff      	udf	#255	; 0xff
 800366a:	bf00      	nop
 800366c:	20000254 	.word	0x20000254

08003670 <__malloc_lock>:
 8003670:	4801      	ldr	r0, [pc, #4]	; (8003678 <__malloc_lock+0x8>)
 8003672:	f7ff bf0f 	b.w	8003494 <__retarget_lock_acquire_recursive>
 8003676:	bf00      	nop
 8003678:	20000250 	.word	0x20000250

0800367c <__malloc_unlock>:
 800367c:	4801      	ldr	r0, [pc, #4]	; (8003684 <__malloc_unlock+0x8>)
 800367e:	f7ff bf0a 	b.w	8003496 <__retarget_lock_release_recursive>
 8003682:	bf00      	nop
 8003684:	20000250 	.word	0x20000250

08003688 <__ssputs_r>:
 8003688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800368c:	688e      	ldr	r6, [r1, #8]
 800368e:	461f      	mov	r7, r3
 8003690:	42be      	cmp	r6, r7
 8003692:	680b      	ldr	r3, [r1, #0]
 8003694:	4682      	mov	sl, r0
 8003696:	460c      	mov	r4, r1
 8003698:	4690      	mov	r8, r2
 800369a:	d82c      	bhi.n	80036f6 <__ssputs_r+0x6e>
 800369c:	898a      	ldrh	r2, [r1, #12]
 800369e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80036a2:	d026      	beq.n	80036f2 <__ssputs_r+0x6a>
 80036a4:	6965      	ldr	r5, [r4, #20]
 80036a6:	6909      	ldr	r1, [r1, #16]
 80036a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036ac:	eba3 0901 	sub.w	r9, r3, r1
 80036b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80036b4:	1c7b      	adds	r3, r7, #1
 80036b6:	444b      	add	r3, r9
 80036b8:	106d      	asrs	r5, r5, #1
 80036ba:	429d      	cmp	r5, r3
 80036bc:	bf38      	it	cc
 80036be:	461d      	movcc	r5, r3
 80036c0:	0553      	lsls	r3, r2, #21
 80036c2:	d527      	bpl.n	8003714 <__ssputs_r+0x8c>
 80036c4:	4629      	mov	r1, r5
 80036c6:	f7ff ff53 	bl	8003570 <_malloc_r>
 80036ca:	4606      	mov	r6, r0
 80036cc:	b360      	cbz	r0, 8003728 <__ssputs_r+0xa0>
 80036ce:	6921      	ldr	r1, [r4, #16]
 80036d0:	464a      	mov	r2, r9
 80036d2:	f000 faeb 	bl	8003cac <memcpy>
 80036d6:	89a3      	ldrh	r3, [r4, #12]
 80036d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036e0:	81a3      	strh	r3, [r4, #12]
 80036e2:	6126      	str	r6, [r4, #16]
 80036e4:	6165      	str	r5, [r4, #20]
 80036e6:	444e      	add	r6, r9
 80036e8:	eba5 0509 	sub.w	r5, r5, r9
 80036ec:	6026      	str	r6, [r4, #0]
 80036ee:	60a5      	str	r5, [r4, #8]
 80036f0:	463e      	mov	r6, r7
 80036f2:	42be      	cmp	r6, r7
 80036f4:	d900      	bls.n	80036f8 <__ssputs_r+0x70>
 80036f6:	463e      	mov	r6, r7
 80036f8:	6820      	ldr	r0, [r4, #0]
 80036fa:	4632      	mov	r2, r6
 80036fc:	4641      	mov	r1, r8
 80036fe:	f000 faab 	bl	8003c58 <memmove>
 8003702:	68a3      	ldr	r3, [r4, #8]
 8003704:	1b9b      	subs	r3, r3, r6
 8003706:	60a3      	str	r3, [r4, #8]
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	4433      	add	r3, r6
 800370c:	6023      	str	r3, [r4, #0]
 800370e:	2000      	movs	r0, #0
 8003710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003714:	462a      	mov	r2, r5
 8003716:	f000 fad7 	bl	8003cc8 <_realloc_r>
 800371a:	4606      	mov	r6, r0
 800371c:	2800      	cmp	r0, #0
 800371e:	d1e0      	bne.n	80036e2 <__ssputs_r+0x5a>
 8003720:	6921      	ldr	r1, [r4, #16]
 8003722:	4650      	mov	r0, sl
 8003724:	f7ff feb8 	bl	8003498 <_free_r>
 8003728:	230c      	movs	r3, #12
 800372a:	f8ca 3000 	str.w	r3, [sl]
 800372e:	89a3      	ldrh	r3, [r4, #12]
 8003730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003734:	81a3      	strh	r3, [r4, #12]
 8003736:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800373a:	e7e9      	b.n	8003710 <__ssputs_r+0x88>

0800373c <_svfiprintf_r>:
 800373c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003740:	4698      	mov	r8, r3
 8003742:	898b      	ldrh	r3, [r1, #12]
 8003744:	061b      	lsls	r3, r3, #24
 8003746:	b09d      	sub	sp, #116	; 0x74
 8003748:	4607      	mov	r7, r0
 800374a:	460d      	mov	r5, r1
 800374c:	4614      	mov	r4, r2
 800374e:	d50e      	bpl.n	800376e <_svfiprintf_r+0x32>
 8003750:	690b      	ldr	r3, [r1, #16]
 8003752:	b963      	cbnz	r3, 800376e <_svfiprintf_r+0x32>
 8003754:	2140      	movs	r1, #64	; 0x40
 8003756:	f7ff ff0b 	bl	8003570 <_malloc_r>
 800375a:	6028      	str	r0, [r5, #0]
 800375c:	6128      	str	r0, [r5, #16]
 800375e:	b920      	cbnz	r0, 800376a <_svfiprintf_r+0x2e>
 8003760:	230c      	movs	r3, #12
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003768:	e0d0      	b.n	800390c <_svfiprintf_r+0x1d0>
 800376a:	2340      	movs	r3, #64	; 0x40
 800376c:	616b      	str	r3, [r5, #20]
 800376e:	2300      	movs	r3, #0
 8003770:	9309      	str	r3, [sp, #36]	; 0x24
 8003772:	2320      	movs	r3, #32
 8003774:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003778:	f8cd 800c 	str.w	r8, [sp, #12]
 800377c:	2330      	movs	r3, #48	; 0x30
 800377e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003924 <_svfiprintf_r+0x1e8>
 8003782:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003786:	f04f 0901 	mov.w	r9, #1
 800378a:	4623      	mov	r3, r4
 800378c:	469a      	mov	sl, r3
 800378e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003792:	b10a      	cbz	r2, 8003798 <_svfiprintf_r+0x5c>
 8003794:	2a25      	cmp	r2, #37	; 0x25
 8003796:	d1f9      	bne.n	800378c <_svfiprintf_r+0x50>
 8003798:	ebba 0b04 	subs.w	fp, sl, r4
 800379c:	d00b      	beq.n	80037b6 <_svfiprintf_r+0x7a>
 800379e:	465b      	mov	r3, fp
 80037a0:	4622      	mov	r2, r4
 80037a2:	4629      	mov	r1, r5
 80037a4:	4638      	mov	r0, r7
 80037a6:	f7ff ff6f 	bl	8003688 <__ssputs_r>
 80037aa:	3001      	adds	r0, #1
 80037ac:	f000 80a9 	beq.w	8003902 <_svfiprintf_r+0x1c6>
 80037b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037b2:	445a      	add	r2, fp
 80037b4:	9209      	str	r2, [sp, #36]	; 0x24
 80037b6:	f89a 3000 	ldrb.w	r3, [sl]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 80a1 	beq.w	8003902 <_svfiprintf_r+0x1c6>
 80037c0:	2300      	movs	r3, #0
 80037c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037ca:	f10a 0a01 	add.w	sl, sl, #1
 80037ce:	9304      	str	r3, [sp, #16]
 80037d0:	9307      	str	r3, [sp, #28]
 80037d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037d6:	931a      	str	r3, [sp, #104]	; 0x68
 80037d8:	4654      	mov	r4, sl
 80037da:	2205      	movs	r2, #5
 80037dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037e0:	4850      	ldr	r0, [pc, #320]	; (8003924 <_svfiprintf_r+0x1e8>)
 80037e2:	f7fc fd05 	bl	80001f0 <memchr>
 80037e6:	9a04      	ldr	r2, [sp, #16]
 80037e8:	b9d8      	cbnz	r0, 8003822 <_svfiprintf_r+0xe6>
 80037ea:	06d0      	lsls	r0, r2, #27
 80037ec:	bf44      	itt	mi
 80037ee:	2320      	movmi	r3, #32
 80037f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037f4:	0711      	lsls	r1, r2, #28
 80037f6:	bf44      	itt	mi
 80037f8:	232b      	movmi	r3, #43	; 0x2b
 80037fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037fe:	f89a 3000 	ldrb.w	r3, [sl]
 8003802:	2b2a      	cmp	r3, #42	; 0x2a
 8003804:	d015      	beq.n	8003832 <_svfiprintf_r+0xf6>
 8003806:	9a07      	ldr	r2, [sp, #28]
 8003808:	4654      	mov	r4, sl
 800380a:	2000      	movs	r0, #0
 800380c:	f04f 0c0a 	mov.w	ip, #10
 8003810:	4621      	mov	r1, r4
 8003812:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003816:	3b30      	subs	r3, #48	; 0x30
 8003818:	2b09      	cmp	r3, #9
 800381a:	d94d      	bls.n	80038b8 <_svfiprintf_r+0x17c>
 800381c:	b1b0      	cbz	r0, 800384c <_svfiprintf_r+0x110>
 800381e:	9207      	str	r2, [sp, #28]
 8003820:	e014      	b.n	800384c <_svfiprintf_r+0x110>
 8003822:	eba0 0308 	sub.w	r3, r0, r8
 8003826:	fa09 f303 	lsl.w	r3, r9, r3
 800382a:	4313      	orrs	r3, r2
 800382c:	9304      	str	r3, [sp, #16]
 800382e:	46a2      	mov	sl, r4
 8003830:	e7d2      	b.n	80037d8 <_svfiprintf_r+0x9c>
 8003832:	9b03      	ldr	r3, [sp, #12]
 8003834:	1d19      	adds	r1, r3, #4
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	9103      	str	r1, [sp, #12]
 800383a:	2b00      	cmp	r3, #0
 800383c:	bfbb      	ittet	lt
 800383e:	425b      	neglt	r3, r3
 8003840:	f042 0202 	orrlt.w	r2, r2, #2
 8003844:	9307      	strge	r3, [sp, #28]
 8003846:	9307      	strlt	r3, [sp, #28]
 8003848:	bfb8      	it	lt
 800384a:	9204      	strlt	r2, [sp, #16]
 800384c:	7823      	ldrb	r3, [r4, #0]
 800384e:	2b2e      	cmp	r3, #46	; 0x2e
 8003850:	d10c      	bne.n	800386c <_svfiprintf_r+0x130>
 8003852:	7863      	ldrb	r3, [r4, #1]
 8003854:	2b2a      	cmp	r3, #42	; 0x2a
 8003856:	d134      	bne.n	80038c2 <_svfiprintf_r+0x186>
 8003858:	9b03      	ldr	r3, [sp, #12]
 800385a:	1d1a      	adds	r2, r3, #4
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	9203      	str	r2, [sp, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	bfb8      	it	lt
 8003864:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003868:	3402      	adds	r4, #2
 800386a:	9305      	str	r3, [sp, #20]
 800386c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003934 <_svfiprintf_r+0x1f8>
 8003870:	7821      	ldrb	r1, [r4, #0]
 8003872:	2203      	movs	r2, #3
 8003874:	4650      	mov	r0, sl
 8003876:	f7fc fcbb 	bl	80001f0 <memchr>
 800387a:	b138      	cbz	r0, 800388c <_svfiprintf_r+0x150>
 800387c:	9b04      	ldr	r3, [sp, #16]
 800387e:	eba0 000a 	sub.w	r0, r0, sl
 8003882:	2240      	movs	r2, #64	; 0x40
 8003884:	4082      	lsls	r2, r0
 8003886:	4313      	orrs	r3, r2
 8003888:	3401      	adds	r4, #1
 800388a:	9304      	str	r3, [sp, #16]
 800388c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003890:	4825      	ldr	r0, [pc, #148]	; (8003928 <_svfiprintf_r+0x1ec>)
 8003892:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003896:	2206      	movs	r2, #6
 8003898:	f7fc fcaa 	bl	80001f0 <memchr>
 800389c:	2800      	cmp	r0, #0
 800389e:	d038      	beq.n	8003912 <_svfiprintf_r+0x1d6>
 80038a0:	4b22      	ldr	r3, [pc, #136]	; (800392c <_svfiprintf_r+0x1f0>)
 80038a2:	bb1b      	cbnz	r3, 80038ec <_svfiprintf_r+0x1b0>
 80038a4:	9b03      	ldr	r3, [sp, #12]
 80038a6:	3307      	adds	r3, #7
 80038a8:	f023 0307 	bic.w	r3, r3, #7
 80038ac:	3308      	adds	r3, #8
 80038ae:	9303      	str	r3, [sp, #12]
 80038b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038b2:	4433      	add	r3, r6
 80038b4:	9309      	str	r3, [sp, #36]	; 0x24
 80038b6:	e768      	b.n	800378a <_svfiprintf_r+0x4e>
 80038b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80038bc:	460c      	mov	r4, r1
 80038be:	2001      	movs	r0, #1
 80038c0:	e7a6      	b.n	8003810 <_svfiprintf_r+0xd4>
 80038c2:	2300      	movs	r3, #0
 80038c4:	3401      	adds	r4, #1
 80038c6:	9305      	str	r3, [sp, #20]
 80038c8:	4619      	mov	r1, r3
 80038ca:	f04f 0c0a 	mov.w	ip, #10
 80038ce:	4620      	mov	r0, r4
 80038d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038d4:	3a30      	subs	r2, #48	; 0x30
 80038d6:	2a09      	cmp	r2, #9
 80038d8:	d903      	bls.n	80038e2 <_svfiprintf_r+0x1a6>
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0c6      	beq.n	800386c <_svfiprintf_r+0x130>
 80038de:	9105      	str	r1, [sp, #20]
 80038e0:	e7c4      	b.n	800386c <_svfiprintf_r+0x130>
 80038e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80038e6:	4604      	mov	r4, r0
 80038e8:	2301      	movs	r3, #1
 80038ea:	e7f0      	b.n	80038ce <_svfiprintf_r+0x192>
 80038ec:	ab03      	add	r3, sp, #12
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	462a      	mov	r2, r5
 80038f2:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <_svfiprintf_r+0x1f4>)
 80038f4:	a904      	add	r1, sp, #16
 80038f6:	4638      	mov	r0, r7
 80038f8:	f3af 8000 	nop.w
 80038fc:	1c42      	adds	r2, r0, #1
 80038fe:	4606      	mov	r6, r0
 8003900:	d1d6      	bne.n	80038b0 <_svfiprintf_r+0x174>
 8003902:	89ab      	ldrh	r3, [r5, #12]
 8003904:	065b      	lsls	r3, r3, #25
 8003906:	f53f af2d 	bmi.w	8003764 <_svfiprintf_r+0x28>
 800390a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800390c:	b01d      	add	sp, #116	; 0x74
 800390e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003912:	ab03      	add	r3, sp, #12
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	462a      	mov	r2, r5
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <_svfiprintf_r+0x1f4>)
 800391a:	a904      	add	r1, sp, #16
 800391c:	4638      	mov	r0, r7
 800391e:	f000 f879 	bl	8003a14 <_printf_i>
 8003922:	e7eb      	b.n	80038fc <_svfiprintf_r+0x1c0>
 8003924:	08003d70 	.word	0x08003d70
 8003928:	08003d7a 	.word	0x08003d7a
 800392c:	00000000 	.word	0x00000000
 8003930:	08003689 	.word	0x08003689
 8003934:	08003d76 	.word	0x08003d76

08003938 <_printf_common>:
 8003938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800393c:	4616      	mov	r6, r2
 800393e:	4699      	mov	r9, r3
 8003940:	688a      	ldr	r2, [r1, #8]
 8003942:	690b      	ldr	r3, [r1, #16]
 8003944:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003948:	4293      	cmp	r3, r2
 800394a:	bfb8      	it	lt
 800394c:	4613      	movlt	r3, r2
 800394e:	6033      	str	r3, [r6, #0]
 8003950:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003954:	4607      	mov	r7, r0
 8003956:	460c      	mov	r4, r1
 8003958:	b10a      	cbz	r2, 800395e <_printf_common+0x26>
 800395a:	3301      	adds	r3, #1
 800395c:	6033      	str	r3, [r6, #0]
 800395e:	6823      	ldr	r3, [r4, #0]
 8003960:	0699      	lsls	r1, r3, #26
 8003962:	bf42      	ittt	mi
 8003964:	6833      	ldrmi	r3, [r6, #0]
 8003966:	3302      	addmi	r3, #2
 8003968:	6033      	strmi	r3, [r6, #0]
 800396a:	6825      	ldr	r5, [r4, #0]
 800396c:	f015 0506 	ands.w	r5, r5, #6
 8003970:	d106      	bne.n	8003980 <_printf_common+0x48>
 8003972:	f104 0a19 	add.w	sl, r4, #25
 8003976:	68e3      	ldr	r3, [r4, #12]
 8003978:	6832      	ldr	r2, [r6, #0]
 800397a:	1a9b      	subs	r3, r3, r2
 800397c:	42ab      	cmp	r3, r5
 800397e:	dc26      	bgt.n	80039ce <_printf_common+0x96>
 8003980:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003984:	1e13      	subs	r3, r2, #0
 8003986:	6822      	ldr	r2, [r4, #0]
 8003988:	bf18      	it	ne
 800398a:	2301      	movne	r3, #1
 800398c:	0692      	lsls	r2, r2, #26
 800398e:	d42b      	bmi.n	80039e8 <_printf_common+0xb0>
 8003990:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003994:	4649      	mov	r1, r9
 8003996:	4638      	mov	r0, r7
 8003998:	47c0      	blx	r8
 800399a:	3001      	adds	r0, #1
 800399c:	d01e      	beq.n	80039dc <_printf_common+0xa4>
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	6922      	ldr	r2, [r4, #16]
 80039a2:	f003 0306 	and.w	r3, r3, #6
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	bf02      	ittt	eq
 80039aa:	68e5      	ldreq	r5, [r4, #12]
 80039ac:	6833      	ldreq	r3, [r6, #0]
 80039ae:	1aed      	subeq	r5, r5, r3
 80039b0:	68a3      	ldr	r3, [r4, #8]
 80039b2:	bf0c      	ite	eq
 80039b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039b8:	2500      	movne	r5, #0
 80039ba:	4293      	cmp	r3, r2
 80039bc:	bfc4      	itt	gt
 80039be:	1a9b      	subgt	r3, r3, r2
 80039c0:	18ed      	addgt	r5, r5, r3
 80039c2:	2600      	movs	r6, #0
 80039c4:	341a      	adds	r4, #26
 80039c6:	42b5      	cmp	r5, r6
 80039c8:	d11a      	bne.n	8003a00 <_printf_common+0xc8>
 80039ca:	2000      	movs	r0, #0
 80039cc:	e008      	b.n	80039e0 <_printf_common+0xa8>
 80039ce:	2301      	movs	r3, #1
 80039d0:	4652      	mov	r2, sl
 80039d2:	4649      	mov	r1, r9
 80039d4:	4638      	mov	r0, r7
 80039d6:	47c0      	blx	r8
 80039d8:	3001      	adds	r0, #1
 80039da:	d103      	bne.n	80039e4 <_printf_common+0xac>
 80039dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e4:	3501      	adds	r5, #1
 80039e6:	e7c6      	b.n	8003976 <_printf_common+0x3e>
 80039e8:	18e1      	adds	r1, r4, r3
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	2030      	movs	r0, #48	; 0x30
 80039ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039f2:	4422      	add	r2, r4
 80039f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039fc:	3302      	adds	r3, #2
 80039fe:	e7c7      	b.n	8003990 <_printf_common+0x58>
 8003a00:	2301      	movs	r3, #1
 8003a02:	4622      	mov	r2, r4
 8003a04:	4649      	mov	r1, r9
 8003a06:	4638      	mov	r0, r7
 8003a08:	47c0      	blx	r8
 8003a0a:	3001      	adds	r0, #1
 8003a0c:	d0e6      	beq.n	80039dc <_printf_common+0xa4>
 8003a0e:	3601      	adds	r6, #1
 8003a10:	e7d9      	b.n	80039c6 <_printf_common+0x8e>
	...

08003a14 <_printf_i>:
 8003a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a18:	7e0f      	ldrb	r7, [r1, #24]
 8003a1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a1c:	2f78      	cmp	r7, #120	; 0x78
 8003a1e:	4691      	mov	r9, r2
 8003a20:	4680      	mov	r8, r0
 8003a22:	460c      	mov	r4, r1
 8003a24:	469a      	mov	sl, r3
 8003a26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a2a:	d807      	bhi.n	8003a3c <_printf_i+0x28>
 8003a2c:	2f62      	cmp	r7, #98	; 0x62
 8003a2e:	d80a      	bhi.n	8003a46 <_printf_i+0x32>
 8003a30:	2f00      	cmp	r7, #0
 8003a32:	f000 80d4 	beq.w	8003bde <_printf_i+0x1ca>
 8003a36:	2f58      	cmp	r7, #88	; 0x58
 8003a38:	f000 80c0 	beq.w	8003bbc <_printf_i+0x1a8>
 8003a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a44:	e03a      	b.n	8003abc <_printf_i+0xa8>
 8003a46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a4a:	2b15      	cmp	r3, #21
 8003a4c:	d8f6      	bhi.n	8003a3c <_printf_i+0x28>
 8003a4e:	a101      	add	r1, pc, #4	; (adr r1, 8003a54 <_printf_i+0x40>)
 8003a50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a54:	08003aad 	.word	0x08003aad
 8003a58:	08003ac1 	.word	0x08003ac1
 8003a5c:	08003a3d 	.word	0x08003a3d
 8003a60:	08003a3d 	.word	0x08003a3d
 8003a64:	08003a3d 	.word	0x08003a3d
 8003a68:	08003a3d 	.word	0x08003a3d
 8003a6c:	08003ac1 	.word	0x08003ac1
 8003a70:	08003a3d 	.word	0x08003a3d
 8003a74:	08003a3d 	.word	0x08003a3d
 8003a78:	08003a3d 	.word	0x08003a3d
 8003a7c:	08003a3d 	.word	0x08003a3d
 8003a80:	08003bc5 	.word	0x08003bc5
 8003a84:	08003aed 	.word	0x08003aed
 8003a88:	08003b7f 	.word	0x08003b7f
 8003a8c:	08003a3d 	.word	0x08003a3d
 8003a90:	08003a3d 	.word	0x08003a3d
 8003a94:	08003be7 	.word	0x08003be7
 8003a98:	08003a3d 	.word	0x08003a3d
 8003a9c:	08003aed 	.word	0x08003aed
 8003aa0:	08003a3d 	.word	0x08003a3d
 8003aa4:	08003a3d 	.word	0x08003a3d
 8003aa8:	08003b87 	.word	0x08003b87
 8003aac:	682b      	ldr	r3, [r5, #0]
 8003aae:	1d1a      	adds	r2, r3, #4
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	602a      	str	r2, [r5, #0]
 8003ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003abc:	2301      	movs	r3, #1
 8003abe:	e09f      	b.n	8003c00 <_printf_i+0x1ec>
 8003ac0:	6820      	ldr	r0, [r4, #0]
 8003ac2:	682b      	ldr	r3, [r5, #0]
 8003ac4:	0607      	lsls	r7, r0, #24
 8003ac6:	f103 0104 	add.w	r1, r3, #4
 8003aca:	6029      	str	r1, [r5, #0]
 8003acc:	d501      	bpl.n	8003ad2 <_printf_i+0xbe>
 8003ace:	681e      	ldr	r6, [r3, #0]
 8003ad0:	e003      	b.n	8003ada <_printf_i+0xc6>
 8003ad2:	0646      	lsls	r6, r0, #25
 8003ad4:	d5fb      	bpl.n	8003ace <_printf_i+0xba>
 8003ad6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003ada:	2e00      	cmp	r6, #0
 8003adc:	da03      	bge.n	8003ae6 <_printf_i+0xd2>
 8003ade:	232d      	movs	r3, #45	; 0x2d
 8003ae0:	4276      	negs	r6, r6
 8003ae2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ae6:	485a      	ldr	r0, [pc, #360]	; (8003c50 <_printf_i+0x23c>)
 8003ae8:	230a      	movs	r3, #10
 8003aea:	e012      	b.n	8003b12 <_printf_i+0xfe>
 8003aec:	682b      	ldr	r3, [r5, #0]
 8003aee:	6820      	ldr	r0, [r4, #0]
 8003af0:	1d19      	adds	r1, r3, #4
 8003af2:	6029      	str	r1, [r5, #0]
 8003af4:	0605      	lsls	r5, r0, #24
 8003af6:	d501      	bpl.n	8003afc <_printf_i+0xe8>
 8003af8:	681e      	ldr	r6, [r3, #0]
 8003afa:	e002      	b.n	8003b02 <_printf_i+0xee>
 8003afc:	0641      	lsls	r1, r0, #25
 8003afe:	d5fb      	bpl.n	8003af8 <_printf_i+0xe4>
 8003b00:	881e      	ldrh	r6, [r3, #0]
 8003b02:	4853      	ldr	r0, [pc, #332]	; (8003c50 <_printf_i+0x23c>)
 8003b04:	2f6f      	cmp	r7, #111	; 0x6f
 8003b06:	bf0c      	ite	eq
 8003b08:	2308      	moveq	r3, #8
 8003b0a:	230a      	movne	r3, #10
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b12:	6865      	ldr	r5, [r4, #4]
 8003b14:	60a5      	str	r5, [r4, #8]
 8003b16:	2d00      	cmp	r5, #0
 8003b18:	bfa2      	ittt	ge
 8003b1a:	6821      	ldrge	r1, [r4, #0]
 8003b1c:	f021 0104 	bicge.w	r1, r1, #4
 8003b20:	6021      	strge	r1, [r4, #0]
 8003b22:	b90e      	cbnz	r6, 8003b28 <_printf_i+0x114>
 8003b24:	2d00      	cmp	r5, #0
 8003b26:	d04b      	beq.n	8003bc0 <_printf_i+0x1ac>
 8003b28:	4615      	mov	r5, r2
 8003b2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b2e:	fb03 6711 	mls	r7, r3, r1, r6
 8003b32:	5dc7      	ldrb	r7, [r0, r7]
 8003b34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b38:	4637      	mov	r7, r6
 8003b3a:	42bb      	cmp	r3, r7
 8003b3c:	460e      	mov	r6, r1
 8003b3e:	d9f4      	bls.n	8003b2a <_printf_i+0x116>
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d10b      	bne.n	8003b5c <_printf_i+0x148>
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	07de      	lsls	r6, r3, #31
 8003b48:	d508      	bpl.n	8003b5c <_printf_i+0x148>
 8003b4a:	6923      	ldr	r3, [r4, #16]
 8003b4c:	6861      	ldr	r1, [r4, #4]
 8003b4e:	4299      	cmp	r1, r3
 8003b50:	bfde      	ittt	le
 8003b52:	2330      	movle	r3, #48	; 0x30
 8003b54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b58:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003b5c:	1b52      	subs	r2, r2, r5
 8003b5e:	6122      	str	r2, [r4, #16]
 8003b60:	f8cd a000 	str.w	sl, [sp]
 8003b64:	464b      	mov	r3, r9
 8003b66:	aa03      	add	r2, sp, #12
 8003b68:	4621      	mov	r1, r4
 8003b6a:	4640      	mov	r0, r8
 8003b6c:	f7ff fee4 	bl	8003938 <_printf_common>
 8003b70:	3001      	adds	r0, #1
 8003b72:	d14a      	bne.n	8003c0a <_printf_i+0x1f6>
 8003b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b78:	b004      	add	sp, #16
 8003b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b7e:	6823      	ldr	r3, [r4, #0]
 8003b80:	f043 0320 	orr.w	r3, r3, #32
 8003b84:	6023      	str	r3, [r4, #0]
 8003b86:	4833      	ldr	r0, [pc, #204]	; (8003c54 <_printf_i+0x240>)
 8003b88:	2778      	movs	r7, #120	; 0x78
 8003b8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	6829      	ldr	r1, [r5, #0]
 8003b92:	061f      	lsls	r7, r3, #24
 8003b94:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b98:	d402      	bmi.n	8003ba0 <_printf_i+0x18c>
 8003b9a:	065f      	lsls	r7, r3, #25
 8003b9c:	bf48      	it	mi
 8003b9e:	b2b6      	uxthmi	r6, r6
 8003ba0:	07df      	lsls	r7, r3, #31
 8003ba2:	bf48      	it	mi
 8003ba4:	f043 0320 	orrmi.w	r3, r3, #32
 8003ba8:	6029      	str	r1, [r5, #0]
 8003baa:	bf48      	it	mi
 8003bac:	6023      	strmi	r3, [r4, #0]
 8003bae:	b91e      	cbnz	r6, 8003bb8 <_printf_i+0x1a4>
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	f023 0320 	bic.w	r3, r3, #32
 8003bb6:	6023      	str	r3, [r4, #0]
 8003bb8:	2310      	movs	r3, #16
 8003bba:	e7a7      	b.n	8003b0c <_printf_i+0xf8>
 8003bbc:	4824      	ldr	r0, [pc, #144]	; (8003c50 <_printf_i+0x23c>)
 8003bbe:	e7e4      	b.n	8003b8a <_printf_i+0x176>
 8003bc0:	4615      	mov	r5, r2
 8003bc2:	e7bd      	b.n	8003b40 <_printf_i+0x12c>
 8003bc4:	682b      	ldr	r3, [r5, #0]
 8003bc6:	6826      	ldr	r6, [r4, #0]
 8003bc8:	6961      	ldr	r1, [r4, #20]
 8003bca:	1d18      	adds	r0, r3, #4
 8003bcc:	6028      	str	r0, [r5, #0]
 8003bce:	0635      	lsls	r5, r6, #24
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	d501      	bpl.n	8003bd8 <_printf_i+0x1c4>
 8003bd4:	6019      	str	r1, [r3, #0]
 8003bd6:	e002      	b.n	8003bde <_printf_i+0x1ca>
 8003bd8:	0670      	lsls	r0, r6, #25
 8003bda:	d5fb      	bpl.n	8003bd4 <_printf_i+0x1c0>
 8003bdc:	8019      	strh	r1, [r3, #0]
 8003bde:	2300      	movs	r3, #0
 8003be0:	6123      	str	r3, [r4, #16]
 8003be2:	4615      	mov	r5, r2
 8003be4:	e7bc      	b.n	8003b60 <_printf_i+0x14c>
 8003be6:	682b      	ldr	r3, [r5, #0]
 8003be8:	1d1a      	adds	r2, r3, #4
 8003bea:	602a      	str	r2, [r5, #0]
 8003bec:	681d      	ldr	r5, [r3, #0]
 8003bee:	6862      	ldr	r2, [r4, #4]
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	4628      	mov	r0, r5
 8003bf4:	f7fc fafc 	bl	80001f0 <memchr>
 8003bf8:	b108      	cbz	r0, 8003bfe <_printf_i+0x1ea>
 8003bfa:	1b40      	subs	r0, r0, r5
 8003bfc:	6060      	str	r0, [r4, #4]
 8003bfe:	6863      	ldr	r3, [r4, #4]
 8003c00:	6123      	str	r3, [r4, #16]
 8003c02:	2300      	movs	r3, #0
 8003c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c08:	e7aa      	b.n	8003b60 <_printf_i+0x14c>
 8003c0a:	6923      	ldr	r3, [r4, #16]
 8003c0c:	462a      	mov	r2, r5
 8003c0e:	4649      	mov	r1, r9
 8003c10:	4640      	mov	r0, r8
 8003c12:	47d0      	blx	sl
 8003c14:	3001      	adds	r0, #1
 8003c16:	d0ad      	beq.n	8003b74 <_printf_i+0x160>
 8003c18:	6823      	ldr	r3, [r4, #0]
 8003c1a:	079b      	lsls	r3, r3, #30
 8003c1c:	d413      	bmi.n	8003c46 <_printf_i+0x232>
 8003c1e:	68e0      	ldr	r0, [r4, #12]
 8003c20:	9b03      	ldr	r3, [sp, #12]
 8003c22:	4298      	cmp	r0, r3
 8003c24:	bfb8      	it	lt
 8003c26:	4618      	movlt	r0, r3
 8003c28:	e7a6      	b.n	8003b78 <_printf_i+0x164>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	4632      	mov	r2, r6
 8003c2e:	4649      	mov	r1, r9
 8003c30:	4640      	mov	r0, r8
 8003c32:	47d0      	blx	sl
 8003c34:	3001      	adds	r0, #1
 8003c36:	d09d      	beq.n	8003b74 <_printf_i+0x160>
 8003c38:	3501      	adds	r5, #1
 8003c3a:	68e3      	ldr	r3, [r4, #12]
 8003c3c:	9903      	ldr	r1, [sp, #12]
 8003c3e:	1a5b      	subs	r3, r3, r1
 8003c40:	42ab      	cmp	r3, r5
 8003c42:	dcf2      	bgt.n	8003c2a <_printf_i+0x216>
 8003c44:	e7eb      	b.n	8003c1e <_printf_i+0x20a>
 8003c46:	2500      	movs	r5, #0
 8003c48:	f104 0619 	add.w	r6, r4, #25
 8003c4c:	e7f5      	b.n	8003c3a <_printf_i+0x226>
 8003c4e:	bf00      	nop
 8003c50:	08003d81 	.word	0x08003d81
 8003c54:	08003d92 	.word	0x08003d92

08003c58 <memmove>:
 8003c58:	4288      	cmp	r0, r1
 8003c5a:	b510      	push	{r4, lr}
 8003c5c:	eb01 0402 	add.w	r4, r1, r2
 8003c60:	d902      	bls.n	8003c68 <memmove+0x10>
 8003c62:	4284      	cmp	r4, r0
 8003c64:	4623      	mov	r3, r4
 8003c66:	d807      	bhi.n	8003c78 <memmove+0x20>
 8003c68:	1e43      	subs	r3, r0, #1
 8003c6a:	42a1      	cmp	r1, r4
 8003c6c:	d008      	beq.n	8003c80 <memmove+0x28>
 8003c6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c76:	e7f8      	b.n	8003c6a <memmove+0x12>
 8003c78:	4402      	add	r2, r0
 8003c7a:	4601      	mov	r1, r0
 8003c7c:	428a      	cmp	r2, r1
 8003c7e:	d100      	bne.n	8003c82 <memmove+0x2a>
 8003c80:	bd10      	pop	{r4, pc}
 8003c82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c8a:	e7f7      	b.n	8003c7c <memmove+0x24>

08003c8c <_sbrk_r>:
 8003c8c:	b538      	push	{r3, r4, r5, lr}
 8003c8e:	4d06      	ldr	r5, [pc, #24]	; (8003ca8 <_sbrk_r+0x1c>)
 8003c90:	2300      	movs	r3, #0
 8003c92:	4604      	mov	r4, r0
 8003c94:	4608      	mov	r0, r1
 8003c96:	602b      	str	r3, [r5, #0]
 8003c98:	f7fc fca2 	bl	80005e0 <_sbrk>
 8003c9c:	1c43      	adds	r3, r0, #1
 8003c9e:	d102      	bne.n	8003ca6 <_sbrk_r+0x1a>
 8003ca0:	682b      	ldr	r3, [r5, #0]
 8003ca2:	b103      	cbz	r3, 8003ca6 <_sbrk_r+0x1a>
 8003ca4:	6023      	str	r3, [r4, #0]
 8003ca6:	bd38      	pop	{r3, r4, r5, pc}
 8003ca8:	2000024c 	.word	0x2000024c

08003cac <memcpy>:
 8003cac:	440a      	add	r2, r1
 8003cae:	4291      	cmp	r1, r2
 8003cb0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003cb4:	d100      	bne.n	8003cb8 <memcpy+0xc>
 8003cb6:	4770      	bx	lr
 8003cb8:	b510      	push	{r4, lr}
 8003cba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cc2:	4291      	cmp	r1, r2
 8003cc4:	d1f9      	bne.n	8003cba <memcpy+0xe>
 8003cc6:	bd10      	pop	{r4, pc}

08003cc8 <_realloc_r>:
 8003cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ccc:	4680      	mov	r8, r0
 8003cce:	4614      	mov	r4, r2
 8003cd0:	460e      	mov	r6, r1
 8003cd2:	b921      	cbnz	r1, 8003cde <_realloc_r+0x16>
 8003cd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cd8:	4611      	mov	r1, r2
 8003cda:	f7ff bc49 	b.w	8003570 <_malloc_r>
 8003cde:	b92a      	cbnz	r2, 8003cec <_realloc_r+0x24>
 8003ce0:	f7ff fbda 	bl	8003498 <_free_r>
 8003ce4:	4625      	mov	r5, r4
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cec:	f000 f81b 	bl	8003d26 <_malloc_usable_size_r>
 8003cf0:	4284      	cmp	r4, r0
 8003cf2:	4607      	mov	r7, r0
 8003cf4:	d802      	bhi.n	8003cfc <_realloc_r+0x34>
 8003cf6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003cfa:	d812      	bhi.n	8003d22 <_realloc_r+0x5a>
 8003cfc:	4621      	mov	r1, r4
 8003cfe:	4640      	mov	r0, r8
 8003d00:	f7ff fc36 	bl	8003570 <_malloc_r>
 8003d04:	4605      	mov	r5, r0
 8003d06:	2800      	cmp	r0, #0
 8003d08:	d0ed      	beq.n	8003ce6 <_realloc_r+0x1e>
 8003d0a:	42bc      	cmp	r4, r7
 8003d0c:	4622      	mov	r2, r4
 8003d0e:	4631      	mov	r1, r6
 8003d10:	bf28      	it	cs
 8003d12:	463a      	movcs	r2, r7
 8003d14:	f7ff ffca 	bl	8003cac <memcpy>
 8003d18:	4631      	mov	r1, r6
 8003d1a:	4640      	mov	r0, r8
 8003d1c:	f7ff fbbc 	bl	8003498 <_free_r>
 8003d20:	e7e1      	b.n	8003ce6 <_realloc_r+0x1e>
 8003d22:	4635      	mov	r5, r6
 8003d24:	e7df      	b.n	8003ce6 <_realloc_r+0x1e>

08003d26 <_malloc_usable_size_r>:
 8003d26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d2a:	1f18      	subs	r0, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	bfbc      	itt	lt
 8003d30:	580b      	ldrlt	r3, [r1, r0]
 8003d32:	18c0      	addlt	r0, r0, r3
 8003d34:	4770      	bx	lr
	...

08003d38 <_init>:
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3a:	bf00      	nop
 8003d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d3e:	bc08      	pop	{r3}
 8003d40:	469e      	mov	lr, r3
 8003d42:	4770      	bx	lr

08003d44 <_fini>:
 8003d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d46:	bf00      	nop
 8003d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4a:	bc08      	pop	{r3}
 8003d4c:	469e      	mov	lr, r3
 8003d4e:	4770      	bx	lr
