
parking_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000451c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080046cc  080046cc  000146cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800473c  0800473c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800473c  0800473c  0001473c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004744  08004744  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004744  08004744  00014744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004748  08004748  00014748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800474c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000218  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000280  20000280  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c138  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d6a  00000000  00000000  0002c213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d28  00000000  00000000  0002df80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a4d  00000000  00000000  0002eca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003127  00000000  00000000  0002f6f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011f94  00000000  00000000  0003281c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ebada  00000000  00000000  000447b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003d48  00000000  00000000  0013028c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  00133fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080046b4 	.word	0x080046b4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	080046b4 	.word	0x080046b4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a80:	f000 b970 	b.w	8000d64 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	460d      	mov	r5, r1
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	460f      	mov	r7, r1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d14a      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4694      	mov	ip, r2
 8000ab0:	d965      	bls.n	8000b7e <__udivmoddi4+0xe2>
 8000ab2:	fab2 f382 	clz	r3, r2
 8000ab6:	b143      	cbz	r3, 8000aca <__udivmoddi4+0x2e>
 8000ab8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000abc:	f1c3 0220 	rsb	r2, r3, #32
 8000ac0:	409f      	lsls	r7, r3
 8000ac2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ac6:	4317      	orrs	r7, r2
 8000ac8:	409c      	lsls	r4, r3
 8000aca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ace:	fa1f f58c 	uxth.w	r5, ip
 8000ad2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ad6:	0c22      	lsrs	r2, r4, #16
 8000ad8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000adc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ae0:	fb01 f005 	mul.w	r0, r1, r5
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	d90a      	bls.n	8000afe <__udivmoddi4+0x62>
 8000ae8:	eb1c 0202 	adds.w	r2, ip, r2
 8000aec:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000af0:	f080 811c 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000af4:	4290      	cmp	r0, r2
 8000af6:	f240 8119 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000afa:	3902      	subs	r1, #2
 8000afc:	4462      	add	r2, ip
 8000afe:	1a12      	subs	r2, r2, r0
 8000b00:	b2a4      	uxth	r4, r4
 8000b02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b0e:	fb00 f505 	mul.w	r5, r0, r5
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	d90a      	bls.n	8000b2c <__udivmoddi4+0x90>
 8000b16:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b1e:	f080 8107 	bcs.w	8000d30 <__udivmoddi4+0x294>
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	f240 8104 	bls.w	8000d30 <__udivmoddi4+0x294>
 8000b28:	4464      	add	r4, ip
 8000b2a:	3802      	subs	r0, #2
 8000b2c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b30:	1b64      	subs	r4, r4, r5
 8000b32:	2100      	movs	r1, #0
 8000b34:	b11e      	cbz	r6, 8000b3e <__udivmoddi4+0xa2>
 8000b36:	40dc      	lsrs	r4, r3
 8000b38:	2300      	movs	r3, #0
 8000b3a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0xbc>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80ed 	beq.w	8000d26 <__udivmoddi4+0x28a>
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b52:	4608      	mov	r0, r1
 8000b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b58:	fab3 f183 	clz	r1, r3
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	d149      	bne.n	8000bf4 <__udivmoddi4+0x158>
 8000b60:	42ab      	cmp	r3, r5
 8000b62:	d302      	bcc.n	8000b6a <__udivmoddi4+0xce>
 8000b64:	4282      	cmp	r2, r0
 8000b66:	f200 80f8 	bhi.w	8000d5a <__udivmoddi4+0x2be>
 8000b6a:	1a84      	subs	r4, r0, r2
 8000b6c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b70:	2001      	movs	r0, #1
 8000b72:	4617      	mov	r7, r2
 8000b74:	2e00      	cmp	r6, #0
 8000b76:	d0e2      	beq.n	8000b3e <__udivmoddi4+0xa2>
 8000b78:	e9c6 4700 	strd	r4, r7, [r6]
 8000b7c:	e7df      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b7e:	b902      	cbnz	r2, 8000b82 <__udivmoddi4+0xe6>
 8000b80:	deff      	udf	#255	; 0xff
 8000b82:	fab2 f382 	clz	r3, r2
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f040 8090 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8c:	1a8a      	subs	r2, r1, r2
 8000b8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b92:	fa1f fe8c 	uxth.w	lr, ip
 8000b96:	2101      	movs	r1, #1
 8000b98:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b9c:	fb07 2015 	mls	r0, r7, r5, r2
 8000ba0:	0c22      	lsrs	r2, r4, #16
 8000ba2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ba6:	fb0e f005 	mul.w	r0, lr, r5
 8000baa:	4290      	cmp	r0, r2
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bae:	eb1c 0202 	adds.w	r2, ip, r2
 8000bb2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4290      	cmp	r0, r2
 8000bba:	f200 80cb 	bhi.w	8000d54 <__udivmoddi4+0x2b8>
 8000bbe:	4645      	mov	r5, r8
 8000bc0:	1a12      	subs	r2, r2, r0
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bc8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bcc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bd4:	45a6      	cmp	lr, r4
 8000bd6:	d908      	bls.n	8000bea <__udivmoddi4+0x14e>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000be0:	d202      	bcs.n	8000be8 <__udivmoddi4+0x14c>
 8000be2:	45a6      	cmp	lr, r4
 8000be4:	f200 80bb 	bhi.w	8000d5e <__udivmoddi4+0x2c2>
 8000be8:	4610      	mov	r0, r2
 8000bea:	eba4 040e 	sub.w	r4, r4, lr
 8000bee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bf2:	e79f      	b.n	8000b34 <__udivmoddi4+0x98>
 8000bf4:	f1c1 0720 	rsb	r7, r1, #32
 8000bf8:	408b      	lsls	r3, r1
 8000bfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c02:	fa05 f401 	lsl.w	r4, r5, r1
 8000c06:	fa20 f307 	lsr.w	r3, r0, r7
 8000c0a:	40fd      	lsrs	r5, r7
 8000c0c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c10:	4323      	orrs	r3, r4
 8000c12:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c16:	fa1f fe8c 	uxth.w	lr, ip
 8000c1a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c1e:	0c1c      	lsrs	r4, r3, #16
 8000c20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c24:	fb08 f50e 	mul.w	r5, r8, lr
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1c 0404 	adds.w	r4, ip, r4
 8000c38:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c3c:	f080 8088 	bcs.w	8000d50 <__udivmoddi4+0x2b4>
 8000c40:	42a5      	cmp	r5, r4
 8000c42:	f240 8085 	bls.w	8000d50 <__udivmoddi4+0x2b4>
 8000c46:	f1a8 0802 	sub.w	r8, r8, #2
 8000c4a:	4464      	add	r4, ip
 8000c4c:	1b64      	subs	r4, r4, r5
 8000c4e:	b29d      	uxth	r5, r3
 8000c50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c54:	fb09 4413 	mls	r4, r9, r3, r4
 8000c58:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c5c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000c6c:	d26c      	bcs.n	8000d48 <__udivmoddi4+0x2ac>
 8000c6e:	45a6      	cmp	lr, r4
 8000c70:	d96a      	bls.n	8000d48 <__udivmoddi4+0x2ac>
 8000c72:	3b02      	subs	r3, #2
 8000c74:	4464      	add	r4, ip
 8000c76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c7e:	eba4 040e 	sub.w	r4, r4, lr
 8000c82:	42ac      	cmp	r4, r5
 8000c84:	46c8      	mov	r8, r9
 8000c86:	46ae      	mov	lr, r5
 8000c88:	d356      	bcc.n	8000d38 <__udivmoddi4+0x29c>
 8000c8a:	d053      	beq.n	8000d34 <__udivmoddi4+0x298>
 8000c8c:	b156      	cbz	r6, 8000ca4 <__udivmoddi4+0x208>
 8000c8e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c92:	eb64 040e 	sbc.w	r4, r4, lr
 8000c96:	fa04 f707 	lsl.w	r7, r4, r7
 8000c9a:	40ca      	lsrs	r2, r1
 8000c9c:	40cc      	lsrs	r4, r1
 8000c9e:	4317      	orrs	r7, r2
 8000ca0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cac:	f1c3 0120 	rsb	r1, r3, #32
 8000cb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cb8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cbc:	409d      	lsls	r5, r3
 8000cbe:	432a      	orrs	r2, r5
 8000cc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ccc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cd0:	0c11      	lsrs	r1, r2, #16
 8000cd2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cd6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cda:	428d      	cmp	r5, r1
 8000cdc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x258>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000cea:	d22f      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000cec:	428d      	cmp	r5, r1
 8000cee:	d92d      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1b49      	subs	r1, r1, r5
 8000cf6:	b292      	uxth	r2, r2
 8000cf8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cfc:	fb07 1115 	mls	r1, r7, r5, r1
 8000d00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d04:	fb05 f10e 	mul.w	r1, r5, lr
 8000d08:	4291      	cmp	r1, r2
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x282>
 8000d0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d10:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d14:	d216      	bcs.n	8000d44 <__udivmoddi4+0x2a8>
 8000d16:	4291      	cmp	r1, r2
 8000d18:	d914      	bls.n	8000d44 <__udivmoddi4+0x2a8>
 8000d1a:	3d02      	subs	r5, #2
 8000d1c:	4462      	add	r2, ip
 8000d1e:	1a52      	subs	r2, r2, r1
 8000d20:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d24:	e738      	b.n	8000b98 <__udivmoddi4+0xfc>
 8000d26:	4631      	mov	r1, r6
 8000d28:	4630      	mov	r0, r6
 8000d2a:	e708      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000d2c:	4639      	mov	r1, r7
 8000d2e:	e6e6      	b.n	8000afe <__udivmoddi4+0x62>
 8000d30:	4610      	mov	r0, r2
 8000d32:	e6fb      	b.n	8000b2c <__udivmoddi4+0x90>
 8000d34:	4548      	cmp	r0, r9
 8000d36:	d2a9      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d38:	ebb9 0802 	subs.w	r8, r9, r2
 8000d3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d40:	3b01      	subs	r3, #1
 8000d42:	e7a3      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d44:	4645      	mov	r5, r8
 8000d46:	e7ea      	b.n	8000d1e <__udivmoddi4+0x282>
 8000d48:	462b      	mov	r3, r5
 8000d4a:	e794      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4c:	4640      	mov	r0, r8
 8000d4e:	e7d1      	b.n	8000cf4 <__udivmoddi4+0x258>
 8000d50:	46d0      	mov	r8, sl
 8000d52:	e77b      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d54:	3d02      	subs	r5, #2
 8000d56:	4462      	add	r2, ip
 8000d58:	e732      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e70a      	b.n	8000b74 <__udivmoddi4+0xd8>
 8000d5e:	4464      	add	r4, ip
 8000d60:	3802      	subs	r0, #2
 8000d62:	e742      	b.n	8000bea <__udivmoddi4+0x14e>

08000d64 <__aeabi_idiv0>:
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <display_Send4bitsCmd>:
                                            if (x != DISPLAY_OK) { return x; } \
                                        } while(0U)

/* Private functions ---------------------------------------------------------*/
static display_Status_t display_Send4bitsCmd(uint8_t value, display_RsType_t rs_type)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af02      	add	r7, sp, #8
 8000d6e:	4603      	mov	r3, r0
 8000d70:	460a      	mov	r2, r1
 8000d72:	71fb      	strb	r3, [r7, #7]
 8000d74:	4613      	mov	r3, r2
 8000d76:	71bb      	strb	r3, [r7, #6]
    uint8_t cmd = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	73fb      	strb	r3, [r7, #15]
    // E = enable bit
    // B = enable backlight bit
    // R (R/W) = read/write bit
    // T (RS) = data or control bit
    // DDDDEBRT
    HAL_Delay(DELAY_1MS);
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	f000 fd45 	bl	800180c <HAL_Delay>
    cmd = value | BIT_BACKLIGHT | BIT_ENABLE | rs_type;
 8000d82:	79fa      	ldrb	r2, [r7, #7]
 8000d84:	79bb      	ldrb	r3, [r7, #6]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	f043 030c 	orr.w	r3, r3, #12
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	73fb      	strb	r3, [r7, #15]
    CHECK_I2C(display_TransmitData(cmd));
 8000d92:	f107 020f 	add.w	r2, r7, #15
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	214e      	movs	r1, #78	; 0x4e
 8000da0:	4813      	ldr	r0, [pc, #76]	; (8000df0 <display_Send4bitsCmd+0x88>)
 8000da2:	f001 f973 	bl	800208c <HAL_I2C_Master_Transmit>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <display_Send4bitsCmd+0x48>
 8000dac:	2302      	movs	r3, #2
 8000dae:	e01a      	b.n	8000de6 <display_Send4bitsCmd+0x7e>
    HAL_Delay(DELAY_1MS);
 8000db0:	2001      	movs	r0, #1
 8000db2:	f000 fd2b 	bl	800180c <HAL_Delay>
    cmd = value | BIT_BACKLIGHT | rs_type;
 8000db6:	79fa      	ldrb	r2, [r7, #7]
 8000db8:	79bb      	ldrb	r3, [r7, #6]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	f043 0308 	orr.w	r3, r3, #8
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	73fb      	strb	r3, [r7, #15]
    CHECK_I2C(display_TransmitData(cmd));
 8000dc6:	f107 020f 	add.w	r2, r7, #15
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	214e      	movs	r1, #78	; 0x4e
 8000dd4:	4806      	ldr	r0, [pc, #24]	; (8000df0 <display_Send4bitsCmd+0x88>)
 8000dd6:	f001 f959 	bl	800208c <HAL_I2C_Master_Transmit>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <display_Send4bitsCmd+0x7c>
 8000de0:	2302      	movs	r3, #2
 8000de2:	e000      	b.n	8000de6 <display_Send4bitsCmd+0x7e>
    return DISPLAY_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000084 	.word	0x20000084

08000df4 <display_Send8bitsCmd>:

static display_Status_t display_Send8bitsCmd(uint8_t value, display_RsType_t rs_type)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	460a      	mov	r2, r1
 8000dfe:	71fb      	strb	r3, [r7, #7]
 8000e00:	4613      	mov	r3, r2
 8000e02:	71bb      	strb	r3, [r7, #6]
    uint8_t cmd = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	73fb      	strb	r3, [r7, #15]
    cmd = value & HIGH_NIBBLE_MASK;
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f023 030f 	bic.w	r3, r3, #15
 8000e0e:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(display_Send4bitsCmd(cmd, rs_type));
 8000e10:	79ba      	ldrb	r2, [r7, #6]
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	4611      	mov	r1, r2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff ffa6 	bl	8000d68 <display_Send4bitsCmd>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d007      	beq.n	8000e32 <display_Send8bitsCmd+0x3e>
 8000e22:	79ba      	ldrb	r2, [r7, #6]
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff9d 	bl	8000d68 <display_Send4bitsCmd>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	e014      	b.n	8000e5c <display_Send8bitsCmd+0x68>
    cmd = value << HIGH_NIBBLE_SHIFT;
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	011b      	lsls	r3, r3, #4
 8000e36:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(display_Send4bitsCmd(cmd, rs_type));
 8000e38:	79ba      	ldrb	r2, [r7, #6]
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff ff92 	bl	8000d68 <display_Send4bitsCmd>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d007      	beq.n	8000e5a <display_Send8bitsCmd+0x66>
 8000e4a:	79ba      	ldrb	r2, [r7, #6]
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	4611      	mov	r1, r2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff89 	bl	8000d68 <display_Send4bitsCmd>
 8000e56:	4603      	mov	r3, r0
 8000e58:	e000      	b.n	8000e5c <display_Send8bitsCmd+0x68>
    return DISPLAY_OK;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef  GPIO_InitStruct;

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    I2Cx_SCL_GPIO_CLK_ENABLE();
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	4b22      	ldr	r3, [pc, #136]	; (8000efc <HAL_I2C_MspInit+0x98>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	4a21      	ldr	r2, [pc, #132]	; (8000efc <HAL_I2C_MspInit+0x98>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <HAL_I2C_MspInit+0x98>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	693b      	ldr	r3, [r7, #16]
    I2Cx_SDA_GPIO_CLK_ENABLE();
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <HAL_I2C_MspInit+0x98>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	4a1a      	ldr	r2, [pc, #104]	; (8000efc <HAL_I2C_MspInit+0x98>)
 8000e92:	f043 0302 	orr.w	r3, r3, #2
 8000e96:	6313      	str	r3, [r2, #48]	; 0x30
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <HAL_I2C_MspInit+0x98>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]

    /*** Configure the I2C peripheral ***/
    GPIO_InitStruct.Pin = I2Cx_SCL_PIN;
 8000ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eaa:	2312      	movs	r3, #18
 8000eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480f      	ldr	r0, [pc, #60]	; (8000f00 <HAL_I2C_MspInit+0x9c>)
 8000ec2:	f000 fdd9 	bl	8001a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2Cx_SDA_PIN;
 8000ec6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480b      	ldr	r0, [pc, #44]	; (8000f00 <HAL_I2C_MspInit+0x9c>)
 8000ed4:	f000 fdd0 	bl	8001a78 <HAL_GPIO_Init>

    /* Enable I2C clock */
    I2Cx_CLK_ENABLE();
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <HAL_I2C_MspInit+0x98>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	4a06      	ldr	r2, [pc, #24]	; (8000efc <HAL_I2C_MspInit+0x98>)
 8000ee2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ee6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <HAL_I2C_MspInit+0x98>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
}
 8000ef4:	bf00      	nop
 8000ef6:	3728      	adds	r7, #40	; 0x28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020400 	.word	0x40020400

08000f04 <myI2Cx_Init>:

static display_Status_t myI2Cx_Init()
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2Cx;
 8000f08:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <myI2Cx_Init+0x54>)
 8000f0a:	4a14      	ldr	r2, [pc, #80]	; (8000f5c <myI2Cx_Init+0x58>)
 8000f0c:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = I2C_CLOCK_RATE;
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <myI2Cx_Init+0x54>)
 8000f10:	4a13      	ldr	r2, [pc, #76]	; (8000f60 <myI2Cx_Init+0x5c>)
 8000f12:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f14:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <myI2Cx_Init+0x54>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <myI2Cx_Init+0x54>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f20:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <myI2Cx_Init+0x54>)
 8000f22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f26:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <myI2Cx_Init+0x54>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <myI2Cx_Init+0x54>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <myI2Cx_Init+0x54>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <myI2Cx_Init+0x54>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]

    CHECK_I2C(HAL_I2C_Init(&hi2c1));
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <myI2Cx_Init+0x54>)
 8000f42:	f000 ff5f 	bl	8001e04 <HAL_I2C_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <myI2Cx_Init+0x4c>
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	e000      	b.n	8000f52 <myI2Cx_Init+0x4e>

    return DISPLAY_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000084 	.word	0x20000084
 8000f5c:	40005400 	.word	0x40005400
 8000f60:	000186a0 	.word	0x000186a0

08000f64 <display_Init>:

/* Public functions ----------------------------------------------------------*/
display_Status_t display_Init()
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
    CHECK_INTERNAL(myI2Cx_Init());
 8000f68:	f7ff ffcc 	bl	8000f04 <myI2Cx_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <display_Init+0x16>
 8000f72:	f7ff ffc7 	bl	8000f04 <myI2Cx_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	e08b      	b.n	8001092 <display_Init+0x12e>

    // Initialization sequence recommended by the datasheet
    HAL_Delay(DELAY_20MS);
 8000f7a:	2014      	movs	r0, #20
 8000f7c:	f000 fc46 	bl	800180c <HAL_Delay>
    // 0x3c - 0x38
    CHECK_INTERNAL(display_Send4bitsControlCmd(CMD_INIT_1));
 8000f80:	2100      	movs	r1, #0
 8000f82:	2030      	movs	r0, #48	; 0x30
 8000f84:	f7ff fef0 	bl	8000d68 <display_Send4bitsCmd>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d005      	beq.n	8000f9a <display_Init+0x36>
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2030      	movs	r0, #48	; 0x30
 8000f92:	f7ff fee9 	bl	8000d68 <display_Send4bitsCmd>
 8000f96:	4603      	mov	r3, r0
 8000f98:	e07b      	b.n	8001092 <display_Init+0x12e>
    HAL_Delay(DELAY_10MS);
 8000f9a:	200a      	movs	r0, #10
 8000f9c:	f000 fc36 	bl	800180c <HAL_Delay>
    // 0x3c - 0x38
    CHECK_INTERNAL(display_Send4bitsControlCmd(CMD_INIT_1));
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2030      	movs	r0, #48	; 0x30
 8000fa4:	f7ff fee0 	bl	8000d68 <display_Send4bitsCmd>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d005      	beq.n	8000fba <display_Init+0x56>
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2030      	movs	r0, #48	; 0x30
 8000fb2:	f7ff fed9 	bl	8000d68 <display_Send4bitsCmd>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	e06b      	b.n	8001092 <display_Init+0x12e>
    HAL_Delay(DELAY_1MS);
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f000 fc26 	bl	800180c <HAL_Delay>
    // 0x3c - 0x38
    CHECK_INTERNAL(display_Send4bitsControlCmd(CMD_INIT_1));
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2030      	movs	r0, #48	; 0x30
 8000fc4:	f7ff fed0 	bl	8000d68 <display_Send4bitsCmd>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d005      	beq.n	8000fda <display_Init+0x76>
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2030      	movs	r0, #48	; 0x30
 8000fd2:	f7ff fec9 	bl	8000d68 <display_Send4bitsCmd>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	e05b      	b.n	8001092 <display_Init+0x12e>
    // 0x2c - 0x28
    CHECK_INTERNAL(display_Send4bitsControlCmd(CMD_INIT_2));
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2020      	movs	r0, #32
 8000fde:	f7ff fec3 	bl	8000d68 <display_Send4bitsCmd>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d005      	beq.n	8000ff4 <display_Init+0x90>
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2020      	movs	r0, #32
 8000fec:	f7ff febc 	bl	8000d68 <display_Send4bitsCmd>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	e04e      	b.n	8001092 <display_Init+0x12e>

    // Custom settings
    CHECK_INTERNAL(display_Send8bitsControlCmd(CMD_FUNCTION_SET_4B_2L));
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2028      	movs	r0, #40	; 0x28
 8000ff8:	f7ff fefc 	bl	8000df4 <display_Send8bitsCmd>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d005      	beq.n	800100e <display_Init+0xaa>
 8001002:	2100      	movs	r1, #0
 8001004:	2028      	movs	r0, #40	; 0x28
 8001006:	f7ff fef5 	bl	8000df4 <display_Send8bitsCmd>
 800100a:	4603      	mov	r3, r0
 800100c:	e041      	b.n	8001092 <display_Init+0x12e>
    CHECK_INTERNAL(display_Send8bitsControlCmd(INSTR_DISPLAY_CONTROL));
 800100e:	2100      	movs	r1, #0
 8001010:	2008      	movs	r0, #8
 8001012:	f7ff feef 	bl	8000df4 <display_Send8bitsCmd>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d005      	beq.n	8001028 <display_Init+0xc4>
 800101c:	2100      	movs	r1, #0
 800101e:	2008      	movs	r0, #8
 8001020:	f7ff fee8 	bl	8000df4 <display_Send8bitsCmd>
 8001024:	4603      	mov	r3, r0
 8001026:	e034      	b.n	8001092 <display_Init+0x12e>
    CHECK_INTERNAL(display_Send8bitsControlCmd(INSTR_RETURN_HOME));
 8001028:	2100      	movs	r1, #0
 800102a:	2002      	movs	r0, #2
 800102c:	f7ff fee2 	bl	8000df4 <display_Send8bitsCmd>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d005      	beq.n	8001042 <display_Init+0xde>
 8001036:	2100      	movs	r1, #0
 8001038:	2002      	movs	r0, #2
 800103a:	f7ff fedb 	bl	8000df4 <display_Send8bitsCmd>
 800103e:	4603      	mov	r3, r0
 8001040:	e027      	b.n	8001092 <display_Init+0x12e>
    CHECK_INTERNAL(display_Send8bitsControlCmd(CMD_ENTRY_MODE_INCREMENT));
 8001042:	2100      	movs	r1, #0
 8001044:	2006      	movs	r0, #6
 8001046:	f7ff fed5 	bl	8000df4 <display_Send8bitsCmd>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d005      	beq.n	800105c <display_Init+0xf8>
 8001050:	2100      	movs	r1, #0
 8001052:	2006      	movs	r0, #6
 8001054:	f7ff fece 	bl	8000df4 <display_Send8bitsCmd>
 8001058:	4603      	mov	r3, r0
 800105a:	e01a      	b.n	8001092 <display_Init+0x12e>
    CHECK_INTERNAL(display_Send8bitsControlCmd(CMD_TURN_ON_DISPLAY));
 800105c:	2100      	movs	r1, #0
 800105e:	200c      	movs	r0, #12
 8001060:	f7ff fec8 	bl	8000df4 <display_Send8bitsCmd>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d005      	beq.n	8001076 <display_Init+0x112>
 800106a:	2100      	movs	r1, #0
 800106c:	200c      	movs	r0, #12
 800106e:	f7ff fec1 	bl	8000df4 <display_Send8bitsCmd>
 8001072:	4603      	mov	r3, r0
 8001074:	e00d      	b.n	8001092 <display_Init+0x12e>
    CHECK_INTERNAL(display_Send8bitsControlCmd(INSTR_CLR_DISPLAY));
 8001076:	2100      	movs	r1, #0
 8001078:	2001      	movs	r0, #1
 800107a:	f7ff febb 	bl	8000df4 <display_Send8bitsCmd>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d005      	beq.n	8001090 <display_Init+0x12c>
 8001084:	2100      	movs	r1, #0
 8001086:	2001      	movs	r0, #1
 8001088:	f7ff feb4 	bl	8000df4 <display_Send8bitsCmd>
 800108c:	4603      	mov	r3, r0
 800108e:	e000      	b.n	8001092 <display_Init+0x12e>

    return DISPLAY_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	bd80      	pop	{r7, pc}

08001096 <display_Clear>:

display_Status_t display_Clear()
{
 8001096:	b580      	push	{r7, lr}
 8001098:	af00      	add	r7, sp, #0
    CHECK_INTERNAL(display_Send8bitsControlCmd(INSTR_CLR_DISPLAY));
 800109a:	2100      	movs	r1, #0
 800109c:	2001      	movs	r0, #1
 800109e:	f7ff fea9 	bl	8000df4 <display_Send8bitsCmd>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <display_Clear+0x1e>
 80010a8:	2100      	movs	r1, #0
 80010aa:	2001      	movs	r0, #1
 80010ac:	f7ff fea2 	bl	8000df4 <display_Send8bitsCmd>
 80010b0:	4603      	mov	r3, r0
 80010b2:	e003      	b.n	80010bc <display_Clear+0x26>
    HAL_Delay(DELAY_2MS);
 80010b4:	2002      	movs	r0, #2
 80010b6:	f000 fba9 	bl	800180c <HAL_Delay>
    return DISPLAY_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	bd80      	pop	{r7, pc}

080010c0 <display_PrintChar>:

display_Status_t display_PrintChar(uint8_t ch)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
    CHECK_INTERNAL(display_Send8bitsDataCmd(ch));
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2101      	movs	r1, #1
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fe90 	bl	8000df4 <display_Send8bitsCmd>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d006      	beq.n	80010e8 <display_PrintChar+0x28>
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2101      	movs	r1, #1
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fe88 	bl	8000df4 <display_Send8bitsCmd>
 80010e4:	4603      	mov	r3, r0
 80010e6:	e000      	b.n	80010ea <display_PrintChar+0x2a>
    return DISPLAY_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <display_PrintStringInTopLine>:

display_Status_t display_PrintStringInTopLine(uint8_t * buf)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b084      	sub	sp, #16
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
    CHECK_NULL(buf);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <display_PrintStringInTopLine+0x12>
 8001100:	2301      	movs	r3, #1
 8001102:	e038      	b.n	8001176 <display_PrintStringInTopLine+0x84>

    CHECK_INTERNAL(display_Clear());
 8001104:	f7ff ffc7 	bl	8001096 <display_Clear>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <display_PrintStringInTopLine+0x24>
 800110e:	f7ff ffc2 	bl	8001096 <display_Clear>
 8001112:	4603      	mov	r3, r0
 8001114:	e02f      	b.n	8001176 <display_PrintStringInTopLine+0x84>
    CHECK_INTERNAL(display_Send8bitsControlCmd(CMD_SET_CURSOR_LINE1));
 8001116:	2100      	movs	r1, #0
 8001118:	2080      	movs	r0, #128	; 0x80
 800111a:	f7ff fe6b 	bl	8000df4 <display_Send8bitsCmd>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <display_PrintStringInTopLine+0x3e>
 8001124:	2100      	movs	r1, #0
 8001126:	2080      	movs	r0, #128	; 0x80
 8001128:	f7ff fe64 	bl	8000df4 <display_Send8bitsCmd>
 800112c:	4603      	mov	r3, r0
 800112e:	e022      	b.n	8001176 <display_PrintStringInTopLine+0x84>

    for (int i = 0; i < MAX_CHAR_PER_LINE && buf[i] != '\0'; i++) {
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	e015      	b.n	8001162 <display_PrintStringInTopLine+0x70>
        CHECK_INTERNAL(display_PrintChar(buf[i]));
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	4413      	add	r3, r2
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ffbe 	bl	80010c0 <display_PrintChar>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d008      	beq.n	800115c <display_PrintStringInTopLine+0x6a>
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	4413      	add	r3, r2
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ffb4 	bl	80010c0 <display_PrintChar>
 8001158:	4603      	mov	r3, r0
 800115a:	e00c      	b.n	8001176 <display_PrintStringInTopLine+0x84>
    for (int i = 0; i < MAX_CHAR_PER_LINE && buf[i] != '\0'; i++) {
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3301      	adds	r3, #1
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2b0f      	cmp	r3, #15
 8001166:	dc05      	bgt.n	8001174 <display_PrintStringInTopLine+0x82>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1e0      	bne.n	8001136 <display_PrintStringInTopLine+0x44>
    }

    return DISPLAY_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <display_PrintStringInBottomLine>:

display_Status_t display_PrintStringInBottomLine(uint8_t * buf)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b084      	sub	sp, #16
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
    CHECK_NULL(buf);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <display_PrintStringInBottomLine+0x12>
 800118c:	2301      	movs	r3, #1
 800118e:	e038      	b.n	8001202 <display_PrintStringInBottomLine+0x84>

    CHECK_INTERNAL(display_Clear());
 8001190:	f7ff ff81 	bl	8001096 <display_Clear>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <display_PrintStringInBottomLine+0x24>
 800119a:	f7ff ff7c 	bl	8001096 <display_Clear>
 800119e:	4603      	mov	r3, r0
 80011a0:	e02f      	b.n	8001202 <display_PrintStringInBottomLine+0x84>
    CHECK_INTERNAL(display_Send8bitsControlCmd(CMD_SET_CURSOR_LINE2));
 80011a2:	2100      	movs	r1, #0
 80011a4:	20c0      	movs	r0, #192	; 0xc0
 80011a6:	f7ff fe25 	bl	8000df4 <display_Send8bitsCmd>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d005      	beq.n	80011bc <display_PrintStringInBottomLine+0x3e>
 80011b0:	2100      	movs	r1, #0
 80011b2:	20c0      	movs	r0, #192	; 0xc0
 80011b4:	f7ff fe1e 	bl	8000df4 <display_Send8bitsCmd>
 80011b8:	4603      	mov	r3, r0
 80011ba:	e022      	b.n	8001202 <display_PrintStringInBottomLine+0x84>

    for (int i = 0; i < MAX_CHAR_PER_LINE && buf[i] != '\0'; i++) {
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	e015      	b.n	80011ee <display_PrintStringInBottomLine+0x70>
        CHECK_INTERNAL(display_PrintChar(buf[i]));
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	4413      	add	r3, r2
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ff78 	bl	80010c0 <display_PrintChar>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d008      	beq.n	80011e8 <display_PrintStringInBottomLine+0x6a>
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	4413      	add	r3, r2
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ff6e 	bl	80010c0 <display_PrintChar>
 80011e4:	4603      	mov	r3, r0
 80011e6:	e00c      	b.n	8001202 <display_PrintStringInBottomLine+0x84>
    for (int i = 0; i < MAX_CHAR_PER_LINE && buf[i] != '\0'; i++) {
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	3301      	adds	r3, #1
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2b0f      	cmp	r3, #15
 80011f2:	dc05      	bgt.n	8001200 <display_PrintStringInBottomLine+0x82>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	4413      	add	r3, r2
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1e0      	bne.n	80011c2 <display_PrintStringInBottomLine+0x44>
    }

    return DISPLAY_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	0000      	movs	r0, r0
 800120c:	0000      	movs	r0, r0
	...

08001210 <HAL_TIM_IC_CaptureCallback>:
uint32_t Difference = 0;
uint8_t Is_First_Captured = 0;  // is the first value captured ?
uint8_t Distance  = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	uint8_t partial = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	73fb      	strb	r3, [r7, #15]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	7f1b      	ldrb	r3, [r3, #28]
 8001220:	2b01      	cmp	r3, #1
 8001222:	f040 8084 	bne.w	800132e <HAL_TIM_IC_CaptureCallback+0x11e>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8001226:	4b46      	ldr	r3, [pc, #280]	; (8001340 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d11a      	bne.n	8001264 <HAL_TIM_IC_CaptureCallback+0x54>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 800122e:	2100      	movs	r1, #0
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f002 f9d9 	bl	80035e8 <HAL_TIM_ReadCapturedValue>
 8001236:	4603      	mov	r3, r0
 8001238:	4a42      	ldr	r2, [pc, #264]	; (8001344 <HAL_TIM_IC_CaptureCallback+0x134>)
 800123a:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 800123c:	4b40      	ldr	r3, [pc, #256]	; (8001340 <HAL_TIM_IC_CaptureCallback+0x130>)
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6a1a      	ldr	r2, [r3, #32]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 020a 	bic.w	r2, r2, #10
 8001250:	621a      	str	r2, [r3, #32]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6a1a      	ldr	r2, [r3, #32]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f042 0202 	orr.w	r2, r2, #2
 8001260:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8001262:	e064      	b.n	800132e <HAL_TIM_IC_CaptureCallback+0x11e>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001264:	4b36      	ldr	r3, [pc, #216]	; (8001340 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d160      	bne.n	800132e <HAL_TIM_IC_CaptureCallback+0x11e>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 800126c:	2100      	movs	r1, #0
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f002 f9ba 	bl	80035e8 <HAL_TIM_ReadCapturedValue>
 8001274:	4603      	mov	r3, r0
 8001276:	4a34      	ldr	r2, [pc, #208]	; (8001348 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001278:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2200      	movs	r2, #0
 8001280:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8001282:	4b31      	ldr	r3, [pc, #196]	; (8001348 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	d907      	bls.n	800129e <HAL_TIM_IC_CaptureCallback+0x8e>
				Difference = IC_Val2-IC_Val1;
 800128e:	4b2e      	ldr	r3, [pc, #184]	; (8001348 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	4b2c      	ldr	r3, [pc, #176]	; (8001344 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	4a2c      	ldr	r2, [pc, #176]	; (800134c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	e00f      	b.n	80012be <HAL_TIM_IC_CaptureCallback+0xae>
			else if (IC_Val1 > IC_Val2)
 800129e:	4b29      	ldr	r3, [pc, #164]	; (8001344 <HAL_TIM_IC_CaptureCallback+0x134>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4b29      	ldr	r3, [pc, #164]	; (8001348 <HAL_TIM_IC_CaptureCallback+0x138>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d909      	bls.n	80012be <HAL_TIM_IC_CaptureCallback+0xae>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 80012aa:	4b27      	ldr	r3, [pc, #156]	; (8001348 <HAL_TIM_IC_CaptureCallback+0x138>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	4b25      	ldr	r3, [pc, #148]	; (8001344 <HAL_TIM_IC_CaptureCallback+0x134>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80012b8:	33ff      	adds	r3, #255	; 0xff
 80012ba:	4a24      	ldr	r2, [pc, #144]	; (800134c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80012bc:	6013      	str	r3, [r2, #0]
			partial = Difference * .034/2;
 80012be:	4b23      	ldr	r3, [pc, #140]	; (800134c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f926 	bl	8000514 <__aeabi_ui2d>
 80012c8:	a31b      	add	r3, pc, #108	; (adr r3, 8001338 <HAL_TIM_IC_CaptureCallback+0x128>)
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	f7ff f99b 	bl	8000608 <__aeabi_dmul>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012e2:	f7ff fabb 	bl	800085c <__aeabi_ddiv>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	f7ff fb9d 	bl	8000a2c <__aeabi_d2uiz>
 80012f2:	4603      	mov	r3, r0
 80012f4:	73fb      	strb	r3, [r7, #15]
			Distance = partial;
 80012f6:	4a16      	ldr	r2, [pc, #88]	; (8001350 <HAL_TIM_IC_CaptureCallback+0x140>)
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	7013      	strb	r3, [r2, #0]
			Is_First_Captured = 0; // set it back to false
 80012fc:	4b10      	ldr	r3, [pc, #64]	; (8001340 <HAL_TIM_IC_CaptureCallback+0x130>)
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6a1a      	ldr	r2, [r3, #32]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 020a 	bic.w	r2, r2, #10
 8001310:	621a      	str	r2, [r3, #32]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6a12      	ldr	r2, [r2, #32]
 800131c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0202 	bic.w	r2, r2, #2
 800132c:	60da      	str	r2, [r3, #12]
}
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	b020c49c 	.word	0xb020c49c
 800133c:	3fa16872 	.word	0x3fa16872
 8001340:	2000012c 	.word	0x2000012c
 8001344:	20000120 	.word	0x20000120
 8001348:	20000124 	.word	0x20000124
 800134c:	20000128 	.word	0x20000128
 8001350:	2000012d 	.word	0x2000012d
 8001354:	200000d8 	.word	0x200000d8

08001358 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
    if(htim_ic->Instance==hcsr04_TIMER)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a1d      	ldr	r2, [pc, #116]	; (80013ec <HAL_TIM_IC_MspInit+0x94>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d134      	bne.n	80013e4 <HAL_TIM_IC_MspInit+0x8c>
    {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_TIM1_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <HAL_TIM_IC_MspInit+0x98>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	4a1b      	ldr	r2, [pc, #108]	; (80013f0 <HAL_TIM_IC_MspInit+0x98>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6453      	str	r3, [r2, #68]	; 0x44
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <HAL_TIM_IC_MspInit+0x98>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]

        hcsr04_ECHO_GPIO_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_TIM_IC_MspInit+0x98>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <HAL_TIM_IC_MspInit+0x98>)
 80013a0:	f043 0310 	orr.w	r3, r3, #16
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_TIM_IC_MspInit+0x98>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0310 	and.w	r3, r3, #16
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
        /**TIM1 GPIO Configuration
        PE9     ------> TIM1_CH1
        */
        GPIO_InitStruct.Pin = hcsr04_ECHO_PIN;
 80013b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b6:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013c4:	2301      	movs	r3, #1
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(hcsr04_ECHO_GPIO_PORT, &GPIO_InitStruct);
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	4619      	mov	r1, r3
 80013ce:	4809      	ldr	r0, [pc, #36]	; (80013f4 <HAL_TIM_IC_MspInit+0x9c>)
 80013d0:	f000 fb52 	bl	8001a78 <HAL_GPIO_Init>

        /* TIM1 interrupt Init */
        HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2100      	movs	r1, #0
 80013d8:	201b      	movs	r0, #27
 80013da:	f000 fb16 	bl	8001a0a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80013de:	201b      	movs	r0, #27
 80013e0:	f000 fb2f 	bl	8001a42 <HAL_NVIC_EnableIRQ>
    }
}
 80013e4:	bf00      	nop
 80013e6:	3728      	adds	r7, #40	; 0x28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40010000 	.word	0x40010000
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40021000 	.word	0x40021000

080013f8 <myTIM_Init>:

hcsr04_Status_t myTIM_Init()
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
    TIM_IC_InitTypeDef sConfigIC = {0};
 8001408:	463b      	mov	r3, r7
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]

    htim1.Instance = hcsr04_TIMER;
 8001414:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <myTIM_Init+0xa8>)
 8001416:	4a23      	ldr	r2, [pc, #140]	; (80014a4 <myTIM_Init+0xac>)
 8001418:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 168-1;
 800141a:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <myTIM_Init+0xa8>)
 800141c:	22a7      	movs	r2, #167	; 0xa7
 800141e:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001420:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <myTIM_Init+0xa8>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 0xffff-1;
 8001426:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <myTIM_Init+0xa8>)
 8001428:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800142c:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142e:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <myTIM_Init+0xa8>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 8001434:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <myTIM_Init+0xa8>)
 8001436:	2200      	movs	r2, #0
 8001438:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143a:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <myTIM_Init+0xa8>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
    CHECK_HAL(HAL_TIM_IC_Init(&htim1));
 8001440:	4817      	ldr	r0, [pc, #92]	; (80014a0 <myTIM_Init+0xa8>)
 8001442:	f001 fdb5 	bl	8002fb0 <HAL_TIM_IC_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <myTIM_Init+0x58>
 800144c:	2302      	movs	r3, #2
 800144e:	e022      	b.n	8001496 <myTIM_Init+0x9e>

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
    CHECK_HAL(HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig));
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	4619      	mov	r1, r3
 800145e:	4810      	ldr	r0, [pc, #64]	; (80014a0 <myTIM_Init+0xa8>)
 8001460:	f002 fb1e 	bl	8003aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <myTIM_Init+0x76>
 800146a:	2302      	movs	r3, #2
 800146c:	e013      	b.n	8001496 <myTIM_Init+0x9e>

    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
    sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001472:	2301      	movs	r3, #1
 8001474:	607b      	str	r3, [r7, #4]
    sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
    sConfigIC.ICFilter = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
    CHECK_HAL(HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1));
 800147e:	463b      	mov	r3, r7
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	4806      	ldr	r0, [pc, #24]	; (80014a0 <myTIM_Init+0xa8>)
 8001486:	f002 f813 	bl	80034b0 <HAL_TIM_IC_ConfigChannel>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <myTIM_Init+0x9c>
 8001490:	2302      	movs	r3, #2
 8001492:	e000      	b.n	8001496 <myTIM_Init+0x9e>

    return HCSR04_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200000d8 	.word	0x200000d8
 80014a4:	40010000 	.word	0x40010000

080014a8 <myGPIO_Init>:

hcsr04_Status_t myGPIO_Init()
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]

    hcsr04_TRIG_GPIO_CLK_ENABLE();
 80014bc:	2300      	movs	r3, #0
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <myGPIO_Init+0x60>)
 80014c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c4:	4a10      	ldr	r2, [pc, #64]	; (8001508 <myGPIO_Init+0x60>)
 80014c6:	f043 0310 	orr.w	r3, r3, #16
 80014ca:	6313      	str	r3, [r2, #48]	; 0x30
 80014cc:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <myGPIO_Init+0x60>)
 80014ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d0:	f003 0310 	and.w	r3, r3, #16
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(hcsr04_TRIG_GPIO_PORT, hcsr04_TRIG_PIN, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	2104      	movs	r1, #4
 80014dc:	480b      	ldr	r0, [pc, #44]	; (800150c <myGPIO_Init+0x64>)
 80014de:	f000 fc77 	bl	8001dd0 <HAL_GPIO_WritePin>

    /*Configure TRIG GPIO pin : PE2 */
    GPIO_InitStruct.Pin = hcsr04_TRIG_PIN;
 80014e2:	2304      	movs	r3, #4
 80014e4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(hcsr04_TRIG_GPIO_PORT, &GPIO_InitStruct);
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	4619      	mov	r1, r3
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <myGPIO_Init+0x64>)
 80014f8:	f000 fabe 	bl	8001a78 <HAL_GPIO_Init>

    return HCSR04_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	40021000 	.word	0x40021000

08001510 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001514:	4802      	ldr	r0, [pc, #8]	; (8001520 <TIM1_CC_IRQHandler+0x10>)
 8001516:	f001 fec3 	bl	80032a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200000d8 	.word	0x200000d8

08001524 <delay>:

void delay(uint16_t time)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <delay+0x30>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2200      	movs	r2, #0
 8001534:	625a      	str	r2, [r3, #36]	; 0x24
    while(__HAL_TIM_GET_COUNTER(&htim1) < time);
 8001536:	bf00      	nop
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <delay+0x30>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	429a      	cmp	r2, r3
 8001542:	d3f9      	bcc.n	8001538 <delay+0x14>
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	200000d8 	.word	0x200000d8

08001558 <hcsr04_Init>:

/* Public functions ----------------------------------------------------------*/
hcsr04_Status_t hcsr04_Init()
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
    myGPIO_Init();
 800155c:	f7ff ffa4 	bl	80014a8 <myGPIO_Init>
    myTIM_Init();
 8001560:	f7ff ff4a 	bl	80013f8 <myTIM_Init>
    HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001564:	2100      	movs	r1, #0
 8001566:	4803      	ldr	r0, [pc, #12]	; (8001574 <hcsr04_Init+0x1c>)
 8001568:	f001 fd72 	bl	8003050 <HAL_TIM_IC_Start_IT>
    return HCSR04_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200000d8 	.word	0x200000d8

08001578 <hcsr04_StartMeasure>:

hcsr04_Status_t hcsr04_StartMeasure()
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(hcsr04_TRIG_GPIO_PORT, hcsr04_TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800157c:	2201      	movs	r2, #1
 800157e:	2104      	movs	r1, #4
 8001580:	480a      	ldr	r0, [pc, #40]	; (80015ac <hcsr04_StartMeasure+0x34>)
 8001582:	f000 fc25 	bl	8001dd0 <HAL_GPIO_WritePin>
    delay(10);  // wait for 10 us
 8001586:	200a      	movs	r0, #10
 8001588:	f7ff ffcc 	bl	8001524 <delay>
    HAL_GPIO_WritePin(hcsr04_TRIG_GPIO_PORT, hcsr04_TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 800158c:	2200      	movs	r2, #0
 800158e:	2104      	movs	r1, #4
 8001590:	4806      	ldr	r0, [pc, #24]	; (80015ac <hcsr04_StartMeasure+0x34>)
 8001592:	f000 fc1d 	bl	8001dd0 <HAL_GPIO_WritePin>

    __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <hcsr04_StartMeasure+0x38>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <hcsr04_StartMeasure+0x38>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f042 0202 	orr.w	r2, r2, #2
 80015a4:	60da      	str	r2, [r3, #12]
    return HCSR04_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40021000 	.word	0x40021000
 80015b0:	200000d8 	.word	0x200000d8

080015b4 <hcsr04_GetDistance>:

uint8_t hcsr04_GetDistance()
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
    return Distance;
 80015b8:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <hcsr04_GetDistance+0x14>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	2000012d 	.word	0x2000012d

080015cc <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <BSP_LED_On+0x2c>)
 80015da:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	4a06      	ldr	r2, [pc, #24]	; (80015fc <BSP_LED_On+0x30>)
 80015e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015e6:	2201      	movs	r2, #1
 80015e8:	4619      	mov	r1, r3
 80015ea:	f000 fbf1 	bl	8001dd0 <HAL_GPIO_WritePin>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000000 	.word	0x20000000
 80015fc:	080046dc 	.word	0x080046dc

08001600 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001604:	4b16      	ldr	r3, [pc, #88]	; (8001660 <SystemInit+0x60>)
 8001606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800160a:	4a15      	ldr	r2, [pc, #84]	; (8001660 <SystemInit+0x60>)
 800160c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <SystemInit+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a12      	ldr	r2, [pc, #72]	; (8001664 <SystemInit+0x64>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001620:	4b10      	ldr	r3, [pc, #64]	; (8001664 <SystemInit+0x64>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <SystemInit+0x64>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <SystemInit+0x64>)
 800162c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001634:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <SystemInit+0x64>)
 8001638:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <SystemInit+0x68>)
 800163a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <SystemInit+0x64>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a08      	ldr	r2, [pc, #32]	; (8001664 <SystemInit+0x64>)
 8001642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001646:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <SystemInit+0x64>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800164e:	4b04      	ldr	r3, [pc, #16]	; (8001660 <SystemInit+0x60>)
 8001650:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001654:	609a      	str	r2, [r3, #8]
#endif
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000ed00 	.word	0xe000ed00
 8001664:	40023800 	.word	0x40023800
 8001668:	24003010 	.word	0x24003010

0800166c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800167e:	e7fe      	b.n	800167e <HardFault_Handler+0x4>

08001680 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001684:	e7fe      	b.n	8001684 <MemManage_Handler+0x4>

08001686 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800168a:	e7fe      	b.n	800168a <BusFault_Handler+0x4>

0800168c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001690:	e7fe      	b.n	8001690 <UsageFault_Handler+0x4>

08001692 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80016c0:	f000 f884 	bl	80017cc <HAL_IncTick>
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d0:	4a14      	ldr	r2, [pc, #80]	; (8001724 <_sbrk+0x5c>)
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <_sbrk+0x60>)
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <_sbrk+0x64>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	; (8001730 <_sbrk+0x68>)
 80016e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <_sbrk+0x64>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d207      	bcs.n	8001708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f8:	f002 fb60 	bl	8003dbc <__errno>
 80016fc:	4603      	mov	r3, r0
 80016fe:	220c      	movs	r2, #12
 8001700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001706:	e009      	b.n	800171c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <_sbrk+0x64>)
 8001718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171a:	68fb      	ldr	r3, [r7, #12]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20030000 	.word	0x20030000
 8001728:	00000400 	.word	0x00000400
 800172c:	20000130 	.word	0x20000130
 8001730:	20000280 	.word	0x20000280

08001734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_Init+0x34>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <HAL_Init+0x34>)
 800173e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001742:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <HAL_Init+0x34>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a07      	ldr	r2, [pc, #28]	; (8001768 <HAL_Init+0x34>)
 800174a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001750:	2003      	movs	r0, #3
 8001752:	f000 f94f 	bl	80019f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001756:	200f      	movs	r0, #15
 8001758:	f000 f808 	bl	800176c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800175c:	f000 ff9d 	bl	800269a <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023c00 	.word	0x40023c00

0800176c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_InitTick+0x54>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_InitTick+0x58>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001782:	fbb3 f3f1 	udiv	r3, r3, r1
 8001786:	fbb2 f3f3 	udiv	r3, r2, r3
 800178a:	4618      	mov	r0, r3
 800178c:	f000 f967 	bl	8001a5e <HAL_SYSTICK_Config>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e00e      	b.n	80017b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b0f      	cmp	r3, #15
 800179e:	d80a      	bhi.n	80017b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a0:	2200      	movs	r2, #0
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017a8:	f000 f92f 	bl	8001a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017ac:	4a06      	ldr	r2, [pc, #24]	; (80017c8 <HAL_InitTick+0x5c>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	e000      	b.n	80017b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	2000000c 	.word	0x2000000c
 80017c4:	20000014 	.word	0x20000014
 80017c8:	20000010 	.word	0x20000010

080017cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_IncTick+0x20>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_IncTick+0x24>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <HAL_IncTick+0x24>)
 80017de:	6013      	str	r3, [r2, #0]
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000014 	.word	0x20000014
 80017f0:	20000134 	.word	0x20000134

080017f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return uwTick;
 80017f8:	4b03      	ldr	r3, [pc, #12]	; (8001808 <HAL_GetTick+0x14>)
 80017fa:	681b      	ldr	r3, [r3, #0]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000134 	.word	0x20000134

0800180c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001814:	f7ff ffee 	bl	80017f4 <HAL_GetTick>
 8001818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001824:	d005      	beq.n	8001832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001826:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <HAL_Delay+0x44>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	461a      	mov	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4413      	add	r3, r2
 8001830:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001832:	bf00      	nop
 8001834:	f7ff ffde 	bl	80017f4 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	429a      	cmp	r2, r3
 8001842:	d8f7      	bhi.n	8001834 <HAL_Delay+0x28>
  {
  }
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000014 	.word	0x20000014

08001854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001870:	4013      	ands	r3, r2
 8001872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800187c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001886:	4a04      	ldr	r2, [pc, #16]	; (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	60d3      	str	r3, [r2, #12]
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a0:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <__NVIC_GetPriorityGrouping+0x18>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	0a1b      	lsrs	r3, r3, #8
 80018a6:	f003 0307 	and.w	r3, r3, #7
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	db0b      	blt.n	80018e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	f003 021f 	and.w	r2, r3, #31
 80018d0:	4907      	ldr	r1, [pc, #28]	; (80018f0 <__NVIC_EnableIRQ+0x38>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	095b      	lsrs	r3, r3, #5
 80018d8:	2001      	movs	r0, #1
 80018da:	fa00 f202 	lsl.w	r2, r0, r2
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000e100 	.word	0xe000e100

080018f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	2b00      	cmp	r3, #0
 8001906:	db0a      	blt.n	800191e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	490c      	ldr	r1, [pc, #48]	; (8001940 <__NVIC_SetPriority+0x4c>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	0112      	lsls	r2, r2, #4
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	440b      	add	r3, r1
 8001918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800191c:	e00a      	b.n	8001934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4908      	ldr	r1, [pc, #32]	; (8001944 <__NVIC_SetPriority+0x50>)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	3b04      	subs	r3, #4
 800192c:	0112      	lsls	r2, r2, #4
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	440b      	add	r3, r1
 8001932:	761a      	strb	r2, [r3, #24]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000e100 	.word	0xe000e100
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	; 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f1c3 0307 	rsb	r3, r3, #7
 8001962:	2b04      	cmp	r3, #4
 8001964:	bf28      	it	cs
 8001966:	2304      	movcs	r3, #4
 8001968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3304      	adds	r3, #4
 800196e:	2b06      	cmp	r3, #6
 8001970:	d902      	bls.n	8001978 <NVIC_EncodePriority+0x30>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3b03      	subs	r3, #3
 8001976:	e000      	b.n	800197a <NVIC_EncodePriority+0x32>
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	401a      	ands	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001990:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	43d9      	mvns	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	4313      	orrs	r3, r2
         );
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3724      	adds	r7, #36	; 0x24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c0:	d301      	bcc.n	80019c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00f      	b.n	80019e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <SysTick_Config+0x40>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ce:	210f      	movs	r1, #15
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019d4:	f7ff ff8e 	bl	80018f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <SysTick_Config+0x40>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019de:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <SysTick_Config+0x40>)
 80019e0:	2207      	movs	r2, #7
 80019e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	e000e010 	.word	0xe000e010

080019f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff29 	bl	8001854 <__NVIC_SetPriorityGrouping>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a1c:	f7ff ff3e 	bl	800189c <__NVIC_GetPriorityGrouping>
 8001a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	6978      	ldr	r0, [r7, #20]
 8001a28:	f7ff ff8e 	bl	8001948 <NVIC_EncodePriority>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff5d 	bl	80018f4 <__NVIC_SetPriority>
}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff31 	bl	80018b8 <__NVIC_EnableIRQ>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffa2 	bl	80019b0 <SysTick_Config>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	e177      	b.n	8001d84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a94:	2201      	movs	r2, #1
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	f040 8166 	bne.w	8001d7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d005      	beq.n	8001aca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d130      	bne.n	8001b2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b00:	2201      	movs	r2, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	f003 0201 	and.w	r2, r3, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d017      	beq.n	8001b68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	2203      	movs	r2, #3
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d123      	bne.n	8001bbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	08da      	lsrs	r2, r3, #3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3208      	adds	r2, #8
 8001b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	220f      	movs	r2, #15
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	691a      	ldr	r2, [r3, #16]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	08da      	lsrs	r2, r3, #3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3208      	adds	r2, #8
 8001bb6:	69b9      	ldr	r1, [r7, #24]
 8001bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0203 	and.w	r2, r3, #3
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 80c0 	beq.w	8001d7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b66      	ldr	r3, [pc, #408]	; (8001d9c <HAL_GPIO_Init+0x324>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	4a65      	ldr	r2, [pc, #404]	; (8001d9c <HAL_GPIO_Init+0x324>)
 8001c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0e:	4b63      	ldr	r3, [pc, #396]	; (8001d9c <HAL_GPIO_Init+0x324>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c1a:	4a61      	ldr	r2, [pc, #388]	; (8001da0 <HAL_GPIO_Init+0x328>)
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	089b      	lsrs	r3, r3, #2
 8001c20:	3302      	adds	r3, #2
 8001c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	220f      	movs	r2, #15
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a58      	ldr	r2, [pc, #352]	; (8001da4 <HAL_GPIO_Init+0x32c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d037      	beq.n	8001cb6 <HAL_GPIO_Init+0x23e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a57      	ldr	r2, [pc, #348]	; (8001da8 <HAL_GPIO_Init+0x330>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d031      	beq.n	8001cb2 <HAL_GPIO_Init+0x23a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a56      	ldr	r2, [pc, #344]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d02b      	beq.n	8001cae <HAL_GPIO_Init+0x236>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a55      	ldr	r2, [pc, #340]	; (8001db0 <HAL_GPIO_Init+0x338>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d025      	beq.n	8001caa <HAL_GPIO_Init+0x232>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a54      	ldr	r2, [pc, #336]	; (8001db4 <HAL_GPIO_Init+0x33c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d01f      	beq.n	8001ca6 <HAL_GPIO_Init+0x22e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a53      	ldr	r2, [pc, #332]	; (8001db8 <HAL_GPIO_Init+0x340>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d019      	beq.n	8001ca2 <HAL_GPIO_Init+0x22a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a52      	ldr	r2, [pc, #328]	; (8001dbc <HAL_GPIO_Init+0x344>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d013      	beq.n	8001c9e <HAL_GPIO_Init+0x226>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a51      	ldr	r2, [pc, #324]	; (8001dc0 <HAL_GPIO_Init+0x348>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00d      	beq.n	8001c9a <HAL_GPIO_Init+0x222>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a50      	ldr	r2, [pc, #320]	; (8001dc4 <HAL_GPIO_Init+0x34c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d007      	beq.n	8001c96 <HAL_GPIO_Init+0x21e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a4f      	ldr	r2, [pc, #316]	; (8001dc8 <HAL_GPIO_Init+0x350>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d101      	bne.n	8001c92 <HAL_GPIO_Init+0x21a>
 8001c8e:	2309      	movs	r3, #9
 8001c90:	e012      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001c92:	230a      	movs	r3, #10
 8001c94:	e010      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001c96:	2308      	movs	r3, #8
 8001c98:	e00e      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001c9a:	2307      	movs	r3, #7
 8001c9c:	e00c      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001c9e:	2306      	movs	r3, #6
 8001ca0:	e00a      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001ca2:	2305      	movs	r3, #5
 8001ca4:	e008      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	e006      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001caa:	2303      	movs	r3, #3
 8001cac:	e004      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e002      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	69fa      	ldr	r2, [r7, #28]
 8001cba:	f002 0203 	and.w	r2, r2, #3
 8001cbe:	0092      	lsls	r2, r2, #2
 8001cc0:	4093      	lsls	r3, r2
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cc8:	4935      	ldr	r1, [pc, #212]	; (8001da0 <HAL_GPIO_Init+0x328>)
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	089b      	lsrs	r3, r3, #2
 8001cce:	3302      	adds	r3, #2
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cd6:	4b3d      	ldr	r3, [pc, #244]	; (8001dcc <HAL_GPIO_Init+0x354>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cfa:	4a34      	ldr	r2, [pc, #208]	; (8001dcc <HAL_GPIO_Init+0x354>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d00:	4b32      	ldr	r3, [pc, #200]	; (8001dcc <HAL_GPIO_Init+0x354>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d24:	4a29      	ldr	r2, [pc, #164]	; (8001dcc <HAL_GPIO_Init+0x354>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d2a:	4b28      	ldr	r3, [pc, #160]	; (8001dcc <HAL_GPIO_Init+0x354>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d4e:	4a1f      	ldr	r2, [pc, #124]	; (8001dcc <HAL_GPIO_Init+0x354>)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d54:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_GPIO_Init+0x354>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d78:	4a14      	ldr	r2, [pc, #80]	; (8001dcc <HAL_GPIO_Init+0x354>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3301      	adds	r3, #1
 8001d82:	61fb      	str	r3, [r7, #28]
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	2b0f      	cmp	r3, #15
 8001d88:	f67f ae84 	bls.w	8001a94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	bf00      	nop
 8001d90:	3724      	adds	r7, #36	; 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40013800 	.word	0x40013800
 8001da4:	40020000 	.word	0x40020000
 8001da8:	40020400 	.word	0x40020400
 8001dac:	40020800 	.word	0x40020800
 8001db0:	40020c00 	.word	0x40020c00
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40021400 	.word	0x40021400
 8001dbc:	40021800 	.word	0x40021800
 8001dc0:	40021c00 	.word	0x40021c00
 8001dc4:	40022000 	.word	0x40022000
 8001dc8:	40022400 	.word	0x40022400
 8001dcc:	40013c00 	.word	0x40013c00

08001dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	807b      	strh	r3, [r7, #2]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de0:	787b      	ldrb	r3, [r7, #1]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001de6:	887a      	ldrh	r2, [r7, #2]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dec:	e003      	b.n	8001df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dee:	887b      	ldrh	r3, [r7, #2]
 8001df0:	041a      	lsls	r2, r3, #16
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	619a      	str	r2, [r3, #24]
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e12b      	b.n	800206e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d106      	bne.n	8001e30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff f81a 	bl	8000e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2224      	movs	r2, #36	; 0x24
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0201 	bic.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e68:	f001 f88e 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 8001e6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	4a81      	ldr	r2, [pc, #516]	; (8002078 <HAL_I2C_Init+0x274>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d807      	bhi.n	8001e88 <HAL_I2C_Init+0x84>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4a80      	ldr	r2, [pc, #512]	; (800207c <HAL_I2C_Init+0x278>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	bf94      	ite	ls
 8001e80:	2301      	movls	r3, #1
 8001e82:	2300      	movhi	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	e006      	b.n	8001e96 <HAL_I2C_Init+0x92>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4a7d      	ldr	r2, [pc, #500]	; (8002080 <HAL_I2C_Init+0x27c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	bf94      	ite	ls
 8001e90:	2301      	movls	r3, #1
 8001e92:	2300      	movhi	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e0e7      	b.n	800206e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4a78      	ldr	r2, [pc, #480]	; (8002084 <HAL_I2C_Init+0x280>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	0c9b      	lsrs	r3, r3, #18
 8001ea8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4a6a      	ldr	r2, [pc, #424]	; (8002078 <HAL_I2C_Init+0x274>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d802      	bhi.n	8001ed8 <HAL_I2C_Init+0xd4>
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	e009      	b.n	8001eec <HAL_I2C_Init+0xe8>
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	4a69      	ldr	r2, [pc, #420]	; (8002088 <HAL_I2C_Init+0x284>)
 8001ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee8:	099b      	lsrs	r3, r3, #6
 8001eea:	3301      	adds	r3, #1
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001efe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	495c      	ldr	r1, [pc, #368]	; (8002078 <HAL_I2C_Init+0x274>)
 8001f08:	428b      	cmp	r3, r1
 8001f0a:	d819      	bhi.n	8001f40 <HAL_I2C_Init+0x13c>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	1e59      	subs	r1, r3, #1
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f1a:	1c59      	adds	r1, r3, #1
 8001f1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f20:	400b      	ands	r3, r1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00a      	beq.n	8001f3c <HAL_I2C_Init+0x138>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1e59      	subs	r1, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f34:	3301      	adds	r3, #1
 8001f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3a:	e051      	b.n	8001fe0 <HAL_I2C_Init+0x1dc>
 8001f3c:	2304      	movs	r3, #4
 8001f3e:	e04f      	b.n	8001fe0 <HAL_I2C_Init+0x1dc>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d111      	bne.n	8001f6c <HAL_I2C_Init+0x168>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1e58      	subs	r0, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6859      	ldr	r1, [r3, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	440b      	add	r3, r1
 8001f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	bf0c      	ite	eq
 8001f64:	2301      	moveq	r3, #1
 8001f66:	2300      	movne	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	e012      	b.n	8001f92 <HAL_I2C_Init+0x18e>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	1e58      	subs	r0, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6859      	ldr	r1, [r3, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	0099      	lsls	r1, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f82:	3301      	adds	r3, #1
 8001f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_I2C_Init+0x196>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e022      	b.n	8001fe0 <HAL_I2C_Init+0x1dc>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10e      	bne.n	8001fc0 <HAL_I2C_Init+0x1bc>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1e58      	subs	r0, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6859      	ldr	r1, [r3, #4]
 8001faa:	460b      	mov	r3, r1
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	440b      	add	r3, r1
 8001fb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fbe:	e00f      	b.n	8001fe0 <HAL_I2C_Init+0x1dc>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	1e58      	subs	r0, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6859      	ldr	r1, [r3, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	0099      	lsls	r1, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	6809      	ldr	r1, [r1, #0]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69da      	ldr	r2, [r3, #28]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800200e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6911      	ldr	r1, [r2, #16]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	68d2      	ldr	r2, [r2, #12]
 800201a:	4311      	orrs	r1, r2
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	430b      	orrs	r3, r1
 8002022:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695a      	ldr	r2, [r3, #20]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2220      	movs	r2, #32
 800205a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	000186a0 	.word	0x000186a0
 800207c:	001e847f 	.word	0x001e847f
 8002080:	003d08ff 	.word	0x003d08ff
 8002084:	431bde83 	.word	0x431bde83
 8002088:	10624dd3 	.word	0x10624dd3

0800208c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af02      	add	r7, sp, #8
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	607a      	str	r2, [r7, #4]
 8002096:	461a      	mov	r2, r3
 8002098:	460b      	mov	r3, r1
 800209a:	817b      	strh	r3, [r7, #10]
 800209c:	4613      	mov	r3, r2
 800209e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020a0:	f7ff fba8 	bl	80017f4 <HAL_GetTick>
 80020a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b20      	cmp	r3, #32
 80020b0:	f040 80e0 	bne.w	8002274 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2319      	movs	r3, #25
 80020ba:	2201      	movs	r2, #1
 80020bc:	4970      	ldr	r1, [pc, #448]	; (8002280 <HAL_I2C_Master_Transmit+0x1f4>)
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 f964 	bl	800238c <I2C_WaitOnFlagUntilTimeout>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020ca:	2302      	movs	r3, #2
 80020cc:	e0d3      	b.n	8002276 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_I2C_Master_Transmit+0x50>
 80020d8:	2302      	movs	r3, #2
 80020da:	e0cc      	b.n	8002276 <HAL_I2C_Master_Transmit+0x1ea>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d007      	beq.n	8002102 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 0201 	orr.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002110:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2221      	movs	r2, #33	; 0x21
 8002116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2210      	movs	r2, #16
 800211e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	893a      	ldrh	r2, [r7, #8]
 8002132:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4a50      	ldr	r2, [pc, #320]	; (8002284 <HAL_I2C_Master_Transmit+0x1f8>)
 8002142:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002144:	8979      	ldrh	r1, [r7, #10]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	6a3a      	ldr	r2, [r7, #32]
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 f89c 	bl	8002288 <I2C_MasterRequestWrite>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e08d      	b.n	8002276 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002170:	e066      	b.n	8002240 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	6a39      	ldr	r1, [r7, #32]
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 f9de 	bl	8002538 <I2C_WaitOnTXEFlagUntilTimeout>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00d      	beq.n	800219e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	2b04      	cmp	r3, #4
 8002188:	d107      	bne.n	800219a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002198:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e06b      	b.n	8002276 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	781a      	ldrb	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d11b      	bne.n	8002214 <HAL_I2C_Master_Transmit+0x188>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d017      	beq.n	8002214 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	781a      	ldrb	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fe:	b29b      	uxth	r3, r3
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220c:	3b01      	subs	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	6a39      	ldr	r1, [r7, #32]
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 f9ce 	bl	80025ba <I2C_WaitOnBTFFlagUntilTimeout>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00d      	beq.n	8002240 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	2b04      	cmp	r3, #4
 800222a:	d107      	bne.n	800223c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e01a      	b.n	8002276 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002244:	2b00      	cmp	r3, #0
 8002246:	d194      	bne.n	8002172 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002256:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2220      	movs	r2, #32
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	e000      	b.n	8002276 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002274:	2302      	movs	r3, #2
  }
}
 8002276:	4618      	mov	r0, r3
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	00100002 	.word	0x00100002
 8002284:	ffff0000 	.word	0xffff0000

08002288 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af02      	add	r7, sp, #8
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	460b      	mov	r3, r1
 8002296:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d006      	beq.n	80022b2 <I2C_MasterRequestWrite+0x2a>
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d003      	beq.n	80022b2 <I2C_MasterRequestWrite+0x2a>
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022b0:	d108      	bne.n	80022c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	e00b      	b.n	80022dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	2b12      	cmp	r3, #18
 80022ca:	d107      	bne.n	80022dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 f84f 	bl	800238c <I2C_WaitOnFlagUntilTimeout>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00d      	beq.n	8002310 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002302:	d103      	bne.n	800230c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800230a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e035      	b.n	800237c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002318:	d108      	bne.n	800232c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800231a:	897b      	ldrh	r3, [r7, #10]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	461a      	mov	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002328:	611a      	str	r2, [r3, #16]
 800232a:	e01b      	b.n	8002364 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800232c:	897b      	ldrh	r3, [r7, #10]
 800232e:	11db      	asrs	r3, r3, #7
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f003 0306 	and.w	r3, r3, #6
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f063 030f 	orn	r3, r3, #15
 800233c:	b2da      	uxtb	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	490e      	ldr	r1, [pc, #56]	; (8002384 <I2C_MasterRequestWrite+0xfc>)
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f875 	bl	800243a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e010      	b.n	800237c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800235a:	897b      	ldrh	r3, [r7, #10]
 800235c:	b2da      	uxtb	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	4907      	ldr	r1, [pc, #28]	; (8002388 <I2C_MasterRequestWrite+0x100>)
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 f865 	bl	800243a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	00010008 	.word	0x00010008
 8002388:	00010002 	.word	0x00010002

0800238c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	4613      	mov	r3, r2
 800239a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800239c:	e025      	b.n	80023ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023a4:	d021      	beq.n	80023ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023a6:	f7ff fa25 	bl	80017f4 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d302      	bcc.n	80023bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d116      	bne.n	80023ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2220      	movs	r2, #32
 80023c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f043 0220 	orr.w	r2, r3, #32
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e023      	b.n	8002432 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	0c1b      	lsrs	r3, r3, #16
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d10d      	bne.n	8002410 <I2C_WaitOnFlagUntilTimeout+0x84>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	43da      	mvns	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	4013      	ands	r3, r2
 8002400:	b29b      	uxth	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	bf0c      	ite	eq
 8002406:	2301      	moveq	r3, #1
 8002408:	2300      	movne	r3, #0
 800240a:	b2db      	uxtb	r3, r3
 800240c:	461a      	mov	r2, r3
 800240e:	e00c      	b.n	800242a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	43da      	mvns	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	4013      	ands	r3, r2
 800241c:	b29b      	uxth	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	bf0c      	ite	eq
 8002422:	2301      	moveq	r3, #1
 8002424:	2300      	movne	r3, #0
 8002426:	b2db      	uxtb	r3, r3
 8002428:	461a      	mov	r2, r3
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	429a      	cmp	r2, r3
 800242e:	d0b6      	beq.n	800239e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b084      	sub	sp, #16
 800243e:	af00      	add	r7, sp, #0
 8002440:	60f8      	str	r0, [r7, #12]
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002448:	e051      	b.n	80024ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002458:	d123      	bne.n	80024a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002468:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002472:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2220      	movs	r2, #32
 800247e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f043 0204 	orr.w	r2, r3, #4
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e046      	b.n	8002530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024a8:	d021      	beq.n	80024ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024aa:	f7ff f9a3 	bl	80017f4 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d302      	bcc.n	80024c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d116      	bne.n	80024ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2220      	movs	r2, #32
 80024ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f043 0220 	orr.w	r2, r3, #32
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e020      	b.n	8002530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	0c1b      	lsrs	r3, r3, #16
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d10c      	bne.n	8002512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	43da      	mvns	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	4013      	ands	r3, r2
 8002504:	b29b      	uxth	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	bf14      	ite	ne
 800250a:	2301      	movne	r3, #1
 800250c:	2300      	moveq	r3, #0
 800250e:	b2db      	uxtb	r3, r3
 8002510:	e00b      	b.n	800252a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	43da      	mvns	r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	4013      	ands	r3, r2
 800251e:	b29b      	uxth	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	bf14      	ite	ne
 8002524:	2301      	movne	r3, #1
 8002526:	2300      	moveq	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d18d      	bne.n	800244a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002544:	e02d      	b.n	80025a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 f878 	bl	800263c <I2C_IsAcknowledgeFailed>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e02d      	b.n	80025b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800255c:	d021      	beq.n	80025a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800255e:	f7ff f949 	bl	80017f4 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	429a      	cmp	r2, r3
 800256c:	d302      	bcc.n	8002574 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d116      	bne.n	80025a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2220      	movs	r2, #32
 800257e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f043 0220 	orr.w	r2, r3, #32
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e007      	b.n	80025b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ac:	2b80      	cmp	r3, #128	; 0x80
 80025ae:	d1ca      	bne.n	8002546 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b084      	sub	sp, #16
 80025be:	af00      	add	r7, sp, #0
 80025c0:	60f8      	str	r0, [r7, #12]
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025c6:	e02d      	b.n	8002624 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 f837 	bl	800263c <I2C_IsAcknowledgeFailed>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e02d      	b.n	8002634 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025de:	d021      	beq.n	8002624 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e0:	f7ff f908 	bl	80017f4 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d302      	bcc.n	80025f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d116      	bne.n	8002624 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2220      	movs	r2, #32
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	f043 0220 	orr.w	r2, r3, #32
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e007      	b.n	8002634 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	2b04      	cmp	r3, #4
 8002630:	d1ca      	bne.n	80025c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800264e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002652:	d11b      	bne.n	800268c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800265c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2220      	movs	r2, #32
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	f043 0204 	orr.w	r2, r3, #4
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 800269a:	b480      	push	{r7}
 800269c:	af00      	add	r7, sp, #0

}
 800269e:	bf00      	nop
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e267      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d075      	beq.n	80027b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026c6:	4b88      	ldr	r3, [pc, #544]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d00c      	beq.n	80026ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026d2:	4b85      	ldr	r3, [pc, #532]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d112      	bne.n	8002704 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026de:	4b82      	ldr	r3, [pc, #520]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ea:	d10b      	bne.n	8002704 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ec:	4b7e      	ldr	r3, [pc, #504]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d05b      	beq.n	80027b0 <HAL_RCC_OscConfig+0x108>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d157      	bne.n	80027b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e242      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800270c:	d106      	bne.n	800271c <HAL_RCC_OscConfig+0x74>
 800270e:	4b76      	ldr	r3, [pc, #472]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a75      	ldr	r2, [pc, #468]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e01d      	b.n	8002758 <HAL_RCC_OscConfig+0xb0>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002724:	d10c      	bne.n	8002740 <HAL_RCC_OscConfig+0x98>
 8002726:	4b70      	ldr	r3, [pc, #448]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a6f      	ldr	r2, [pc, #444]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 800272c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	4b6d      	ldr	r3, [pc, #436]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a6c      	ldr	r2, [pc, #432]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	e00b      	b.n	8002758 <HAL_RCC_OscConfig+0xb0>
 8002740:	4b69      	ldr	r3, [pc, #420]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a68      	ldr	r2, [pc, #416]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	4b66      	ldr	r3, [pc, #408]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a65      	ldr	r2, [pc, #404]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d013      	beq.n	8002788 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7ff f848 	bl	80017f4 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002768:	f7ff f844 	bl	80017f4 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e207      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	4b5b      	ldr	r3, [pc, #364]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0xc0>
 8002786:	e014      	b.n	80027b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7ff f834 	bl	80017f4 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002790:	f7ff f830 	bl	80017f4 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b64      	cmp	r3, #100	; 0x64
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e1f3      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a2:	4b51      	ldr	r3, [pc, #324]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0xe8>
 80027ae:	e000      	b.n	80027b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d063      	beq.n	8002886 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027be:	4b4a      	ldr	r3, [pc, #296]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00b      	beq.n	80027e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ca:	4b47      	ldr	r3, [pc, #284]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d11c      	bne.n	8002810 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027d6:	4b44      	ldr	r3, [pc, #272]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d116      	bne.n	8002810 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e2:	4b41      	ldr	r3, [pc, #260]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d005      	beq.n	80027fa <HAL_RCC_OscConfig+0x152>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d001      	beq.n	80027fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e1c7      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fa:	4b3b      	ldr	r3, [pc, #236]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4937      	ldr	r1, [pc, #220]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 800280a:	4313      	orrs	r3, r2
 800280c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800280e:	e03a      	b.n	8002886 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d020      	beq.n	800285a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002818:	4b34      	ldr	r3, [pc, #208]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 800281a:	2201      	movs	r2, #1
 800281c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281e:	f7fe ffe9 	bl	80017f4 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002826:	f7fe ffe5 	bl	80017f4 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e1a8      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002838:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002844:	4b28      	ldr	r3, [pc, #160]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4925      	ldr	r1, [pc, #148]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 8002854:	4313      	orrs	r3, r2
 8002856:	600b      	str	r3, [r1, #0]
 8002858:	e015      	b.n	8002886 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800285a:	4b24      	ldr	r3, [pc, #144]	; (80028ec <HAL_RCC_OscConfig+0x244>)
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7fe ffc8 	bl	80017f4 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002868:	f7fe ffc4 	bl	80017f4 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e187      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287a:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d036      	beq.n	8002900 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d016      	beq.n	80028c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800289a:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <HAL_RCC_OscConfig+0x248>)
 800289c:	2201      	movs	r2, #1
 800289e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a0:	f7fe ffa8 	bl	80017f4 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028a8:	f7fe ffa4 	bl	80017f4 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e167      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ba:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_RCC_OscConfig+0x240>)
 80028bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0x200>
 80028c6:	e01b      	b.n	8002900 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HAL_RCC_OscConfig+0x248>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ce:	f7fe ff91 	bl	80017f4 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d4:	e00e      	b.n	80028f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028d6:	f7fe ff8d 	bl	80017f4 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d907      	bls.n	80028f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e150      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
 80028e8:	40023800 	.word	0x40023800
 80028ec:	42470000 	.word	0x42470000
 80028f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f4:	4b88      	ldr	r3, [pc, #544]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80028f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1ea      	bne.n	80028d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 8097 	beq.w	8002a3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290e:	2300      	movs	r3, #0
 8002910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002912:	4b81      	ldr	r3, [pc, #516]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10f      	bne.n	800293e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	4b7d      	ldr	r3, [pc, #500]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	4a7c      	ldr	r2, [pc, #496]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292c:	6413      	str	r3, [r2, #64]	; 0x40
 800292e:	4b7a      	ldr	r3, [pc, #488]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800293a:	2301      	movs	r3, #1
 800293c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293e:	4b77      	ldr	r3, [pc, #476]	; (8002b1c <HAL_RCC_OscConfig+0x474>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d118      	bne.n	800297c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800294a:	4b74      	ldr	r3, [pc, #464]	; (8002b1c <HAL_RCC_OscConfig+0x474>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a73      	ldr	r2, [pc, #460]	; (8002b1c <HAL_RCC_OscConfig+0x474>)
 8002950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002956:	f7fe ff4d 	bl	80017f4 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295e:	f7fe ff49 	bl	80017f4 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e10c      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002970:	4b6a      	ldr	r3, [pc, #424]	; (8002b1c <HAL_RCC_OscConfig+0x474>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0f0      	beq.n	800295e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d106      	bne.n	8002992 <HAL_RCC_OscConfig+0x2ea>
 8002984:	4b64      	ldr	r3, [pc, #400]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	4a63      	ldr	r2, [pc, #396]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	6713      	str	r3, [r2, #112]	; 0x70
 8002990:	e01c      	b.n	80029cc <HAL_RCC_OscConfig+0x324>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b05      	cmp	r3, #5
 8002998:	d10c      	bne.n	80029b4 <HAL_RCC_OscConfig+0x30c>
 800299a:	4b5f      	ldr	r3, [pc, #380]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299e:	4a5e      	ldr	r2, [pc, #376]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80029a0:	f043 0304 	orr.w	r3, r3, #4
 80029a4:	6713      	str	r3, [r2, #112]	; 0x70
 80029a6:	4b5c      	ldr	r3, [pc, #368]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029aa:	4a5b      	ldr	r2, [pc, #364]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6713      	str	r3, [r2, #112]	; 0x70
 80029b2:	e00b      	b.n	80029cc <HAL_RCC_OscConfig+0x324>
 80029b4:	4b58      	ldr	r3, [pc, #352]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80029b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b8:	4a57      	ldr	r2, [pc, #348]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80029ba:	f023 0301 	bic.w	r3, r3, #1
 80029be:	6713      	str	r3, [r2, #112]	; 0x70
 80029c0:	4b55      	ldr	r3, [pc, #340]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	4a54      	ldr	r2, [pc, #336]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80029c6:	f023 0304 	bic.w	r3, r3, #4
 80029ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d015      	beq.n	8002a00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7fe ff0e 	bl	80017f4 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029dc:	f7fe ff0a 	bl	80017f4 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e0cb      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f2:	4b49      	ldr	r3, [pc, #292]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 80029f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0ee      	beq.n	80029dc <HAL_RCC_OscConfig+0x334>
 80029fe:	e014      	b.n	8002a2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a00:	f7fe fef8 	bl	80017f4 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a06:	e00a      	b.n	8002a1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a08:	f7fe fef4 	bl	80017f4 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e0b5      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1e:	4b3e      	ldr	r3, [pc, #248]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1ee      	bne.n	8002a08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a2a:	7dfb      	ldrb	r3, [r7, #23]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d105      	bne.n	8002a3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a30:	4b39      	ldr	r3, [pc, #228]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	4a38      	ldr	r2, [pc, #224]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 80a1 	beq.w	8002b88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a46:	4b34      	ldr	r3, [pc, #208]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d05c      	beq.n	8002b0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d141      	bne.n	8002ade <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5a:	4b31      	ldr	r3, [pc, #196]	; (8002b20 <HAL_RCC_OscConfig+0x478>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7fe fec8 	bl	80017f4 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a68:	f7fe fec4 	bl	80017f4 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e087      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7a:	4b27      	ldr	r3, [pc, #156]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69da      	ldr	r2, [r3, #28]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	019b      	lsls	r3, r3, #6
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	085b      	lsrs	r3, r3, #1
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	041b      	lsls	r3, r3, #16
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	061b      	lsls	r3, r3, #24
 8002aaa:	491b      	ldr	r1, [pc, #108]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	; (8002b20 <HAL_RCC_OscConfig+0x478>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab6:	f7fe fe9d 	bl	80017f4 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002abe:	f7fe fe99 	bl	80017f4 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e05c      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad0:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x416>
 8002adc:	e054      	b.n	8002b88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ade:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <HAL_RCC_OscConfig+0x478>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fe86 	bl	80017f4 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aec:	f7fe fe82 	bl	80017f4 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e045      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afe:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <HAL_RCC_OscConfig+0x470>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x444>
 8002b0a:	e03d      	b.n	8002b88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d107      	bne.n	8002b24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e038      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40007000 	.word	0x40007000
 8002b20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b24:	4b1b      	ldr	r3, [pc, #108]	; (8002b94 <HAL_RCC_OscConfig+0x4ec>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d028      	beq.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d121      	bne.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d11a      	bne.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b54:	4013      	ands	r3, r2
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d111      	bne.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	085b      	lsrs	r3, r3, #1
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d107      	bne.n	8002b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e000      	b.n	8002b8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800

08002b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0cc      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bac:	4b68      	ldr	r3, [pc, #416]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 030f 	and.w	r3, r3, #15
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d90c      	bls.n	8002bd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	4b65      	ldr	r3, [pc, #404]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b63      	ldr	r3, [pc, #396]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0b8      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d020      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bec:	4b59      	ldr	r3, [pc, #356]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	4a58      	ldr	r2, [pc, #352]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c04:	4b53      	ldr	r3, [pc, #332]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	4a52      	ldr	r2, [pc, #328]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c10:	4b50      	ldr	r3, [pc, #320]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	494d      	ldr	r1, [pc, #308]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d044      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d107      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	4b47      	ldr	r3, [pc, #284]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d119      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e07f      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d003      	beq.n	8002c56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d107      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c56:	4b3f      	ldr	r3, [pc, #252]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d109      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e06f      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c66:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e067      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c76:	4b37      	ldr	r3, [pc, #220]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f023 0203 	bic.w	r2, r3, #3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	4934      	ldr	r1, [pc, #208]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c88:	f7fe fdb4 	bl	80017f4 <HAL_GetTick>
 8002c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8e:	e00a      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c90:	f7fe fdb0 	bl	80017f4 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e04f      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca6:	4b2b      	ldr	r3, [pc, #172]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 020c 	and.w	r2, r3, #12
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d1eb      	bne.n	8002c90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb8:	4b25      	ldr	r3, [pc, #148]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d20c      	bcs.n	8002ce0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc6:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cce:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e032      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cec:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4916      	ldr	r1, [pc, #88]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d0a:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	490e      	ldr	r1, [pc, #56]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d1e:	f000 f821 	bl	8002d64 <HAL_RCC_GetSysClockFreq>
 8002d22:	4602      	mov	r2, r0
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	490a      	ldr	r1, [pc, #40]	; (8002d58 <HAL_RCC_ClockConfig+0x1c0>)
 8002d30:	5ccb      	ldrb	r3, [r1, r3]
 8002d32:	fa22 f303 	lsr.w	r3, r2, r3
 8002d36:	4a09      	ldr	r2, [pc, #36]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d3a:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe fd14 	bl	800176c <HAL_InitTick>

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40023c00 	.word	0x40023c00
 8002d54:	40023800 	.word	0x40023800
 8002d58:	080046e4 	.word	0x080046e4
 8002d5c:	2000000c 	.word	0x2000000c
 8002d60:	20000010 	.word	0x20000010

08002d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d68:	b094      	sub	sp, #80	; 0x50
 8002d6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d70:	2300      	movs	r3, #0
 8002d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d74:	2300      	movs	r3, #0
 8002d76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d7c:	4b79      	ldr	r3, [pc, #484]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 030c 	and.w	r3, r3, #12
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d00d      	beq.n	8002da4 <HAL_RCC_GetSysClockFreq+0x40>
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	f200 80e1 	bhi.w	8002f50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <HAL_RCC_GetSysClockFreq+0x34>
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d003      	beq.n	8002d9e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d96:	e0db      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d98:	4b73      	ldr	r3, [pc, #460]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d9c:	e0db      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d9e:	4b73      	ldr	r3, [pc, #460]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x208>)
 8002da0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002da2:	e0d8      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002da4:	4b6f      	ldr	r3, [pc, #444]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dae:	4b6d      	ldr	r3, [pc, #436]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d063      	beq.n	8002e82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dba:	4b6a      	ldr	r3, [pc, #424]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	099b      	lsrs	r3, r3, #6
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8002dce:	2300      	movs	r3, #0
 8002dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8002dd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002dd6:	4622      	mov	r2, r4
 8002dd8:	462b      	mov	r3, r5
 8002dda:	f04f 0000 	mov.w	r0, #0
 8002dde:	f04f 0100 	mov.w	r1, #0
 8002de2:	0159      	lsls	r1, r3, #5
 8002de4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002de8:	0150      	lsls	r0, r2, #5
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4621      	mov	r1, r4
 8002df0:	1a51      	subs	r1, r2, r1
 8002df2:	6139      	str	r1, [r7, #16]
 8002df4:	4629      	mov	r1, r5
 8002df6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e08:	4659      	mov	r1, fp
 8002e0a:	018b      	lsls	r3, r1, #6
 8002e0c:	4651      	mov	r1, sl
 8002e0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e12:	4651      	mov	r1, sl
 8002e14:	018a      	lsls	r2, r1, #6
 8002e16:	4651      	mov	r1, sl
 8002e18:	ebb2 0801 	subs.w	r8, r2, r1
 8002e1c:	4659      	mov	r1, fp
 8002e1e:	eb63 0901 	sbc.w	r9, r3, r1
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e36:	4690      	mov	r8, r2
 8002e38:	4699      	mov	r9, r3
 8002e3a:	4623      	mov	r3, r4
 8002e3c:	eb18 0303 	adds.w	r3, r8, r3
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	462b      	mov	r3, r5
 8002e44:	eb49 0303 	adc.w	r3, r9, r3
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e56:	4629      	mov	r1, r5
 8002e58:	024b      	lsls	r3, r1, #9
 8002e5a:	4621      	mov	r1, r4
 8002e5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e60:	4621      	mov	r1, r4
 8002e62:	024a      	lsls	r2, r1, #9
 8002e64:	4610      	mov	r0, r2
 8002e66:	4619      	mov	r1, r3
 8002e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e74:	f7fd fdfa 	bl	8000a6c <__aeabi_uldivmod>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e80:	e058      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e82:	4b38      	ldr	r3, [pc, #224]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	099b      	lsrs	r3, r3, #6
 8002e88:	2200      	movs	r2, #0
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e92:	623b      	str	r3, [r7, #32]
 8002e94:	2300      	movs	r3, #0
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
 8002e98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e9c:	4642      	mov	r2, r8
 8002e9e:	464b      	mov	r3, r9
 8002ea0:	f04f 0000 	mov.w	r0, #0
 8002ea4:	f04f 0100 	mov.w	r1, #0
 8002ea8:	0159      	lsls	r1, r3, #5
 8002eaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eae:	0150      	lsls	r0, r2, #5
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	4641      	mov	r1, r8
 8002eb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002eba:	4649      	mov	r1, r9
 8002ebc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ecc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ed0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ed4:	ebb2 040a 	subs.w	r4, r2, sl
 8002ed8:	eb63 050b 	sbc.w	r5, r3, fp
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	00eb      	lsls	r3, r5, #3
 8002ee6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eea:	00e2      	lsls	r2, r4, #3
 8002eec:	4614      	mov	r4, r2
 8002eee:	461d      	mov	r5, r3
 8002ef0:	4643      	mov	r3, r8
 8002ef2:	18e3      	adds	r3, r4, r3
 8002ef4:	603b      	str	r3, [r7, #0]
 8002ef6:	464b      	mov	r3, r9
 8002ef8:	eb45 0303 	adc.w	r3, r5, r3
 8002efc:	607b      	str	r3, [r7, #4]
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	028b      	lsls	r3, r1, #10
 8002f0e:	4621      	mov	r1, r4
 8002f10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f14:	4621      	mov	r1, r4
 8002f16:	028a      	lsls	r2, r1, #10
 8002f18:	4610      	mov	r0, r2
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f1e:	2200      	movs	r2, #0
 8002f20:	61bb      	str	r3, [r7, #24]
 8002f22:	61fa      	str	r2, [r7, #28]
 8002f24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f28:	f7fd fda0 	bl	8000a6c <__aeabi_uldivmod>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4613      	mov	r3, r2
 8002f32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	0c1b      	lsrs	r3, r3, #16
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	3301      	adds	r3, #1
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f4e:	e002      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f50:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3750      	adds	r7, #80	; 0x50
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f62:	bf00      	nop
 8002f64:	40023800 	.word	0x40023800
 8002f68:	00f42400 	.word	0x00f42400
 8002f6c:	007a1200 	.word	0x007a1200

08002f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f74:	4b03      	ldr	r3, [pc, #12]	; (8002f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f76:	681b      	ldr	r3, [r3, #0]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	2000000c 	.word	0x2000000c

08002f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f8c:	f7ff fff0 	bl	8002f70 <HAL_RCC_GetHCLKFreq>
 8002f90:	4602      	mov	r2, r0
 8002f92:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	0a9b      	lsrs	r3, r3, #10
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	4903      	ldr	r1, [pc, #12]	; (8002fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f9e:	5ccb      	ldrb	r3, [r1, r3]
 8002fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	080046f4 	.word	0x080046f4

08002fb0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e041      	b.n	8003046 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fe f9be 	bl	8001358 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3304      	adds	r3, #4
 8002fec:	4619      	mov	r1, r3
 8002fee:	4610      	mov	r0, r2
 8002ff0:	f000 fb66 	bl	80036c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800305a:	2300      	movs	r3, #0
 800305c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d104      	bne.n	800306e <HAL_TIM_IC_Start_IT+0x1e>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800306a:	b2db      	uxtb	r3, r3
 800306c:	e013      	b.n	8003096 <HAL_TIM_IC_Start_IT+0x46>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b04      	cmp	r3, #4
 8003072:	d104      	bne.n	800307e <HAL_TIM_IC_Start_IT+0x2e>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800307a:	b2db      	uxtb	r3, r3
 800307c:	e00b      	b.n	8003096 <HAL_TIM_IC_Start_IT+0x46>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b08      	cmp	r3, #8
 8003082:	d104      	bne.n	800308e <HAL_TIM_IC_Start_IT+0x3e>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800308a:	b2db      	uxtb	r3, r3
 800308c:	e003      	b.n	8003096 <HAL_TIM_IC_Start_IT+0x46>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003094:	b2db      	uxtb	r3, r3
 8003096:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d104      	bne.n	80030a8 <HAL_TIM_IC_Start_IT+0x58>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	e013      	b.n	80030d0 <HAL_TIM_IC_Start_IT+0x80>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d104      	bne.n	80030b8 <HAL_TIM_IC_Start_IT+0x68>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	e00b      	b.n	80030d0 <HAL_TIM_IC_Start_IT+0x80>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d104      	bne.n	80030c8 <HAL_TIM_IC_Start_IT+0x78>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e003      	b.n	80030d0 <HAL_TIM_IC_Start_IT+0x80>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80030d2:	7bbb      	ldrb	r3, [r7, #14]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d102      	bne.n	80030de <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80030d8:	7b7b      	ldrb	r3, [r7, #13]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d001      	beq.n	80030e2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e0cc      	b.n	800327c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d104      	bne.n	80030f2 <HAL_TIM_IC_Start_IT+0xa2>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030f0:	e013      	b.n	800311a <HAL_TIM_IC_Start_IT+0xca>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d104      	bne.n	8003102 <HAL_TIM_IC_Start_IT+0xb2>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003100:	e00b      	b.n	800311a <HAL_TIM_IC_Start_IT+0xca>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b08      	cmp	r3, #8
 8003106:	d104      	bne.n	8003112 <HAL_TIM_IC_Start_IT+0xc2>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003110:	e003      	b.n	800311a <HAL_TIM_IC_Start_IT+0xca>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2202      	movs	r2, #2
 8003116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d104      	bne.n	800312a <HAL_TIM_IC_Start_IT+0xda>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003128:	e013      	b.n	8003152 <HAL_TIM_IC_Start_IT+0x102>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b04      	cmp	r3, #4
 800312e:	d104      	bne.n	800313a <HAL_TIM_IC_Start_IT+0xea>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003138:	e00b      	b.n	8003152 <HAL_TIM_IC_Start_IT+0x102>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b08      	cmp	r3, #8
 800313e:	d104      	bne.n	800314a <HAL_TIM_IC_Start_IT+0xfa>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003148:	e003      	b.n	8003152 <HAL_TIM_IC_Start_IT+0x102>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2202      	movs	r2, #2
 800314e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b0c      	cmp	r3, #12
 8003156:	d841      	bhi.n	80031dc <HAL_TIM_IC_Start_IT+0x18c>
 8003158:	a201      	add	r2, pc, #4	; (adr r2, 8003160 <HAL_TIM_IC_Start_IT+0x110>)
 800315a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315e:	bf00      	nop
 8003160:	08003195 	.word	0x08003195
 8003164:	080031dd 	.word	0x080031dd
 8003168:	080031dd 	.word	0x080031dd
 800316c:	080031dd 	.word	0x080031dd
 8003170:	080031a7 	.word	0x080031a7
 8003174:	080031dd 	.word	0x080031dd
 8003178:	080031dd 	.word	0x080031dd
 800317c:	080031dd 	.word	0x080031dd
 8003180:	080031b9 	.word	0x080031b9
 8003184:	080031dd 	.word	0x080031dd
 8003188:	080031dd 	.word	0x080031dd
 800318c:	080031dd 	.word	0x080031dd
 8003190:	080031cb 	.word	0x080031cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0202 	orr.w	r2, r2, #2
 80031a2:	60da      	str	r2, [r3, #12]
      break;
 80031a4:	e01d      	b.n	80031e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 0204 	orr.w	r2, r2, #4
 80031b4:	60da      	str	r2, [r3, #12]
      break;
 80031b6:	e014      	b.n	80031e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0208 	orr.w	r2, r2, #8
 80031c6:	60da      	str	r2, [r3, #12]
      break;
 80031c8:	e00b      	b.n	80031e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f042 0210 	orr.w	r2, r2, #16
 80031d8:	60da      	str	r2, [r3, #12]
      break;
 80031da:	e002      	b.n	80031e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	73fb      	strb	r3, [r7, #15]
      break;
 80031e0:	bf00      	nop
  }

  if (status == HAL_OK)
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d148      	bne.n	800327a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2201      	movs	r2, #1
 80031ee:	6839      	ldr	r1, [r7, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 fc2f 	bl	8003a54 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a22      	ldr	r2, [pc, #136]	; (8003284 <HAL_TIM_IC_Start_IT+0x234>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d022      	beq.n	8003246 <HAL_TIM_IC_Start_IT+0x1f6>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003208:	d01d      	beq.n	8003246 <HAL_TIM_IC_Start_IT+0x1f6>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1e      	ldr	r2, [pc, #120]	; (8003288 <HAL_TIM_IC_Start_IT+0x238>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d018      	beq.n	8003246 <HAL_TIM_IC_Start_IT+0x1f6>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a1c      	ldr	r2, [pc, #112]	; (800328c <HAL_TIM_IC_Start_IT+0x23c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d013      	beq.n	8003246 <HAL_TIM_IC_Start_IT+0x1f6>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1b      	ldr	r2, [pc, #108]	; (8003290 <HAL_TIM_IC_Start_IT+0x240>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d00e      	beq.n	8003246 <HAL_TIM_IC_Start_IT+0x1f6>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a19      	ldr	r2, [pc, #100]	; (8003294 <HAL_TIM_IC_Start_IT+0x244>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d009      	beq.n	8003246 <HAL_TIM_IC_Start_IT+0x1f6>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a18      	ldr	r2, [pc, #96]	; (8003298 <HAL_TIM_IC_Start_IT+0x248>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d004      	beq.n	8003246 <HAL_TIM_IC_Start_IT+0x1f6>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a16      	ldr	r2, [pc, #88]	; (800329c <HAL_TIM_IC_Start_IT+0x24c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d111      	bne.n	800326a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2b06      	cmp	r3, #6
 8003256:	d010      	beq.n	800327a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003268:	e007      	b.n	800327a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0201 	orr.w	r2, r2, #1
 8003278:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800327a:	7bfb      	ldrb	r3, [r7, #15]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40010000 	.word	0x40010000
 8003288:	40000400 	.word	0x40000400
 800328c:	40000800 	.word	0x40000800
 8003290:	40000c00 	.word	0x40000c00
 8003294:	40010400 	.word	0x40010400
 8003298:	40014000 	.word	0x40014000
 800329c:	40001800 	.word	0x40001800

080032a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d122      	bne.n	80032fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d11b      	bne.n	80032fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f06f 0202 	mvn.w	r2, #2
 80032cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fd ff94 	bl	8001210 <HAL_TIM_IC_CaptureCallback>
 80032e8:	e005      	b.n	80032f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f9ca 	bl	8003684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f9d1 	bl	8003698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	2b04      	cmp	r3, #4
 8003308:	d122      	bne.n	8003350 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b04      	cmp	r3, #4
 8003316:	d11b      	bne.n	8003350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0204 	mvn.w	r2, #4
 8003320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2202      	movs	r2, #2
 8003326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fd ff6a 	bl	8001210 <HAL_TIM_IC_CaptureCallback>
 800333c:	e005      	b.n	800334a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f9a0 	bl	8003684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f9a7 	bl	8003698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b08      	cmp	r3, #8
 800335c:	d122      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b08      	cmp	r3, #8
 800336a:	d11b      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0208 	mvn.w	r2, #8
 8003374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2204      	movs	r2, #4
 800337a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7fd ff40 	bl	8001210 <HAL_TIM_IC_CaptureCallback>
 8003390:	e005      	b.n	800339e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f976 	bl	8003684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f97d 	bl	8003698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0310 	and.w	r3, r3, #16
 80033ae:	2b10      	cmp	r3, #16
 80033b0:	d122      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	2b10      	cmp	r3, #16
 80033be:	d11b      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0210 	mvn.w	r2, #16
 80033c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2208      	movs	r2, #8
 80033ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7fd ff16 	bl	8001210 <HAL_TIM_IC_CaptureCallback>
 80033e4:	e005      	b.n	80033f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f94c 	bl	8003684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f953 	bl	8003698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b01      	cmp	r3, #1
 8003404:	d10e      	bne.n	8003424 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b01      	cmp	r3, #1
 8003412:	d107      	bne.n	8003424 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0201 	mvn.w	r2, #1
 800341c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f926 	bl	8003670 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342e:	2b80      	cmp	r3, #128	; 0x80
 8003430:	d10e      	bne.n	8003450 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343c:	2b80      	cmp	r3, #128	; 0x80
 800343e:	d107      	bne.n	8003450 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fbae 	bl	8003bac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345a:	2b40      	cmp	r3, #64	; 0x40
 800345c:	d10e      	bne.n	800347c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003468:	2b40      	cmp	r3, #64	; 0x40
 800346a:	d107      	bne.n	800347c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f918 	bl	80036ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b20      	cmp	r3, #32
 8003488:	d10e      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b20      	cmp	r3, #32
 8003496:	d107      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0220 	mvn.w	r2, #32
 80034a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fb78 	bl	8003b98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d101      	bne.n	80034ce <HAL_TIM_IC_ConfigChannel+0x1e>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e088      	b.n	80035e0 <HAL_TIM_IC_ConfigChannel+0x130>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d11b      	bne.n	8003514 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	6819      	ldr	r1, [r3, #0]
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f000 f988 	bl	8003800 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 020c 	bic.w	r2, r2, #12
 80034fe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6999      	ldr	r1, [r3, #24]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	619a      	str	r2, [r3, #24]
 8003512:	e060      	b.n	80035d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b04      	cmp	r3, #4
 8003518:	d11c      	bne.n	8003554 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6818      	ldr	r0, [r3, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	6819      	ldr	r1, [r3, #0]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f000 f9dd 	bl	80038e8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	699a      	ldr	r2, [r3, #24]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800353c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6999      	ldr	r1, [r3, #24]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	021a      	lsls	r2, r3, #8
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	619a      	str	r2, [r3, #24]
 8003552:	e040      	b.n	80035d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b08      	cmp	r3, #8
 8003558:	d11b      	bne.n	8003592 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	6819      	ldr	r1, [r3, #0]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f000 f9fa 	bl	8003962 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69da      	ldr	r2, [r3, #28]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 020c 	bic.w	r2, r2, #12
 800357c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69d9      	ldr	r1, [r3, #28]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	61da      	str	r2, [r3, #28]
 8003590:	e021      	b.n	80035d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b0c      	cmp	r3, #12
 8003596:	d11c      	bne.n	80035d2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6818      	ldr	r0, [r3, #0]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	6819      	ldr	r1, [r3, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f000 fa17 	bl	80039da <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	69da      	ldr	r2, [r3, #28]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80035ba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	69d9      	ldr	r1, [r3, #28]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	021a      	lsls	r2, r3, #8
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	61da      	str	r2, [r3, #28]
 80035d0:	e001      	b.n	80035d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035de:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b0c      	cmp	r3, #12
 80035fa:	d831      	bhi.n	8003660 <HAL_TIM_ReadCapturedValue+0x78>
 80035fc:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <HAL_TIM_ReadCapturedValue+0x1c>)
 80035fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003602:	bf00      	nop
 8003604:	08003639 	.word	0x08003639
 8003608:	08003661 	.word	0x08003661
 800360c:	08003661 	.word	0x08003661
 8003610:	08003661 	.word	0x08003661
 8003614:	08003643 	.word	0x08003643
 8003618:	08003661 	.word	0x08003661
 800361c:	08003661 	.word	0x08003661
 8003620:	08003661 	.word	0x08003661
 8003624:	0800364d 	.word	0x0800364d
 8003628:	08003661 	.word	0x08003661
 800362c:	08003661 	.word	0x08003661
 8003630:	08003661 	.word	0x08003661
 8003634:	08003657 	.word	0x08003657
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363e:	60fb      	str	r3, [r7, #12]

      break;
 8003640:	e00f      	b.n	8003662 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003648:	60fb      	str	r3, [r7, #12]

      break;
 800364a:	e00a      	b.n	8003662 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003652:	60fb      	str	r3, [r7, #12]

      break;
 8003654:	e005      	b.n	8003662 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	60fb      	str	r3, [r7, #12]

      break;
 800365e:	e000      	b.n	8003662 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003660:	bf00      	nop
  }

  return tmpreg;
 8003662:	68fb      	ldr	r3, [r7, #12]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a40      	ldr	r2, [pc, #256]	; (80037d4 <TIM_Base_SetConfig+0x114>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d013      	beq.n	8003700 <TIM_Base_SetConfig+0x40>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036de:	d00f      	beq.n	8003700 <TIM_Base_SetConfig+0x40>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a3d      	ldr	r2, [pc, #244]	; (80037d8 <TIM_Base_SetConfig+0x118>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d00b      	beq.n	8003700 <TIM_Base_SetConfig+0x40>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a3c      	ldr	r2, [pc, #240]	; (80037dc <TIM_Base_SetConfig+0x11c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d007      	beq.n	8003700 <TIM_Base_SetConfig+0x40>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a3b      	ldr	r2, [pc, #236]	; (80037e0 <TIM_Base_SetConfig+0x120>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d003      	beq.n	8003700 <TIM_Base_SetConfig+0x40>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a3a      	ldr	r2, [pc, #232]	; (80037e4 <TIM_Base_SetConfig+0x124>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d108      	bne.n	8003712 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	4313      	orrs	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a2f      	ldr	r2, [pc, #188]	; (80037d4 <TIM_Base_SetConfig+0x114>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d02b      	beq.n	8003772 <TIM_Base_SetConfig+0xb2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003720:	d027      	beq.n	8003772 <TIM_Base_SetConfig+0xb2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a2c      	ldr	r2, [pc, #176]	; (80037d8 <TIM_Base_SetConfig+0x118>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d023      	beq.n	8003772 <TIM_Base_SetConfig+0xb2>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a2b      	ldr	r2, [pc, #172]	; (80037dc <TIM_Base_SetConfig+0x11c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d01f      	beq.n	8003772 <TIM_Base_SetConfig+0xb2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a2a      	ldr	r2, [pc, #168]	; (80037e0 <TIM_Base_SetConfig+0x120>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d01b      	beq.n	8003772 <TIM_Base_SetConfig+0xb2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a29      	ldr	r2, [pc, #164]	; (80037e4 <TIM_Base_SetConfig+0x124>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d017      	beq.n	8003772 <TIM_Base_SetConfig+0xb2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a28      	ldr	r2, [pc, #160]	; (80037e8 <TIM_Base_SetConfig+0x128>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d013      	beq.n	8003772 <TIM_Base_SetConfig+0xb2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a27      	ldr	r2, [pc, #156]	; (80037ec <TIM_Base_SetConfig+0x12c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d00f      	beq.n	8003772 <TIM_Base_SetConfig+0xb2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a26      	ldr	r2, [pc, #152]	; (80037f0 <TIM_Base_SetConfig+0x130>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d00b      	beq.n	8003772 <TIM_Base_SetConfig+0xb2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a25      	ldr	r2, [pc, #148]	; (80037f4 <TIM_Base_SetConfig+0x134>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d007      	beq.n	8003772 <TIM_Base_SetConfig+0xb2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a24      	ldr	r2, [pc, #144]	; (80037f8 <TIM_Base_SetConfig+0x138>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d003      	beq.n	8003772 <TIM_Base_SetConfig+0xb2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a23      	ldr	r2, [pc, #140]	; (80037fc <TIM_Base_SetConfig+0x13c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d108      	bne.n	8003784 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	4313      	orrs	r3, r2
 8003782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a0a      	ldr	r2, [pc, #40]	; (80037d4 <TIM_Base_SetConfig+0x114>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d003      	beq.n	80037b8 <TIM_Base_SetConfig+0xf8>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a0c      	ldr	r2, [pc, #48]	; (80037e4 <TIM_Base_SetConfig+0x124>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d103      	bne.n	80037c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	615a      	str	r2, [r3, #20]
}
 80037c6:	bf00      	nop
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40010000 	.word	0x40010000
 80037d8:	40000400 	.word	0x40000400
 80037dc:	40000800 	.word	0x40000800
 80037e0:	40000c00 	.word	0x40000c00
 80037e4:	40010400 	.word	0x40010400
 80037e8:	40014000 	.word	0x40014000
 80037ec:	40014400 	.word	0x40014400
 80037f0:	40014800 	.word	0x40014800
 80037f4:	40001800 	.word	0x40001800
 80037f8:	40001c00 	.word	0x40001c00
 80037fc:	40002000 	.word	0x40002000

08003800 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	f023 0201 	bic.w	r2, r3, #1
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4a28      	ldr	r2, [pc, #160]	; (80038cc <TIM_TI1_SetConfig+0xcc>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d01b      	beq.n	8003866 <TIM_TI1_SetConfig+0x66>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003834:	d017      	beq.n	8003866 <TIM_TI1_SetConfig+0x66>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	4a25      	ldr	r2, [pc, #148]	; (80038d0 <TIM_TI1_SetConfig+0xd0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d013      	beq.n	8003866 <TIM_TI1_SetConfig+0x66>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4a24      	ldr	r2, [pc, #144]	; (80038d4 <TIM_TI1_SetConfig+0xd4>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00f      	beq.n	8003866 <TIM_TI1_SetConfig+0x66>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4a23      	ldr	r2, [pc, #140]	; (80038d8 <TIM_TI1_SetConfig+0xd8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00b      	beq.n	8003866 <TIM_TI1_SetConfig+0x66>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4a22      	ldr	r2, [pc, #136]	; (80038dc <TIM_TI1_SetConfig+0xdc>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d007      	beq.n	8003866 <TIM_TI1_SetConfig+0x66>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4a21      	ldr	r2, [pc, #132]	; (80038e0 <TIM_TI1_SetConfig+0xe0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d003      	beq.n	8003866 <TIM_TI1_SetConfig+0x66>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4a20      	ldr	r2, [pc, #128]	; (80038e4 <TIM_TI1_SetConfig+0xe4>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d101      	bne.n	800386a <TIM_TI1_SetConfig+0x6a>
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <TIM_TI1_SetConfig+0x6c>
 800386a:	2300      	movs	r3, #0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f023 0303 	bic.w	r3, r3, #3
 8003876:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	e003      	b.n	800388a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003890:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	b2db      	uxtb	r3, r3
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	4313      	orrs	r3, r2
 800389c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f023 030a 	bic.w	r3, r3, #10
 80038a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	f003 030a 	and.w	r3, r3, #10
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	621a      	str	r2, [r3, #32]
}
 80038be:	bf00      	nop
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40010000 	.word	0x40010000
 80038d0:	40000400 	.word	0x40000400
 80038d4:	40000800 	.word	0x40000800
 80038d8:	40000c00 	.word	0x40000c00
 80038dc:	40010400 	.word	0x40010400
 80038e0:	40014000 	.word	0x40014000
 80038e4:	40001800 	.word	0x40001800

080038e8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	f023 0210 	bic.w	r2, r3, #16
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003914:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	021b      	lsls	r3, r3, #8
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	4313      	orrs	r3, r2
 800391e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003926:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	031b      	lsls	r3, r3, #12
 800392c:	b29b      	uxth	r3, r3
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4313      	orrs	r3, r2
 8003932:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800393a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	621a      	str	r2, [r3, #32]
}
 8003956:	bf00      	nop
 8003958:	371c      	adds	r7, #28
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003962:	b480      	push	{r7}
 8003964:	b087      	sub	sp, #28
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
 800396e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f023 0303 	bic.w	r3, r3, #3
 800398e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800399e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80039b2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	621a      	str	r2, [r3, #32]
}
 80039ce:	bf00      	nop
 80039d0:	371c      	adds	r7, #28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039da:	b480      	push	{r7}
 80039dc:	b087      	sub	sp, #28
 80039de:	af00      	add	r7, sp, #0
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
 80039e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a06:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	021b      	lsls	r3, r3, #8
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	031b      	lsls	r3, r3, #12
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003a2c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	031b      	lsls	r3, r3, #12
 8003a32:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	621a      	str	r2, [r3, #32]
}
 8003a48:	bf00      	nop
 8003a4a:	371c      	adds	r7, #28
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f003 031f 	and.w	r3, r3, #31
 8003a66:	2201      	movs	r2, #1
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a1a      	ldr	r2, [r3, #32]
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	43db      	mvns	r3, r3
 8003a76:	401a      	ands	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a1a      	ldr	r2, [r3, #32]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f003 031f 	and.w	r3, r3, #31
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	621a      	str	r2, [r3, #32]
}
 8003a92:	bf00      	nop
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
	...

08003aa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e05a      	b.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a21      	ldr	r2, [pc, #132]	; (8003b7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d022      	beq.n	8003b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b04:	d01d      	beq.n	8003b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a1d      	ldr	r2, [pc, #116]	; (8003b80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d018      	beq.n	8003b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1b      	ldr	r2, [pc, #108]	; (8003b84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d013      	beq.n	8003b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1a      	ldr	r2, [pc, #104]	; (8003b88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d00e      	beq.n	8003b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a18      	ldr	r2, [pc, #96]	; (8003b8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d009      	beq.n	8003b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a17      	ldr	r2, [pc, #92]	; (8003b90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d004      	beq.n	8003b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a15      	ldr	r2, [pc, #84]	; (8003b94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d10c      	bne.n	8003b5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40010000 	.word	0x40010000
 8003b80:	40000400 	.word	0x40000400
 8003b84:	40000800 	.word	0x40000800
 8003b88:	40000c00 	.word	0x40000c00
 8003b8c:	40010400 	.word	0x40010400
 8003b90:	40014000 	.word	0x40014000
 8003b94:	40001800 	.word	0x40001800

08003b98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
          duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
          handled in milliseconds basis.
        - Set NVIC Group Priority to 4
        - Low Level Initialization
    */
    HAL_Init();
 8003bc6:	f7fd fdb5 	bl	8001734 <HAL_Init>

    /* Configure the system clock to 180 MHz */
    SystemClock_Config();
 8003bca:	f000 f833 	bl	8003c34 <SystemClock_Config>

    /* Initialize all configured peripherals */
    if (display_Init() != DISPLAY_OK) {
 8003bce:	f7fd f9c9 	bl	8000f64 <display_Init>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <main+0x1c>
        Error_Handler();
 8003bd8:	f000 f896 	bl	8003d08 <Error_Handler>
    }

    if (hcsr04_Init() != HCSR04_OK) {
 8003bdc:	f7fd fcbc 	bl	8001558 <hcsr04_Init>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <main+0x2a>
        Error_Handler();
 8003be6:	f000 f88f 	bl	8003d08 <Error_Handler>
    // uint8_t count = 0;
    static const char adv_lvl_msg[] = "Cercania:";
    // Definir un array de caracteres (string) para almacenar el resultado
    char cadena[3]; // Se reserva espacio para el número y el carácter nulo de terminación

    display_PrintStringInTopLine((uint8_t *) adv_lvl_msg);
 8003bea:	480f      	ldr	r0, [pc, #60]	; (8003c28 <main+0x68>)
 8003bec:	f7fd fa81 	bl	80010f2 <display_PrintStringInTopLine>

    /* Infinite loop */
    while (1)
    {
        hcsr04_StartMeasure();
 8003bf0:	f7fd fcc2 	bl	8001578 <hcsr04_StartMeasure>
        HAL_Delay(1000);
 8003bf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bf8:	f7fd fe08 	bl	800180c <HAL_Delay>

        int Distance = hcsr04_GetDistance();
 8003bfc:	f7fd fcda 	bl	80015b4 <hcsr04_GetDistance>
 8003c00:	4603      	mov	r3, r0
 8003c02:	607b      	str	r3, [r7, #4]
        if (Distance < 0) {
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	da03      	bge.n	8003c12 <main+0x52>
            display_PrintStringInBottomLine((uint8_t *) "Muy lejos");
 8003c0a:	4808      	ldr	r0, [pc, #32]	; (8003c2c <main+0x6c>)
 8003c0c:	f7fd fab7 	bl	800117e <display_PrintStringInBottomLine>
 8003c10:	e7ee      	b.n	8003bf0 <main+0x30>
        } else {
            // Usar sprintf para convertir el número a una cadena de caracteres
            sprintf(cadena, "%u", Distance); // %u se utiliza para especificar un entero sin signo
 8003c12:	463b      	mov	r3, r7
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	4906      	ldr	r1, [pc, #24]	; (8003c30 <main+0x70>)
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 f8a7 	bl	8003d6c <siprintf>
            display_PrintStringInBottomLine((uint8_t *) cadena);
 8003c1e:	463b      	mov	r3, r7
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fd faac 	bl	800117e <display_PrintStringInBottomLine>
    {
 8003c26:	e7e3      	b.n	8003bf0 <main+0x30>
 8003c28:	080046fc 	.word	0x080046fc
 8003c2c:	080046cc 	.word	0x080046cc
 8003c30:	080046d8 	.word	0x080046d8

08003c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b094      	sub	sp, #80	; 0x50
 8003c38:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c3a:	f107 0320 	add.w	r3, r7, #32
 8003c3e:	2230      	movs	r2, #48	; 0x30
 8003c40:	2100      	movs	r1, #0
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 f8b2 	bl	8003dac <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c48:	f107 030c 	add.w	r3, r7, #12
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	605a      	str	r2, [r3, #4]
 8003c52:	609a      	str	r2, [r3, #8]
 8003c54:	60da      	str	r2, [r3, #12]
 8003c56:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60bb      	str	r3, [r7, #8]
 8003c5c:	4b28      	ldr	r3, [pc, #160]	; (8003d00 <SystemClock_Config+0xcc>)
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	4a27      	ldr	r2, [pc, #156]	; (8003d00 <SystemClock_Config+0xcc>)
 8003c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c66:	6413      	str	r3, [r2, #64]	; 0x40
 8003c68:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <SystemClock_Config+0xcc>)
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c70:	60bb      	str	r3, [r7, #8]
 8003c72:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c74:	2300      	movs	r3, #0
 8003c76:	607b      	str	r3, [r7, #4]
 8003c78:	4b22      	ldr	r3, [pc, #136]	; (8003d04 <SystemClock_Config+0xd0>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a21      	ldr	r2, [pc, #132]	; (8003d04 <SystemClock_Config+0xd0>)
 8003c7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c82:	6013      	str	r3, [r2, #0]
 8003c84:	4b1f      	ldr	r3, [pc, #124]	; (8003d04 <SystemClock_Config+0xd0>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c8c:	607b      	str	r3, [r7, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c90:	2301      	movs	r3, #1
 8003c92:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003c94:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 4;
 8003ca4:	2304      	movs	r3, #4
 8003ca6:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 8003ca8:	23a8      	movs	r3, #168	; 0xa8
 8003caa:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003cac:	2302      	movs	r3, #2
 8003cae:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8003cb0:	2307      	movs	r3, #7
 8003cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cb4:	f107 0320 	add.w	r3, r7, #32
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fe fcf5 	bl	80026a8 <HAL_RCC_OscConfig>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <SystemClock_Config+0x94>
    {
        Error_Handler();
 8003cc4:	f000 f820 	bl	8003d08 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cc8:	230f      	movs	r3, #15
 8003cca:	60fb      	str	r3, [r7, #12]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ccc:	2302      	movs	r3, #2
 8003cce:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003cd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003cd8:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cde:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003ce0:	f107 030c 	add.w	r3, r7, #12
 8003ce4:	2105      	movs	r1, #5
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fe ff56 	bl	8002b98 <HAL_RCC_ClockConfig>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <SystemClock_Config+0xc2>
    {
        Error_Handler();
 8003cf2:	f000 f809 	bl	8003d08 <Error_Handler>
    }
}
 8003cf6:	bf00      	nop
 8003cf8:	3750      	adds	r7, #80	; 0x50
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	40023800 	.word	0x40023800
 8003d04:	40007000 	.word	0x40007000

08003d08 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
    /* Turn LED2 on */
    BSP_LED_On(LED2);
 8003d0c:	2001      	movs	r0, #1
 8003d0e:	f7fd fc5d 	bl	80015cc <BSP_LED_On>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d12:	b672      	cpsid	i
}
 8003d14:	bf00      	nop
    __disable_irq();
    while (1);
 8003d16:	e7fe      	b.n	8003d16 <Error_Handler+0xe>

08003d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d50 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d1e:	e003      	b.n	8003d28 <LoopCopyDataInit>

08003d20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d20:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d26:	3104      	adds	r1, #4

08003d28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d28:	480b      	ldr	r0, [pc, #44]	; (8003d58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d2a:	4b0c      	ldr	r3, [pc, #48]	; (8003d5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d30:	d3f6      	bcc.n	8003d20 <CopyDataInit>
  ldr  r2, =_sbss
 8003d32:	4a0b      	ldr	r2, [pc, #44]	; (8003d60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d34:	e002      	b.n	8003d3c <LoopFillZerobss>

08003d36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d38:	f842 3b04 	str.w	r3, [r2], #4

08003d3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d3c:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d40:	d3f9      	bcc.n	8003d36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d42:	f7fd fc5d 	bl	8001600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d46:	f000 f83f 	bl	8003dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d4a:	f7ff ff39 	bl	8003bc0 <main>
  bx  lr    
 8003d4e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003d50:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003d54:	0800474c 	.word	0x0800474c
  ldr  r0, =_sdata
 8003d58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d5c:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8003d60:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8003d64:	20000280 	.word	0x20000280

08003d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d68:	e7fe      	b.n	8003d68 <ADC_IRQHandler>
	...

08003d6c <siprintf>:
 8003d6c:	b40e      	push	{r1, r2, r3}
 8003d6e:	b500      	push	{lr}
 8003d70:	b09c      	sub	sp, #112	; 0x70
 8003d72:	ab1d      	add	r3, sp, #116	; 0x74
 8003d74:	9002      	str	r0, [sp, #8]
 8003d76:	9006      	str	r0, [sp, #24]
 8003d78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d7c:	4809      	ldr	r0, [pc, #36]	; (8003da4 <siprintf+0x38>)
 8003d7e:	9107      	str	r1, [sp, #28]
 8003d80:	9104      	str	r1, [sp, #16]
 8003d82:	4909      	ldr	r1, [pc, #36]	; (8003da8 <siprintf+0x3c>)
 8003d84:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d88:	9105      	str	r1, [sp, #20]
 8003d8a:	6800      	ldr	r0, [r0, #0]
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	a902      	add	r1, sp, #8
 8003d90:	f000 f992 	bl	80040b8 <_svfiprintf_r>
 8003d94:	9b02      	ldr	r3, [sp, #8]
 8003d96:	2200      	movs	r2, #0
 8003d98:	701a      	strb	r2, [r3, #0]
 8003d9a:	b01c      	add	sp, #112	; 0x70
 8003d9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003da0:	b003      	add	sp, #12
 8003da2:	4770      	bx	lr
 8003da4:	20000064 	.word	0x20000064
 8003da8:	ffff0208 	.word	0xffff0208

08003dac <memset>:
 8003dac:	4402      	add	r2, r0
 8003dae:	4603      	mov	r3, r0
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d100      	bne.n	8003db6 <memset+0xa>
 8003db4:	4770      	bx	lr
 8003db6:	f803 1b01 	strb.w	r1, [r3], #1
 8003dba:	e7f9      	b.n	8003db0 <memset+0x4>

08003dbc <__errno>:
 8003dbc:	4b01      	ldr	r3, [pc, #4]	; (8003dc4 <__errno+0x8>)
 8003dbe:	6818      	ldr	r0, [r3, #0]
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	20000064 	.word	0x20000064

08003dc8 <__libc_init_array>:
 8003dc8:	b570      	push	{r4, r5, r6, lr}
 8003dca:	4d0d      	ldr	r5, [pc, #52]	; (8003e00 <__libc_init_array+0x38>)
 8003dcc:	4c0d      	ldr	r4, [pc, #52]	; (8003e04 <__libc_init_array+0x3c>)
 8003dce:	1b64      	subs	r4, r4, r5
 8003dd0:	10a4      	asrs	r4, r4, #2
 8003dd2:	2600      	movs	r6, #0
 8003dd4:	42a6      	cmp	r6, r4
 8003dd6:	d109      	bne.n	8003dec <__libc_init_array+0x24>
 8003dd8:	4d0b      	ldr	r5, [pc, #44]	; (8003e08 <__libc_init_array+0x40>)
 8003dda:	4c0c      	ldr	r4, [pc, #48]	; (8003e0c <__libc_init_array+0x44>)
 8003ddc:	f000 fc6a 	bl	80046b4 <_init>
 8003de0:	1b64      	subs	r4, r4, r5
 8003de2:	10a4      	asrs	r4, r4, #2
 8003de4:	2600      	movs	r6, #0
 8003de6:	42a6      	cmp	r6, r4
 8003de8:	d105      	bne.n	8003df6 <__libc_init_array+0x2e>
 8003dea:	bd70      	pop	{r4, r5, r6, pc}
 8003dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8003df0:	4798      	blx	r3
 8003df2:	3601      	adds	r6, #1
 8003df4:	e7ee      	b.n	8003dd4 <__libc_init_array+0xc>
 8003df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dfa:	4798      	blx	r3
 8003dfc:	3601      	adds	r6, #1
 8003dfe:	e7f2      	b.n	8003de6 <__libc_init_array+0x1e>
 8003e00:	08004744 	.word	0x08004744
 8003e04:	08004744 	.word	0x08004744
 8003e08:	08004744 	.word	0x08004744
 8003e0c:	08004748 	.word	0x08004748

08003e10 <__retarget_lock_acquire_recursive>:
 8003e10:	4770      	bx	lr

08003e12 <__retarget_lock_release_recursive>:
 8003e12:	4770      	bx	lr

08003e14 <_free_r>:
 8003e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e16:	2900      	cmp	r1, #0
 8003e18:	d044      	beq.n	8003ea4 <_free_r+0x90>
 8003e1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e1e:	9001      	str	r0, [sp, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f1a1 0404 	sub.w	r4, r1, #4
 8003e26:	bfb8      	it	lt
 8003e28:	18e4      	addlt	r4, r4, r3
 8003e2a:	f000 f8df 	bl	8003fec <__malloc_lock>
 8003e2e:	4a1e      	ldr	r2, [pc, #120]	; (8003ea8 <_free_r+0x94>)
 8003e30:	9801      	ldr	r0, [sp, #4]
 8003e32:	6813      	ldr	r3, [r2, #0]
 8003e34:	b933      	cbnz	r3, 8003e44 <_free_r+0x30>
 8003e36:	6063      	str	r3, [r4, #4]
 8003e38:	6014      	str	r4, [r2, #0]
 8003e3a:	b003      	add	sp, #12
 8003e3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e40:	f000 b8da 	b.w	8003ff8 <__malloc_unlock>
 8003e44:	42a3      	cmp	r3, r4
 8003e46:	d908      	bls.n	8003e5a <_free_r+0x46>
 8003e48:	6825      	ldr	r5, [r4, #0]
 8003e4a:	1961      	adds	r1, r4, r5
 8003e4c:	428b      	cmp	r3, r1
 8003e4e:	bf01      	itttt	eq
 8003e50:	6819      	ldreq	r1, [r3, #0]
 8003e52:	685b      	ldreq	r3, [r3, #4]
 8003e54:	1949      	addeq	r1, r1, r5
 8003e56:	6021      	streq	r1, [r4, #0]
 8003e58:	e7ed      	b.n	8003e36 <_free_r+0x22>
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	b10b      	cbz	r3, 8003e64 <_free_r+0x50>
 8003e60:	42a3      	cmp	r3, r4
 8003e62:	d9fa      	bls.n	8003e5a <_free_r+0x46>
 8003e64:	6811      	ldr	r1, [r2, #0]
 8003e66:	1855      	adds	r5, r2, r1
 8003e68:	42a5      	cmp	r5, r4
 8003e6a:	d10b      	bne.n	8003e84 <_free_r+0x70>
 8003e6c:	6824      	ldr	r4, [r4, #0]
 8003e6e:	4421      	add	r1, r4
 8003e70:	1854      	adds	r4, r2, r1
 8003e72:	42a3      	cmp	r3, r4
 8003e74:	6011      	str	r1, [r2, #0]
 8003e76:	d1e0      	bne.n	8003e3a <_free_r+0x26>
 8003e78:	681c      	ldr	r4, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	6053      	str	r3, [r2, #4]
 8003e7e:	440c      	add	r4, r1
 8003e80:	6014      	str	r4, [r2, #0]
 8003e82:	e7da      	b.n	8003e3a <_free_r+0x26>
 8003e84:	d902      	bls.n	8003e8c <_free_r+0x78>
 8003e86:	230c      	movs	r3, #12
 8003e88:	6003      	str	r3, [r0, #0]
 8003e8a:	e7d6      	b.n	8003e3a <_free_r+0x26>
 8003e8c:	6825      	ldr	r5, [r4, #0]
 8003e8e:	1961      	adds	r1, r4, r5
 8003e90:	428b      	cmp	r3, r1
 8003e92:	bf04      	itt	eq
 8003e94:	6819      	ldreq	r1, [r3, #0]
 8003e96:	685b      	ldreq	r3, [r3, #4]
 8003e98:	6063      	str	r3, [r4, #4]
 8003e9a:	bf04      	itt	eq
 8003e9c:	1949      	addeq	r1, r1, r5
 8003e9e:	6021      	streq	r1, [r4, #0]
 8003ea0:	6054      	str	r4, [r2, #4]
 8003ea2:	e7ca      	b.n	8003e3a <_free_r+0x26>
 8003ea4:	b003      	add	sp, #12
 8003ea6:	bd30      	pop	{r4, r5, pc}
 8003ea8:	20000278 	.word	0x20000278

08003eac <sbrk_aligned>:
 8003eac:	b570      	push	{r4, r5, r6, lr}
 8003eae:	4e0e      	ldr	r6, [pc, #56]	; (8003ee8 <sbrk_aligned+0x3c>)
 8003eb0:	460c      	mov	r4, r1
 8003eb2:	6831      	ldr	r1, [r6, #0]
 8003eb4:	4605      	mov	r5, r0
 8003eb6:	b911      	cbnz	r1, 8003ebe <sbrk_aligned+0x12>
 8003eb8:	f000 fba6 	bl	8004608 <_sbrk_r>
 8003ebc:	6030      	str	r0, [r6, #0]
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	f000 fba1 	bl	8004608 <_sbrk_r>
 8003ec6:	1c43      	adds	r3, r0, #1
 8003ec8:	d00a      	beq.n	8003ee0 <sbrk_aligned+0x34>
 8003eca:	1cc4      	adds	r4, r0, #3
 8003ecc:	f024 0403 	bic.w	r4, r4, #3
 8003ed0:	42a0      	cmp	r0, r4
 8003ed2:	d007      	beq.n	8003ee4 <sbrk_aligned+0x38>
 8003ed4:	1a21      	subs	r1, r4, r0
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	f000 fb96 	bl	8004608 <_sbrk_r>
 8003edc:	3001      	adds	r0, #1
 8003ede:	d101      	bne.n	8003ee4 <sbrk_aligned+0x38>
 8003ee0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	bd70      	pop	{r4, r5, r6, pc}
 8003ee8:	2000027c 	.word	0x2000027c

08003eec <_malloc_r>:
 8003eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ef0:	1ccd      	adds	r5, r1, #3
 8003ef2:	f025 0503 	bic.w	r5, r5, #3
 8003ef6:	3508      	adds	r5, #8
 8003ef8:	2d0c      	cmp	r5, #12
 8003efa:	bf38      	it	cc
 8003efc:	250c      	movcc	r5, #12
 8003efe:	2d00      	cmp	r5, #0
 8003f00:	4607      	mov	r7, r0
 8003f02:	db01      	blt.n	8003f08 <_malloc_r+0x1c>
 8003f04:	42a9      	cmp	r1, r5
 8003f06:	d905      	bls.n	8003f14 <_malloc_r+0x28>
 8003f08:	230c      	movs	r3, #12
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	2600      	movs	r6, #0
 8003f0e:	4630      	mov	r0, r6
 8003f10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003fe8 <_malloc_r+0xfc>
 8003f18:	f000 f868 	bl	8003fec <__malloc_lock>
 8003f1c:	f8d8 3000 	ldr.w	r3, [r8]
 8003f20:	461c      	mov	r4, r3
 8003f22:	bb5c      	cbnz	r4, 8003f7c <_malloc_r+0x90>
 8003f24:	4629      	mov	r1, r5
 8003f26:	4638      	mov	r0, r7
 8003f28:	f7ff ffc0 	bl	8003eac <sbrk_aligned>
 8003f2c:	1c43      	adds	r3, r0, #1
 8003f2e:	4604      	mov	r4, r0
 8003f30:	d155      	bne.n	8003fde <_malloc_r+0xf2>
 8003f32:	f8d8 4000 	ldr.w	r4, [r8]
 8003f36:	4626      	mov	r6, r4
 8003f38:	2e00      	cmp	r6, #0
 8003f3a:	d145      	bne.n	8003fc8 <_malloc_r+0xdc>
 8003f3c:	2c00      	cmp	r4, #0
 8003f3e:	d048      	beq.n	8003fd2 <_malloc_r+0xe6>
 8003f40:	6823      	ldr	r3, [r4, #0]
 8003f42:	4631      	mov	r1, r6
 8003f44:	4638      	mov	r0, r7
 8003f46:	eb04 0903 	add.w	r9, r4, r3
 8003f4a:	f000 fb5d 	bl	8004608 <_sbrk_r>
 8003f4e:	4581      	cmp	r9, r0
 8003f50:	d13f      	bne.n	8003fd2 <_malloc_r+0xe6>
 8003f52:	6821      	ldr	r1, [r4, #0]
 8003f54:	1a6d      	subs	r5, r5, r1
 8003f56:	4629      	mov	r1, r5
 8003f58:	4638      	mov	r0, r7
 8003f5a:	f7ff ffa7 	bl	8003eac <sbrk_aligned>
 8003f5e:	3001      	adds	r0, #1
 8003f60:	d037      	beq.n	8003fd2 <_malloc_r+0xe6>
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	442b      	add	r3, r5
 8003f66:	6023      	str	r3, [r4, #0]
 8003f68:	f8d8 3000 	ldr.w	r3, [r8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d038      	beq.n	8003fe2 <_malloc_r+0xf6>
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	42a2      	cmp	r2, r4
 8003f74:	d12b      	bne.n	8003fce <_malloc_r+0xe2>
 8003f76:	2200      	movs	r2, #0
 8003f78:	605a      	str	r2, [r3, #4]
 8003f7a:	e00f      	b.n	8003f9c <_malloc_r+0xb0>
 8003f7c:	6822      	ldr	r2, [r4, #0]
 8003f7e:	1b52      	subs	r2, r2, r5
 8003f80:	d41f      	bmi.n	8003fc2 <_malloc_r+0xd6>
 8003f82:	2a0b      	cmp	r2, #11
 8003f84:	d917      	bls.n	8003fb6 <_malloc_r+0xca>
 8003f86:	1961      	adds	r1, r4, r5
 8003f88:	42a3      	cmp	r3, r4
 8003f8a:	6025      	str	r5, [r4, #0]
 8003f8c:	bf18      	it	ne
 8003f8e:	6059      	strne	r1, [r3, #4]
 8003f90:	6863      	ldr	r3, [r4, #4]
 8003f92:	bf08      	it	eq
 8003f94:	f8c8 1000 	streq.w	r1, [r8]
 8003f98:	5162      	str	r2, [r4, r5]
 8003f9a:	604b      	str	r3, [r1, #4]
 8003f9c:	4638      	mov	r0, r7
 8003f9e:	f104 060b 	add.w	r6, r4, #11
 8003fa2:	f000 f829 	bl	8003ff8 <__malloc_unlock>
 8003fa6:	f026 0607 	bic.w	r6, r6, #7
 8003faa:	1d23      	adds	r3, r4, #4
 8003fac:	1af2      	subs	r2, r6, r3
 8003fae:	d0ae      	beq.n	8003f0e <_malloc_r+0x22>
 8003fb0:	1b9b      	subs	r3, r3, r6
 8003fb2:	50a3      	str	r3, [r4, r2]
 8003fb4:	e7ab      	b.n	8003f0e <_malloc_r+0x22>
 8003fb6:	42a3      	cmp	r3, r4
 8003fb8:	6862      	ldr	r2, [r4, #4]
 8003fba:	d1dd      	bne.n	8003f78 <_malloc_r+0x8c>
 8003fbc:	f8c8 2000 	str.w	r2, [r8]
 8003fc0:	e7ec      	b.n	8003f9c <_malloc_r+0xb0>
 8003fc2:	4623      	mov	r3, r4
 8003fc4:	6864      	ldr	r4, [r4, #4]
 8003fc6:	e7ac      	b.n	8003f22 <_malloc_r+0x36>
 8003fc8:	4634      	mov	r4, r6
 8003fca:	6876      	ldr	r6, [r6, #4]
 8003fcc:	e7b4      	b.n	8003f38 <_malloc_r+0x4c>
 8003fce:	4613      	mov	r3, r2
 8003fd0:	e7cc      	b.n	8003f6c <_malloc_r+0x80>
 8003fd2:	230c      	movs	r3, #12
 8003fd4:	603b      	str	r3, [r7, #0]
 8003fd6:	4638      	mov	r0, r7
 8003fd8:	f000 f80e 	bl	8003ff8 <__malloc_unlock>
 8003fdc:	e797      	b.n	8003f0e <_malloc_r+0x22>
 8003fde:	6025      	str	r5, [r4, #0]
 8003fe0:	e7dc      	b.n	8003f9c <_malloc_r+0xb0>
 8003fe2:	605b      	str	r3, [r3, #4]
 8003fe4:	deff      	udf	#255	; 0xff
 8003fe6:	bf00      	nop
 8003fe8:	20000278 	.word	0x20000278

08003fec <__malloc_lock>:
 8003fec:	4801      	ldr	r0, [pc, #4]	; (8003ff4 <__malloc_lock+0x8>)
 8003fee:	f7ff bf0f 	b.w	8003e10 <__retarget_lock_acquire_recursive>
 8003ff2:	bf00      	nop
 8003ff4:	20000274 	.word	0x20000274

08003ff8 <__malloc_unlock>:
 8003ff8:	4801      	ldr	r0, [pc, #4]	; (8004000 <__malloc_unlock+0x8>)
 8003ffa:	f7ff bf0a 	b.w	8003e12 <__retarget_lock_release_recursive>
 8003ffe:	bf00      	nop
 8004000:	20000274 	.word	0x20000274

08004004 <__ssputs_r>:
 8004004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004008:	688e      	ldr	r6, [r1, #8]
 800400a:	461f      	mov	r7, r3
 800400c:	42be      	cmp	r6, r7
 800400e:	680b      	ldr	r3, [r1, #0]
 8004010:	4682      	mov	sl, r0
 8004012:	460c      	mov	r4, r1
 8004014:	4690      	mov	r8, r2
 8004016:	d82c      	bhi.n	8004072 <__ssputs_r+0x6e>
 8004018:	898a      	ldrh	r2, [r1, #12]
 800401a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800401e:	d026      	beq.n	800406e <__ssputs_r+0x6a>
 8004020:	6965      	ldr	r5, [r4, #20]
 8004022:	6909      	ldr	r1, [r1, #16]
 8004024:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004028:	eba3 0901 	sub.w	r9, r3, r1
 800402c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004030:	1c7b      	adds	r3, r7, #1
 8004032:	444b      	add	r3, r9
 8004034:	106d      	asrs	r5, r5, #1
 8004036:	429d      	cmp	r5, r3
 8004038:	bf38      	it	cc
 800403a:	461d      	movcc	r5, r3
 800403c:	0553      	lsls	r3, r2, #21
 800403e:	d527      	bpl.n	8004090 <__ssputs_r+0x8c>
 8004040:	4629      	mov	r1, r5
 8004042:	f7ff ff53 	bl	8003eec <_malloc_r>
 8004046:	4606      	mov	r6, r0
 8004048:	b360      	cbz	r0, 80040a4 <__ssputs_r+0xa0>
 800404a:	6921      	ldr	r1, [r4, #16]
 800404c:	464a      	mov	r2, r9
 800404e:	f000 faeb 	bl	8004628 <memcpy>
 8004052:	89a3      	ldrh	r3, [r4, #12]
 8004054:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800405c:	81a3      	strh	r3, [r4, #12]
 800405e:	6126      	str	r6, [r4, #16]
 8004060:	6165      	str	r5, [r4, #20]
 8004062:	444e      	add	r6, r9
 8004064:	eba5 0509 	sub.w	r5, r5, r9
 8004068:	6026      	str	r6, [r4, #0]
 800406a:	60a5      	str	r5, [r4, #8]
 800406c:	463e      	mov	r6, r7
 800406e:	42be      	cmp	r6, r7
 8004070:	d900      	bls.n	8004074 <__ssputs_r+0x70>
 8004072:	463e      	mov	r6, r7
 8004074:	6820      	ldr	r0, [r4, #0]
 8004076:	4632      	mov	r2, r6
 8004078:	4641      	mov	r1, r8
 800407a:	f000 faab 	bl	80045d4 <memmove>
 800407e:	68a3      	ldr	r3, [r4, #8]
 8004080:	1b9b      	subs	r3, r3, r6
 8004082:	60a3      	str	r3, [r4, #8]
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	4433      	add	r3, r6
 8004088:	6023      	str	r3, [r4, #0]
 800408a:	2000      	movs	r0, #0
 800408c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004090:	462a      	mov	r2, r5
 8004092:	f000 fad7 	bl	8004644 <_realloc_r>
 8004096:	4606      	mov	r6, r0
 8004098:	2800      	cmp	r0, #0
 800409a:	d1e0      	bne.n	800405e <__ssputs_r+0x5a>
 800409c:	6921      	ldr	r1, [r4, #16]
 800409e:	4650      	mov	r0, sl
 80040a0:	f7ff feb8 	bl	8003e14 <_free_r>
 80040a4:	230c      	movs	r3, #12
 80040a6:	f8ca 3000 	str.w	r3, [sl]
 80040aa:	89a3      	ldrh	r3, [r4, #12]
 80040ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040b0:	81a3      	strh	r3, [r4, #12]
 80040b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040b6:	e7e9      	b.n	800408c <__ssputs_r+0x88>

080040b8 <_svfiprintf_r>:
 80040b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040bc:	4698      	mov	r8, r3
 80040be:	898b      	ldrh	r3, [r1, #12]
 80040c0:	061b      	lsls	r3, r3, #24
 80040c2:	b09d      	sub	sp, #116	; 0x74
 80040c4:	4607      	mov	r7, r0
 80040c6:	460d      	mov	r5, r1
 80040c8:	4614      	mov	r4, r2
 80040ca:	d50e      	bpl.n	80040ea <_svfiprintf_r+0x32>
 80040cc:	690b      	ldr	r3, [r1, #16]
 80040ce:	b963      	cbnz	r3, 80040ea <_svfiprintf_r+0x32>
 80040d0:	2140      	movs	r1, #64	; 0x40
 80040d2:	f7ff ff0b 	bl	8003eec <_malloc_r>
 80040d6:	6028      	str	r0, [r5, #0]
 80040d8:	6128      	str	r0, [r5, #16]
 80040da:	b920      	cbnz	r0, 80040e6 <_svfiprintf_r+0x2e>
 80040dc:	230c      	movs	r3, #12
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040e4:	e0d0      	b.n	8004288 <_svfiprintf_r+0x1d0>
 80040e6:	2340      	movs	r3, #64	; 0x40
 80040e8:	616b      	str	r3, [r5, #20]
 80040ea:	2300      	movs	r3, #0
 80040ec:	9309      	str	r3, [sp, #36]	; 0x24
 80040ee:	2320      	movs	r3, #32
 80040f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80040f8:	2330      	movs	r3, #48	; 0x30
 80040fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80042a0 <_svfiprintf_r+0x1e8>
 80040fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004102:	f04f 0901 	mov.w	r9, #1
 8004106:	4623      	mov	r3, r4
 8004108:	469a      	mov	sl, r3
 800410a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800410e:	b10a      	cbz	r2, 8004114 <_svfiprintf_r+0x5c>
 8004110:	2a25      	cmp	r2, #37	; 0x25
 8004112:	d1f9      	bne.n	8004108 <_svfiprintf_r+0x50>
 8004114:	ebba 0b04 	subs.w	fp, sl, r4
 8004118:	d00b      	beq.n	8004132 <_svfiprintf_r+0x7a>
 800411a:	465b      	mov	r3, fp
 800411c:	4622      	mov	r2, r4
 800411e:	4629      	mov	r1, r5
 8004120:	4638      	mov	r0, r7
 8004122:	f7ff ff6f 	bl	8004004 <__ssputs_r>
 8004126:	3001      	adds	r0, #1
 8004128:	f000 80a9 	beq.w	800427e <_svfiprintf_r+0x1c6>
 800412c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800412e:	445a      	add	r2, fp
 8004130:	9209      	str	r2, [sp, #36]	; 0x24
 8004132:	f89a 3000 	ldrb.w	r3, [sl]
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 80a1 	beq.w	800427e <_svfiprintf_r+0x1c6>
 800413c:	2300      	movs	r3, #0
 800413e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004142:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004146:	f10a 0a01 	add.w	sl, sl, #1
 800414a:	9304      	str	r3, [sp, #16]
 800414c:	9307      	str	r3, [sp, #28]
 800414e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004152:	931a      	str	r3, [sp, #104]	; 0x68
 8004154:	4654      	mov	r4, sl
 8004156:	2205      	movs	r2, #5
 8004158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800415c:	4850      	ldr	r0, [pc, #320]	; (80042a0 <_svfiprintf_r+0x1e8>)
 800415e:	f7fc f847 	bl	80001f0 <memchr>
 8004162:	9a04      	ldr	r2, [sp, #16]
 8004164:	b9d8      	cbnz	r0, 800419e <_svfiprintf_r+0xe6>
 8004166:	06d0      	lsls	r0, r2, #27
 8004168:	bf44      	itt	mi
 800416a:	2320      	movmi	r3, #32
 800416c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004170:	0711      	lsls	r1, r2, #28
 8004172:	bf44      	itt	mi
 8004174:	232b      	movmi	r3, #43	; 0x2b
 8004176:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800417a:	f89a 3000 	ldrb.w	r3, [sl]
 800417e:	2b2a      	cmp	r3, #42	; 0x2a
 8004180:	d015      	beq.n	80041ae <_svfiprintf_r+0xf6>
 8004182:	9a07      	ldr	r2, [sp, #28]
 8004184:	4654      	mov	r4, sl
 8004186:	2000      	movs	r0, #0
 8004188:	f04f 0c0a 	mov.w	ip, #10
 800418c:	4621      	mov	r1, r4
 800418e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004192:	3b30      	subs	r3, #48	; 0x30
 8004194:	2b09      	cmp	r3, #9
 8004196:	d94d      	bls.n	8004234 <_svfiprintf_r+0x17c>
 8004198:	b1b0      	cbz	r0, 80041c8 <_svfiprintf_r+0x110>
 800419a:	9207      	str	r2, [sp, #28]
 800419c:	e014      	b.n	80041c8 <_svfiprintf_r+0x110>
 800419e:	eba0 0308 	sub.w	r3, r0, r8
 80041a2:	fa09 f303 	lsl.w	r3, r9, r3
 80041a6:	4313      	orrs	r3, r2
 80041a8:	9304      	str	r3, [sp, #16]
 80041aa:	46a2      	mov	sl, r4
 80041ac:	e7d2      	b.n	8004154 <_svfiprintf_r+0x9c>
 80041ae:	9b03      	ldr	r3, [sp, #12]
 80041b0:	1d19      	adds	r1, r3, #4
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	9103      	str	r1, [sp, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bfbb      	ittet	lt
 80041ba:	425b      	neglt	r3, r3
 80041bc:	f042 0202 	orrlt.w	r2, r2, #2
 80041c0:	9307      	strge	r3, [sp, #28]
 80041c2:	9307      	strlt	r3, [sp, #28]
 80041c4:	bfb8      	it	lt
 80041c6:	9204      	strlt	r2, [sp, #16]
 80041c8:	7823      	ldrb	r3, [r4, #0]
 80041ca:	2b2e      	cmp	r3, #46	; 0x2e
 80041cc:	d10c      	bne.n	80041e8 <_svfiprintf_r+0x130>
 80041ce:	7863      	ldrb	r3, [r4, #1]
 80041d0:	2b2a      	cmp	r3, #42	; 0x2a
 80041d2:	d134      	bne.n	800423e <_svfiprintf_r+0x186>
 80041d4:	9b03      	ldr	r3, [sp, #12]
 80041d6:	1d1a      	adds	r2, r3, #4
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	9203      	str	r2, [sp, #12]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	bfb8      	it	lt
 80041e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80041e4:	3402      	adds	r4, #2
 80041e6:	9305      	str	r3, [sp, #20]
 80041e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80042b0 <_svfiprintf_r+0x1f8>
 80041ec:	7821      	ldrb	r1, [r4, #0]
 80041ee:	2203      	movs	r2, #3
 80041f0:	4650      	mov	r0, sl
 80041f2:	f7fb fffd 	bl	80001f0 <memchr>
 80041f6:	b138      	cbz	r0, 8004208 <_svfiprintf_r+0x150>
 80041f8:	9b04      	ldr	r3, [sp, #16]
 80041fa:	eba0 000a 	sub.w	r0, r0, sl
 80041fe:	2240      	movs	r2, #64	; 0x40
 8004200:	4082      	lsls	r2, r0
 8004202:	4313      	orrs	r3, r2
 8004204:	3401      	adds	r4, #1
 8004206:	9304      	str	r3, [sp, #16]
 8004208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800420c:	4825      	ldr	r0, [pc, #148]	; (80042a4 <_svfiprintf_r+0x1ec>)
 800420e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004212:	2206      	movs	r2, #6
 8004214:	f7fb ffec 	bl	80001f0 <memchr>
 8004218:	2800      	cmp	r0, #0
 800421a:	d038      	beq.n	800428e <_svfiprintf_r+0x1d6>
 800421c:	4b22      	ldr	r3, [pc, #136]	; (80042a8 <_svfiprintf_r+0x1f0>)
 800421e:	bb1b      	cbnz	r3, 8004268 <_svfiprintf_r+0x1b0>
 8004220:	9b03      	ldr	r3, [sp, #12]
 8004222:	3307      	adds	r3, #7
 8004224:	f023 0307 	bic.w	r3, r3, #7
 8004228:	3308      	adds	r3, #8
 800422a:	9303      	str	r3, [sp, #12]
 800422c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800422e:	4433      	add	r3, r6
 8004230:	9309      	str	r3, [sp, #36]	; 0x24
 8004232:	e768      	b.n	8004106 <_svfiprintf_r+0x4e>
 8004234:	fb0c 3202 	mla	r2, ip, r2, r3
 8004238:	460c      	mov	r4, r1
 800423a:	2001      	movs	r0, #1
 800423c:	e7a6      	b.n	800418c <_svfiprintf_r+0xd4>
 800423e:	2300      	movs	r3, #0
 8004240:	3401      	adds	r4, #1
 8004242:	9305      	str	r3, [sp, #20]
 8004244:	4619      	mov	r1, r3
 8004246:	f04f 0c0a 	mov.w	ip, #10
 800424a:	4620      	mov	r0, r4
 800424c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004250:	3a30      	subs	r2, #48	; 0x30
 8004252:	2a09      	cmp	r2, #9
 8004254:	d903      	bls.n	800425e <_svfiprintf_r+0x1a6>
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0c6      	beq.n	80041e8 <_svfiprintf_r+0x130>
 800425a:	9105      	str	r1, [sp, #20]
 800425c:	e7c4      	b.n	80041e8 <_svfiprintf_r+0x130>
 800425e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004262:	4604      	mov	r4, r0
 8004264:	2301      	movs	r3, #1
 8004266:	e7f0      	b.n	800424a <_svfiprintf_r+0x192>
 8004268:	ab03      	add	r3, sp, #12
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	462a      	mov	r2, r5
 800426e:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <_svfiprintf_r+0x1f4>)
 8004270:	a904      	add	r1, sp, #16
 8004272:	4638      	mov	r0, r7
 8004274:	f3af 8000 	nop.w
 8004278:	1c42      	adds	r2, r0, #1
 800427a:	4606      	mov	r6, r0
 800427c:	d1d6      	bne.n	800422c <_svfiprintf_r+0x174>
 800427e:	89ab      	ldrh	r3, [r5, #12]
 8004280:	065b      	lsls	r3, r3, #25
 8004282:	f53f af2d 	bmi.w	80040e0 <_svfiprintf_r+0x28>
 8004286:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004288:	b01d      	add	sp, #116	; 0x74
 800428a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800428e:	ab03      	add	r3, sp, #12
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	462a      	mov	r2, r5
 8004294:	4b05      	ldr	r3, [pc, #20]	; (80042ac <_svfiprintf_r+0x1f4>)
 8004296:	a904      	add	r1, sp, #16
 8004298:	4638      	mov	r0, r7
 800429a:	f000 f879 	bl	8004390 <_printf_i>
 800429e:	e7eb      	b.n	8004278 <_svfiprintf_r+0x1c0>
 80042a0:	08004706 	.word	0x08004706
 80042a4:	08004710 	.word	0x08004710
 80042a8:	00000000 	.word	0x00000000
 80042ac:	08004005 	.word	0x08004005
 80042b0:	0800470c 	.word	0x0800470c

080042b4 <_printf_common>:
 80042b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042b8:	4616      	mov	r6, r2
 80042ba:	4699      	mov	r9, r3
 80042bc:	688a      	ldr	r2, [r1, #8]
 80042be:	690b      	ldr	r3, [r1, #16]
 80042c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042c4:	4293      	cmp	r3, r2
 80042c6:	bfb8      	it	lt
 80042c8:	4613      	movlt	r3, r2
 80042ca:	6033      	str	r3, [r6, #0]
 80042cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042d0:	4607      	mov	r7, r0
 80042d2:	460c      	mov	r4, r1
 80042d4:	b10a      	cbz	r2, 80042da <_printf_common+0x26>
 80042d6:	3301      	adds	r3, #1
 80042d8:	6033      	str	r3, [r6, #0]
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	0699      	lsls	r1, r3, #26
 80042de:	bf42      	ittt	mi
 80042e0:	6833      	ldrmi	r3, [r6, #0]
 80042e2:	3302      	addmi	r3, #2
 80042e4:	6033      	strmi	r3, [r6, #0]
 80042e6:	6825      	ldr	r5, [r4, #0]
 80042e8:	f015 0506 	ands.w	r5, r5, #6
 80042ec:	d106      	bne.n	80042fc <_printf_common+0x48>
 80042ee:	f104 0a19 	add.w	sl, r4, #25
 80042f2:	68e3      	ldr	r3, [r4, #12]
 80042f4:	6832      	ldr	r2, [r6, #0]
 80042f6:	1a9b      	subs	r3, r3, r2
 80042f8:	42ab      	cmp	r3, r5
 80042fa:	dc26      	bgt.n	800434a <_printf_common+0x96>
 80042fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004300:	1e13      	subs	r3, r2, #0
 8004302:	6822      	ldr	r2, [r4, #0]
 8004304:	bf18      	it	ne
 8004306:	2301      	movne	r3, #1
 8004308:	0692      	lsls	r2, r2, #26
 800430a:	d42b      	bmi.n	8004364 <_printf_common+0xb0>
 800430c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004310:	4649      	mov	r1, r9
 8004312:	4638      	mov	r0, r7
 8004314:	47c0      	blx	r8
 8004316:	3001      	adds	r0, #1
 8004318:	d01e      	beq.n	8004358 <_printf_common+0xa4>
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	6922      	ldr	r2, [r4, #16]
 800431e:	f003 0306 	and.w	r3, r3, #6
 8004322:	2b04      	cmp	r3, #4
 8004324:	bf02      	ittt	eq
 8004326:	68e5      	ldreq	r5, [r4, #12]
 8004328:	6833      	ldreq	r3, [r6, #0]
 800432a:	1aed      	subeq	r5, r5, r3
 800432c:	68a3      	ldr	r3, [r4, #8]
 800432e:	bf0c      	ite	eq
 8004330:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004334:	2500      	movne	r5, #0
 8004336:	4293      	cmp	r3, r2
 8004338:	bfc4      	itt	gt
 800433a:	1a9b      	subgt	r3, r3, r2
 800433c:	18ed      	addgt	r5, r5, r3
 800433e:	2600      	movs	r6, #0
 8004340:	341a      	adds	r4, #26
 8004342:	42b5      	cmp	r5, r6
 8004344:	d11a      	bne.n	800437c <_printf_common+0xc8>
 8004346:	2000      	movs	r0, #0
 8004348:	e008      	b.n	800435c <_printf_common+0xa8>
 800434a:	2301      	movs	r3, #1
 800434c:	4652      	mov	r2, sl
 800434e:	4649      	mov	r1, r9
 8004350:	4638      	mov	r0, r7
 8004352:	47c0      	blx	r8
 8004354:	3001      	adds	r0, #1
 8004356:	d103      	bne.n	8004360 <_printf_common+0xac>
 8004358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800435c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004360:	3501      	adds	r5, #1
 8004362:	e7c6      	b.n	80042f2 <_printf_common+0x3e>
 8004364:	18e1      	adds	r1, r4, r3
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	2030      	movs	r0, #48	; 0x30
 800436a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800436e:	4422      	add	r2, r4
 8004370:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004374:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004378:	3302      	adds	r3, #2
 800437a:	e7c7      	b.n	800430c <_printf_common+0x58>
 800437c:	2301      	movs	r3, #1
 800437e:	4622      	mov	r2, r4
 8004380:	4649      	mov	r1, r9
 8004382:	4638      	mov	r0, r7
 8004384:	47c0      	blx	r8
 8004386:	3001      	adds	r0, #1
 8004388:	d0e6      	beq.n	8004358 <_printf_common+0xa4>
 800438a:	3601      	adds	r6, #1
 800438c:	e7d9      	b.n	8004342 <_printf_common+0x8e>
	...

08004390 <_printf_i>:
 8004390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004394:	7e0f      	ldrb	r7, [r1, #24]
 8004396:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004398:	2f78      	cmp	r7, #120	; 0x78
 800439a:	4691      	mov	r9, r2
 800439c:	4680      	mov	r8, r0
 800439e:	460c      	mov	r4, r1
 80043a0:	469a      	mov	sl, r3
 80043a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043a6:	d807      	bhi.n	80043b8 <_printf_i+0x28>
 80043a8:	2f62      	cmp	r7, #98	; 0x62
 80043aa:	d80a      	bhi.n	80043c2 <_printf_i+0x32>
 80043ac:	2f00      	cmp	r7, #0
 80043ae:	f000 80d4 	beq.w	800455a <_printf_i+0x1ca>
 80043b2:	2f58      	cmp	r7, #88	; 0x58
 80043b4:	f000 80c0 	beq.w	8004538 <_printf_i+0x1a8>
 80043b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043c0:	e03a      	b.n	8004438 <_printf_i+0xa8>
 80043c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043c6:	2b15      	cmp	r3, #21
 80043c8:	d8f6      	bhi.n	80043b8 <_printf_i+0x28>
 80043ca:	a101      	add	r1, pc, #4	; (adr r1, 80043d0 <_printf_i+0x40>)
 80043cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043d0:	08004429 	.word	0x08004429
 80043d4:	0800443d 	.word	0x0800443d
 80043d8:	080043b9 	.word	0x080043b9
 80043dc:	080043b9 	.word	0x080043b9
 80043e0:	080043b9 	.word	0x080043b9
 80043e4:	080043b9 	.word	0x080043b9
 80043e8:	0800443d 	.word	0x0800443d
 80043ec:	080043b9 	.word	0x080043b9
 80043f0:	080043b9 	.word	0x080043b9
 80043f4:	080043b9 	.word	0x080043b9
 80043f8:	080043b9 	.word	0x080043b9
 80043fc:	08004541 	.word	0x08004541
 8004400:	08004469 	.word	0x08004469
 8004404:	080044fb 	.word	0x080044fb
 8004408:	080043b9 	.word	0x080043b9
 800440c:	080043b9 	.word	0x080043b9
 8004410:	08004563 	.word	0x08004563
 8004414:	080043b9 	.word	0x080043b9
 8004418:	08004469 	.word	0x08004469
 800441c:	080043b9 	.word	0x080043b9
 8004420:	080043b9 	.word	0x080043b9
 8004424:	08004503 	.word	0x08004503
 8004428:	682b      	ldr	r3, [r5, #0]
 800442a:	1d1a      	adds	r2, r3, #4
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	602a      	str	r2, [r5, #0]
 8004430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004438:	2301      	movs	r3, #1
 800443a:	e09f      	b.n	800457c <_printf_i+0x1ec>
 800443c:	6820      	ldr	r0, [r4, #0]
 800443e:	682b      	ldr	r3, [r5, #0]
 8004440:	0607      	lsls	r7, r0, #24
 8004442:	f103 0104 	add.w	r1, r3, #4
 8004446:	6029      	str	r1, [r5, #0]
 8004448:	d501      	bpl.n	800444e <_printf_i+0xbe>
 800444a:	681e      	ldr	r6, [r3, #0]
 800444c:	e003      	b.n	8004456 <_printf_i+0xc6>
 800444e:	0646      	lsls	r6, r0, #25
 8004450:	d5fb      	bpl.n	800444a <_printf_i+0xba>
 8004452:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004456:	2e00      	cmp	r6, #0
 8004458:	da03      	bge.n	8004462 <_printf_i+0xd2>
 800445a:	232d      	movs	r3, #45	; 0x2d
 800445c:	4276      	negs	r6, r6
 800445e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004462:	485a      	ldr	r0, [pc, #360]	; (80045cc <_printf_i+0x23c>)
 8004464:	230a      	movs	r3, #10
 8004466:	e012      	b.n	800448e <_printf_i+0xfe>
 8004468:	682b      	ldr	r3, [r5, #0]
 800446a:	6820      	ldr	r0, [r4, #0]
 800446c:	1d19      	adds	r1, r3, #4
 800446e:	6029      	str	r1, [r5, #0]
 8004470:	0605      	lsls	r5, r0, #24
 8004472:	d501      	bpl.n	8004478 <_printf_i+0xe8>
 8004474:	681e      	ldr	r6, [r3, #0]
 8004476:	e002      	b.n	800447e <_printf_i+0xee>
 8004478:	0641      	lsls	r1, r0, #25
 800447a:	d5fb      	bpl.n	8004474 <_printf_i+0xe4>
 800447c:	881e      	ldrh	r6, [r3, #0]
 800447e:	4853      	ldr	r0, [pc, #332]	; (80045cc <_printf_i+0x23c>)
 8004480:	2f6f      	cmp	r7, #111	; 0x6f
 8004482:	bf0c      	ite	eq
 8004484:	2308      	moveq	r3, #8
 8004486:	230a      	movne	r3, #10
 8004488:	2100      	movs	r1, #0
 800448a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800448e:	6865      	ldr	r5, [r4, #4]
 8004490:	60a5      	str	r5, [r4, #8]
 8004492:	2d00      	cmp	r5, #0
 8004494:	bfa2      	ittt	ge
 8004496:	6821      	ldrge	r1, [r4, #0]
 8004498:	f021 0104 	bicge.w	r1, r1, #4
 800449c:	6021      	strge	r1, [r4, #0]
 800449e:	b90e      	cbnz	r6, 80044a4 <_printf_i+0x114>
 80044a0:	2d00      	cmp	r5, #0
 80044a2:	d04b      	beq.n	800453c <_printf_i+0x1ac>
 80044a4:	4615      	mov	r5, r2
 80044a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80044aa:	fb03 6711 	mls	r7, r3, r1, r6
 80044ae:	5dc7      	ldrb	r7, [r0, r7]
 80044b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044b4:	4637      	mov	r7, r6
 80044b6:	42bb      	cmp	r3, r7
 80044b8:	460e      	mov	r6, r1
 80044ba:	d9f4      	bls.n	80044a6 <_printf_i+0x116>
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d10b      	bne.n	80044d8 <_printf_i+0x148>
 80044c0:	6823      	ldr	r3, [r4, #0]
 80044c2:	07de      	lsls	r6, r3, #31
 80044c4:	d508      	bpl.n	80044d8 <_printf_i+0x148>
 80044c6:	6923      	ldr	r3, [r4, #16]
 80044c8:	6861      	ldr	r1, [r4, #4]
 80044ca:	4299      	cmp	r1, r3
 80044cc:	bfde      	ittt	le
 80044ce:	2330      	movle	r3, #48	; 0x30
 80044d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044d4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80044d8:	1b52      	subs	r2, r2, r5
 80044da:	6122      	str	r2, [r4, #16]
 80044dc:	f8cd a000 	str.w	sl, [sp]
 80044e0:	464b      	mov	r3, r9
 80044e2:	aa03      	add	r2, sp, #12
 80044e4:	4621      	mov	r1, r4
 80044e6:	4640      	mov	r0, r8
 80044e8:	f7ff fee4 	bl	80042b4 <_printf_common>
 80044ec:	3001      	adds	r0, #1
 80044ee:	d14a      	bne.n	8004586 <_printf_i+0x1f6>
 80044f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044f4:	b004      	add	sp, #16
 80044f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	f043 0320 	orr.w	r3, r3, #32
 8004500:	6023      	str	r3, [r4, #0]
 8004502:	4833      	ldr	r0, [pc, #204]	; (80045d0 <_printf_i+0x240>)
 8004504:	2778      	movs	r7, #120	; 0x78
 8004506:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	6829      	ldr	r1, [r5, #0]
 800450e:	061f      	lsls	r7, r3, #24
 8004510:	f851 6b04 	ldr.w	r6, [r1], #4
 8004514:	d402      	bmi.n	800451c <_printf_i+0x18c>
 8004516:	065f      	lsls	r7, r3, #25
 8004518:	bf48      	it	mi
 800451a:	b2b6      	uxthmi	r6, r6
 800451c:	07df      	lsls	r7, r3, #31
 800451e:	bf48      	it	mi
 8004520:	f043 0320 	orrmi.w	r3, r3, #32
 8004524:	6029      	str	r1, [r5, #0]
 8004526:	bf48      	it	mi
 8004528:	6023      	strmi	r3, [r4, #0]
 800452a:	b91e      	cbnz	r6, 8004534 <_printf_i+0x1a4>
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	f023 0320 	bic.w	r3, r3, #32
 8004532:	6023      	str	r3, [r4, #0]
 8004534:	2310      	movs	r3, #16
 8004536:	e7a7      	b.n	8004488 <_printf_i+0xf8>
 8004538:	4824      	ldr	r0, [pc, #144]	; (80045cc <_printf_i+0x23c>)
 800453a:	e7e4      	b.n	8004506 <_printf_i+0x176>
 800453c:	4615      	mov	r5, r2
 800453e:	e7bd      	b.n	80044bc <_printf_i+0x12c>
 8004540:	682b      	ldr	r3, [r5, #0]
 8004542:	6826      	ldr	r6, [r4, #0]
 8004544:	6961      	ldr	r1, [r4, #20]
 8004546:	1d18      	adds	r0, r3, #4
 8004548:	6028      	str	r0, [r5, #0]
 800454a:	0635      	lsls	r5, r6, #24
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	d501      	bpl.n	8004554 <_printf_i+0x1c4>
 8004550:	6019      	str	r1, [r3, #0]
 8004552:	e002      	b.n	800455a <_printf_i+0x1ca>
 8004554:	0670      	lsls	r0, r6, #25
 8004556:	d5fb      	bpl.n	8004550 <_printf_i+0x1c0>
 8004558:	8019      	strh	r1, [r3, #0]
 800455a:	2300      	movs	r3, #0
 800455c:	6123      	str	r3, [r4, #16]
 800455e:	4615      	mov	r5, r2
 8004560:	e7bc      	b.n	80044dc <_printf_i+0x14c>
 8004562:	682b      	ldr	r3, [r5, #0]
 8004564:	1d1a      	adds	r2, r3, #4
 8004566:	602a      	str	r2, [r5, #0]
 8004568:	681d      	ldr	r5, [r3, #0]
 800456a:	6862      	ldr	r2, [r4, #4]
 800456c:	2100      	movs	r1, #0
 800456e:	4628      	mov	r0, r5
 8004570:	f7fb fe3e 	bl	80001f0 <memchr>
 8004574:	b108      	cbz	r0, 800457a <_printf_i+0x1ea>
 8004576:	1b40      	subs	r0, r0, r5
 8004578:	6060      	str	r0, [r4, #4]
 800457a:	6863      	ldr	r3, [r4, #4]
 800457c:	6123      	str	r3, [r4, #16]
 800457e:	2300      	movs	r3, #0
 8004580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004584:	e7aa      	b.n	80044dc <_printf_i+0x14c>
 8004586:	6923      	ldr	r3, [r4, #16]
 8004588:	462a      	mov	r2, r5
 800458a:	4649      	mov	r1, r9
 800458c:	4640      	mov	r0, r8
 800458e:	47d0      	blx	sl
 8004590:	3001      	adds	r0, #1
 8004592:	d0ad      	beq.n	80044f0 <_printf_i+0x160>
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	079b      	lsls	r3, r3, #30
 8004598:	d413      	bmi.n	80045c2 <_printf_i+0x232>
 800459a:	68e0      	ldr	r0, [r4, #12]
 800459c:	9b03      	ldr	r3, [sp, #12]
 800459e:	4298      	cmp	r0, r3
 80045a0:	bfb8      	it	lt
 80045a2:	4618      	movlt	r0, r3
 80045a4:	e7a6      	b.n	80044f4 <_printf_i+0x164>
 80045a6:	2301      	movs	r3, #1
 80045a8:	4632      	mov	r2, r6
 80045aa:	4649      	mov	r1, r9
 80045ac:	4640      	mov	r0, r8
 80045ae:	47d0      	blx	sl
 80045b0:	3001      	adds	r0, #1
 80045b2:	d09d      	beq.n	80044f0 <_printf_i+0x160>
 80045b4:	3501      	adds	r5, #1
 80045b6:	68e3      	ldr	r3, [r4, #12]
 80045b8:	9903      	ldr	r1, [sp, #12]
 80045ba:	1a5b      	subs	r3, r3, r1
 80045bc:	42ab      	cmp	r3, r5
 80045be:	dcf2      	bgt.n	80045a6 <_printf_i+0x216>
 80045c0:	e7eb      	b.n	800459a <_printf_i+0x20a>
 80045c2:	2500      	movs	r5, #0
 80045c4:	f104 0619 	add.w	r6, r4, #25
 80045c8:	e7f5      	b.n	80045b6 <_printf_i+0x226>
 80045ca:	bf00      	nop
 80045cc:	08004717 	.word	0x08004717
 80045d0:	08004728 	.word	0x08004728

080045d4 <memmove>:
 80045d4:	4288      	cmp	r0, r1
 80045d6:	b510      	push	{r4, lr}
 80045d8:	eb01 0402 	add.w	r4, r1, r2
 80045dc:	d902      	bls.n	80045e4 <memmove+0x10>
 80045de:	4284      	cmp	r4, r0
 80045e0:	4623      	mov	r3, r4
 80045e2:	d807      	bhi.n	80045f4 <memmove+0x20>
 80045e4:	1e43      	subs	r3, r0, #1
 80045e6:	42a1      	cmp	r1, r4
 80045e8:	d008      	beq.n	80045fc <memmove+0x28>
 80045ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045f2:	e7f8      	b.n	80045e6 <memmove+0x12>
 80045f4:	4402      	add	r2, r0
 80045f6:	4601      	mov	r1, r0
 80045f8:	428a      	cmp	r2, r1
 80045fa:	d100      	bne.n	80045fe <memmove+0x2a>
 80045fc:	bd10      	pop	{r4, pc}
 80045fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004602:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004606:	e7f7      	b.n	80045f8 <memmove+0x24>

08004608 <_sbrk_r>:
 8004608:	b538      	push	{r3, r4, r5, lr}
 800460a:	4d06      	ldr	r5, [pc, #24]	; (8004624 <_sbrk_r+0x1c>)
 800460c:	2300      	movs	r3, #0
 800460e:	4604      	mov	r4, r0
 8004610:	4608      	mov	r0, r1
 8004612:	602b      	str	r3, [r5, #0]
 8004614:	f7fd f858 	bl	80016c8 <_sbrk>
 8004618:	1c43      	adds	r3, r0, #1
 800461a:	d102      	bne.n	8004622 <_sbrk_r+0x1a>
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	b103      	cbz	r3, 8004622 <_sbrk_r+0x1a>
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	bd38      	pop	{r3, r4, r5, pc}
 8004624:	20000270 	.word	0x20000270

08004628 <memcpy>:
 8004628:	440a      	add	r2, r1
 800462a:	4291      	cmp	r1, r2
 800462c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004630:	d100      	bne.n	8004634 <memcpy+0xc>
 8004632:	4770      	bx	lr
 8004634:	b510      	push	{r4, lr}
 8004636:	f811 4b01 	ldrb.w	r4, [r1], #1
 800463a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800463e:	4291      	cmp	r1, r2
 8004640:	d1f9      	bne.n	8004636 <memcpy+0xe>
 8004642:	bd10      	pop	{r4, pc}

08004644 <_realloc_r>:
 8004644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004648:	4680      	mov	r8, r0
 800464a:	4614      	mov	r4, r2
 800464c:	460e      	mov	r6, r1
 800464e:	b921      	cbnz	r1, 800465a <_realloc_r+0x16>
 8004650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004654:	4611      	mov	r1, r2
 8004656:	f7ff bc49 	b.w	8003eec <_malloc_r>
 800465a:	b92a      	cbnz	r2, 8004668 <_realloc_r+0x24>
 800465c:	f7ff fbda 	bl	8003e14 <_free_r>
 8004660:	4625      	mov	r5, r4
 8004662:	4628      	mov	r0, r5
 8004664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004668:	f000 f81b 	bl	80046a2 <_malloc_usable_size_r>
 800466c:	4284      	cmp	r4, r0
 800466e:	4607      	mov	r7, r0
 8004670:	d802      	bhi.n	8004678 <_realloc_r+0x34>
 8004672:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004676:	d812      	bhi.n	800469e <_realloc_r+0x5a>
 8004678:	4621      	mov	r1, r4
 800467a:	4640      	mov	r0, r8
 800467c:	f7ff fc36 	bl	8003eec <_malloc_r>
 8004680:	4605      	mov	r5, r0
 8004682:	2800      	cmp	r0, #0
 8004684:	d0ed      	beq.n	8004662 <_realloc_r+0x1e>
 8004686:	42bc      	cmp	r4, r7
 8004688:	4622      	mov	r2, r4
 800468a:	4631      	mov	r1, r6
 800468c:	bf28      	it	cs
 800468e:	463a      	movcs	r2, r7
 8004690:	f7ff ffca 	bl	8004628 <memcpy>
 8004694:	4631      	mov	r1, r6
 8004696:	4640      	mov	r0, r8
 8004698:	f7ff fbbc 	bl	8003e14 <_free_r>
 800469c:	e7e1      	b.n	8004662 <_realloc_r+0x1e>
 800469e:	4635      	mov	r5, r6
 80046a0:	e7df      	b.n	8004662 <_realloc_r+0x1e>

080046a2 <_malloc_usable_size_r>:
 80046a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046a6:	1f18      	subs	r0, r3, #4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	bfbc      	itt	lt
 80046ac:	580b      	ldrlt	r3, [r1, r0]
 80046ae:	18c0      	addlt	r0, r0, r3
 80046b0:	4770      	bx	lr
	...

080046b4 <_init>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	bf00      	nop
 80046b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ba:	bc08      	pop	{r3}
 80046bc:	469e      	mov	lr, r3
 80046be:	4770      	bx	lr

080046c0 <_fini>:
 80046c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c2:	bf00      	nop
 80046c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c6:	bc08      	pop	{r3}
 80046c8:	469e      	mov	lr, r3
 80046ca:	4770      	bx	lr
