
parking_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ebc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800506c  0800506c  0001506c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800515c  0800515c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800515c  0800515c  0001515c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005164  08005164  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005164  08005164  00015164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005168  08005168  00015168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800516c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          0000025c  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002c4  200002c4  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f774  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000228f  00000000  00000000  0002f84f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f80  00000000  00000000  00031ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c43  00000000  00000000  00032a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003752  00000000  00000000  000336a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015881  00000000  00000000  00036df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ec49e  00000000  00000000  0004c676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004798  00000000  00000000  00138b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  0013d2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005054 	.word	0x08005054

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08005054 	.word	0x08005054

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a90:	f000 b970 	b.w	8000d74 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9e08      	ldr	r6, [sp, #32]
 8000ab2:	460d      	mov	r5, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	460f      	mov	r7, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4694      	mov	ip, r2
 8000ac0:	d965      	bls.n	8000b8e <__udivmoddi4+0xe2>
 8000ac2:	fab2 f382 	clz	r3, r2
 8000ac6:	b143      	cbz	r3, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000acc:	f1c3 0220 	rsb	r2, r3, #32
 8000ad0:	409f      	lsls	r7, r3
 8000ad2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ad6:	4317      	orrs	r7, r2
 8000ad8:	409c      	lsls	r4, r3
 8000ada:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ade:	fa1f f58c 	uxth.w	r5, ip
 8000ae2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ae6:	0c22      	lsrs	r2, r4, #16
 8000ae8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000aec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000af0:	fb01 f005 	mul.w	r0, r1, r5
 8000af4:	4290      	cmp	r0, r2
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000af8:	eb1c 0202 	adds.w	r2, ip, r2
 8000afc:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b00:	f080 811c 	bcs.w	8000d3c <__udivmoddi4+0x290>
 8000b04:	4290      	cmp	r0, r2
 8000b06:	f240 8119 	bls.w	8000d3c <__udivmoddi4+0x290>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	4462      	add	r2, ip
 8000b0e:	1a12      	subs	r2, r2, r0
 8000b10:	b2a4      	uxth	r4, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b1e:	fb00 f505 	mul.w	r5, r0, r5
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	d90a      	bls.n	8000b3c <__udivmoddi4+0x90>
 8000b26:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b2e:	f080 8107 	bcs.w	8000d40 <__udivmoddi4+0x294>
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	f240 8104 	bls.w	8000d40 <__udivmoddi4+0x294>
 8000b38:	4464      	add	r4, ip
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b40:	1b64      	subs	r4, r4, r5
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11e      	cbz	r6, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40dc      	lsrs	r4, r3
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0xbc>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	f000 80ed 	beq.w	8000d36 <__udivmoddi4+0x28a>
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b62:	4608      	mov	r0, r1
 8000b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b68:	fab3 f183 	clz	r1, r3
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	d149      	bne.n	8000c04 <__udivmoddi4+0x158>
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	d302      	bcc.n	8000b7a <__udivmoddi4+0xce>
 8000b74:	4282      	cmp	r2, r0
 8000b76:	f200 80f8 	bhi.w	8000d6a <__udivmoddi4+0x2be>
 8000b7a:	1a84      	subs	r4, r0, r2
 8000b7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b80:	2001      	movs	r0, #1
 8000b82:	4617      	mov	r7, r2
 8000b84:	2e00      	cmp	r6, #0
 8000b86:	d0e2      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	e9c6 4700 	strd	r4, r7, [r6]
 8000b8c:	e7df      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b8e:	b902      	cbnz	r2, 8000b92 <__udivmoddi4+0xe6>
 8000b90:	deff      	udf	#255	; 0xff
 8000b92:	fab2 f382 	clz	r3, r2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f040 8090 	bne.w	8000cbc <__udivmoddi4+0x210>
 8000b9c:	1a8a      	subs	r2, r1, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f fe8c 	uxth.w	lr, ip
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bac:	fb07 2015 	mls	r0, r7, r5, r2
 8000bb0:	0c22      	lsrs	r2, r4, #16
 8000bb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bb6:	fb0e f005 	mul.w	r0, lr, r5
 8000bba:	4290      	cmp	r0, r2
 8000bbc:	d908      	bls.n	8000bd0 <__udivmoddi4+0x124>
 8000bbe:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x122>
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	f200 80cb 	bhi.w	8000d64 <__udivmoddi4+0x2b8>
 8000bce:	4645      	mov	r5, r8
 8000bd0:	1a12      	subs	r2, r2, r0
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bd8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be0:	fb0e fe00 	mul.w	lr, lr, r0
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d908      	bls.n	8000bfa <__udivmoddi4+0x14e>
 8000be8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bec:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000bf0:	d202      	bcs.n	8000bf8 <__udivmoddi4+0x14c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f200 80bb 	bhi.w	8000d6e <__udivmoddi4+0x2c2>
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	eba4 040e 	sub.w	r4, r4, lr
 8000bfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c02:	e79f      	b.n	8000b44 <__udivmoddi4+0x98>
 8000c04:	f1c1 0720 	rsb	r7, r1, #32
 8000c08:	408b      	lsls	r3, r1
 8000c0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c12:	fa05 f401 	lsl.w	r4, r5, r1
 8000c16:	fa20 f307 	lsr.w	r3, r0, r7
 8000c1a:	40fd      	lsrs	r5, r7
 8000c1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c20:	4323      	orrs	r3, r4
 8000c22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c26:	fa1f fe8c 	uxth.w	lr, ip
 8000c2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c2e:	0c1c      	lsrs	r4, r3, #16
 8000c30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c34:	fb08 f50e 	mul.w	r5, r8, lr
 8000c38:	42a5      	cmp	r5, r4
 8000c3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c42:	d90b      	bls.n	8000c5c <__udivmoddi4+0x1b0>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c4c:	f080 8088 	bcs.w	8000d60 <__udivmoddi4+0x2b4>
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	f240 8085 	bls.w	8000d60 <__udivmoddi4+0x2b4>
 8000c56:	f1a8 0802 	sub.w	r8, r8, #2
 8000c5a:	4464      	add	r4, ip
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	b29d      	uxth	r5, r3
 8000c60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c64:	fb09 4413 	mls	r4, r9, r3, r4
 8000c68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c70:	45a6      	cmp	lr, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x1da>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000c7c:	d26c      	bcs.n	8000d58 <__udivmoddi4+0x2ac>
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	d96a      	bls.n	8000d58 <__udivmoddi4+0x2ac>
 8000c82:	3b02      	subs	r3, #2
 8000c84:	4464      	add	r4, ip
 8000c86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c8e:	eba4 040e 	sub.w	r4, r4, lr
 8000c92:	42ac      	cmp	r4, r5
 8000c94:	46c8      	mov	r8, r9
 8000c96:	46ae      	mov	lr, r5
 8000c98:	d356      	bcc.n	8000d48 <__udivmoddi4+0x29c>
 8000c9a:	d053      	beq.n	8000d44 <__udivmoddi4+0x298>
 8000c9c:	b156      	cbz	r6, 8000cb4 <__udivmoddi4+0x208>
 8000c9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000ca2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ca6:	fa04 f707 	lsl.w	r7, r4, r7
 8000caa:	40ca      	lsrs	r2, r1
 8000cac:	40cc      	lsrs	r4, r1
 8000cae:	4317      	orrs	r7, r2
 8000cb0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	f1c3 0120 	rsb	r1, r3, #32
 8000cc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cc8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ccc:	409d      	lsls	r5, r3
 8000cce:	432a      	orrs	r2, r5
 8000cd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd4:	fa1f fe8c 	uxth.w	lr, ip
 8000cd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cdc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ce6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cea:	428d      	cmp	r5, r1
 8000cec:	fa04 f403 	lsl.w	r4, r4, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x258>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000cfa:	d22f      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000cfc:	428d      	cmp	r5, r1
 8000cfe:	d92d      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d00:	3802      	subs	r0, #2
 8000d02:	4461      	add	r1, ip
 8000d04:	1b49      	subs	r1, r1, r5
 8000d06:	b292      	uxth	r2, r2
 8000d08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d14:	fb05 f10e 	mul.w	r1, r5, lr
 8000d18:	4291      	cmp	r1, r2
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x282>
 8000d1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d20:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d24:	d216      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000d26:	4291      	cmp	r1, r2
 8000d28:	d914      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000d2a:	3d02      	subs	r5, #2
 8000d2c:	4462      	add	r2, ip
 8000d2e:	1a52      	subs	r2, r2, r1
 8000d30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d34:	e738      	b.n	8000ba8 <__udivmoddi4+0xfc>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e708      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000d3c:	4639      	mov	r1, r7
 8000d3e:	e6e6      	b.n	8000b0e <__udivmoddi4+0x62>
 8000d40:	4610      	mov	r0, r2
 8000d42:	e6fb      	b.n	8000b3c <__udivmoddi4+0x90>
 8000d44:	4548      	cmp	r0, r9
 8000d46:	d2a9      	bcs.n	8000c9c <__udivmoddi4+0x1f0>
 8000d48:	ebb9 0802 	subs.w	r8, r9, r2
 8000d4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d50:	3b01      	subs	r3, #1
 8000d52:	e7a3      	b.n	8000c9c <__udivmoddi4+0x1f0>
 8000d54:	4645      	mov	r5, r8
 8000d56:	e7ea      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d58:	462b      	mov	r3, r5
 8000d5a:	e794      	b.n	8000c86 <__udivmoddi4+0x1da>
 8000d5c:	4640      	mov	r0, r8
 8000d5e:	e7d1      	b.n	8000d04 <__udivmoddi4+0x258>
 8000d60:	46d0      	mov	r8, sl
 8000d62:	e77b      	b.n	8000c5c <__udivmoddi4+0x1b0>
 8000d64:	3d02      	subs	r5, #2
 8000d66:	4462      	add	r2, ip
 8000d68:	e732      	b.n	8000bd0 <__udivmoddi4+0x124>
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e70a      	b.n	8000b84 <__udivmoddi4+0xd8>
 8000d6e:	4464      	add	r4, ip
 8000d70:	3802      	subs	r0, #2
 8000d72:	e742      	b.n	8000bfa <__udivmoddi4+0x14e>

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <display_Send4bitsCmd>:
                                            if (x != DISPLAY_OK) { return x; } \
                                        } while(0U)

/* Private functions ---------------------------------------------------------*/
static display_Status_t display_Send4bitsCmd(uint8_t value, display_RsType_t rs_type)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af02      	add	r7, sp, #8
 8000d7e:	4603      	mov	r3, r0
 8000d80:	460a      	mov	r2, r1
 8000d82:	71fb      	strb	r3, [r7, #7]
 8000d84:	4613      	mov	r3, r2
 8000d86:	71bb      	strb	r3, [r7, #6]
    uint8_t cmd = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	73fb      	strb	r3, [r7, #15]
    // E = enable bit
    // B = enable backlight bit
    // R (R/W) = read/write bit
    // T (RS) = data or control bit
    // DDDDEBRT
    HAL_Delay(DELAY_1MS);
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f000 fe25 	bl	80019dc <HAL_Delay>
    cmd = value | BIT_BACKLIGHT | BIT_ENABLE | rs_type;
 8000d92:	79fa      	ldrb	r2, [r7, #7]
 8000d94:	79bb      	ldrb	r3, [r7, #6]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	f043 030c 	orr.w	r3, r3, #12
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	73fb      	strb	r3, [r7, #15]
    CHECK_I2C(display_TransmitData(cmd));
 8000da2:	f107 020f 	add.w	r2, r7, #15
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	2301      	movs	r3, #1
 8000dae:	214e      	movs	r1, #78	; 0x4e
 8000db0:	4813      	ldr	r0, [pc, #76]	; (8000e00 <display_Send4bitsCmd+0x88>)
 8000db2:	f001 fa53 	bl	800225c <HAL_I2C_Master_Transmit>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <display_Send4bitsCmd+0x48>
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	e01a      	b.n	8000df6 <display_Send4bitsCmd+0x7e>
    HAL_Delay(DELAY_1MS);
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f000 fe0b 	bl	80019dc <HAL_Delay>
    cmd = value | BIT_BACKLIGHT | rs_type;
 8000dc6:	79fa      	ldrb	r2, [r7, #7]
 8000dc8:	79bb      	ldrb	r3, [r7, #6]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	f043 0308 	orr.w	r3, r3, #8
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	73fb      	strb	r3, [r7, #15]
    CHECK_I2C(display_TransmitData(cmd));
 8000dd6:	f107 020f 	add.w	r2, r7, #15
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2301      	movs	r3, #1
 8000de2:	214e      	movs	r1, #78	; 0x4e
 8000de4:	4806      	ldr	r0, [pc, #24]	; (8000e00 <display_Send4bitsCmd+0x88>)
 8000de6:	f001 fa39 	bl	800225c <HAL_I2C_Master_Transmit>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <display_Send4bitsCmd+0x7c>
 8000df0:	2302      	movs	r3, #2
 8000df2:	e000      	b.n	8000df6 <display_Send4bitsCmd+0x7e>
    return DISPLAY_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000084 	.word	0x20000084

08000e04 <display_Send8bitsCmd>:

static display_Status_t display_Send8bitsCmd(uint8_t value, display_RsType_t rs_type)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	460a      	mov	r2, r1
 8000e0e:	71fb      	strb	r3, [r7, #7]
 8000e10:	4613      	mov	r3, r2
 8000e12:	71bb      	strb	r3, [r7, #6]
    uint8_t cmd = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73fb      	strb	r3, [r7, #15]
    cmd = value & HIGH_NIBBLE_MASK;
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f023 030f 	bic.w	r3, r3, #15
 8000e1e:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(display_Send4bitsCmd(cmd, rs_type));
 8000e20:	79ba      	ldrb	r2, [r7, #6]
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	4611      	mov	r1, r2
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ffa6 	bl	8000d78 <display_Send4bitsCmd>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d007      	beq.n	8000e42 <display_Send8bitsCmd+0x3e>
 8000e32:	79ba      	ldrb	r2, [r7, #6]
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff9d 	bl	8000d78 <display_Send4bitsCmd>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	e014      	b.n	8000e6c <display_Send8bitsCmd+0x68>
    cmd = value << HIGH_NIBBLE_SHIFT;
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	011b      	lsls	r3, r3, #4
 8000e46:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(display_Send4bitsCmd(cmd, rs_type));
 8000e48:	79ba      	ldrb	r2, [r7, #6]
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff92 	bl	8000d78 <display_Send4bitsCmd>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d007      	beq.n	8000e6a <display_Send8bitsCmd+0x66>
 8000e5a:	79ba      	ldrb	r2, [r7, #6]
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff89 	bl	8000d78 <display_Send4bitsCmd>
 8000e66:	4603      	mov	r3, r0
 8000e68:	e000      	b.n	8000e6c <display_Send8bitsCmd+0x68>
    return DISPLAY_OK;
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	; 0x28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef  GPIO_InitStruct;

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    I2Cx_SCL_GPIO_CLK_ENABLE();
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <HAL_I2C_MspInit+0x98>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	4a21      	ldr	r2, [pc, #132]	; (8000f0c <HAL_I2C_MspInit+0x98>)
 8000e86:	f043 0302 	orr.w	r3, r3, #2
 8000e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <HAL_I2C_MspInit+0x98>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	693b      	ldr	r3, [r7, #16]
    I2Cx_SDA_GPIO_CLK_ENABLE();
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <HAL_I2C_MspInit+0x98>)
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea0:	4a1a      	ldr	r2, [pc, #104]	; (8000f0c <HAL_I2C_MspInit+0x98>)
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <HAL_I2C_MspInit+0x98>)
 8000eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]

    /*** Configure the I2C peripheral ***/
    GPIO_InitStruct.Pin = I2Cx_SCL_PIN;
 8000eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eba:	2312      	movs	r3, #18
 8000ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480f      	ldr	r0, [pc, #60]	; (8000f10 <HAL_I2C_MspInit+0x9c>)
 8000ed2:	f000 feb9 	bl	8001c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2Cx_SDA_PIN;
 8000ed6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eda:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480b      	ldr	r0, [pc, #44]	; (8000f10 <HAL_I2C_MspInit+0x9c>)
 8000ee4:	f000 feb0 	bl	8001c48 <HAL_GPIO_Init>

    /* Enable I2C clock */
    I2Cx_CLK_ENABLE();
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <HAL_I2C_MspInit+0x98>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	4a06      	ldr	r2, [pc, #24]	; (8000f0c <HAL_I2C_MspInit+0x98>)
 8000ef2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ef6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <HAL_I2C_MspInit+0x98>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]
}
 8000f04:	bf00      	nop
 8000f06:	3728      	adds	r7, #40	; 0x28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40020400 	.word	0x40020400

08000f14 <myI2Cx_Init>:

static display_Status_t myI2Cx_Init()
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2Cx;
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <myI2Cx_Init+0x54>)
 8000f1a:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <myI2Cx_Init+0x58>)
 8000f1c:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = I2C_CLOCK_RATE;
 8000f1e:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <myI2Cx_Init+0x54>)
 8000f20:	4a13      	ldr	r2, [pc, #76]	; (8000f70 <myI2Cx_Init+0x5c>)
 8000f22:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f24:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <myI2Cx_Init+0x54>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <myI2Cx_Init+0x54>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f30:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <myI2Cx_Init+0x54>)
 8000f32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f36:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <myI2Cx_Init+0x54>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <myI2Cx_Init+0x54>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <myI2Cx_Init+0x54>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <myI2Cx_Init+0x54>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]

    CHECK_I2C(HAL_I2C_Init(&hi2c1));
 8000f50:	4805      	ldr	r0, [pc, #20]	; (8000f68 <myI2Cx_Init+0x54>)
 8000f52:	f001 f83f 	bl	8001fd4 <HAL_I2C_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <myI2Cx_Init+0x4c>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	e000      	b.n	8000f62 <myI2Cx_Init+0x4e>

    return DISPLAY_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000084 	.word	0x20000084
 8000f6c:	40005400 	.word	0x40005400
 8000f70:	000186a0 	.word	0x000186a0

08000f74 <display_Init>:

/* Public functions ----------------------------------------------------------*/
display_Status_t display_Init()
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
    CHECK_INTERNAL(myI2Cx_Init());
 8000f78:	f7ff ffcc 	bl	8000f14 <myI2Cx_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <display_Init+0x16>
 8000f82:	f7ff ffc7 	bl	8000f14 <myI2Cx_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	e08b      	b.n	80010a2 <display_Init+0x12e>

    // Initialization sequence recommended by the datasheet
    HAL_Delay(DELAY_20MS);
 8000f8a:	2014      	movs	r0, #20
 8000f8c:	f000 fd26 	bl	80019dc <HAL_Delay>
    // 0x3c - 0x38
    CHECK_INTERNAL(display_Send4bitsControlCmd(CMD_INIT_1));
 8000f90:	2100      	movs	r1, #0
 8000f92:	2030      	movs	r0, #48	; 0x30
 8000f94:	f7ff fef0 	bl	8000d78 <display_Send4bitsCmd>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d005      	beq.n	8000faa <display_Init+0x36>
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2030      	movs	r0, #48	; 0x30
 8000fa2:	f7ff fee9 	bl	8000d78 <display_Send4bitsCmd>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	e07b      	b.n	80010a2 <display_Init+0x12e>
    HAL_Delay(DELAY_10MS);
 8000faa:	200a      	movs	r0, #10
 8000fac:	f000 fd16 	bl	80019dc <HAL_Delay>
    // 0x3c - 0x38
    CHECK_INTERNAL(display_Send4bitsControlCmd(CMD_INIT_1));
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2030      	movs	r0, #48	; 0x30
 8000fb4:	f7ff fee0 	bl	8000d78 <display_Send4bitsCmd>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d005      	beq.n	8000fca <display_Init+0x56>
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2030      	movs	r0, #48	; 0x30
 8000fc2:	f7ff fed9 	bl	8000d78 <display_Send4bitsCmd>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	e06b      	b.n	80010a2 <display_Init+0x12e>
    HAL_Delay(DELAY_1MS);
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f000 fd06 	bl	80019dc <HAL_Delay>
    // 0x3c - 0x38
    CHECK_INTERNAL(display_Send4bitsControlCmd(CMD_INIT_1));
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2030      	movs	r0, #48	; 0x30
 8000fd4:	f7ff fed0 	bl	8000d78 <display_Send4bitsCmd>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d005      	beq.n	8000fea <display_Init+0x76>
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2030      	movs	r0, #48	; 0x30
 8000fe2:	f7ff fec9 	bl	8000d78 <display_Send4bitsCmd>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	e05b      	b.n	80010a2 <display_Init+0x12e>
    // 0x2c - 0x28
    CHECK_INTERNAL(display_Send4bitsControlCmd(CMD_INIT_2));
 8000fea:	2100      	movs	r1, #0
 8000fec:	2020      	movs	r0, #32
 8000fee:	f7ff fec3 	bl	8000d78 <display_Send4bitsCmd>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d005      	beq.n	8001004 <display_Init+0x90>
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2020      	movs	r0, #32
 8000ffc:	f7ff febc 	bl	8000d78 <display_Send4bitsCmd>
 8001000:	4603      	mov	r3, r0
 8001002:	e04e      	b.n	80010a2 <display_Init+0x12e>

    // Custom settings
    CHECK_INTERNAL(display_Send8bitsControlCmd(CMD_FUNCTION_SET_4B_2L));
 8001004:	2100      	movs	r1, #0
 8001006:	2028      	movs	r0, #40	; 0x28
 8001008:	f7ff fefc 	bl	8000e04 <display_Send8bitsCmd>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d005      	beq.n	800101e <display_Init+0xaa>
 8001012:	2100      	movs	r1, #0
 8001014:	2028      	movs	r0, #40	; 0x28
 8001016:	f7ff fef5 	bl	8000e04 <display_Send8bitsCmd>
 800101a:	4603      	mov	r3, r0
 800101c:	e041      	b.n	80010a2 <display_Init+0x12e>
    CHECK_INTERNAL(display_Send8bitsControlCmd(INSTR_DISPLAY_CONTROL));
 800101e:	2100      	movs	r1, #0
 8001020:	2008      	movs	r0, #8
 8001022:	f7ff feef 	bl	8000e04 <display_Send8bitsCmd>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d005      	beq.n	8001038 <display_Init+0xc4>
 800102c:	2100      	movs	r1, #0
 800102e:	2008      	movs	r0, #8
 8001030:	f7ff fee8 	bl	8000e04 <display_Send8bitsCmd>
 8001034:	4603      	mov	r3, r0
 8001036:	e034      	b.n	80010a2 <display_Init+0x12e>
    CHECK_INTERNAL(display_Send8bitsControlCmd(INSTR_RETURN_HOME));
 8001038:	2100      	movs	r1, #0
 800103a:	2002      	movs	r0, #2
 800103c:	f7ff fee2 	bl	8000e04 <display_Send8bitsCmd>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d005      	beq.n	8001052 <display_Init+0xde>
 8001046:	2100      	movs	r1, #0
 8001048:	2002      	movs	r0, #2
 800104a:	f7ff fedb 	bl	8000e04 <display_Send8bitsCmd>
 800104e:	4603      	mov	r3, r0
 8001050:	e027      	b.n	80010a2 <display_Init+0x12e>
    CHECK_INTERNAL(display_Send8bitsControlCmd(CMD_ENTRY_MODE_INCREMENT));
 8001052:	2100      	movs	r1, #0
 8001054:	2006      	movs	r0, #6
 8001056:	f7ff fed5 	bl	8000e04 <display_Send8bitsCmd>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d005      	beq.n	800106c <display_Init+0xf8>
 8001060:	2100      	movs	r1, #0
 8001062:	2006      	movs	r0, #6
 8001064:	f7ff fece 	bl	8000e04 <display_Send8bitsCmd>
 8001068:	4603      	mov	r3, r0
 800106a:	e01a      	b.n	80010a2 <display_Init+0x12e>
    CHECK_INTERNAL(display_Send8bitsControlCmd(CMD_TURN_ON_DISPLAY));
 800106c:	2100      	movs	r1, #0
 800106e:	200c      	movs	r0, #12
 8001070:	f7ff fec8 	bl	8000e04 <display_Send8bitsCmd>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d005      	beq.n	8001086 <display_Init+0x112>
 800107a:	2100      	movs	r1, #0
 800107c:	200c      	movs	r0, #12
 800107e:	f7ff fec1 	bl	8000e04 <display_Send8bitsCmd>
 8001082:	4603      	mov	r3, r0
 8001084:	e00d      	b.n	80010a2 <display_Init+0x12e>
    CHECK_INTERNAL(display_Send8bitsControlCmd(INSTR_CLR_DISPLAY));
 8001086:	2100      	movs	r1, #0
 8001088:	2001      	movs	r0, #1
 800108a:	f7ff febb 	bl	8000e04 <display_Send8bitsCmd>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d005      	beq.n	80010a0 <display_Init+0x12c>
 8001094:	2100      	movs	r1, #0
 8001096:	2001      	movs	r0, #1
 8001098:	f7ff feb4 	bl	8000e04 <display_Send8bitsCmd>
 800109c:	4603      	mov	r3, r0
 800109e:	e000      	b.n	80010a2 <display_Init+0x12e>

    return DISPLAY_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <display_Clear>:

display_Status_t display_Clear()
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	af00      	add	r7, sp, #0
    CHECK_INTERNAL(display_Send8bitsControlCmd(INSTR_CLR_DISPLAY));
 80010aa:	2100      	movs	r1, #0
 80010ac:	2001      	movs	r0, #1
 80010ae:	f7ff fea9 	bl	8000e04 <display_Send8bitsCmd>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d005      	beq.n	80010c4 <display_Clear+0x1e>
 80010b8:	2100      	movs	r1, #0
 80010ba:	2001      	movs	r0, #1
 80010bc:	f7ff fea2 	bl	8000e04 <display_Send8bitsCmd>
 80010c0:	4603      	mov	r3, r0
 80010c2:	e003      	b.n	80010cc <display_Clear+0x26>
    HAL_Delay(DELAY_2MS);
 80010c4:	2002      	movs	r0, #2
 80010c6:	f000 fc89 	bl	80019dc <HAL_Delay>
    return DISPLAY_OK;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <display_PrintChar>:

display_Status_t display_PrintChar(uint8_t ch)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
    CHECK_INTERNAL(display_Send8bitsDataCmd(ch));
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2101      	movs	r1, #1
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fe90 	bl	8000e04 <display_Send8bitsCmd>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d006      	beq.n	80010f8 <display_PrintChar+0x28>
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2101      	movs	r1, #1
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fe88 	bl	8000e04 <display_Send8bitsCmd>
 80010f4:	4603      	mov	r3, r0
 80010f6:	e000      	b.n	80010fa <display_PrintChar+0x2a>
    return DISPLAY_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <display_PrintStringInTopLine>:

display_Status_t display_PrintStringInTopLine(uint8_t * buf)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
    CHECK_NULL(buf);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d101      	bne.n	8001114 <display_PrintStringInTopLine+0x12>
 8001110:	2301      	movs	r3, #1
 8001112:	e038      	b.n	8001186 <display_PrintStringInTopLine+0x84>

    CHECK_INTERNAL(display_Clear());
 8001114:	f7ff ffc7 	bl	80010a6 <display_Clear>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <display_PrintStringInTopLine+0x24>
 800111e:	f7ff ffc2 	bl	80010a6 <display_Clear>
 8001122:	4603      	mov	r3, r0
 8001124:	e02f      	b.n	8001186 <display_PrintStringInTopLine+0x84>
    CHECK_INTERNAL(display_Send8bitsControlCmd(CMD_SET_CURSOR_LINE1));
 8001126:	2100      	movs	r1, #0
 8001128:	2080      	movs	r0, #128	; 0x80
 800112a:	f7ff fe6b 	bl	8000e04 <display_Send8bitsCmd>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d005      	beq.n	8001140 <display_PrintStringInTopLine+0x3e>
 8001134:	2100      	movs	r1, #0
 8001136:	2080      	movs	r0, #128	; 0x80
 8001138:	f7ff fe64 	bl	8000e04 <display_Send8bitsCmd>
 800113c:	4603      	mov	r3, r0
 800113e:	e022      	b.n	8001186 <display_PrintStringInTopLine+0x84>

    for (int i = 0; i < MAX_CHAR_PER_LINE && buf[i] != '\0'; i++) {
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	e015      	b.n	8001172 <display_PrintStringInTopLine+0x70>
        CHECK_INTERNAL(display_PrintChar(buf[i]));
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	4413      	add	r3, r2
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ffbe 	bl	80010d0 <display_PrintChar>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d008      	beq.n	800116c <display_PrintStringInTopLine+0x6a>
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ffb4 	bl	80010d0 <display_PrintChar>
 8001168:	4603      	mov	r3, r0
 800116a:	e00c      	b.n	8001186 <display_PrintStringInTopLine+0x84>
    for (int i = 0; i < MAX_CHAR_PER_LINE && buf[i] != '\0'; i++) {
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3301      	adds	r3, #1
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2b0f      	cmp	r3, #15
 8001176:	dc05      	bgt.n	8001184 <display_PrintStringInTopLine+0x82>
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1e0      	bne.n	8001146 <display_PrintStringInTopLine+0x44>
    }

    return DISPLAY_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <display_PrintStringInBottomLine>:

display_Status_t display_PrintStringInBottomLine(uint8_t * buf)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b084      	sub	sp, #16
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
    CHECK_NULL(buf);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d101      	bne.n	80011a0 <display_PrintStringInBottomLine+0x12>
 800119c:	2301      	movs	r3, #1
 800119e:	e038      	b.n	8001212 <display_PrintStringInBottomLine+0x84>

    CHECK_INTERNAL(display_Clear());
 80011a0:	f7ff ff81 	bl	80010a6 <display_Clear>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <display_PrintStringInBottomLine+0x24>
 80011aa:	f7ff ff7c 	bl	80010a6 <display_Clear>
 80011ae:	4603      	mov	r3, r0
 80011b0:	e02f      	b.n	8001212 <display_PrintStringInBottomLine+0x84>
    CHECK_INTERNAL(display_Send8bitsControlCmd(CMD_SET_CURSOR_LINE2));
 80011b2:	2100      	movs	r1, #0
 80011b4:	20c0      	movs	r0, #192	; 0xc0
 80011b6:	f7ff fe25 	bl	8000e04 <display_Send8bitsCmd>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d005      	beq.n	80011cc <display_PrintStringInBottomLine+0x3e>
 80011c0:	2100      	movs	r1, #0
 80011c2:	20c0      	movs	r0, #192	; 0xc0
 80011c4:	f7ff fe1e 	bl	8000e04 <display_Send8bitsCmd>
 80011c8:	4603      	mov	r3, r0
 80011ca:	e022      	b.n	8001212 <display_PrintStringInBottomLine+0x84>

    for (int i = 0; i < MAX_CHAR_PER_LINE && buf[i] != '\0'; i++) {
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	e015      	b.n	80011fe <display_PrintStringInBottomLine+0x70>
        CHECK_INTERNAL(display_PrintChar(buf[i]));
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	4413      	add	r3, r2
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff78 	bl	80010d0 <display_PrintChar>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d008      	beq.n	80011f8 <display_PrintStringInBottomLine+0x6a>
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	4413      	add	r3, r2
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ff6e 	bl	80010d0 <display_PrintChar>
 80011f4:	4603      	mov	r3, r0
 80011f6:	e00c      	b.n	8001212 <display_PrintStringInBottomLine+0x84>
    for (int i = 0; i < MAX_CHAR_PER_LINE && buf[i] != '\0'; i++) {
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3301      	adds	r3, #1
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2b0f      	cmp	r3, #15
 8001202:	dc05      	bgt.n	8001210 <display_PrintStringInBottomLine+0x82>
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1e0      	bne.n	80011d2 <display_PrintStringInBottomLine+0x44>
    }

    return DISPLAY_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	0000      	movs	r0, r0
 800121c:	0000      	movs	r0, r0
	...

08001220 <HAL_TIM_IC_CaptureCallback>:
uint32_t Difference = 0;
uint8_t Is_First_Captured = 0;  // is the first value captured ?
uint8_t Distance  = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	uint8_t partial = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	73fb      	strb	r3, [r7, #15]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7f1b      	ldrb	r3, [r3, #28]
 8001230:	2b01      	cmp	r3, #1
 8001232:	f040 8084 	bne.w	800133e <HAL_TIM_IC_CaptureCallback+0x11e>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8001236:	4b46      	ldr	r3, [pc, #280]	; (8001350 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d11a      	bne.n	8001274 <HAL_TIM_IC_CaptureCallback+0x54>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 800123e:	2100      	movs	r1, #0
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f002 facd 	bl	80037e0 <HAL_TIM_ReadCapturedValue>
 8001246:	4603      	mov	r3, r0
 8001248:	4a42      	ldr	r2, [pc, #264]	; (8001354 <HAL_TIM_IC_CaptureCallback+0x134>)
 800124a:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 800124c:	4b40      	ldr	r3, [pc, #256]	; (8001350 <HAL_TIM_IC_CaptureCallback+0x130>)
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6a1a      	ldr	r2, [r3, #32]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 020a 	bic.w	r2, r2, #10
 8001260:	621a      	str	r2, [r3, #32]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6a1a      	ldr	r2, [r3, #32]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f042 0202 	orr.w	r2, r2, #2
 8001270:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8001272:	e064      	b.n	800133e <HAL_TIM_IC_CaptureCallback+0x11e>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001274:	4b36      	ldr	r3, [pc, #216]	; (8001350 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d160      	bne.n	800133e <HAL_TIM_IC_CaptureCallback+0x11e>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 800127c:	2100      	movs	r1, #0
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f002 faae 	bl	80037e0 <HAL_TIM_ReadCapturedValue>
 8001284:	4603      	mov	r3, r0
 8001286:	4a34      	ldr	r2, [pc, #208]	; (8001358 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001288:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2200      	movs	r2, #0
 8001290:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8001292:	4b31      	ldr	r3, [pc, #196]	; (8001358 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4b2f      	ldr	r3, [pc, #188]	; (8001354 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	429a      	cmp	r2, r3
 800129c:	d907      	bls.n	80012ae <HAL_TIM_IC_CaptureCallback+0x8e>
				Difference = IC_Val2-IC_Val1;
 800129e:	4b2e      	ldr	r3, [pc, #184]	; (8001358 <HAL_TIM_IC_CaptureCallback+0x138>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <HAL_TIM_IC_CaptureCallback+0x134>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	4a2c      	ldr	r2, [pc, #176]	; (800135c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	e00f      	b.n	80012ce <HAL_TIM_IC_CaptureCallback+0xae>
			else if (IC_Val1 > IC_Val2)
 80012ae:	4b29      	ldr	r3, [pc, #164]	; (8001354 <HAL_TIM_IC_CaptureCallback+0x134>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	4b29      	ldr	r3, [pc, #164]	; (8001358 <HAL_TIM_IC_CaptureCallback+0x138>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d909      	bls.n	80012ce <HAL_TIM_IC_CaptureCallback+0xae>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 80012ba:	4b27      	ldr	r3, [pc, #156]	; (8001358 <HAL_TIM_IC_CaptureCallback+0x138>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4b25      	ldr	r3, [pc, #148]	; (8001354 <HAL_TIM_IC_CaptureCallback+0x134>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80012c8:	33ff      	adds	r3, #255	; 0xff
 80012ca:	4a24      	ldr	r2, [pc, #144]	; (800135c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80012cc:	6013      	str	r3, [r2, #0]
			partial = Difference * .034/2;
 80012ce:	4b23      	ldr	r3, [pc, #140]	; (800135c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f926 	bl	8000524 <__aeabi_ui2d>
 80012d8:	a31b      	add	r3, pc, #108	; (adr r3, 8001348 <HAL_TIM_IC_CaptureCallback+0x128>)
 80012da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012de:	f7ff f99b 	bl	8000618 <__aeabi_dmul>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012f2:	f7ff fabb 	bl	800086c <__aeabi_ddiv>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4610      	mov	r0, r2
 80012fc:	4619      	mov	r1, r3
 80012fe:	f7ff fb9d 	bl	8000a3c <__aeabi_d2uiz>
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]
			Distance = partial;
 8001306:	4a16      	ldr	r2, [pc, #88]	; (8001360 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	7013      	strb	r3, [r2, #0]
			Is_First_Captured = 0; // set it back to false
 800130c:	4b10      	ldr	r3, [pc, #64]	; (8001350 <HAL_TIM_IC_CaptureCallback+0x130>)
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6a1a      	ldr	r2, [r3, #32]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 020a 	bic.w	r2, r2, #10
 8001320:	621a      	str	r2, [r3, #32]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6a12      	ldr	r2, [r2, #32]
 800132c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68da      	ldr	r2, [r3, #12]
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f022 0202 	bic.w	r2, r2, #2
 800133c:	60da      	str	r2, [r3, #12]
}
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	b020c49c 	.word	0xb020c49c
 800134c:	3fa16872 	.word	0x3fa16872
 8001350:	2000012c 	.word	0x2000012c
 8001354:	20000120 	.word	0x20000120
 8001358:	20000124 	.word	0x20000124
 800135c:	20000128 	.word	0x20000128
 8001360:	2000012d 	.word	0x2000012d
 8001364:	200000d8 	.word	0x200000d8

08001368 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	; 0x28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
    if(htim_ic->Instance==hcsr04_TIMER)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a1d      	ldr	r2, [pc, #116]	; (80013fc <HAL_TIM_IC_MspInit+0x94>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d134      	bne.n	80013f4 <HAL_TIM_IC_MspInit+0x8c>
    {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_TIM1_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <HAL_TIM_IC_MspInit+0x98>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	4a1b      	ldr	r2, [pc, #108]	; (8001400 <HAL_TIM_IC_MspInit+0x98>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6453      	str	r3, [r2, #68]	; 0x44
 800139a:	4b19      	ldr	r3, [pc, #100]	; (8001400 <HAL_TIM_IC_MspInit+0x98>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]

        hcsr04_ECHO_GPIO_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_TIM_IC_MspInit+0x98>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a14      	ldr	r2, [pc, #80]	; (8001400 <HAL_TIM_IC_MspInit+0x98>)
 80013b0:	f043 0310 	orr.w	r3, r3, #16
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_TIM_IC_MspInit+0x98>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
        /**TIM1 GPIO Configuration
        PE9     ------> TIM1_CH1
        */
        GPIO_InitStruct.Pin = hcsr04_ECHO_PIN;
 80013c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013c6:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(hcsr04_ECHO_GPIO_PORT, &GPIO_InitStruct);
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4619      	mov	r1, r3
 80013de:	4809      	ldr	r0, [pc, #36]	; (8001404 <HAL_TIM_IC_MspInit+0x9c>)
 80013e0:	f000 fc32 	bl	8001c48 <HAL_GPIO_Init>

        /* TIM1 interrupt Init */
        HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2100      	movs	r1, #0
 80013e8:	201b      	movs	r0, #27
 80013ea:	f000 fbf6 	bl	8001bda <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80013ee:	201b      	movs	r0, #27
 80013f0:	f000 fc0f 	bl	8001c12 <HAL_NVIC_EnableIRQ>
    }
}
 80013f4:	bf00      	nop
 80013f6:	3728      	adds	r7, #40	; 0x28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40010000 	.word	0x40010000
 8001400:	40023800 	.word	0x40023800
 8001404:	40021000 	.word	0x40021000

08001408 <myTIM_Init>:

hcsr04_Status_t myTIM_Init()
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
    TIM_IC_InitTypeDef sConfigIC = {0};
 8001418:	463b      	mov	r3, r7
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]

    htim1.Instance = hcsr04_TIMER;
 8001424:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <myTIM_Init+0xa8>)
 8001426:	4a23      	ldr	r2, [pc, #140]	; (80014b4 <myTIM_Init+0xac>)
 8001428:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 168-1;
 800142a:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <myTIM_Init+0xa8>)
 800142c:	22a7      	movs	r2, #167	; 0xa7
 800142e:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <myTIM_Init+0xa8>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 0xffff-1;
 8001436:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <myTIM_Init+0xa8>)
 8001438:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800143c:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143e:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <myTIM_Init+0xa8>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 8001444:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <myTIM_Init+0xa8>)
 8001446:	2200      	movs	r2, #0
 8001448:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <myTIM_Init+0xa8>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
    CHECK_HAL(HAL_TIM_IC_Init(&htim1));
 8001450:	4817      	ldr	r0, [pc, #92]	; (80014b0 <myTIM_Init+0xa8>)
 8001452:	f001 fea9 	bl	80031a8 <HAL_TIM_IC_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <myTIM_Init+0x58>
 800145c:	2302      	movs	r3, #2
 800145e:	e022      	b.n	80014a6 <myTIM_Init+0x9e>

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
    CHECK_HAL(HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig));
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	4619      	mov	r1, r3
 800146e:	4810      	ldr	r0, [pc, #64]	; (80014b0 <myTIM_Init+0xa8>)
 8001470:	f002 fc12 	bl	8003c98 <HAL_TIMEx_MasterConfigSynchronization>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <myTIM_Init+0x76>
 800147a:	2302      	movs	r3, #2
 800147c:	e013      	b.n	80014a6 <myTIM_Init+0x9e>

    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
    sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001482:	2301      	movs	r3, #1
 8001484:	607b      	str	r3, [r7, #4]
    sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
    sConfigIC.ICFilter = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
    CHECK_HAL(HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1));
 800148e:	463b      	mov	r3, r7
 8001490:	2200      	movs	r2, #0
 8001492:	4619      	mov	r1, r3
 8001494:	4806      	ldr	r0, [pc, #24]	; (80014b0 <myTIM_Init+0xa8>)
 8001496:	f002 f907 	bl	80036a8 <HAL_TIM_IC_ConfigChannel>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <myTIM_Init+0x9c>
 80014a0:	2302      	movs	r3, #2
 80014a2:	e000      	b.n	80014a6 <myTIM_Init+0x9e>

    return HCSR04_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200000d8 	.word	0x200000d8
 80014b4:	40010000 	.word	0x40010000

080014b8 <myGPIO_Init>:

hcsr04_Status_t myGPIO_Init()
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]

    hcsr04_TRIG_GPIO_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <myGPIO_Init+0x60>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	4a10      	ldr	r2, [pc, #64]	; (8001518 <myGPIO_Init+0x60>)
 80014d6:	f043 0310 	orr.w	r3, r3, #16
 80014da:	6313      	str	r3, [r2, #48]	; 0x30
 80014dc:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <myGPIO_Init+0x60>)
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	f003 0310 	and.w	r3, r3, #16
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(hcsr04_TRIG_GPIO_PORT, hcsr04_TRIG_PIN, GPIO_PIN_RESET);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2104      	movs	r1, #4
 80014ec:	480b      	ldr	r0, [pc, #44]	; (800151c <myGPIO_Init+0x64>)
 80014ee:	f000 fd57 	bl	8001fa0 <HAL_GPIO_WritePin>

    /*Configure TRIG GPIO pin : PE2 */
    GPIO_InitStruct.Pin = hcsr04_TRIG_PIN;
 80014f2:	2304      	movs	r3, #4
 80014f4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(hcsr04_TRIG_GPIO_PORT, &GPIO_InitStruct);
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	4619      	mov	r1, r3
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <myGPIO_Init+0x64>)
 8001508:	f000 fb9e 	bl	8001c48 <HAL_GPIO_Init>

    return HCSR04_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40021000 	.word	0x40021000

08001520 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <TIM1_CC_IRQHandler+0x10>)
 8001526:	f001 ffb7 	bl	8003498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200000d8 	.word	0x200000d8

08001534 <delay>:

void delay(uint16_t time)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <delay+0x30>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2200      	movs	r2, #0
 8001544:	625a      	str	r2, [r3, #36]	; 0x24
    while(__HAL_TIM_GET_COUNTER(&htim1) < time);
 8001546:	bf00      	nop
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <delay+0x30>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	429a      	cmp	r2, r3
 8001552:	d3f9      	bcc.n	8001548 <delay+0x14>
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	200000d8 	.word	0x200000d8

08001568 <hcsr04_Init>:

/* Public functions ----------------------------------------------------------*/
hcsr04_Status_t hcsr04_Init()
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
    myGPIO_Init();
 800156c:	f7ff ffa4 	bl	80014b8 <myGPIO_Init>
    myTIM_Init();
 8001570:	f7ff ff4a 	bl	8001408 <myTIM_Init>
    HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001574:	2100      	movs	r1, #0
 8001576:	4803      	ldr	r0, [pc, #12]	; (8001584 <hcsr04_Init+0x1c>)
 8001578:	f001 fe66 	bl	8003248 <HAL_TIM_IC_Start_IT>
    return HCSR04_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200000d8 	.word	0x200000d8

08001588 <hcsr04_StartMeasure>:

hcsr04_Status_t hcsr04_StartMeasure()
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(hcsr04_TRIG_GPIO_PORT, hcsr04_TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800158c:	2201      	movs	r2, #1
 800158e:	2104      	movs	r1, #4
 8001590:	480a      	ldr	r0, [pc, #40]	; (80015bc <hcsr04_StartMeasure+0x34>)
 8001592:	f000 fd05 	bl	8001fa0 <HAL_GPIO_WritePin>
    delay(10);  // wait for 10 us
 8001596:	200a      	movs	r0, #10
 8001598:	f7ff ffcc 	bl	8001534 <delay>
    HAL_GPIO_WritePin(hcsr04_TRIG_GPIO_PORT, hcsr04_TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 800159c:	2200      	movs	r2, #0
 800159e:	2104      	movs	r1, #4
 80015a0:	4806      	ldr	r0, [pc, #24]	; (80015bc <hcsr04_StartMeasure+0x34>)
 80015a2:	f000 fcfd 	bl	8001fa0 <HAL_GPIO_WritePin>

    __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <hcsr04_StartMeasure+0x38>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <hcsr04_StartMeasure+0x38>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 0202 	orr.w	r2, r2, #2
 80015b4:	60da      	str	r2, [r3, #12]
    return HCSR04_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40021000 	.word	0x40021000
 80015c0:	200000d8 	.word	0x200000d8

080015c4 <hcsr04_GetDistance>:

uint8_t hcsr04_GetDistance()
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
    return Distance;
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <hcsr04_GetDistance+0x14>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	2000012d 	.word	0x2000012d

080015dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef  GPIO_InitStruct;

    if(huart->Instance == USARTx) {
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a26      	ldr	r2, [pc, #152]	; (8001684 <HAL_UART_MspInit+0xa8>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d145      	bne.n	800167a <HAL_UART_MspInit+0x9e>
        /* Enable GPIO TX/RX clock */
        USARTx_TX_GPIO_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	4b25      	ldr	r3, [pc, #148]	; (8001688 <HAL_UART_MspInit+0xac>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a24      	ldr	r2, [pc, #144]	; (8001688 <HAL_UART_MspInit+0xac>)
 80015f8:	f043 0308 	orr.w	r3, r3, #8
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b22      	ldr	r3, [pc, #136]	; (8001688 <HAL_UART_MspInit+0xac>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
        USARTx_RX_GPIO_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <HAL_UART_MspInit+0xac>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a1d      	ldr	r2, [pc, #116]	; (8001688 <HAL_UART_MspInit+0xac>)
 8001614:	f043 0308 	orr.w	r3, r3, #8
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <HAL_UART_MspInit+0xac>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]

        /* Enable USARTx clock */
        USARTx_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	4b17      	ldr	r3, [pc, #92]	; (8001688 <HAL_UART_MspInit+0xac>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	4a16      	ldr	r2, [pc, #88]	; (8001688 <HAL_UART_MspInit+0xac>)
 8001630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001634:	6413      	str	r3, [r2, #64]	; 0x40
 8001636:	4b14      	ldr	r3, [pc, #80]	; (8001688 <HAL_UART_MspInit+0xac>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]

        /* UART TX GPIO pin configuration  */
        GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8001642:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001646:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800164c:	2301      	movs	r3, #1
 800164e:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001654:	2307      	movs	r3, #7
 8001656:	627b      	str	r3, [r7, #36]	; 0x24

        HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	480b      	ldr	r0, [pc, #44]	; (800168c <HAL_UART_MspInit+0xb0>)
 8001660:	f000 faf2 	bl	8001c48 <HAL_GPIO_Init>

        /* UART RX GPIO pin configuration  */
        GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001664:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001668:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Alternate = USARTx_RX_AF;
 800166a:	2307      	movs	r3, #7
 800166c:	627b      	str	r3, [r7, #36]	; 0x24

        HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <HAL_UART_MspInit+0xb0>)
 8001676:	f000 fae7 	bl	8001c48 <HAL_GPIO_Init>
    }
}
 800167a:	bf00      	nop
 800167c:	3728      	adds	r7, #40	; 0x28
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40004800 	.word	0x40004800
 8001688:	40023800 	.word	0x40023800
 800168c:	40020c00 	.word	0x40020c00

08001690 <myUART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static uart_Status_t myUART_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
    huart3.Instance        = USART3;
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <myUART_Init+0x4c>)
 8001696:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <myUART_Init+0x50>)
 8001698:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate   = 115200;
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <myUART_Init+0x4c>)
 800169c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a0:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <myUART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits   = UART_STOPBITS_1;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <myUART_Init+0x4c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity     = UART_PARITY_NONE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <myUART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
    huart3.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <myUART_Init+0x4c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	619a      	str	r2, [r3, #24]
    huart3.Init.Mode       = UART_MODE_TX_RX;
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <myUART_Init+0x4c>)
 80016bc:	220c      	movs	r2, #12
 80016be:	615a      	str	r2, [r3, #20]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <myUART_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
    CHECK_HAL(HAL_UART_Init(&huart3));
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <myUART_Init+0x4c>)
 80016c8:	f002 fb76 	bl	8003db8 <HAL_UART_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <myUART_Init+0x46>
 80016d2:	2302      	movs	r3, #2
 80016d4:	e000      	b.n	80016d8 <myUART_Init+0x48>

    return UART_OK;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000130 	.word	0x20000130
 80016e0:	40004800 	.word	0x40004800

080016e4 <calculateStringLength>:
 * @brief  This function calculates the string length
 * @param  uint8_t* The string to calculate
 * @retval uint8_t The string length
 */
static uint8_t calculateStringLength(uint8_t * pString)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
    if (pString == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <calculateStringLength+0x12>
    {
        return 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e00c      	b.n	8001710 <calculateStringLength+0x2c>
    }

    uint8_t i = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	73fb      	strb	r3, [r7, #15]
    while (pString[i] != '\0')
 80016fa:	e002      	b.n	8001702 <calculateStringLength+0x1e>
    {
        i++;
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	3301      	adds	r3, #1
 8001700:	73fb      	strb	r3, [r7, #15]
    while (pString[i] != '\0')
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	4413      	add	r3, r2
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f6      	bne.n	80016fc <calculateStringLength+0x18>
    }
    return i;
 800170e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <uart_Init>:

/* Public functions ---------------------------------------------------------*/
uart_Status_t uart_Init()
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
    myUART_Init();
 8001720:	f7ff ffb6 	bl	8001690 <myUART_Init>

    uart_SendStringSize((uint8_t *)welcome_msg, strlen(welcome_msg));
 8001724:	2123      	movs	r1, #35	; 0x23
 8001726:	4805      	ldr	r0, [pc, #20]	; (800173c <uart_Init+0x20>)
 8001728:	f000 f80c 	bl	8001744 <uart_SendStringSize>
    uart_SendStringSize((uint8_t *)info_msg, strlen(info_msg));
 800172c:	215a      	movs	r1, #90	; 0x5a
 800172e:	4804      	ldr	r0, [pc, #16]	; (8001740 <uart_Init+0x24>)
 8001730:	f000 f808 	bl	8001744 <uart_SendStringSize>

    return UART_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	0800507c 	.word	0x0800507c
 8001740:	080050a0 	.word	0x080050a0

08001744 <uart_SendStringSize>:
    CHECK_HAL(HAL_UART_Transmit(&huart3, pString, calculateStringLength(pString), HAL_MAX_DELAY));
    return UART_OK;
}

uart_Status_t uart_SendStringSize(uint8_t * pString, uint16_t size)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	807b      	strh	r3, [r7, #2]
    CHECK_NULL(pString);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <uart_SendStringSize+0x16>
 8001756:	2301      	movs	r3, #1
 8001758:	e019      	b.n	800178e <uart_SendStringSize+0x4a>

    if (size > calculateStringLength(pString))
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ffc2 	bl	80016e4 <calculateStringLength>
 8001760:	4603      	mov	r3, r0
 8001762:	b29b      	uxth	r3, r3
 8001764:	887a      	ldrh	r2, [r7, #2]
 8001766:	429a      	cmp	r2, r3
 8001768:	d904      	bls.n	8001774 <uart_SendStringSize+0x30>
    {
        size = calculateStringLength(pString);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffba 	bl	80016e4 <calculateStringLength>
 8001770:	4603      	mov	r3, r0
 8001772:	807b      	strh	r3, [r7, #2]
    }

    CHECK_HAL(HAL_UART_Transmit(&huart3, pString, size, HAL_MAX_DELAY));
 8001774:	887a      	ldrh	r2, [r7, #2]
 8001776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	4806      	ldr	r0, [pc, #24]	; (8001798 <uart_SendStringSize+0x54>)
 800177e:	f002 fb68 	bl	8003e52 <HAL_UART_Transmit>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <uart_SendStringSize+0x48>
 8001788:	2302      	movs	r3, #2
 800178a:	e000      	b.n	800178e <uart_SendStringSize+0x4a>
    return UART_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000130 	.word	0x20000130

0800179c <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	4a07      	ldr	r2, [pc, #28]	; (80017c8 <BSP_LED_On+0x2c>)
 80017aa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	4a06      	ldr	r2, [pc, #24]	; (80017cc <BSP_LED_On+0x30>)
 80017b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017b6:	2201      	movs	r2, #1
 80017b8:	4619      	mov	r1, r3
 80017ba:	f000 fbf1 	bl	8001fa0 <HAL_GPIO_WritePin>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000000 	.word	0x20000000
 80017cc:	080050fc 	.word	0x080050fc

080017d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d4:	4b16      	ldr	r3, [pc, #88]	; (8001830 <SystemInit+0x60>)
 80017d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017da:	4a15      	ldr	r2, [pc, #84]	; (8001830 <SystemInit+0x60>)
 80017dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <SystemInit+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a12      	ldr	r2, [pc, #72]	; (8001834 <SystemInit+0x64>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017f0:	4b10      	ldr	r3, [pc, #64]	; (8001834 <SystemInit+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <SystemInit+0x64>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <SystemInit+0x64>)
 80017fc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001804:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <SystemInit+0x64>)
 8001808:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <SystemInit+0x68>)
 800180a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <SystemInit+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a08      	ldr	r2, [pc, #32]	; (8001834 <SystemInit+0x64>)
 8001812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001816:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <SystemInit+0x64>)
 800181a:	2200      	movs	r2, #0
 800181c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800181e:	4b04      	ldr	r3, [pc, #16]	; (8001830 <SystemInit+0x60>)
 8001820:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001824:	609a      	str	r2, [r3, #8]
#endif
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00
 8001834:	40023800 	.word	0x40023800
 8001838:	24003010 	.word	0x24003010

0800183c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800184e:	e7fe      	b.n	800184e <HardFault_Handler+0x4>

08001850 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001854:	e7fe      	b.n	8001854 <MemManage_Handler+0x4>

08001856 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800185a:	e7fe      	b.n	800185a <BusFault_Handler+0x4>

0800185c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001860:	e7fe      	b.n	8001860 <UsageFault_Handler+0x4>

08001862 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001890:	f000 f884 	bl	800199c <HAL_IncTick>
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}

08001898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a0:	4a14      	ldr	r2, [pc, #80]	; (80018f4 <_sbrk+0x5c>)
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <_sbrk+0x60>)
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <_sbrk+0x64>)
 80018b6:	4a12      	ldr	r2, [pc, #72]	; (8001900 <_sbrk+0x68>)
 80018b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d207      	bcs.n	80018d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c8:	f002 ff48 	bl	800475c <__errno>
 80018cc:	4603      	mov	r3, r0
 80018ce:	220c      	movs	r2, #12
 80018d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018d6:	e009      	b.n	80018ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <_sbrk+0x64>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	4a05      	ldr	r2, [pc, #20]	; (80018fc <_sbrk+0x64>)
 80018e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ea:	68fb      	ldr	r3, [r7, #12]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20030000 	.word	0x20030000
 80018f8:	00000400 	.word	0x00000400
 80018fc:	20000174 	.word	0x20000174
 8001900:	200002c8 	.word	0x200002c8

08001904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_Init+0x34>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <HAL_Init+0x34>)
 800190e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001912:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_Init+0x34>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a07      	ldr	r2, [pc, #28]	; (8001938 <HAL_Init+0x34>)
 800191a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001920:	2003      	movs	r0, #3
 8001922:	f000 f94f 	bl	8001bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001926:	200f      	movs	r0, #15
 8001928:	f000 f808 	bl	800193c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800192c:	f000 ff9d 	bl	800286a <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023c00 	.word	0x40023c00

0800193c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_InitTick+0x54>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_InitTick+0x58>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4619      	mov	r1, r3
 800194e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001952:	fbb3 f3f1 	udiv	r3, r3, r1
 8001956:	fbb2 f3f3 	udiv	r3, r2, r3
 800195a:	4618      	mov	r0, r3
 800195c:	f000 f967 	bl	8001c2e <HAL_SYSTICK_Config>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e00e      	b.n	8001988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b0f      	cmp	r3, #15
 800196e:	d80a      	bhi.n	8001986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001970:	2200      	movs	r2, #0
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001978:	f000 f92f 	bl	8001bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800197c:	4a06      	ldr	r2, [pc, #24]	; (8001998 <HAL_InitTick+0x5c>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	e000      	b.n	8001988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	2000000c 	.word	0x2000000c
 8001994:	20000014 	.word	0x20000014
 8001998:	20000010 	.word	0x20000010

0800199c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_IncTick+0x20>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_IncTick+0x24>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4413      	add	r3, r2
 80019ac:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <HAL_IncTick+0x24>)
 80019ae:	6013      	str	r3, [r2, #0]
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20000014 	.word	0x20000014
 80019c0:	20000178 	.word	0x20000178

080019c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return uwTick;
 80019c8:	4b03      	ldr	r3, [pc, #12]	; (80019d8 <HAL_GetTick+0x14>)
 80019ca:	681b      	ldr	r3, [r3, #0]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000178 	.word	0x20000178

080019dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e4:	f7ff ffee 	bl	80019c4 <HAL_GetTick>
 80019e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019f4:	d005      	beq.n	8001a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_Delay+0x44>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4413      	add	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a02:	bf00      	nop
 8001a04:	f7ff ffde 	bl	80019c4 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d8f7      	bhi.n	8001a04 <HAL_Delay+0x28>
  {
  }
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000014 	.word	0x20000014

08001a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a40:	4013      	ands	r3, r2
 8001a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a56:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	60d3      	str	r3, [r2, #12]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a70:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <__NVIC_GetPriorityGrouping+0x18>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	0a1b      	lsrs	r3, r3, #8
 8001a76:	f003 0307 	and.w	r3, r3, #7
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	db0b      	blt.n	8001ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	f003 021f 	and.w	r2, r3, #31
 8001aa0:	4907      	ldr	r1, [pc, #28]	; (8001ac0 <__NVIC_EnableIRQ+0x38>)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	095b      	lsrs	r3, r3, #5
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8001aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000e100 	.word	0xe000e100

08001ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	6039      	str	r1, [r7, #0]
 8001ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	db0a      	blt.n	8001aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	490c      	ldr	r1, [pc, #48]	; (8001b10 <__NVIC_SetPriority+0x4c>)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	0112      	lsls	r2, r2, #4
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aec:	e00a      	b.n	8001b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	4908      	ldr	r1, [pc, #32]	; (8001b14 <__NVIC_SetPriority+0x50>)
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	3b04      	subs	r3, #4
 8001afc:	0112      	lsls	r2, r2, #4
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	440b      	add	r3, r1
 8001b02:	761a      	strb	r2, [r3, #24]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000e100 	.word	0xe000e100
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b089      	sub	sp, #36	; 0x24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f1c3 0307 	rsb	r3, r3, #7
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	bf28      	it	cs
 8001b36:	2304      	movcs	r3, #4
 8001b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	2b06      	cmp	r3, #6
 8001b40:	d902      	bls.n	8001b48 <NVIC_EncodePriority+0x30>
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3b03      	subs	r3, #3
 8001b46:	e000      	b.n	8001b4a <NVIC_EncodePriority+0x32>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43da      	mvns	r2, r3
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6a:	43d9      	mvns	r1, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	4313      	orrs	r3, r2
         );
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3724      	adds	r7, #36	; 0x24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b90:	d301      	bcc.n	8001b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b92:	2301      	movs	r3, #1
 8001b94:	e00f      	b.n	8001bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <SysTick_Config+0x40>)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b9e:	210f      	movs	r1, #15
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ba4:	f7ff ff8e 	bl	8001ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <SysTick_Config+0x40>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bae:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <SysTick_Config+0x40>)
 8001bb0:	2207      	movs	r2, #7
 8001bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	e000e010 	.word	0xe000e010

08001bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ff29 	bl	8001a24 <__NVIC_SetPriorityGrouping>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b086      	sub	sp, #24
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	607a      	str	r2, [r7, #4]
 8001be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bec:	f7ff ff3e 	bl	8001a6c <__NVIC_GetPriorityGrouping>
 8001bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	6978      	ldr	r0, [r7, #20]
 8001bf8:	f7ff ff8e 	bl	8001b18 <NVIC_EncodePriority>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff5d 	bl	8001ac4 <__NVIC_SetPriority>
}
 8001c0a:	bf00      	nop
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff31 	bl	8001a88 <__NVIC_EnableIRQ>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ffa2 	bl	8001b80 <SysTick_Config>
 8001c3c:	4603      	mov	r3, r0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b089      	sub	sp, #36	; 0x24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
 8001c62:	e177      	b.n	8001f54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c64:	2201      	movs	r2, #1
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	f040 8166 	bne.w	8001f4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d005      	beq.n	8001c9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d130      	bne.n	8001cfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	f003 0201 	and.w	r2, r3, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d017      	beq.n	8001d38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	2203      	movs	r2, #3
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d123      	bne.n	8001d8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	08da      	lsrs	r2, r3, #3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3208      	adds	r2, #8
 8001d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	220f      	movs	r2, #15
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	691a      	ldr	r2, [r3, #16]
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	08da      	lsrs	r2, r3, #3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3208      	adds	r2, #8
 8001d86:	69b9      	ldr	r1, [r7, #24]
 8001d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0203 	and.w	r2, r3, #3
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 80c0 	beq.w	8001f4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	4b66      	ldr	r3, [pc, #408]	; (8001f6c <HAL_GPIO_Init+0x324>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	4a65      	ldr	r2, [pc, #404]	; (8001f6c <HAL_GPIO_Init+0x324>)
 8001dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dde:	4b63      	ldr	r3, [pc, #396]	; (8001f6c <HAL_GPIO_Init+0x324>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dea:	4a61      	ldr	r2, [pc, #388]	; (8001f70 <HAL_GPIO_Init+0x328>)
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	089b      	lsrs	r3, r3, #2
 8001df0:	3302      	adds	r3, #2
 8001df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	220f      	movs	r2, #15
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a58      	ldr	r2, [pc, #352]	; (8001f74 <HAL_GPIO_Init+0x32c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d037      	beq.n	8001e86 <HAL_GPIO_Init+0x23e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a57      	ldr	r2, [pc, #348]	; (8001f78 <HAL_GPIO_Init+0x330>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d031      	beq.n	8001e82 <HAL_GPIO_Init+0x23a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a56      	ldr	r2, [pc, #344]	; (8001f7c <HAL_GPIO_Init+0x334>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d02b      	beq.n	8001e7e <HAL_GPIO_Init+0x236>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a55      	ldr	r2, [pc, #340]	; (8001f80 <HAL_GPIO_Init+0x338>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d025      	beq.n	8001e7a <HAL_GPIO_Init+0x232>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a54      	ldr	r2, [pc, #336]	; (8001f84 <HAL_GPIO_Init+0x33c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d01f      	beq.n	8001e76 <HAL_GPIO_Init+0x22e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a53      	ldr	r2, [pc, #332]	; (8001f88 <HAL_GPIO_Init+0x340>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d019      	beq.n	8001e72 <HAL_GPIO_Init+0x22a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a52      	ldr	r2, [pc, #328]	; (8001f8c <HAL_GPIO_Init+0x344>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d013      	beq.n	8001e6e <HAL_GPIO_Init+0x226>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a51      	ldr	r2, [pc, #324]	; (8001f90 <HAL_GPIO_Init+0x348>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d00d      	beq.n	8001e6a <HAL_GPIO_Init+0x222>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a50      	ldr	r2, [pc, #320]	; (8001f94 <HAL_GPIO_Init+0x34c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d007      	beq.n	8001e66 <HAL_GPIO_Init+0x21e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a4f      	ldr	r2, [pc, #316]	; (8001f98 <HAL_GPIO_Init+0x350>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d101      	bne.n	8001e62 <HAL_GPIO_Init+0x21a>
 8001e5e:	2309      	movs	r3, #9
 8001e60:	e012      	b.n	8001e88 <HAL_GPIO_Init+0x240>
 8001e62:	230a      	movs	r3, #10
 8001e64:	e010      	b.n	8001e88 <HAL_GPIO_Init+0x240>
 8001e66:	2308      	movs	r3, #8
 8001e68:	e00e      	b.n	8001e88 <HAL_GPIO_Init+0x240>
 8001e6a:	2307      	movs	r3, #7
 8001e6c:	e00c      	b.n	8001e88 <HAL_GPIO_Init+0x240>
 8001e6e:	2306      	movs	r3, #6
 8001e70:	e00a      	b.n	8001e88 <HAL_GPIO_Init+0x240>
 8001e72:	2305      	movs	r3, #5
 8001e74:	e008      	b.n	8001e88 <HAL_GPIO_Init+0x240>
 8001e76:	2304      	movs	r3, #4
 8001e78:	e006      	b.n	8001e88 <HAL_GPIO_Init+0x240>
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e004      	b.n	8001e88 <HAL_GPIO_Init+0x240>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e002      	b.n	8001e88 <HAL_GPIO_Init+0x240>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <HAL_GPIO_Init+0x240>
 8001e86:	2300      	movs	r3, #0
 8001e88:	69fa      	ldr	r2, [r7, #28]
 8001e8a:	f002 0203 	and.w	r2, r2, #3
 8001e8e:	0092      	lsls	r2, r2, #2
 8001e90:	4093      	lsls	r3, r2
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e98:	4935      	ldr	r1, [pc, #212]	; (8001f70 <HAL_GPIO_Init+0x328>)
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	089b      	lsrs	r3, r3, #2
 8001e9e:	3302      	adds	r3, #2
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ea6:	4b3d      	ldr	r3, [pc, #244]	; (8001f9c <HAL_GPIO_Init+0x354>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eca:	4a34      	ldr	r2, [pc, #208]	; (8001f9c <HAL_GPIO_Init+0x354>)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ed0:	4b32      	ldr	r3, [pc, #200]	; (8001f9c <HAL_GPIO_Init+0x354>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ef4:	4a29      	ldr	r2, [pc, #164]	; (8001f9c <HAL_GPIO_Init+0x354>)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001efa:	4b28      	ldr	r3, [pc, #160]	; (8001f9c <HAL_GPIO_Init+0x354>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f1e:	4a1f      	ldr	r2, [pc, #124]	; (8001f9c <HAL_GPIO_Init+0x354>)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <HAL_GPIO_Init+0x354>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f48:	4a14      	ldr	r2, [pc, #80]	; (8001f9c <HAL_GPIO_Init+0x354>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3301      	adds	r3, #1
 8001f52:	61fb      	str	r3, [r7, #28]
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	2b0f      	cmp	r3, #15
 8001f58:	f67f ae84 	bls.w	8001c64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	bf00      	nop
 8001f60:	3724      	adds	r7, #36	; 0x24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40013800 	.word	0x40013800
 8001f74:	40020000 	.word	0x40020000
 8001f78:	40020400 	.word	0x40020400
 8001f7c:	40020800 	.word	0x40020800
 8001f80:	40020c00 	.word	0x40020c00
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40021400 	.word	0x40021400
 8001f8c:	40021800 	.word	0x40021800
 8001f90:	40021c00 	.word	0x40021c00
 8001f94:	40022000 	.word	0x40022000
 8001f98:	40022400 	.word	0x40022400
 8001f9c:	40013c00 	.word	0x40013c00

08001fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	807b      	strh	r3, [r7, #2]
 8001fac:	4613      	mov	r3, r2
 8001fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb0:	787b      	ldrb	r3, [r7, #1]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fb6:	887a      	ldrh	r2, [r7, #2]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fbc:	e003      	b.n	8001fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fbe:	887b      	ldrh	r3, [r7, #2]
 8001fc0:	041a      	lsls	r2, r3, #16
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	619a      	str	r2, [r3, #24]
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e12b      	b.n	800223e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d106      	bne.n	8002000 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7fe ff3a 	bl	8000e74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2224      	movs	r2, #36	; 0x24
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0201 	bic.w	r2, r2, #1
 8002016:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002026:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002036:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002038:	f001 f88e 	bl	8003158 <HAL_RCC_GetPCLK1Freq>
 800203c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	4a81      	ldr	r2, [pc, #516]	; (8002248 <HAL_I2C_Init+0x274>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d807      	bhi.n	8002058 <HAL_I2C_Init+0x84>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4a80      	ldr	r2, [pc, #512]	; (800224c <HAL_I2C_Init+0x278>)
 800204c:	4293      	cmp	r3, r2
 800204e:	bf94      	ite	ls
 8002050:	2301      	movls	r3, #1
 8002052:	2300      	movhi	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	e006      	b.n	8002066 <HAL_I2C_Init+0x92>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4a7d      	ldr	r2, [pc, #500]	; (8002250 <HAL_I2C_Init+0x27c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	bf94      	ite	ls
 8002060:	2301      	movls	r3, #1
 8002062:	2300      	movhi	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e0e7      	b.n	800223e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4a78      	ldr	r2, [pc, #480]	; (8002254 <HAL_I2C_Init+0x280>)
 8002072:	fba2 2303 	umull	r2, r3, r2, r3
 8002076:	0c9b      	lsrs	r3, r3, #18
 8002078:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68ba      	ldr	r2, [r7, #8]
 800208a:	430a      	orrs	r2, r1
 800208c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	4a6a      	ldr	r2, [pc, #424]	; (8002248 <HAL_I2C_Init+0x274>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d802      	bhi.n	80020a8 <HAL_I2C_Init+0xd4>
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	3301      	adds	r3, #1
 80020a6:	e009      	b.n	80020bc <HAL_I2C_Init+0xe8>
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020ae:	fb02 f303 	mul.w	r3, r2, r3
 80020b2:	4a69      	ldr	r2, [pc, #420]	; (8002258 <HAL_I2C_Init+0x284>)
 80020b4:	fba2 2303 	umull	r2, r3, r2, r3
 80020b8:	099b      	lsrs	r3, r3, #6
 80020ba:	3301      	adds	r3, #1
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6812      	ldr	r2, [r2, #0]
 80020c0:	430b      	orrs	r3, r1
 80020c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	495c      	ldr	r1, [pc, #368]	; (8002248 <HAL_I2C_Init+0x274>)
 80020d8:	428b      	cmp	r3, r1
 80020da:	d819      	bhi.n	8002110 <HAL_I2C_Init+0x13c>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	1e59      	subs	r1, r3, #1
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80020ea:	1c59      	adds	r1, r3, #1
 80020ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020f0:	400b      	ands	r3, r1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00a      	beq.n	800210c <HAL_I2C_Init+0x138>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1e59      	subs	r1, r3, #1
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fbb1 f3f3 	udiv	r3, r1, r3
 8002104:	3301      	adds	r3, #1
 8002106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210a:	e051      	b.n	80021b0 <HAL_I2C_Init+0x1dc>
 800210c:	2304      	movs	r3, #4
 800210e:	e04f      	b.n	80021b0 <HAL_I2C_Init+0x1dc>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d111      	bne.n	800213c <HAL_I2C_Init+0x168>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	1e58      	subs	r0, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6859      	ldr	r1, [r3, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	440b      	add	r3, r1
 8002126:	fbb0 f3f3 	udiv	r3, r0, r3
 800212a:	3301      	adds	r3, #1
 800212c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002130:	2b00      	cmp	r3, #0
 8002132:	bf0c      	ite	eq
 8002134:	2301      	moveq	r3, #1
 8002136:	2300      	movne	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	e012      	b.n	8002162 <HAL_I2C_Init+0x18e>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	1e58      	subs	r0, r3, #1
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6859      	ldr	r1, [r3, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	0099      	lsls	r1, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002152:	3301      	adds	r3, #1
 8002154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf0c      	ite	eq
 800215c:	2301      	moveq	r3, #1
 800215e:	2300      	movne	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_I2C_Init+0x196>
 8002166:	2301      	movs	r3, #1
 8002168:	e022      	b.n	80021b0 <HAL_I2C_Init+0x1dc>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10e      	bne.n	8002190 <HAL_I2C_Init+0x1bc>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1e58      	subs	r0, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6859      	ldr	r1, [r3, #4]
 800217a:	460b      	mov	r3, r1
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	440b      	add	r3, r1
 8002180:	fbb0 f3f3 	udiv	r3, r0, r3
 8002184:	3301      	adds	r3, #1
 8002186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800218a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800218e:	e00f      	b.n	80021b0 <HAL_I2C_Init+0x1dc>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1e58      	subs	r0, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6859      	ldr	r1, [r3, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	0099      	lsls	r1, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a6:	3301      	adds	r3, #1
 80021a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	6809      	ldr	r1, [r1, #0]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69da      	ldr	r2, [r3, #28]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6911      	ldr	r1, [r2, #16]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68d2      	ldr	r2, [r2, #12]
 80021ea:	4311      	orrs	r1, r2
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	430b      	orrs	r3, r1
 80021f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0201 	orr.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2220      	movs	r2, #32
 800222a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	000186a0 	.word	0x000186a0
 800224c:	001e847f 	.word	0x001e847f
 8002250:	003d08ff 	.word	0x003d08ff
 8002254:	431bde83 	.word	0x431bde83
 8002258:	10624dd3 	.word	0x10624dd3

0800225c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af02      	add	r7, sp, #8
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	461a      	mov	r2, r3
 8002268:	460b      	mov	r3, r1
 800226a:	817b      	strh	r3, [r7, #10]
 800226c:	4613      	mov	r3, r2
 800226e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002270:	f7ff fba8 	bl	80019c4 <HAL_GetTick>
 8002274:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b20      	cmp	r3, #32
 8002280:	f040 80e0 	bne.w	8002444 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	2319      	movs	r3, #25
 800228a:	2201      	movs	r2, #1
 800228c:	4970      	ldr	r1, [pc, #448]	; (8002450 <HAL_I2C_Master_Transmit+0x1f4>)
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 f964 	bl	800255c <I2C_WaitOnFlagUntilTimeout>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800229a:	2302      	movs	r3, #2
 800229c:	e0d3      	b.n	8002446 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <HAL_I2C_Master_Transmit+0x50>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e0cc      	b.n	8002446 <HAL_I2C_Master_Transmit+0x1ea>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d007      	beq.n	80022d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 0201 	orr.w	r2, r2, #1
 80022d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2221      	movs	r2, #33	; 0x21
 80022e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2210      	movs	r2, #16
 80022ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	893a      	ldrh	r2, [r7, #8]
 8002302:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002308:	b29a      	uxth	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4a50      	ldr	r2, [pc, #320]	; (8002454 <HAL_I2C_Master_Transmit+0x1f8>)
 8002312:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002314:	8979      	ldrh	r1, [r7, #10]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	6a3a      	ldr	r2, [r7, #32]
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f89c 	bl	8002458 <I2C_MasterRequestWrite>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e08d      	b.n	8002446 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002340:	e066      	b.n	8002410 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	6a39      	ldr	r1, [r7, #32]
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 f9de 	bl	8002708 <I2C_WaitOnTXEFlagUntilTimeout>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00d      	beq.n	800236e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	2b04      	cmp	r3, #4
 8002358:	d107      	bne.n	800236a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002368:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e06b      	b.n	8002446 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	781a      	ldrb	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	1c5a      	adds	r2, r3, #1
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002388:	b29b      	uxth	r3, r3
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002396:	3b01      	subs	r3, #1
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d11b      	bne.n	80023e4 <HAL_I2C_Master_Transmit+0x188>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d017      	beq.n	80023e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	781a      	ldrb	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	6a39      	ldr	r1, [r7, #32]
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 f9ce 	bl	800278a <I2C_WaitOnBTFFlagUntilTimeout>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00d      	beq.n	8002410 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d107      	bne.n	800240c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800240a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e01a      	b.n	8002446 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002414:	2b00      	cmp	r3, #0
 8002416:	d194      	bne.n	8002342 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002426:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002440:	2300      	movs	r3, #0
 8002442:	e000      	b.n	8002446 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002444:	2302      	movs	r3, #2
  }
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	00100002 	.word	0x00100002
 8002454:	ffff0000 	.word	0xffff0000

08002458 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af02      	add	r7, sp, #8
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	460b      	mov	r3, r1
 8002466:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2b08      	cmp	r3, #8
 8002472:	d006      	beq.n	8002482 <I2C_MasterRequestWrite+0x2a>
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d003      	beq.n	8002482 <I2C_MasterRequestWrite+0x2a>
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002480:	d108      	bne.n	8002494 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	e00b      	b.n	80024ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002498:	2b12      	cmp	r3, #18
 800249a:	d107      	bne.n	80024ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 f84f 	bl	800255c <I2C_WaitOnFlagUntilTimeout>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00d      	beq.n	80024e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024d2:	d103      	bne.n	80024dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e035      	b.n	800254c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024e8:	d108      	bne.n	80024fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024ea:	897b      	ldrh	r3, [r7, #10]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024f8:	611a      	str	r2, [r3, #16]
 80024fa:	e01b      	b.n	8002534 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024fc:	897b      	ldrh	r3, [r7, #10]
 80024fe:	11db      	asrs	r3, r3, #7
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f003 0306 	and.w	r3, r3, #6
 8002506:	b2db      	uxtb	r3, r3
 8002508:	f063 030f 	orn	r3, r3, #15
 800250c:	b2da      	uxtb	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	490e      	ldr	r1, [pc, #56]	; (8002554 <I2C_MasterRequestWrite+0xfc>)
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f875 	bl	800260a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e010      	b.n	800254c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800252a:	897b      	ldrh	r3, [r7, #10]
 800252c:	b2da      	uxtb	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	4907      	ldr	r1, [pc, #28]	; (8002558 <I2C_MasterRequestWrite+0x100>)
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f865 	bl	800260a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	00010008 	.word	0x00010008
 8002558:	00010002 	.word	0x00010002

0800255c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	4613      	mov	r3, r2
 800256a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800256c:	e025      	b.n	80025ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002574:	d021      	beq.n	80025ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002576:	f7ff fa25 	bl	80019c4 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d302      	bcc.n	800258c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d116      	bne.n	80025ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2220      	movs	r2, #32
 8002596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f043 0220 	orr.w	r2, r3, #32
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e023      	b.n	8002602 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	0c1b      	lsrs	r3, r3, #16
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d10d      	bne.n	80025e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	43da      	mvns	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4013      	ands	r3, r2
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	bf0c      	ite	eq
 80025d6:	2301      	moveq	r3, #1
 80025d8:	2300      	movne	r3, #0
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	461a      	mov	r2, r3
 80025de:	e00c      	b.n	80025fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	43da      	mvns	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	4013      	ands	r3, r2
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	bf0c      	ite	eq
 80025f2:	2301      	moveq	r3, #1
 80025f4:	2300      	movne	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d0b6      	beq.n	800256e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b084      	sub	sp, #16
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
 8002616:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002618:	e051      	b.n	80026be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002628:	d123      	bne.n	8002672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002638:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002642:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2220      	movs	r2, #32
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f043 0204 	orr.w	r2, r3, #4
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e046      	b.n	8002700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002678:	d021      	beq.n	80026be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800267a:	f7ff f9a3 	bl	80019c4 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	429a      	cmp	r2, r3
 8002688:	d302      	bcc.n	8002690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d116      	bne.n	80026be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f043 0220 	orr.w	r2, r3, #32
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e020      	b.n	8002700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	0c1b      	lsrs	r3, r3, #16
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d10c      	bne.n	80026e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	43da      	mvns	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	4013      	ands	r3, r2
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	bf14      	ite	ne
 80026da:	2301      	movne	r3, #1
 80026dc:	2300      	moveq	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	e00b      	b.n	80026fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	43da      	mvns	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	4013      	ands	r3, r2
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf14      	ite	ne
 80026f4:	2301      	movne	r3, #1
 80026f6:	2300      	moveq	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d18d      	bne.n	800261a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002714:	e02d      	b.n	8002772 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f878 	bl	800280c <I2C_IsAcknowledgeFailed>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e02d      	b.n	8002782 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800272c:	d021      	beq.n	8002772 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800272e:	f7ff f949 	bl	80019c4 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	429a      	cmp	r2, r3
 800273c:	d302      	bcc.n	8002744 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d116      	bne.n	8002772 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2220      	movs	r2, #32
 800274e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f043 0220 	orr.w	r2, r3, #32
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e007      	b.n	8002782 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277c:	2b80      	cmp	r3, #128	; 0x80
 800277e:	d1ca      	bne.n	8002716 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	60f8      	str	r0, [r7, #12]
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002796:	e02d      	b.n	80027f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f837 	bl	800280c <I2C_IsAcknowledgeFailed>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e02d      	b.n	8002804 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027ae:	d021      	beq.n	80027f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b0:	f7ff f908 	bl	80019c4 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d302      	bcc.n	80027c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d116      	bne.n	80027f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	f043 0220 	orr.w	r2, r3, #32
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e007      	b.n	8002804 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d1ca      	bne.n	8002798 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800281e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002822:	d11b      	bne.n	800285c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800282c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	f043 0204 	orr.w	r2, r3, #4
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 800286a:	b480      	push	{r7}
 800286c:	af00      	add	r7, sp, #0

}
 800286e:	bf00      	nop
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e267      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d075      	beq.n	8002982 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002896:	4b88      	ldr	r3, [pc, #544]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 030c 	and.w	r3, r3, #12
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d00c      	beq.n	80028bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028a2:	4b85      	ldr	r3, [pc, #532]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d112      	bne.n	80028d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ae:	4b82      	ldr	r3, [pc, #520]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ba:	d10b      	bne.n	80028d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028bc:	4b7e      	ldr	r3, [pc, #504]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d05b      	beq.n	8002980 <HAL_RCC_OscConfig+0x108>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d157      	bne.n	8002980 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e242      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028dc:	d106      	bne.n	80028ec <HAL_RCC_OscConfig+0x74>
 80028de:	4b76      	ldr	r3, [pc, #472]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a75      	ldr	r2, [pc, #468]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	e01d      	b.n	8002928 <HAL_RCC_OscConfig+0xb0>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f4:	d10c      	bne.n	8002910 <HAL_RCC_OscConfig+0x98>
 80028f6:	4b70      	ldr	r3, [pc, #448]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a6f      	ldr	r2, [pc, #444]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	4b6d      	ldr	r3, [pc, #436]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a6c      	ldr	r2, [pc, #432]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	e00b      	b.n	8002928 <HAL_RCC_OscConfig+0xb0>
 8002910:	4b69      	ldr	r3, [pc, #420]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a68      	ldr	r2, [pc, #416]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	4b66      	ldr	r3, [pc, #408]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a65      	ldr	r2, [pc, #404]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d013      	beq.n	8002958 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002930:	f7ff f848 	bl	80019c4 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002938:	f7ff f844 	bl	80019c4 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b64      	cmp	r3, #100	; 0x64
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e207      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294a:	4b5b      	ldr	r3, [pc, #364]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCC_OscConfig+0xc0>
 8002956:	e014      	b.n	8002982 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002958:	f7ff f834 	bl	80019c4 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002960:	f7ff f830 	bl	80019c4 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b64      	cmp	r3, #100	; 0x64
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e1f3      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002972:	4b51      	ldr	r3, [pc, #324]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0xe8>
 800297e:	e000      	b.n	8002982 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d063      	beq.n	8002a56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800298e:	4b4a      	ldr	r3, [pc, #296]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 030c 	and.w	r3, r3, #12
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00b      	beq.n	80029b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800299a:	4b47      	ldr	r3, [pc, #284]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d11c      	bne.n	80029e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a6:	4b44      	ldr	r3, [pc, #272]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d116      	bne.n	80029e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b2:	4b41      	ldr	r3, [pc, #260]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d005      	beq.n	80029ca <HAL_RCC_OscConfig+0x152>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d001      	beq.n	80029ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e1c7      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ca:	4b3b      	ldr	r3, [pc, #236]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4937      	ldr	r1, [pc, #220]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029de:	e03a      	b.n	8002a56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d020      	beq.n	8002a2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e8:	4b34      	ldr	r3, [pc, #208]	; (8002abc <HAL_RCC_OscConfig+0x244>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ee:	f7fe ffe9 	bl	80019c4 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029f6:	f7fe ffe5 	bl	80019c4 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e1a8      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a08:	4b2b      	ldr	r3, [pc, #172]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a14:	4b28      	ldr	r3, [pc, #160]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4925      	ldr	r1, [pc, #148]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	600b      	str	r3, [r1, #0]
 8002a28:	e015      	b.n	8002a56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a2a:	4b24      	ldr	r3, [pc, #144]	; (8002abc <HAL_RCC_OscConfig+0x244>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7fe ffc8 	bl	80019c4 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a38:	f7fe ffc4 	bl	80019c4 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e187      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d036      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d016      	beq.n	8002a98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a6a:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <HAL_RCC_OscConfig+0x248>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a70:	f7fe ffa8 	bl	80019c4 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a78:	f7fe ffa4 	bl	80019c4 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e167      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0x200>
 8002a96:	e01b      	b.n	8002ad0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a98:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <HAL_RCC_OscConfig+0x248>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9e:	f7fe ff91 	bl	80019c4 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa4:	e00e      	b.n	8002ac4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa6:	f7fe ff8d 	bl	80019c4 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d907      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e150      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	42470000 	.word	0x42470000
 8002ac0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac4:	4b88      	ldr	r3, [pc, #544]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1ea      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 8097 	beq.w	8002c0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae2:	4b81      	ldr	r3, [pc, #516]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10f      	bne.n	8002b0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	4b7d      	ldr	r3, [pc, #500]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	4a7c      	ldr	r2, [pc, #496]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afc:	6413      	str	r3, [r2, #64]	; 0x40
 8002afe:	4b7a      	ldr	r3, [pc, #488]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0e:	4b77      	ldr	r3, [pc, #476]	; (8002cec <HAL_RCC_OscConfig+0x474>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d118      	bne.n	8002b4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b1a:	4b74      	ldr	r3, [pc, #464]	; (8002cec <HAL_RCC_OscConfig+0x474>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a73      	ldr	r2, [pc, #460]	; (8002cec <HAL_RCC_OscConfig+0x474>)
 8002b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b26:	f7fe ff4d 	bl	80019c4 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2e:	f7fe ff49 	bl	80019c4 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e10c      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b40:	4b6a      	ldr	r3, [pc, #424]	; (8002cec <HAL_RCC_OscConfig+0x474>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0f0      	beq.n	8002b2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d106      	bne.n	8002b62 <HAL_RCC_OscConfig+0x2ea>
 8002b54:	4b64      	ldr	r3, [pc, #400]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	4a63      	ldr	r2, [pc, #396]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b60:	e01c      	b.n	8002b9c <HAL_RCC_OscConfig+0x324>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b05      	cmp	r3, #5
 8002b68:	d10c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x30c>
 8002b6a:	4b5f      	ldr	r3, [pc, #380]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6e:	4a5e      	ldr	r2, [pc, #376]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b70:	f043 0304 	orr.w	r3, r3, #4
 8002b74:	6713      	str	r3, [r2, #112]	; 0x70
 8002b76:	4b5c      	ldr	r3, [pc, #368]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	4a5b      	ldr	r2, [pc, #364]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6713      	str	r3, [r2, #112]	; 0x70
 8002b82:	e00b      	b.n	8002b9c <HAL_RCC_OscConfig+0x324>
 8002b84:	4b58      	ldr	r3, [pc, #352]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	4a57      	ldr	r2, [pc, #348]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b8a:	f023 0301 	bic.w	r3, r3, #1
 8002b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b90:	4b55      	ldr	r3, [pc, #340]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b94:	4a54      	ldr	r2, [pc, #336]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b96:	f023 0304 	bic.w	r3, r3, #4
 8002b9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d015      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba4:	f7fe ff0e 	bl	80019c4 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bac:	f7fe ff0a 	bl	80019c4 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e0cb      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc2:	4b49      	ldr	r3, [pc, #292]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0ee      	beq.n	8002bac <HAL_RCC_OscConfig+0x334>
 8002bce:	e014      	b.n	8002bfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd0:	f7fe fef8 	bl	80019c4 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd8:	f7fe fef4 	bl	80019c4 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e0b5      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bee:	4b3e      	ldr	r3, [pc, #248]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1ee      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d105      	bne.n	8002c0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c00:	4b39      	ldr	r3, [pc, #228]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	4a38      	ldr	r2, [pc, #224]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80a1 	beq.w	8002d58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c16:	4b34      	ldr	r3, [pc, #208]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d05c      	beq.n	8002cdc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d141      	bne.n	8002cae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2a:	4b31      	ldr	r3, [pc, #196]	; (8002cf0 <HAL_RCC_OscConfig+0x478>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7fe fec8 	bl	80019c4 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c38:	f7fe fec4 	bl	80019c4 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e087      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4a:	4b27      	ldr	r3, [pc, #156]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69da      	ldr	r2, [r3, #28]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	019b      	lsls	r3, r3, #6
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	085b      	lsrs	r3, r3, #1
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	061b      	lsls	r3, r3, #24
 8002c7a:	491b      	ldr	r1, [pc, #108]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c80:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <HAL_RCC_OscConfig+0x478>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c86:	f7fe fe9d 	bl	80019c4 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c8e:	f7fe fe99 	bl	80019c4 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e05c      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca0:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0f0      	beq.n	8002c8e <HAL_RCC_OscConfig+0x416>
 8002cac:	e054      	b.n	8002d58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cae:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <HAL_RCC_OscConfig+0x478>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb4:	f7fe fe86 	bl	80019c4 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cbc:	f7fe fe82 	bl	80019c4 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e045      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0x444>
 8002cda:	e03d      	b.n	8002d58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d107      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e038      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40007000 	.word	0x40007000
 8002cf0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <HAL_RCC_OscConfig+0x4ec>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d028      	beq.n	8002d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d121      	bne.n	8002d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d11a      	bne.n	8002d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d24:	4013      	ands	r3, r2
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d111      	bne.n	8002d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	085b      	lsrs	r3, r3, #1
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d107      	bne.n	8002d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40023800 	.word	0x40023800

08002d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0cc      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b68      	ldr	r3, [pc, #416]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d90c      	bls.n	8002da4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8a:	4b65      	ldr	r3, [pc, #404]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d92:	4b63      	ldr	r3, [pc, #396]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0b8      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d020      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dbc:	4b59      	ldr	r3, [pc, #356]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4a58      	ldr	r2, [pc, #352]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd4:	4b53      	ldr	r3, [pc, #332]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	4a52      	ldr	r2, [pc, #328]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de0:	4b50      	ldr	r3, [pc, #320]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	494d      	ldr	r1, [pc, #308]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d044      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d107      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e06:	4b47      	ldr	r3, [pc, #284]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d119      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e07f      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d003      	beq.n	8002e26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e26:	4b3f      	ldr	r3, [pc, #252]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e06f      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e36:	4b3b      	ldr	r3, [pc, #236]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e067      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e46:	4b37      	ldr	r3, [pc, #220]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f023 0203 	bic.w	r2, r3, #3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	4934      	ldr	r1, [pc, #208]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e58:	f7fe fdb4 	bl	80019c4 <HAL_GetTick>
 8002e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5e:	e00a      	b.n	8002e76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e60:	f7fe fdb0 	bl	80019c4 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e04f      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e76:	4b2b      	ldr	r3, [pc, #172]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 020c 	and.w	r2, r3, #12
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d1eb      	bne.n	8002e60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e88:	4b25      	ldr	r3, [pc, #148]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d20c      	bcs.n	8002eb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b22      	ldr	r3, [pc, #136]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9e:	4b20      	ldr	r3, [pc, #128]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e032      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ebc:	4b19      	ldr	r3, [pc, #100]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	4916      	ldr	r1, [pc, #88]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d009      	beq.n	8002eee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eda:	4b12      	ldr	r3, [pc, #72]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	490e      	ldr	r1, [pc, #56]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eee:	f000 f821 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	091b      	lsrs	r3, r3, #4
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	490a      	ldr	r1, [pc, #40]	; (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002f00:	5ccb      	ldrb	r3, [r1, r3]
 8002f02:	fa22 f303 	lsr.w	r3, r2, r3
 8002f06:	4a09      	ldr	r2, [pc, #36]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f0a:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fe fd14 	bl	800193c <HAL_InitTick>

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40023c00 	.word	0x40023c00
 8002f24:	40023800 	.word	0x40023800
 8002f28:	08005104 	.word	0x08005104
 8002f2c:	2000000c 	.word	0x2000000c
 8002f30:	20000010 	.word	0x20000010

08002f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f38:	b094      	sub	sp, #80	; 0x50
 8002f3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f40:	2300      	movs	r3, #0
 8002f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f44:	2300      	movs	r3, #0
 8002f46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f4c:	4b79      	ldr	r3, [pc, #484]	; (8003134 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 030c 	and.w	r3, r3, #12
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d00d      	beq.n	8002f74 <HAL_RCC_GetSysClockFreq+0x40>
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	f200 80e1 	bhi.w	8003120 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <HAL_RCC_GetSysClockFreq+0x34>
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d003      	beq.n	8002f6e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f66:	e0db      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f68:	4b73      	ldr	r3, [pc, #460]	; (8003138 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f6a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f6c:	e0db      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f6e:	4b73      	ldr	r3, [pc, #460]	; (800313c <HAL_RCC_GetSysClockFreq+0x208>)
 8002f70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f72:	e0d8      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f74:	4b6f      	ldr	r3, [pc, #444]	; (8003134 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f7c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f7e:	4b6d      	ldr	r3, [pc, #436]	; (8003134 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d063      	beq.n	8003052 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f8a:	4b6a      	ldr	r3, [pc, #424]	; (8003134 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	099b      	lsrs	r3, r3, #6
 8002f90:	2200      	movs	r2, #0
 8002f92:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f9c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8002fa2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fa6:	4622      	mov	r2, r4
 8002fa8:	462b      	mov	r3, r5
 8002faa:	f04f 0000 	mov.w	r0, #0
 8002fae:	f04f 0100 	mov.w	r1, #0
 8002fb2:	0159      	lsls	r1, r3, #5
 8002fb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fb8:	0150      	lsls	r0, r2, #5
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	1a51      	subs	r1, r2, r1
 8002fc2:	6139      	str	r1, [r7, #16]
 8002fc4:	4629      	mov	r1, r5
 8002fc6:	eb63 0301 	sbc.w	r3, r3, r1
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fd8:	4659      	mov	r1, fp
 8002fda:	018b      	lsls	r3, r1, #6
 8002fdc:	4651      	mov	r1, sl
 8002fde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fe2:	4651      	mov	r1, sl
 8002fe4:	018a      	lsls	r2, r1, #6
 8002fe6:	4651      	mov	r1, sl
 8002fe8:	ebb2 0801 	subs.w	r8, r2, r1
 8002fec:	4659      	mov	r1, fp
 8002fee:	eb63 0901 	sbc.w	r9, r3, r1
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ffe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003002:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003006:	4690      	mov	r8, r2
 8003008:	4699      	mov	r9, r3
 800300a:	4623      	mov	r3, r4
 800300c:	eb18 0303 	adds.w	r3, r8, r3
 8003010:	60bb      	str	r3, [r7, #8]
 8003012:	462b      	mov	r3, r5
 8003014:	eb49 0303 	adc.w	r3, r9, r3
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003026:	4629      	mov	r1, r5
 8003028:	024b      	lsls	r3, r1, #9
 800302a:	4621      	mov	r1, r4
 800302c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003030:	4621      	mov	r1, r4
 8003032:	024a      	lsls	r2, r1, #9
 8003034:	4610      	mov	r0, r2
 8003036:	4619      	mov	r1, r3
 8003038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800303a:	2200      	movs	r2, #0
 800303c:	62bb      	str	r3, [r7, #40]	; 0x28
 800303e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003040:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003044:	f7fd fd1a 	bl	8000a7c <__aeabi_uldivmod>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4613      	mov	r3, r2
 800304e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003050:	e058      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003052:	4b38      	ldr	r3, [pc, #224]	; (8003134 <HAL_RCC_GetSysClockFreq+0x200>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	099b      	lsrs	r3, r3, #6
 8003058:	2200      	movs	r2, #0
 800305a:	4618      	mov	r0, r3
 800305c:	4611      	mov	r1, r2
 800305e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003062:	623b      	str	r3, [r7, #32]
 8003064:	2300      	movs	r3, #0
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
 8003068:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800306c:	4642      	mov	r2, r8
 800306e:	464b      	mov	r3, r9
 8003070:	f04f 0000 	mov.w	r0, #0
 8003074:	f04f 0100 	mov.w	r1, #0
 8003078:	0159      	lsls	r1, r3, #5
 800307a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800307e:	0150      	lsls	r0, r2, #5
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4641      	mov	r1, r8
 8003086:	ebb2 0a01 	subs.w	sl, r2, r1
 800308a:	4649      	mov	r1, r9
 800308c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800309c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030a4:	ebb2 040a 	subs.w	r4, r2, sl
 80030a8:	eb63 050b 	sbc.w	r5, r3, fp
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	00eb      	lsls	r3, r5, #3
 80030b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ba:	00e2      	lsls	r2, r4, #3
 80030bc:	4614      	mov	r4, r2
 80030be:	461d      	mov	r5, r3
 80030c0:	4643      	mov	r3, r8
 80030c2:	18e3      	adds	r3, r4, r3
 80030c4:	603b      	str	r3, [r7, #0]
 80030c6:	464b      	mov	r3, r9
 80030c8:	eb45 0303 	adc.w	r3, r5, r3
 80030cc:	607b      	str	r3, [r7, #4]
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030da:	4629      	mov	r1, r5
 80030dc:	028b      	lsls	r3, r1, #10
 80030de:	4621      	mov	r1, r4
 80030e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030e4:	4621      	mov	r1, r4
 80030e6:	028a      	lsls	r2, r1, #10
 80030e8:	4610      	mov	r0, r2
 80030ea:	4619      	mov	r1, r3
 80030ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ee:	2200      	movs	r2, #0
 80030f0:	61bb      	str	r3, [r7, #24]
 80030f2:	61fa      	str	r2, [r7, #28]
 80030f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030f8:	f7fd fcc0 	bl	8000a7c <__aeabi_uldivmod>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4613      	mov	r3, r2
 8003102:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003104:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <HAL_RCC_GetSysClockFreq+0x200>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	0c1b      	lsrs	r3, r3, #16
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	3301      	adds	r3, #1
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003114:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003118:	fbb2 f3f3 	udiv	r3, r2, r3
 800311c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800311e:	e002      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <HAL_RCC_GetSysClockFreq+0x204>)
 8003122:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003128:	4618      	mov	r0, r3
 800312a:	3750      	adds	r7, #80	; 0x50
 800312c:	46bd      	mov	sp, r7
 800312e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800
 8003138:	00f42400 	.word	0x00f42400
 800313c:	007a1200 	.word	0x007a1200

08003140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003144:	4b03      	ldr	r3, [pc, #12]	; (8003154 <HAL_RCC_GetHCLKFreq+0x14>)
 8003146:	681b      	ldr	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	2000000c 	.word	0x2000000c

08003158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800315c:	f7ff fff0 	bl	8003140 <HAL_RCC_GetHCLKFreq>
 8003160:	4602      	mov	r2, r0
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	0a9b      	lsrs	r3, r3, #10
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	4903      	ldr	r1, [pc, #12]	; (800317c <HAL_RCC_GetPCLK1Freq+0x24>)
 800316e:	5ccb      	ldrb	r3, [r1, r3]
 8003170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003174:	4618      	mov	r0, r3
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40023800 	.word	0x40023800
 800317c:	08005114 	.word	0x08005114

08003180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003184:	f7ff ffdc 	bl	8003140 <HAL_RCC_GetHCLKFreq>
 8003188:	4602      	mov	r2, r0
 800318a:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	0b5b      	lsrs	r3, r3, #13
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	4903      	ldr	r1, [pc, #12]	; (80031a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003196:	5ccb      	ldrb	r3, [r1, r3]
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800319c:	4618      	mov	r0, r3
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40023800 	.word	0x40023800
 80031a4:	08005114 	.word	0x08005114

080031a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e041      	b.n	800323e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7fe f8ca 	bl	8001368 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3304      	adds	r3, #4
 80031e4:	4619      	mov	r1, r3
 80031e6:	4610      	mov	r0, r2
 80031e8:	f000 fb66 	bl	80038b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d104      	bne.n	8003266 <HAL_TIM_IC_Start_IT+0x1e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003262:	b2db      	uxtb	r3, r3
 8003264:	e013      	b.n	800328e <HAL_TIM_IC_Start_IT+0x46>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b04      	cmp	r3, #4
 800326a:	d104      	bne.n	8003276 <HAL_TIM_IC_Start_IT+0x2e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003272:	b2db      	uxtb	r3, r3
 8003274:	e00b      	b.n	800328e <HAL_TIM_IC_Start_IT+0x46>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b08      	cmp	r3, #8
 800327a:	d104      	bne.n	8003286 <HAL_TIM_IC_Start_IT+0x3e>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003282:	b2db      	uxtb	r3, r3
 8003284:	e003      	b.n	800328e <HAL_TIM_IC_Start_IT+0x46>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800328c:	b2db      	uxtb	r3, r3
 800328e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d104      	bne.n	80032a0 <HAL_TIM_IC_Start_IT+0x58>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800329c:	b2db      	uxtb	r3, r3
 800329e:	e013      	b.n	80032c8 <HAL_TIM_IC_Start_IT+0x80>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d104      	bne.n	80032b0 <HAL_TIM_IC_Start_IT+0x68>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	e00b      	b.n	80032c8 <HAL_TIM_IC_Start_IT+0x80>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d104      	bne.n	80032c0 <HAL_TIM_IC_Start_IT+0x78>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	e003      	b.n	80032c8 <HAL_TIM_IC_Start_IT+0x80>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80032ca:	7bbb      	ldrb	r3, [r7, #14]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d102      	bne.n	80032d6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80032d0:	7b7b      	ldrb	r3, [r7, #13]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d001      	beq.n	80032da <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e0cc      	b.n	8003474 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d104      	bne.n	80032ea <HAL_TIM_IC_Start_IT+0xa2>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032e8:	e013      	b.n	8003312 <HAL_TIM_IC_Start_IT+0xca>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d104      	bne.n	80032fa <HAL_TIM_IC_Start_IT+0xb2>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032f8:	e00b      	b.n	8003312 <HAL_TIM_IC_Start_IT+0xca>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d104      	bne.n	800330a <HAL_TIM_IC_Start_IT+0xc2>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003308:	e003      	b.n	8003312 <HAL_TIM_IC_Start_IT+0xca>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2202      	movs	r2, #2
 800330e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d104      	bne.n	8003322 <HAL_TIM_IC_Start_IT+0xda>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003320:	e013      	b.n	800334a <HAL_TIM_IC_Start_IT+0x102>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b04      	cmp	r3, #4
 8003326:	d104      	bne.n	8003332 <HAL_TIM_IC_Start_IT+0xea>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003330:	e00b      	b.n	800334a <HAL_TIM_IC_Start_IT+0x102>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b08      	cmp	r3, #8
 8003336:	d104      	bne.n	8003342 <HAL_TIM_IC_Start_IT+0xfa>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003340:	e003      	b.n	800334a <HAL_TIM_IC_Start_IT+0x102>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2202      	movs	r2, #2
 8003346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b0c      	cmp	r3, #12
 800334e:	d841      	bhi.n	80033d4 <HAL_TIM_IC_Start_IT+0x18c>
 8003350:	a201      	add	r2, pc, #4	; (adr r2, 8003358 <HAL_TIM_IC_Start_IT+0x110>)
 8003352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003356:	bf00      	nop
 8003358:	0800338d 	.word	0x0800338d
 800335c:	080033d5 	.word	0x080033d5
 8003360:	080033d5 	.word	0x080033d5
 8003364:	080033d5 	.word	0x080033d5
 8003368:	0800339f 	.word	0x0800339f
 800336c:	080033d5 	.word	0x080033d5
 8003370:	080033d5 	.word	0x080033d5
 8003374:	080033d5 	.word	0x080033d5
 8003378:	080033b1 	.word	0x080033b1
 800337c:	080033d5 	.word	0x080033d5
 8003380:	080033d5 	.word	0x080033d5
 8003384:	080033d5 	.word	0x080033d5
 8003388:	080033c3 	.word	0x080033c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0202 	orr.w	r2, r2, #2
 800339a:	60da      	str	r2, [r3, #12]
      break;
 800339c:	e01d      	b.n	80033da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0204 	orr.w	r2, r2, #4
 80033ac:	60da      	str	r2, [r3, #12]
      break;
 80033ae:	e014      	b.n	80033da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0208 	orr.w	r2, r2, #8
 80033be:	60da      	str	r2, [r3, #12]
      break;
 80033c0:	e00b      	b.n	80033da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0210 	orr.w	r2, r2, #16
 80033d0:	60da      	str	r2, [r3, #12]
      break;
 80033d2:	e002      	b.n	80033da <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	73fb      	strb	r3, [r7, #15]
      break;
 80033d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d148      	bne.n	8003472 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2201      	movs	r2, #1
 80033e6:	6839      	ldr	r1, [r7, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 fc2f 	bl	8003c4c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a22      	ldr	r2, [pc, #136]	; (800347c <HAL_TIM_IC_Start_IT+0x234>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d022      	beq.n	800343e <HAL_TIM_IC_Start_IT+0x1f6>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003400:	d01d      	beq.n	800343e <HAL_TIM_IC_Start_IT+0x1f6>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a1e      	ldr	r2, [pc, #120]	; (8003480 <HAL_TIM_IC_Start_IT+0x238>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d018      	beq.n	800343e <HAL_TIM_IC_Start_IT+0x1f6>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a1c      	ldr	r2, [pc, #112]	; (8003484 <HAL_TIM_IC_Start_IT+0x23c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d013      	beq.n	800343e <HAL_TIM_IC_Start_IT+0x1f6>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a1b      	ldr	r2, [pc, #108]	; (8003488 <HAL_TIM_IC_Start_IT+0x240>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d00e      	beq.n	800343e <HAL_TIM_IC_Start_IT+0x1f6>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a19      	ldr	r2, [pc, #100]	; (800348c <HAL_TIM_IC_Start_IT+0x244>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d009      	beq.n	800343e <HAL_TIM_IC_Start_IT+0x1f6>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a18      	ldr	r2, [pc, #96]	; (8003490 <HAL_TIM_IC_Start_IT+0x248>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d004      	beq.n	800343e <HAL_TIM_IC_Start_IT+0x1f6>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a16      	ldr	r2, [pc, #88]	; (8003494 <HAL_TIM_IC_Start_IT+0x24c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d111      	bne.n	8003462 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b06      	cmp	r3, #6
 800344e:	d010      	beq.n	8003472 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003460:	e007      	b.n	8003472 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0201 	orr.w	r2, r2, #1
 8003470:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003472:	7bfb      	ldrb	r3, [r7, #15]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40010000 	.word	0x40010000
 8003480:	40000400 	.word	0x40000400
 8003484:	40000800 	.word	0x40000800
 8003488:	40000c00 	.word	0x40000c00
 800348c:	40010400 	.word	0x40010400
 8003490:	40014000 	.word	0x40014000
 8003494:	40001800 	.word	0x40001800

08003498 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d122      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d11b      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f06f 0202 	mvn.w	r2, #2
 80034c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fd fea0 	bl	8001220 <HAL_TIM_IC_CaptureCallback>
 80034e0:	e005      	b.n	80034ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f9ca 	bl	800387c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f9d1 	bl	8003890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d122      	bne.n	8003548 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b04      	cmp	r3, #4
 800350e:	d11b      	bne.n	8003548 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0204 	mvn.w	r2, #4
 8003518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2202      	movs	r2, #2
 800351e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7fd fe76 	bl	8001220 <HAL_TIM_IC_CaptureCallback>
 8003534:	e005      	b.n	8003542 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f9a0 	bl	800387c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f9a7 	bl	8003890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b08      	cmp	r3, #8
 8003554:	d122      	bne.n	800359c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b08      	cmp	r3, #8
 8003562:	d11b      	bne.n	800359c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0208 	mvn.w	r2, #8
 800356c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2204      	movs	r2, #4
 8003572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fd fe4c 	bl	8001220 <HAL_TIM_IC_CaptureCallback>
 8003588:	e005      	b.n	8003596 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f976 	bl	800387c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f97d 	bl	8003890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f003 0310 	and.w	r3, r3, #16
 80035a6:	2b10      	cmp	r3, #16
 80035a8:	d122      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b10      	cmp	r3, #16
 80035b6:	d11b      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0210 	mvn.w	r2, #16
 80035c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2208      	movs	r2, #8
 80035c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fd fe22 	bl	8001220 <HAL_TIM_IC_CaptureCallback>
 80035dc:	e005      	b.n	80035ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f94c 	bl	800387c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f953 	bl	8003890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d10e      	bne.n	800361c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b01      	cmp	r3, #1
 800360a:	d107      	bne.n	800361c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f06f 0201 	mvn.w	r2, #1
 8003614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f926 	bl	8003868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003626:	2b80      	cmp	r3, #128	; 0x80
 8003628:	d10e      	bne.n	8003648 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003634:	2b80      	cmp	r3, #128	; 0x80
 8003636:	d107      	bne.n	8003648 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fbae 	bl	8003da4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003652:	2b40      	cmp	r3, #64	; 0x40
 8003654:	d10e      	bne.n	8003674 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003660:	2b40      	cmp	r3, #64	; 0x40
 8003662:	d107      	bne.n	8003674 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800366c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f918 	bl	80038a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	2b20      	cmp	r3, #32
 8003680:	d10e      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 0320 	and.w	r3, r3, #32
 800368c:	2b20      	cmp	r3, #32
 800368e:	d107      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0220 	mvn.w	r2, #32
 8003698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 fb78 	bl	8003d90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036a0:	bf00      	nop
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d101      	bne.n	80036c6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80036c2:	2302      	movs	r3, #2
 80036c4:	e088      	b.n	80037d8 <HAL_TIM_IC_ConfigChannel+0x130>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d11b      	bne.n	800370c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	6819      	ldr	r1, [r3, #0]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f000 f988 	bl	80039f8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699a      	ldr	r2, [r3, #24]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 020c 	bic.w	r2, r2, #12
 80036f6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6999      	ldr	r1, [r3, #24]
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	619a      	str	r2, [r3, #24]
 800370a:	e060      	b.n	80037ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b04      	cmp	r3, #4
 8003710:	d11c      	bne.n	800374c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	6819      	ldr	r1, [r3, #0]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f000 f9dd 	bl	8003ae0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	699a      	ldr	r2, [r3, #24]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003734:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6999      	ldr	r1, [r3, #24]
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	021a      	lsls	r2, r3, #8
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	619a      	str	r2, [r3, #24]
 800374a:	e040      	b.n	80037ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b08      	cmp	r3, #8
 8003750:	d11b      	bne.n	800378a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	6819      	ldr	r1, [r3, #0]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f000 f9fa 	bl	8003b5a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69da      	ldr	r2, [r3, #28]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 020c 	bic.w	r2, r2, #12
 8003774:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	69d9      	ldr	r1, [r3, #28]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	61da      	str	r2, [r3, #28]
 8003788:	e021      	b.n	80037ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b0c      	cmp	r3, #12
 800378e:	d11c      	bne.n	80037ca <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	6819      	ldr	r1, [r3, #0]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f000 fa17 	bl	8003bd2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	69da      	ldr	r2, [r3, #28]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80037b2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	69d9      	ldr	r1, [r3, #28]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	021a      	lsls	r2, r3, #8
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	61da      	str	r2, [r3, #28]
 80037c8:	e001      	b.n	80037ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b0c      	cmp	r3, #12
 80037f2:	d831      	bhi.n	8003858 <HAL_TIM_ReadCapturedValue+0x78>
 80037f4:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <HAL_TIM_ReadCapturedValue+0x1c>)
 80037f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fa:	bf00      	nop
 80037fc:	08003831 	.word	0x08003831
 8003800:	08003859 	.word	0x08003859
 8003804:	08003859 	.word	0x08003859
 8003808:	08003859 	.word	0x08003859
 800380c:	0800383b 	.word	0x0800383b
 8003810:	08003859 	.word	0x08003859
 8003814:	08003859 	.word	0x08003859
 8003818:	08003859 	.word	0x08003859
 800381c:	08003845 	.word	0x08003845
 8003820:	08003859 	.word	0x08003859
 8003824:	08003859 	.word	0x08003859
 8003828:	08003859 	.word	0x08003859
 800382c:	0800384f 	.word	0x0800384f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003836:	60fb      	str	r3, [r7, #12]

      break;
 8003838:	e00f      	b.n	800385a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003840:	60fb      	str	r3, [r7, #12]

      break;
 8003842:	e00a      	b.n	800385a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384a:	60fb      	str	r3, [r7, #12]

      break;
 800384c:	e005      	b.n	800385a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	60fb      	str	r3, [r7, #12]

      break;
 8003856:	e000      	b.n	800385a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003858:	bf00      	nop
  }

  return tmpreg;
 800385a:	68fb      	ldr	r3, [r7, #12]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a40      	ldr	r2, [pc, #256]	; (80039cc <TIM_Base_SetConfig+0x114>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d013      	beq.n	80038f8 <TIM_Base_SetConfig+0x40>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d6:	d00f      	beq.n	80038f8 <TIM_Base_SetConfig+0x40>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a3d      	ldr	r2, [pc, #244]	; (80039d0 <TIM_Base_SetConfig+0x118>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00b      	beq.n	80038f8 <TIM_Base_SetConfig+0x40>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a3c      	ldr	r2, [pc, #240]	; (80039d4 <TIM_Base_SetConfig+0x11c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d007      	beq.n	80038f8 <TIM_Base_SetConfig+0x40>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a3b      	ldr	r2, [pc, #236]	; (80039d8 <TIM_Base_SetConfig+0x120>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d003      	beq.n	80038f8 <TIM_Base_SetConfig+0x40>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a3a      	ldr	r2, [pc, #232]	; (80039dc <TIM_Base_SetConfig+0x124>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d108      	bne.n	800390a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	4313      	orrs	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a2f      	ldr	r2, [pc, #188]	; (80039cc <TIM_Base_SetConfig+0x114>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d02b      	beq.n	800396a <TIM_Base_SetConfig+0xb2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003918:	d027      	beq.n	800396a <TIM_Base_SetConfig+0xb2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a2c      	ldr	r2, [pc, #176]	; (80039d0 <TIM_Base_SetConfig+0x118>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d023      	beq.n	800396a <TIM_Base_SetConfig+0xb2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a2b      	ldr	r2, [pc, #172]	; (80039d4 <TIM_Base_SetConfig+0x11c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d01f      	beq.n	800396a <TIM_Base_SetConfig+0xb2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a2a      	ldr	r2, [pc, #168]	; (80039d8 <TIM_Base_SetConfig+0x120>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d01b      	beq.n	800396a <TIM_Base_SetConfig+0xb2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a29      	ldr	r2, [pc, #164]	; (80039dc <TIM_Base_SetConfig+0x124>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d017      	beq.n	800396a <TIM_Base_SetConfig+0xb2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a28      	ldr	r2, [pc, #160]	; (80039e0 <TIM_Base_SetConfig+0x128>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d013      	beq.n	800396a <TIM_Base_SetConfig+0xb2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a27      	ldr	r2, [pc, #156]	; (80039e4 <TIM_Base_SetConfig+0x12c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d00f      	beq.n	800396a <TIM_Base_SetConfig+0xb2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a26      	ldr	r2, [pc, #152]	; (80039e8 <TIM_Base_SetConfig+0x130>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00b      	beq.n	800396a <TIM_Base_SetConfig+0xb2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a25      	ldr	r2, [pc, #148]	; (80039ec <TIM_Base_SetConfig+0x134>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d007      	beq.n	800396a <TIM_Base_SetConfig+0xb2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a24      	ldr	r2, [pc, #144]	; (80039f0 <TIM_Base_SetConfig+0x138>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d003      	beq.n	800396a <TIM_Base_SetConfig+0xb2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a23      	ldr	r2, [pc, #140]	; (80039f4 <TIM_Base_SetConfig+0x13c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d108      	bne.n	800397c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	4313      	orrs	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a0a      	ldr	r2, [pc, #40]	; (80039cc <TIM_Base_SetConfig+0x114>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d003      	beq.n	80039b0 <TIM_Base_SetConfig+0xf8>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a0c      	ldr	r2, [pc, #48]	; (80039dc <TIM_Base_SetConfig+0x124>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d103      	bne.n	80039b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	615a      	str	r2, [r3, #20]
}
 80039be:	bf00      	nop
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40010000 	.word	0x40010000
 80039d0:	40000400 	.word	0x40000400
 80039d4:	40000800 	.word	0x40000800
 80039d8:	40000c00 	.word	0x40000c00
 80039dc:	40010400 	.word	0x40010400
 80039e0:	40014000 	.word	0x40014000
 80039e4:	40014400 	.word	0x40014400
 80039e8:	40014800 	.word	0x40014800
 80039ec:	40001800 	.word	0x40001800
 80039f0:	40001c00 	.word	0x40001c00
 80039f4:	40002000 	.word	0x40002000

080039f8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	f023 0201 	bic.w	r2, r3, #1
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4a28      	ldr	r2, [pc, #160]	; (8003ac4 <TIM_TI1_SetConfig+0xcc>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d01b      	beq.n	8003a5e <TIM_TI1_SetConfig+0x66>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a2c:	d017      	beq.n	8003a5e <TIM_TI1_SetConfig+0x66>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4a25      	ldr	r2, [pc, #148]	; (8003ac8 <TIM_TI1_SetConfig+0xd0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d013      	beq.n	8003a5e <TIM_TI1_SetConfig+0x66>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4a24      	ldr	r2, [pc, #144]	; (8003acc <TIM_TI1_SetConfig+0xd4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00f      	beq.n	8003a5e <TIM_TI1_SetConfig+0x66>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4a23      	ldr	r2, [pc, #140]	; (8003ad0 <TIM_TI1_SetConfig+0xd8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00b      	beq.n	8003a5e <TIM_TI1_SetConfig+0x66>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4a22      	ldr	r2, [pc, #136]	; (8003ad4 <TIM_TI1_SetConfig+0xdc>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d007      	beq.n	8003a5e <TIM_TI1_SetConfig+0x66>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4a21      	ldr	r2, [pc, #132]	; (8003ad8 <TIM_TI1_SetConfig+0xe0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d003      	beq.n	8003a5e <TIM_TI1_SetConfig+0x66>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4a20      	ldr	r2, [pc, #128]	; (8003adc <TIM_TI1_SetConfig+0xe4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d101      	bne.n	8003a62 <TIM_TI1_SetConfig+0x6a>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <TIM_TI1_SetConfig+0x6c>
 8003a62:	2300      	movs	r3, #0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f023 0303 	bic.w	r3, r3, #3
 8003a6e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	e003      	b.n	8003a82 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f023 030a 	bic.w	r3, r3, #10
 8003a9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	f003 030a 	and.w	r3, r3, #10
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	621a      	str	r2, [r3, #32]
}
 8003ab6:	bf00      	nop
 8003ab8:	371c      	adds	r7, #28
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40010000 	.word	0x40010000
 8003ac8:	40000400 	.word	0x40000400
 8003acc:	40000800 	.word	0x40000800
 8003ad0:	40000c00 	.word	0x40000c00
 8003ad4:	40010400 	.word	0x40010400
 8003ad8:	40014000 	.word	0x40014000
 8003adc:	40001800 	.word	0x40001800

08003ae0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	f023 0210 	bic.w	r2, r3, #16
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	021b      	lsls	r3, r3, #8
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	031b      	lsls	r3, r3, #12
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b32:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	621a      	str	r2, [r3, #32]
}
 8003b4e:	bf00      	nop
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b087      	sub	sp, #28
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
 8003b66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f023 0303 	bic.w	r3, r3, #3
 8003b86:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b96:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003baa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	021b      	lsls	r3, r3, #8
 8003bb0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	621a      	str	r2, [r3, #32]
}
 8003bc6:	bf00      	nop
 8003bc8:	371c      	adds	r7, #28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b087      	sub	sp, #28
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
 8003bde:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bfe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	021b      	lsls	r3, r3, #8
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	031b      	lsls	r3, r3, #12
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003c24:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	031b      	lsls	r3, r3, #12
 8003c2a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	621a      	str	r2, [r3, #32]
}
 8003c40:	bf00      	nop
 8003c42:	371c      	adds	r7, #28
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f003 031f 	and.w	r3, r3, #31
 8003c5e:	2201      	movs	r2, #1
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6a1a      	ldr	r2, [r3, #32]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	401a      	ands	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a1a      	ldr	r2, [r3, #32]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f003 031f 	and.w	r3, r3, #31
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	fa01 f303 	lsl.w	r3, r1, r3
 8003c84:	431a      	orrs	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	621a      	str	r2, [r3, #32]
}
 8003c8a:	bf00      	nop
 8003c8c:	371c      	adds	r7, #28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e05a      	b.n	8003d66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a21      	ldr	r2, [pc, #132]	; (8003d74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d022      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cfc:	d01d      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1d      	ldr	r2, [pc, #116]	; (8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d018      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a1b      	ldr	r2, [pc, #108]	; (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d013      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a1a      	ldr	r2, [pc, #104]	; (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d00e      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a18      	ldr	r2, [pc, #96]	; (8003d84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d009      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a17      	ldr	r2, [pc, #92]	; (8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d004      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a15      	ldr	r2, [pc, #84]	; (8003d8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d10c      	bne.n	8003d54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40010000 	.word	0x40010000
 8003d78:	40000400 	.word	0x40000400
 8003d7c:	40000800 	.word	0x40000800
 8003d80:	40000c00 	.word	0x40000c00
 8003d84:	40010400 	.word	0x40010400
 8003d88:	40014000 	.word	0x40014000
 8003d8c:	40001800 	.word	0x40001800

08003d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e03f      	b.n	8003e4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7fd fbfc 	bl	80015dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2224      	movs	r2, #36	; 0x24
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f929 	bl	8004054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695a      	ldr	r2, [r3, #20]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b08a      	sub	sp, #40	; 0x28
 8003e56:	af02      	add	r7, sp, #8
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	603b      	str	r3, [r7, #0]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b20      	cmp	r3, #32
 8003e70:	d17c      	bne.n	8003f6c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_UART_Transmit+0x2c>
 8003e78:	88fb      	ldrh	r3, [r7, #6]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e075      	b.n	8003f6e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_UART_Transmit+0x3e>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e06e      	b.n	8003f6e <HAL_UART_Transmit+0x11c>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2221      	movs	r2, #33	; 0x21
 8003ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ea6:	f7fd fd8d 	bl	80019c4 <HAL_GetTick>
 8003eaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	88fa      	ldrh	r2, [r7, #6]
 8003eb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	88fa      	ldrh	r2, [r7, #6]
 8003eb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec0:	d108      	bne.n	8003ed4 <HAL_UART_Transmit+0x82>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d104      	bne.n	8003ed4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	e003      	b.n	8003edc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ee4:	e02a      	b.n	8003f3c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2200      	movs	r2, #0
 8003eee:	2180      	movs	r1, #128	; 0x80
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 f840 	bl	8003f76 <UART_WaitOnFlagUntilTimeout>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e036      	b.n	8003f6e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10b      	bne.n	8003f1e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	3302      	adds	r3, #2
 8003f1a:	61bb      	str	r3, [r7, #24]
 8003f1c:	e007      	b.n	8003f2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	781a      	ldrb	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1cf      	bne.n	8003ee6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	2140      	movs	r1, #64	; 0x40
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f810 	bl	8003f76 <UART_WaitOnFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e006      	b.n	8003f6e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	e000      	b.n	8003f6e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f6c:	2302      	movs	r3, #2
  }
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3720      	adds	r7, #32
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b090      	sub	sp, #64	; 0x40
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	60b9      	str	r1, [r7, #8]
 8003f80:	603b      	str	r3, [r7, #0]
 8003f82:	4613      	mov	r3, r2
 8003f84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f86:	e050      	b.n	800402a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f8e:	d04c      	beq.n	800402a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d007      	beq.n	8003fa6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f96:	f7fd fd15 	bl	80019c4 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d241      	bcs.n	800402a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	330c      	adds	r3, #12
 8003fac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb0:	e853 3f00 	ldrex	r3, [r3]
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	330c      	adds	r3, #12
 8003fc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fc6:	637a      	str	r2, [r7, #52]	; 0x34
 8003fc8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fce:	e841 2300 	strex	r3, r2, [r1]
 8003fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1e5      	bne.n	8003fa6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3314      	adds	r3, #20
 8003fe0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	e853 3f00 	ldrex	r3, [r3]
 8003fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f023 0301 	bic.w	r3, r3, #1
 8003ff0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3314      	adds	r3, #20
 8003ff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ffa:	623a      	str	r2, [r7, #32]
 8003ffc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffe:	69f9      	ldr	r1, [r7, #28]
 8004000:	6a3a      	ldr	r2, [r7, #32]
 8004002:	e841 2300 	strex	r3, r2, [r1]
 8004006:	61bb      	str	r3, [r7, #24]
   return(result);
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1e5      	bne.n	8003fda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2220      	movs	r2, #32
 800401a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e00f      	b.n	800404a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	4013      	ands	r3, r2
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	429a      	cmp	r2, r3
 8004038:	bf0c      	ite	eq
 800403a:	2301      	moveq	r3, #1
 800403c:	2300      	movne	r3, #0
 800403e:	b2db      	uxtb	r3, r3
 8004040:	461a      	mov	r2, r3
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	429a      	cmp	r2, r3
 8004046:	d09f      	beq.n	8003f88 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3740      	adds	r7, #64	; 0x40
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004058:	b0c0      	sub	sp, #256	; 0x100
 800405a:	af00      	add	r7, sp, #0
 800405c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004070:	68d9      	ldr	r1, [r3, #12]
 8004072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	ea40 0301 	orr.w	r3, r0, r1
 800407c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800407e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	431a      	orrs	r2, r3
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	431a      	orrs	r2, r3
 8004094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040ac:	f021 010c 	bic.w	r1, r1, #12
 80040b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80040ba:	430b      	orrs	r3, r1
 80040bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80040ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ce:	6999      	ldr	r1, [r3, #24]
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	ea40 0301 	orr.w	r3, r0, r1
 80040da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	4b8f      	ldr	r3, [pc, #572]	; (8004320 <UART_SetConfig+0x2cc>)
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d005      	beq.n	80040f4 <UART_SetConfig+0xa0>
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	4b8d      	ldr	r3, [pc, #564]	; (8004324 <UART_SetConfig+0x2d0>)
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d104      	bne.n	80040fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040f4:	f7ff f844 	bl	8003180 <HAL_RCC_GetPCLK2Freq>
 80040f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040fc:	e003      	b.n	8004106 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040fe:	f7ff f82b 	bl	8003158 <HAL_RCC_GetPCLK1Freq>
 8004102:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004110:	f040 810c 	bne.w	800432c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004118:	2200      	movs	r2, #0
 800411a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800411e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004122:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004126:	4622      	mov	r2, r4
 8004128:	462b      	mov	r3, r5
 800412a:	1891      	adds	r1, r2, r2
 800412c:	65b9      	str	r1, [r7, #88]	; 0x58
 800412e:	415b      	adcs	r3, r3
 8004130:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004132:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004136:	4621      	mov	r1, r4
 8004138:	eb12 0801 	adds.w	r8, r2, r1
 800413c:	4629      	mov	r1, r5
 800413e:	eb43 0901 	adc.w	r9, r3, r1
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800414e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004152:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004156:	4690      	mov	r8, r2
 8004158:	4699      	mov	r9, r3
 800415a:	4623      	mov	r3, r4
 800415c:	eb18 0303 	adds.w	r3, r8, r3
 8004160:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004164:	462b      	mov	r3, r5
 8004166:	eb49 0303 	adc.w	r3, r9, r3
 800416a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800416e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800417a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800417e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004182:	460b      	mov	r3, r1
 8004184:	18db      	adds	r3, r3, r3
 8004186:	653b      	str	r3, [r7, #80]	; 0x50
 8004188:	4613      	mov	r3, r2
 800418a:	eb42 0303 	adc.w	r3, r2, r3
 800418e:	657b      	str	r3, [r7, #84]	; 0x54
 8004190:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004194:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004198:	f7fc fc70 	bl	8000a7c <__aeabi_uldivmod>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4b61      	ldr	r3, [pc, #388]	; (8004328 <UART_SetConfig+0x2d4>)
 80041a2:	fba3 2302 	umull	r2, r3, r3, r2
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	011c      	lsls	r4, r3, #4
 80041aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041ae:	2200      	movs	r2, #0
 80041b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80041b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80041bc:	4642      	mov	r2, r8
 80041be:	464b      	mov	r3, r9
 80041c0:	1891      	adds	r1, r2, r2
 80041c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80041c4:	415b      	adcs	r3, r3
 80041c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80041cc:	4641      	mov	r1, r8
 80041ce:	eb12 0a01 	adds.w	sl, r2, r1
 80041d2:	4649      	mov	r1, r9
 80041d4:	eb43 0b01 	adc.w	fp, r3, r1
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041ec:	4692      	mov	sl, r2
 80041ee:	469b      	mov	fp, r3
 80041f0:	4643      	mov	r3, r8
 80041f2:	eb1a 0303 	adds.w	r3, sl, r3
 80041f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041fa:	464b      	mov	r3, r9
 80041fc:	eb4b 0303 	adc.w	r3, fp, r3
 8004200:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004210:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004214:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004218:	460b      	mov	r3, r1
 800421a:	18db      	adds	r3, r3, r3
 800421c:	643b      	str	r3, [r7, #64]	; 0x40
 800421e:	4613      	mov	r3, r2
 8004220:	eb42 0303 	adc.w	r3, r2, r3
 8004224:	647b      	str	r3, [r7, #68]	; 0x44
 8004226:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800422a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800422e:	f7fc fc25 	bl	8000a7c <__aeabi_uldivmod>
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	4611      	mov	r1, r2
 8004238:	4b3b      	ldr	r3, [pc, #236]	; (8004328 <UART_SetConfig+0x2d4>)
 800423a:	fba3 2301 	umull	r2, r3, r3, r1
 800423e:	095b      	lsrs	r3, r3, #5
 8004240:	2264      	movs	r2, #100	; 0x64
 8004242:	fb02 f303 	mul.w	r3, r2, r3
 8004246:	1acb      	subs	r3, r1, r3
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800424e:	4b36      	ldr	r3, [pc, #216]	; (8004328 <UART_SetConfig+0x2d4>)
 8004250:	fba3 2302 	umull	r2, r3, r3, r2
 8004254:	095b      	lsrs	r3, r3, #5
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800425c:	441c      	add	r4, r3
 800425e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004262:	2200      	movs	r2, #0
 8004264:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004268:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800426c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004270:	4642      	mov	r2, r8
 8004272:	464b      	mov	r3, r9
 8004274:	1891      	adds	r1, r2, r2
 8004276:	63b9      	str	r1, [r7, #56]	; 0x38
 8004278:	415b      	adcs	r3, r3
 800427a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800427c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004280:	4641      	mov	r1, r8
 8004282:	1851      	adds	r1, r2, r1
 8004284:	6339      	str	r1, [r7, #48]	; 0x30
 8004286:	4649      	mov	r1, r9
 8004288:	414b      	adcs	r3, r1
 800428a:	637b      	str	r3, [r7, #52]	; 0x34
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	f04f 0300 	mov.w	r3, #0
 8004294:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004298:	4659      	mov	r1, fp
 800429a:	00cb      	lsls	r3, r1, #3
 800429c:	4651      	mov	r1, sl
 800429e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042a2:	4651      	mov	r1, sl
 80042a4:	00ca      	lsls	r2, r1, #3
 80042a6:	4610      	mov	r0, r2
 80042a8:	4619      	mov	r1, r3
 80042aa:	4603      	mov	r3, r0
 80042ac:	4642      	mov	r2, r8
 80042ae:	189b      	adds	r3, r3, r2
 80042b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042b4:	464b      	mov	r3, r9
 80042b6:	460a      	mov	r2, r1
 80042b8:	eb42 0303 	adc.w	r3, r2, r3
 80042bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80042d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80042d4:	460b      	mov	r3, r1
 80042d6:	18db      	adds	r3, r3, r3
 80042d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042da:	4613      	mov	r3, r2
 80042dc:	eb42 0303 	adc.w	r3, r2, r3
 80042e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042ea:	f7fc fbc7 	bl	8000a7c <__aeabi_uldivmod>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	4b0d      	ldr	r3, [pc, #52]	; (8004328 <UART_SetConfig+0x2d4>)
 80042f4:	fba3 1302 	umull	r1, r3, r3, r2
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	2164      	movs	r1, #100	; 0x64
 80042fc:	fb01 f303 	mul.w	r3, r1, r3
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	3332      	adds	r3, #50	; 0x32
 8004306:	4a08      	ldr	r2, [pc, #32]	; (8004328 <UART_SetConfig+0x2d4>)
 8004308:	fba2 2303 	umull	r2, r3, r2, r3
 800430c:	095b      	lsrs	r3, r3, #5
 800430e:	f003 0207 	and.w	r2, r3, #7
 8004312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4422      	add	r2, r4
 800431a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800431c:	e106      	b.n	800452c <UART_SetConfig+0x4d8>
 800431e:	bf00      	nop
 8004320:	40011000 	.word	0x40011000
 8004324:	40011400 	.word	0x40011400
 8004328:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800432c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004330:	2200      	movs	r2, #0
 8004332:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004336:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800433a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800433e:	4642      	mov	r2, r8
 8004340:	464b      	mov	r3, r9
 8004342:	1891      	adds	r1, r2, r2
 8004344:	6239      	str	r1, [r7, #32]
 8004346:	415b      	adcs	r3, r3
 8004348:	627b      	str	r3, [r7, #36]	; 0x24
 800434a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800434e:	4641      	mov	r1, r8
 8004350:	1854      	adds	r4, r2, r1
 8004352:	4649      	mov	r1, r9
 8004354:	eb43 0501 	adc.w	r5, r3, r1
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	00eb      	lsls	r3, r5, #3
 8004362:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004366:	00e2      	lsls	r2, r4, #3
 8004368:	4614      	mov	r4, r2
 800436a:	461d      	mov	r5, r3
 800436c:	4643      	mov	r3, r8
 800436e:	18e3      	adds	r3, r4, r3
 8004370:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004374:	464b      	mov	r3, r9
 8004376:	eb45 0303 	adc.w	r3, r5, r3
 800437a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800437e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800438a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	f04f 0300 	mov.w	r3, #0
 8004396:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800439a:	4629      	mov	r1, r5
 800439c:	008b      	lsls	r3, r1, #2
 800439e:	4621      	mov	r1, r4
 80043a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043a4:	4621      	mov	r1, r4
 80043a6:	008a      	lsls	r2, r1, #2
 80043a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80043ac:	f7fc fb66 	bl	8000a7c <__aeabi_uldivmod>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4b60      	ldr	r3, [pc, #384]	; (8004538 <UART_SetConfig+0x4e4>)
 80043b6:	fba3 2302 	umull	r2, r3, r3, r2
 80043ba:	095b      	lsrs	r3, r3, #5
 80043bc:	011c      	lsls	r4, r3, #4
 80043be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043c2:	2200      	movs	r2, #0
 80043c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80043cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80043d0:	4642      	mov	r2, r8
 80043d2:	464b      	mov	r3, r9
 80043d4:	1891      	adds	r1, r2, r2
 80043d6:	61b9      	str	r1, [r7, #24]
 80043d8:	415b      	adcs	r3, r3
 80043da:	61fb      	str	r3, [r7, #28]
 80043dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043e0:	4641      	mov	r1, r8
 80043e2:	1851      	adds	r1, r2, r1
 80043e4:	6139      	str	r1, [r7, #16]
 80043e6:	4649      	mov	r1, r9
 80043e8:	414b      	adcs	r3, r1
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043f8:	4659      	mov	r1, fp
 80043fa:	00cb      	lsls	r3, r1, #3
 80043fc:	4651      	mov	r1, sl
 80043fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004402:	4651      	mov	r1, sl
 8004404:	00ca      	lsls	r2, r1, #3
 8004406:	4610      	mov	r0, r2
 8004408:	4619      	mov	r1, r3
 800440a:	4603      	mov	r3, r0
 800440c:	4642      	mov	r2, r8
 800440e:	189b      	adds	r3, r3, r2
 8004410:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004414:	464b      	mov	r3, r9
 8004416:	460a      	mov	r2, r1
 8004418:	eb42 0303 	adc.w	r3, r2, r3
 800441c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	67bb      	str	r3, [r7, #120]	; 0x78
 800442a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004438:	4649      	mov	r1, r9
 800443a:	008b      	lsls	r3, r1, #2
 800443c:	4641      	mov	r1, r8
 800443e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004442:	4641      	mov	r1, r8
 8004444:	008a      	lsls	r2, r1, #2
 8004446:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800444a:	f7fc fb17 	bl	8000a7c <__aeabi_uldivmod>
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	4611      	mov	r1, r2
 8004454:	4b38      	ldr	r3, [pc, #224]	; (8004538 <UART_SetConfig+0x4e4>)
 8004456:	fba3 2301 	umull	r2, r3, r3, r1
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	2264      	movs	r2, #100	; 0x64
 800445e:	fb02 f303 	mul.w	r3, r2, r3
 8004462:	1acb      	subs	r3, r1, r3
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	3332      	adds	r3, #50	; 0x32
 8004468:	4a33      	ldr	r2, [pc, #204]	; (8004538 <UART_SetConfig+0x4e4>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	095b      	lsrs	r3, r3, #5
 8004470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004474:	441c      	add	r4, r3
 8004476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800447a:	2200      	movs	r2, #0
 800447c:	673b      	str	r3, [r7, #112]	; 0x70
 800447e:	677a      	str	r2, [r7, #116]	; 0x74
 8004480:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004484:	4642      	mov	r2, r8
 8004486:	464b      	mov	r3, r9
 8004488:	1891      	adds	r1, r2, r2
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	415b      	adcs	r3, r3
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004494:	4641      	mov	r1, r8
 8004496:	1851      	adds	r1, r2, r1
 8004498:	6039      	str	r1, [r7, #0]
 800449a:	4649      	mov	r1, r9
 800449c:	414b      	adcs	r3, r1
 800449e:	607b      	str	r3, [r7, #4]
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044ac:	4659      	mov	r1, fp
 80044ae:	00cb      	lsls	r3, r1, #3
 80044b0:	4651      	mov	r1, sl
 80044b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044b6:	4651      	mov	r1, sl
 80044b8:	00ca      	lsls	r2, r1, #3
 80044ba:	4610      	mov	r0, r2
 80044bc:	4619      	mov	r1, r3
 80044be:	4603      	mov	r3, r0
 80044c0:	4642      	mov	r2, r8
 80044c2:	189b      	adds	r3, r3, r2
 80044c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80044c6:	464b      	mov	r3, r9
 80044c8:	460a      	mov	r2, r1
 80044ca:	eb42 0303 	adc.w	r3, r2, r3
 80044ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	663b      	str	r3, [r7, #96]	; 0x60
 80044da:	667a      	str	r2, [r7, #100]	; 0x64
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80044e8:	4649      	mov	r1, r9
 80044ea:	008b      	lsls	r3, r1, #2
 80044ec:	4641      	mov	r1, r8
 80044ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044f2:	4641      	mov	r1, r8
 80044f4:	008a      	lsls	r2, r1, #2
 80044f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044fa:	f7fc fabf 	bl	8000a7c <__aeabi_uldivmod>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4b0d      	ldr	r3, [pc, #52]	; (8004538 <UART_SetConfig+0x4e4>)
 8004504:	fba3 1302 	umull	r1, r3, r3, r2
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	2164      	movs	r1, #100	; 0x64
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	011b      	lsls	r3, r3, #4
 8004514:	3332      	adds	r3, #50	; 0x32
 8004516:	4a08      	ldr	r2, [pc, #32]	; (8004538 <UART_SetConfig+0x4e4>)
 8004518:	fba2 2303 	umull	r2, r3, r2, r3
 800451c:	095b      	lsrs	r3, r3, #5
 800451e:	f003 020f 	and.w	r2, r3, #15
 8004522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4422      	add	r2, r4
 800452a:	609a      	str	r2, [r3, #8]
}
 800452c:	bf00      	nop
 800452e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004532:	46bd      	mov	sp, r7
 8004534:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004538:	51eb851f 	.word	0x51eb851f

0800453c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
          duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
          handled in milliseconds basis.
        - Set NVIC Group Priority to 4
        - Low Level Initialization
    */
    HAL_Init();
 8004542:	f7fd f9df 	bl	8001904 <HAL_Init>

    /* Configure the system clock to 180 MHz */
    SystemClock_Config();
 8004546:	f000 f845 	bl	80045d4 <SystemClock_Config>

    /* Initialize all configured peripherals */
    if (display_Init() != DISPLAY_OK) {
 800454a:	f7fc fd13 	bl	8000f74 <display_Init>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <main+0x1c>
        Error_Handler();
 8004554:	f000 f8a8 	bl	80046a8 <Error_Handler>
    }

    if (hcsr04_Init() != HCSR04_OK) {
 8004558:	f7fd f806 	bl	8001568 <hcsr04_Init>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <main+0x2a>
        Error_Handler();
 8004562:	f000 f8a1 	bl	80046a8 <Error_Handler>
    }

    if (uart_Init() != UART_OK) {
 8004566:	f7fd f8d9 	bl	800171c <uart_Init>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <main+0x38>
         Error_Handler();
 8004570:	f000 f89a 	bl	80046a8 <Error_Handler>
    // uint8_t count = 0;
    static const char adv_lvl_msg[] = "Cercania:";
    // Definir un array de caracteres (string) para almacenar el resultado
    char cadena[3]; // Se reserva espacio para el número y el carácter nulo de terminación

    display_PrintStringInTopLine((uint8_t *) adv_lvl_msg);
 8004574:	4814      	ldr	r0, [pc, #80]	; (80045c8 <main+0x8c>)
 8004576:	f7fc fdc4 	bl	8001102 <display_PrintStringInTopLine>

    /* Infinite loop */
    while (1)
    {
        hcsr04_StartMeasure();
 800457a:	f7fd f805 	bl	8001588 <hcsr04_StartMeasure>
        HAL_Delay(1000);
 800457e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004582:	f7fd fa2b 	bl	80019dc <HAL_Delay>

        int Distance = hcsr04_GetDistance();
 8004586:	f7fd f81d 	bl	80015c4 <hcsr04_GetDistance>
 800458a:	4603      	mov	r3, r0
 800458c:	607b      	str	r3, [r7, #4]
        if (Distance < 0) {
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	da03      	bge.n	800459c <main+0x60>
            display_PrintStringInBottomLine((uint8_t *) "Muy lejos");
 8004594:	480d      	ldr	r0, [pc, #52]	; (80045cc <main+0x90>)
 8004596:	f7fc fdfa 	bl	800118e <display_PrintStringInBottomLine>
 800459a:	e7ee      	b.n	800457a <main+0x3e>
        } else {
            // Usar sprintf para convertir el número a una cadena de caracteres
            sprintf(cadena, "%u", Distance); // %u se utiliza para especificar un entero sin signo
 800459c:	463b      	mov	r3, r7
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	490b      	ldr	r1, [pc, #44]	; (80045d0 <main+0x94>)
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 f8b2 	bl	800470c <siprintf>
            display_PrintStringInBottomLine((uint8_t *) cadena);
 80045a8:	463b      	mov	r3, r7
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fc fdef 	bl	800118e <display_PrintStringInBottomLine>
            uart_SendStringSize((uint8_t *) cadena, strlen(cadena));
 80045b0:	463b      	mov	r3, r7
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fb fe1c 	bl	80001f0 <strlen>
 80045b8:	4603      	mov	r3, r0
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	463b      	mov	r3, r7
 80045be:	4611      	mov	r1, r2
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fd f8bf 	bl	8001744 <uart_SendStringSize>
    {
 80045c6:	e7d8      	b.n	800457a <main+0x3e>
 80045c8:	0800511c 	.word	0x0800511c
 80045cc:	0800506c 	.word	0x0800506c
 80045d0:	08005078 	.word	0x08005078

080045d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b094      	sub	sp, #80	; 0x50
 80045d8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045da:	f107 0320 	add.w	r3, r7, #32
 80045de:	2230      	movs	r2, #48	; 0x30
 80045e0:	2100      	movs	r1, #0
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 f8b2 	bl	800474c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045e8:	f107 030c 	add.w	r3, r7, #12
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	605a      	str	r2, [r3, #4]
 80045f2:	609a      	str	r2, [r3, #8]
 80045f4:	60da      	str	r2, [r3, #12]
 80045f6:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 80045f8:	2300      	movs	r3, #0
 80045fa:	60bb      	str	r3, [r7, #8]
 80045fc:	4b28      	ldr	r3, [pc, #160]	; (80046a0 <SystemClock_Config+0xcc>)
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	4a27      	ldr	r2, [pc, #156]	; (80046a0 <SystemClock_Config+0xcc>)
 8004602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004606:	6413      	str	r3, [r2, #64]	; 0x40
 8004608:	4b25      	ldr	r3, [pc, #148]	; (80046a0 <SystemClock_Config+0xcc>)
 800460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004610:	60bb      	str	r3, [r7, #8]
 8004612:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004614:	2300      	movs	r3, #0
 8004616:	607b      	str	r3, [r7, #4]
 8004618:	4b22      	ldr	r3, [pc, #136]	; (80046a4 <SystemClock_Config+0xd0>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a21      	ldr	r2, [pc, #132]	; (80046a4 <SystemClock_Config+0xd0>)
 800461e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	4b1f      	ldr	r3, [pc, #124]	; (80046a4 <SystemClock_Config+0xd0>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800462c:	607b      	str	r3, [r7, #4]
 800462e:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004630:	2301      	movs	r3, #1
 8004632:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004634:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800463a:	2302      	movs	r3, #2
 800463c:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800463e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004642:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 4;
 8004644:	2304      	movs	r3, #4
 8004646:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 8004648:	23a8      	movs	r3, #168	; 0xa8
 800464a:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800464c:	2302      	movs	r3, #2
 800464e:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8004650:	2307      	movs	r3, #7
 8004652:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004654:	f107 0320 	add.w	r3, r7, #32
 8004658:	4618      	mov	r0, r3
 800465a:	f7fe f90d 	bl	8002878 <HAL_RCC_OscConfig>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <SystemClock_Config+0x94>
    {
        Error_Handler();
 8004664:	f000 f820 	bl	80046a8 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004668:	230f      	movs	r3, #15
 800466a:	60fb      	str	r3, [r7, #12]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800466c:	2302      	movs	r3, #2
 800466e:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004670:	2300      	movs	r3, #0
 8004672:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004674:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004678:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800467a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800467e:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004680:	f107 030c 	add.w	r3, r7, #12
 8004684:	2105      	movs	r1, #5
 8004686:	4618      	mov	r0, r3
 8004688:	f7fe fb6e 	bl	8002d68 <HAL_RCC_ClockConfig>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <SystemClock_Config+0xc2>
    {
        Error_Handler();
 8004692:	f000 f809 	bl	80046a8 <Error_Handler>
    }
}
 8004696:	bf00      	nop
 8004698:	3750      	adds	r7, #80	; 0x50
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40023800 	.word	0x40023800
 80046a4:	40007000 	.word	0x40007000

080046a8 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
    /* Turn LED2 on */
    BSP_LED_On(LED2);
 80046ac:	2001      	movs	r0, #1
 80046ae:	f7fd f875 	bl	800179c <BSP_LED_On>
  __ASM volatile ("cpsid i" : : : "memory");
 80046b2:	b672      	cpsid	i
}
 80046b4:	bf00      	nop
    __disable_irq();
    while (1);
 80046b6:	e7fe      	b.n	80046b6 <Error_Handler+0xe>

080046b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80046b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80046f0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80046bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80046be:	e003      	b.n	80046c8 <LoopCopyDataInit>

080046c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80046c0:	4b0c      	ldr	r3, [pc, #48]	; (80046f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80046c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80046c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80046c6:	3104      	adds	r1, #4

080046c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80046c8:	480b      	ldr	r0, [pc, #44]	; (80046f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80046ca:	4b0c      	ldr	r3, [pc, #48]	; (80046fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80046cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80046ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80046d0:	d3f6      	bcc.n	80046c0 <CopyDataInit>
  ldr  r2, =_sbss
 80046d2:	4a0b      	ldr	r2, [pc, #44]	; (8004700 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80046d4:	e002      	b.n	80046dc <LoopFillZerobss>

080046d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80046d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80046d8:	f842 3b04 	str.w	r3, [r2], #4

080046dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80046dc:	4b09      	ldr	r3, [pc, #36]	; (8004704 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80046de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80046e0:	d3f9      	bcc.n	80046d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80046e2:	f7fd f875 	bl	80017d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046e6:	f000 f83f 	bl	8004768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046ea:	f7ff ff27 	bl	800453c <main>
  bx  lr    
 80046ee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80046f0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80046f4:	0800516c 	.word	0x0800516c
  ldr  r0, =_sdata
 80046f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80046fc:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8004700:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8004704:	200002c4 	.word	0x200002c4

08004708 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004708:	e7fe      	b.n	8004708 <ADC_IRQHandler>
	...

0800470c <siprintf>:
 800470c:	b40e      	push	{r1, r2, r3}
 800470e:	b500      	push	{lr}
 8004710:	b09c      	sub	sp, #112	; 0x70
 8004712:	ab1d      	add	r3, sp, #116	; 0x74
 8004714:	9002      	str	r0, [sp, #8]
 8004716:	9006      	str	r0, [sp, #24]
 8004718:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800471c:	4809      	ldr	r0, [pc, #36]	; (8004744 <siprintf+0x38>)
 800471e:	9107      	str	r1, [sp, #28]
 8004720:	9104      	str	r1, [sp, #16]
 8004722:	4909      	ldr	r1, [pc, #36]	; (8004748 <siprintf+0x3c>)
 8004724:	f853 2b04 	ldr.w	r2, [r3], #4
 8004728:	9105      	str	r1, [sp, #20]
 800472a:	6800      	ldr	r0, [r0, #0]
 800472c:	9301      	str	r3, [sp, #4]
 800472e:	a902      	add	r1, sp, #8
 8004730:	f000 f992 	bl	8004a58 <_svfiprintf_r>
 8004734:	9b02      	ldr	r3, [sp, #8]
 8004736:	2200      	movs	r2, #0
 8004738:	701a      	strb	r2, [r3, #0]
 800473a:	b01c      	add	sp, #112	; 0x70
 800473c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004740:	b003      	add	sp, #12
 8004742:	4770      	bx	lr
 8004744:	20000064 	.word	0x20000064
 8004748:	ffff0208 	.word	0xffff0208

0800474c <memset>:
 800474c:	4402      	add	r2, r0
 800474e:	4603      	mov	r3, r0
 8004750:	4293      	cmp	r3, r2
 8004752:	d100      	bne.n	8004756 <memset+0xa>
 8004754:	4770      	bx	lr
 8004756:	f803 1b01 	strb.w	r1, [r3], #1
 800475a:	e7f9      	b.n	8004750 <memset+0x4>

0800475c <__errno>:
 800475c:	4b01      	ldr	r3, [pc, #4]	; (8004764 <__errno+0x8>)
 800475e:	6818      	ldr	r0, [r3, #0]
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	20000064 	.word	0x20000064

08004768 <__libc_init_array>:
 8004768:	b570      	push	{r4, r5, r6, lr}
 800476a:	4d0d      	ldr	r5, [pc, #52]	; (80047a0 <__libc_init_array+0x38>)
 800476c:	4c0d      	ldr	r4, [pc, #52]	; (80047a4 <__libc_init_array+0x3c>)
 800476e:	1b64      	subs	r4, r4, r5
 8004770:	10a4      	asrs	r4, r4, #2
 8004772:	2600      	movs	r6, #0
 8004774:	42a6      	cmp	r6, r4
 8004776:	d109      	bne.n	800478c <__libc_init_array+0x24>
 8004778:	4d0b      	ldr	r5, [pc, #44]	; (80047a8 <__libc_init_array+0x40>)
 800477a:	4c0c      	ldr	r4, [pc, #48]	; (80047ac <__libc_init_array+0x44>)
 800477c:	f000 fc6a 	bl	8005054 <_init>
 8004780:	1b64      	subs	r4, r4, r5
 8004782:	10a4      	asrs	r4, r4, #2
 8004784:	2600      	movs	r6, #0
 8004786:	42a6      	cmp	r6, r4
 8004788:	d105      	bne.n	8004796 <__libc_init_array+0x2e>
 800478a:	bd70      	pop	{r4, r5, r6, pc}
 800478c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004790:	4798      	blx	r3
 8004792:	3601      	adds	r6, #1
 8004794:	e7ee      	b.n	8004774 <__libc_init_array+0xc>
 8004796:	f855 3b04 	ldr.w	r3, [r5], #4
 800479a:	4798      	blx	r3
 800479c:	3601      	adds	r6, #1
 800479e:	e7f2      	b.n	8004786 <__libc_init_array+0x1e>
 80047a0:	08005164 	.word	0x08005164
 80047a4:	08005164 	.word	0x08005164
 80047a8:	08005164 	.word	0x08005164
 80047ac:	08005168 	.word	0x08005168

080047b0 <__retarget_lock_acquire_recursive>:
 80047b0:	4770      	bx	lr

080047b2 <__retarget_lock_release_recursive>:
 80047b2:	4770      	bx	lr

080047b4 <_free_r>:
 80047b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047b6:	2900      	cmp	r1, #0
 80047b8:	d044      	beq.n	8004844 <_free_r+0x90>
 80047ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047be:	9001      	str	r0, [sp, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f1a1 0404 	sub.w	r4, r1, #4
 80047c6:	bfb8      	it	lt
 80047c8:	18e4      	addlt	r4, r4, r3
 80047ca:	f000 f8df 	bl	800498c <__malloc_lock>
 80047ce:	4a1e      	ldr	r2, [pc, #120]	; (8004848 <_free_r+0x94>)
 80047d0:	9801      	ldr	r0, [sp, #4]
 80047d2:	6813      	ldr	r3, [r2, #0]
 80047d4:	b933      	cbnz	r3, 80047e4 <_free_r+0x30>
 80047d6:	6063      	str	r3, [r4, #4]
 80047d8:	6014      	str	r4, [r2, #0]
 80047da:	b003      	add	sp, #12
 80047dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047e0:	f000 b8da 	b.w	8004998 <__malloc_unlock>
 80047e4:	42a3      	cmp	r3, r4
 80047e6:	d908      	bls.n	80047fa <_free_r+0x46>
 80047e8:	6825      	ldr	r5, [r4, #0]
 80047ea:	1961      	adds	r1, r4, r5
 80047ec:	428b      	cmp	r3, r1
 80047ee:	bf01      	itttt	eq
 80047f0:	6819      	ldreq	r1, [r3, #0]
 80047f2:	685b      	ldreq	r3, [r3, #4]
 80047f4:	1949      	addeq	r1, r1, r5
 80047f6:	6021      	streq	r1, [r4, #0]
 80047f8:	e7ed      	b.n	80047d6 <_free_r+0x22>
 80047fa:	461a      	mov	r2, r3
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	b10b      	cbz	r3, 8004804 <_free_r+0x50>
 8004800:	42a3      	cmp	r3, r4
 8004802:	d9fa      	bls.n	80047fa <_free_r+0x46>
 8004804:	6811      	ldr	r1, [r2, #0]
 8004806:	1855      	adds	r5, r2, r1
 8004808:	42a5      	cmp	r5, r4
 800480a:	d10b      	bne.n	8004824 <_free_r+0x70>
 800480c:	6824      	ldr	r4, [r4, #0]
 800480e:	4421      	add	r1, r4
 8004810:	1854      	adds	r4, r2, r1
 8004812:	42a3      	cmp	r3, r4
 8004814:	6011      	str	r1, [r2, #0]
 8004816:	d1e0      	bne.n	80047da <_free_r+0x26>
 8004818:	681c      	ldr	r4, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	6053      	str	r3, [r2, #4]
 800481e:	440c      	add	r4, r1
 8004820:	6014      	str	r4, [r2, #0]
 8004822:	e7da      	b.n	80047da <_free_r+0x26>
 8004824:	d902      	bls.n	800482c <_free_r+0x78>
 8004826:	230c      	movs	r3, #12
 8004828:	6003      	str	r3, [r0, #0]
 800482a:	e7d6      	b.n	80047da <_free_r+0x26>
 800482c:	6825      	ldr	r5, [r4, #0]
 800482e:	1961      	adds	r1, r4, r5
 8004830:	428b      	cmp	r3, r1
 8004832:	bf04      	itt	eq
 8004834:	6819      	ldreq	r1, [r3, #0]
 8004836:	685b      	ldreq	r3, [r3, #4]
 8004838:	6063      	str	r3, [r4, #4]
 800483a:	bf04      	itt	eq
 800483c:	1949      	addeq	r1, r1, r5
 800483e:	6021      	streq	r1, [r4, #0]
 8004840:	6054      	str	r4, [r2, #4]
 8004842:	e7ca      	b.n	80047da <_free_r+0x26>
 8004844:	b003      	add	sp, #12
 8004846:	bd30      	pop	{r4, r5, pc}
 8004848:	200002bc 	.word	0x200002bc

0800484c <sbrk_aligned>:
 800484c:	b570      	push	{r4, r5, r6, lr}
 800484e:	4e0e      	ldr	r6, [pc, #56]	; (8004888 <sbrk_aligned+0x3c>)
 8004850:	460c      	mov	r4, r1
 8004852:	6831      	ldr	r1, [r6, #0]
 8004854:	4605      	mov	r5, r0
 8004856:	b911      	cbnz	r1, 800485e <sbrk_aligned+0x12>
 8004858:	f000 fba6 	bl	8004fa8 <_sbrk_r>
 800485c:	6030      	str	r0, [r6, #0]
 800485e:	4621      	mov	r1, r4
 8004860:	4628      	mov	r0, r5
 8004862:	f000 fba1 	bl	8004fa8 <_sbrk_r>
 8004866:	1c43      	adds	r3, r0, #1
 8004868:	d00a      	beq.n	8004880 <sbrk_aligned+0x34>
 800486a:	1cc4      	adds	r4, r0, #3
 800486c:	f024 0403 	bic.w	r4, r4, #3
 8004870:	42a0      	cmp	r0, r4
 8004872:	d007      	beq.n	8004884 <sbrk_aligned+0x38>
 8004874:	1a21      	subs	r1, r4, r0
 8004876:	4628      	mov	r0, r5
 8004878:	f000 fb96 	bl	8004fa8 <_sbrk_r>
 800487c:	3001      	adds	r0, #1
 800487e:	d101      	bne.n	8004884 <sbrk_aligned+0x38>
 8004880:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004884:	4620      	mov	r0, r4
 8004886:	bd70      	pop	{r4, r5, r6, pc}
 8004888:	200002c0 	.word	0x200002c0

0800488c <_malloc_r>:
 800488c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004890:	1ccd      	adds	r5, r1, #3
 8004892:	f025 0503 	bic.w	r5, r5, #3
 8004896:	3508      	adds	r5, #8
 8004898:	2d0c      	cmp	r5, #12
 800489a:	bf38      	it	cc
 800489c:	250c      	movcc	r5, #12
 800489e:	2d00      	cmp	r5, #0
 80048a0:	4607      	mov	r7, r0
 80048a2:	db01      	blt.n	80048a8 <_malloc_r+0x1c>
 80048a4:	42a9      	cmp	r1, r5
 80048a6:	d905      	bls.n	80048b4 <_malloc_r+0x28>
 80048a8:	230c      	movs	r3, #12
 80048aa:	603b      	str	r3, [r7, #0]
 80048ac:	2600      	movs	r6, #0
 80048ae:	4630      	mov	r0, r6
 80048b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004988 <_malloc_r+0xfc>
 80048b8:	f000 f868 	bl	800498c <__malloc_lock>
 80048bc:	f8d8 3000 	ldr.w	r3, [r8]
 80048c0:	461c      	mov	r4, r3
 80048c2:	bb5c      	cbnz	r4, 800491c <_malloc_r+0x90>
 80048c4:	4629      	mov	r1, r5
 80048c6:	4638      	mov	r0, r7
 80048c8:	f7ff ffc0 	bl	800484c <sbrk_aligned>
 80048cc:	1c43      	adds	r3, r0, #1
 80048ce:	4604      	mov	r4, r0
 80048d0:	d155      	bne.n	800497e <_malloc_r+0xf2>
 80048d2:	f8d8 4000 	ldr.w	r4, [r8]
 80048d6:	4626      	mov	r6, r4
 80048d8:	2e00      	cmp	r6, #0
 80048da:	d145      	bne.n	8004968 <_malloc_r+0xdc>
 80048dc:	2c00      	cmp	r4, #0
 80048de:	d048      	beq.n	8004972 <_malloc_r+0xe6>
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	4631      	mov	r1, r6
 80048e4:	4638      	mov	r0, r7
 80048e6:	eb04 0903 	add.w	r9, r4, r3
 80048ea:	f000 fb5d 	bl	8004fa8 <_sbrk_r>
 80048ee:	4581      	cmp	r9, r0
 80048f0:	d13f      	bne.n	8004972 <_malloc_r+0xe6>
 80048f2:	6821      	ldr	r1, [r4, #0]
 80048f4:	1a6d      	subs	r5, r5, r1
 80048f6:	4629      	mov	r1, r5
 80048f8:	4638      	mov	r0, r7
 80048fa:	f7ff ffa7 	bl	800484c <sbrk_aligned>
 80048fe:	3001      	adds	r0, #1
 8004900:	d037      	beq.n	8004972 <_malloc_r+0xe6>
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	442b      	add	r3, r5
 8004906:	6023      	str	r3, [r4, #0]
 8004908:	f8d8 3000 	ldr.w	r3, [r8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d038      	beq.n	8004982 <_malloc_r+0xf6>
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	42a2      	cmp	r2, r4
 8004914:	d12b      	bne.n	800496e <_malloc_r+0xe2>
 8004916:	2200      	movs	r2, #0
 8004918:	605a      	str	r2, [r3, #4]
 800491a:	e00f      	b.n	800493c <_malloc_r+0xb0>
 800491c:	6822      	ldr	r2, [r4, #0]
 800491e:	1b52      	subs	r2, r2, r5
 8004920:	d41f      	bmi.n	8004962 <_malloc_r+0xd6>
 8004922:	2a0b      	cmp	r2, #11
 8004924:	d917      	bls.n	8004956 <_malloc_r+0xca>
 8004926:	1961      	adds	r1, r4, r5
 8004928:	42a3      	cmp	r3, r4
 800492a:	6025      	str	r5, [r4, #0]
 800492c:	bf18      	it	ne
 800492e:	6059      	strne	r1, [r3, #4]
 8004930:	6863      	ldr	r3, [r4, #4]
 8004932:	bf08      	it	eq
 8004934:	f8c8 1000 	streq.w	r1, [r8]
 8004938:	5162      	str	r2, [r4, r5]
 800493a:	604b      	str	r3, [r1, #4]
 800493c:	4638      	mov	r0, r7
 800493e:	f104 060b 	add.w	r6, r4, #11
 8004942:	f000 f829 	bl	8004998 <__malloc_unlock>
 8004946:	f026 0607 	bic.w	r6, r6, #7
 800494a:	1d23      	adds	r3, r4, #4
 800494c:	1af2      	subs	r2, r6, r3
 800494e:	d0ae      	beq.n	80048ae <_malloc_r+0x22>
 8004950:	1b9b      	subs	r3, r3, r6
 8004952:	50a3      	str	r3, [r4, r2]
 8004954:	e7ab      	b.n	80048ae <_malloc_r+0x22>
 8004956:	42a3      	cmp	r3, r4
 8004958:	6862      	ldr	r2, [r4, #4]
 800495a:	d1dd      	bne.n	8004918 <_malloc_r+0x8c>
 800495c:	f8c8 2000 	str.w	r2, [r8]
 8004960:	e7ec      	b.n	800493c <_malloc_r+0xb0>
 8004962:	4623      	mov	r3, r4
 8004964:	6864      	ldr	r4, [r4, #4]
 8004966:	e7ac      	b.n	80048c2 <_malloc_r+0x36>
 8004968:	4634      	mov	r4, r6
 800496a:	6876      	ldr	r6, [r6, #4]
 800496c:	e7b4      	b.n	80048d8 <_malloc_r+0x4c>
 800496e:	4613      	mov	r3, r2
 8004970:	e7cc      	b.n	800490c <_malloc_r+0x80>
 8004972:	230c      	movs	r3, #12
 8004974:	603b      	str	r3, [r7, #0]
 8004976:	4638      	mov	r0, r7
 8004978:	f000 f80e 	bl	8004998 <__malloc_unlock>
 800497c:	e797      	b.n	80048ae <_malloc_r+0x22>
 800497e:	6025      	str	r5, [r4, #0]
 8004980:	e7dc      	b.n	800493c <_malloc_r+0xb0>
 8004982:	605b      	str	r3, [r3, #4]
 8004984:	deff      	udf	#255	; 0xff
 8004986:	bf00      	nop
 8004988:	200002bc 	.word	0x200002bc

0800498c <__malloc_lock>:
 800498c:	4801      	ldr	r0, [pc, #4]	; (8004994 <__malloc_lock+0x8>)
 800498e:	f7ff bf0f 	b.w	80047b0 <__retarget_lock_acquire_recursive>
 8004992:	bf00      	nop
 8004994:	200002b8 	.word	0x200002b8

08004998 <__malloc_unlock>:
 8004998:	4801      	ldr	r0, [pc, #4]	; (80049a0 <__malloc_unlock+0x8>)
 800499a:	f7ff bf0a 	b.w	80047b2 <__retarget_lock_release_recursive>
 800499e:	bf00      	nop
 80049a0:	200002b8 	.word	0x200002b8

080049a4 <__ssputs_r>:
 80049a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049a8:	688e      	ldr	r6, [r1, #8]
 80049aa:	461f      	mov	r7, r3
 80049ac:	42be      	cmp	r6, r7
 80049ae:	680b      	ldr	r3, [r1, #0]
 80049b0:	4682      	mov	sl, r0
 80049b2:	460c      	mov	r4, r1
 80049b4:	4690      	mov	r8, r2
 80049b6:	d82c      	bhi.n	8004a12 <__ssputs_r+0x6e>
 80049b8:	898a      	ldrh	r2, [r1, #12]
 80049ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80049be:	d026      	beq.n	8004a0e <__ssputs_r+0x6a>
 80049c0:	6965      	ldr	r5, [r4, #20]
 80049c2:	6909      	ldr	r1, [r1, #16]
 80049c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049c8:	eba3 0901 	sub.w	r9, r3, r1
 80049cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049d0:	1c7b      	adds	r3, r7, #1
 80049d2:	444b      	add	r3, r9
 80049d4:	106d      	asrs	r5, r5, #1
 80049d6:	429d      	cmp	r5, r3
 80049d8:	bf38      	it	cc
 80049da:	461d      	movcc	r5, r3
 80049dc:	0553      	lsls	r3, r2, #21
 80049de:	d527      	bpl.n	8004a30 <__ssputs_r+0x8c>
 80049e0:	4629      	mov	r1, r5
 80049e2:	f7ff ff53 	bl	800488c <_malloc_r>
 80049e6:	4606      	mov	r6, r0
 80049e8:	b360      	cbz	r0, 8004a44 <__ssputs_r+0xa0>
 80049ea:	6921      	ldr	r1, [r4, #16]
 80049ec:	464a      	mov	r2, r9
 80049ee:	f000 faeb 	bl	8004fc8 <memcpy>
 80049f2:	89a3      	ldrh	r3, [r4, #12]
 80049f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049fc:	81a3      	strh	r3, [r4, #12]
 80049fe:	6126      	str	r6, [r4, #16]
 8004a00:	6165      	str	r5, [r4, #20]
 8004a02:	444e      	add	r6, r9
 8004a04:	eba5 0509 	sub.w	r5, r5, r9
 8004a08:	6026      	str	r6, [r4, #0]
 8004a0a:	60a5      	str	r5, [r4, #8]
 8004a0c:	463e      	mov	r6, r7
 8004a0e:	42be      	cmp	r6, r7
 8004a10:	d900      	bls.n	8004a14 <__ssputs_r+0x70>
 8004a12:	463e      	mov	r6, r7
 8004a14:	6820      	ldr	r0, [r4, #0]
 8004a16:	4632      	mov	r2, r6
 8004a18:	4641      	mov	r1, r8
 8004a1a:	f000 faab 	bl	8004f74 <memmove>
 8004a1e:	68a3      	ldr	r3, [r4, #8]
 8004a20:	1b9b      	subs	r3, r3, r6
 8004a22:	60a3      	str	r3, [r4, #8]
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	4433      	add	r3, r6
 8004a28:	6023      	str	r3, [r4, #0]
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a30:	462a      	mov	r2, r5
 8004a32:	f000 fad7 	bl	8004fe4 <_realloc_r>
 8004a36:	4606      	mov	r6, r0
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	d1e0      	bne.n	80049fe <__ssputs_r+0x5a>
 8004a3c:	6921      	ldr	r1, [r4, #16]
 8004a3e:	4650      	mov	r0, sl
 8004a40:	f7ff feb8 	bl	80047b4 <_free_r>
 8004a44:	230c      	movs	r3, #12
 8004a46:	f8ca 3000 	str.w	r3, [sl]
 8004a4a:	89a3      	ldrh	r3, [r4, #12]
 8004a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a50:	81a3      	strh	r3, [r4, #12]
 8004a52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a56:	e7e9      	b.n	8004a2c <__ssputs_r+0x88>

08004a58 <_svfiprintf_r>:
 8004a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a5c:	4698      	mov	r8, r3
 8004a5e:	898b      	ldrh	r3, [r1, #12]
 8004a60:	061b      	lsls	r3, r3, #24
 8004a62:	b09d      	sub	sp, #116	; 0x74
 8004a64:	4607      	mov	r7, r0
 8004a66:	460d      	mov	r5, r1
 8004a68:	4614      	mov	r4, r2
 8004a6a:	d50e      	bpl.n	8004a8a <_svfiprintf_r+0x32>
 8004a6c:	690b      	ldr	r3, [r1, #16]
 8004a6e:	b963      	cbnz	r3, 8004a8a <_svfiprintf_r+0x32>
 8004a70:	2140      	movs	r1, #64	; 0x40
 8004a72:	f7ff ff0b 	bl	800488c <_malloc_r>
 8004a76:	6028      	str	r0, [r5, #0]
 8004a78:	6128      	str	r0, [r5, #16]
 8004a7a:	b920      	cbnz	r0, 8004a86 <_svfiprintf_r+0x2e>
 8004a7c:	230c      	movs	r3, #12
 8004a7e:	603b      	str	r3, [r7, #0]
 8004a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a84:	e0d0      	b.n	8004c28 <_svfiprintf_r+0x1d0>
 8004a86:	2340      	movs	r3, #64	; 0x40
 8004a88:	616b      	str	r3, [r5, #20]
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a8e:	2320      	movs	r3, #32
 8004a90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a94:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a98:	2330      	movs	r3, #48	; 0x30
 8004a9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004c40 <_svfiprintf_r+0x1e8>
 8004a9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004aa2:	f04f 0901 	mov.w	r9, #1
 8004aa6:	4623      	mov	r3, r4
 8004aa8:	469a      	mov	sl, r3
 8004aaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004aae:	b10a      	cbz	r2, 8004ab4 <_svfiprintf_r+0x5c>
 8004ab0:	2a25      	cmp	r2, #37	; 0x25
 8004ab2:	d1f9      	bne.n	8004aa8 <_svfiprintf_r+0x50>
 8004ab4:	ebba 0b04 	subs.w	fp, sl, r4
 8004ab8:	d00b      	beq.n	8004ad2 <_svfiprintf_r+0x7a>
 8004aba:	465b      	mov	r3, fp
 8004abc:	4622      	mov	r2, r4
 8004abe:	4629      	mov	r1, r5
 8004ac0:	4638      	mov	r0, r7
 8004ac2:	f7ff ff6f 	bl	80049a4 <__ssputs_r>
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	f000 80a9 	beq.w	8004c1e <_svfiprintf_r+0x1c6>
 8004acc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ace:	445a      	add	r2, fp
 8004ad0:	9209      	str	r2, [sp, #36]	; 0x24
 8004ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 80a1 	beq.w	8004c1e <_svfiprintf_r+0x1c6>
 8004adc:	2300      	movs	r3, #0
 8004ade:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ae6:	f10a 0a01 	add.w	sl, sl, #1
 8004aea:	9304      	str	r3, [sp, #16]
 8004aec:	9307      	str	r3, [sp, #28]
 8004aee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004af2:	931a      	str	r3, [sp, #104]	; 0x68
 8004af4:	4654      	mov	r4, sl
 8004af6:	2205      	movs	r2, #5
 8004af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004afc:	4850      	ldr	r0, [pc, #320]	; (8004c40 <_svfiprintf_r+0x1e8>)
 8004afe:	f7fb fb7f 	bl	8000200 <memchr>
 8004b02:	9a04      	ldr	r2, [sp, #16]
 8004b04:	b9d8      	cbnz	r0, 8004b3e <_svfiprintf_r+0xe6>
 8004b06:	06d0      	lsls	r0, r2, #27
 8004b08:	bf44      	itt	mi
 8004b0a:	2320      	movmi	r3, #32
 8004b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b10:	0711      	lsls	r1, r2, #28
 8004b12:	bf44      	itt	mi
 8004b14:	232b      	movmi	r3, #43	; 0x2b
 8004b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8004b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8004b20:	d015      	beq.n	8004b4e <_svfiprintf_r+0xf6>
 8004b22:	9a07      	ldr	r2, [sp, #28]
 8004b24:	4654      	mov	r4, sl
 8004b26:	2000      	movs	r0, #0
 8004b28:	f04f 0c0a 	mov.w	ip, #10
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b32:	3b30      	subs	r3, #48	; 0x30
 8004b34:	2b09      	cmp	r3, #9
 8004b36:	d94d      	bls.n	8004bd4 <_svfiprintf_r+0x17c>
 8004b38:	b1b0      	cbz	r0, 8004b68 <_svfiprintf_r+0x110>
 8004b3a:	9207      	str	r2, [sp, #28]
 8004b3c:	e014      	b.n	8004b68 <_svfiprintf_r+0x110>
 8004b3e:	eba0 0308 	sub.w	r3, r0, r8
 8004b42:	fa09 f303 	lsl.w	r3, r9, r3
 8004b46:	4313      	orrs	r3, r2
 8004b48:	9304      	str	r3, [sp, #16]
 8004b4a:	46a2      	mov	sl, r4
 8004b4c:	e7d2      	b.n	8004af4 <_svfiprintf_r+0x9c>
 8004b4e:	9b03      	ldr	r3, [sp, #12]
 8004b50:	1d19      	adds	r1, r3, #4
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	9103      	str	r1, [sp, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	bfbb      	ittet	lt
 8004b5a:	425b      	neglt	r3, r3
 8004b5c:	f042 0202 	orrlt.w	r2, r2, #2
 8004b60:	9307      	strge	r3, [sp, #28]
 8004b62:	9307      	strlt	r3, [sp, #28]
 8004b64:	bfb8      	it	lt
 8004b66:	9204      	strlt	r2, [sp, #16]
 8004b68:	7823      	ldrb	r3, [r4, #0]
 8004b6a:	2b2e      	cmp	r3, #46	; 0x2e
 8004b6c:	d10c      	bne.n	8004b88 <_svfiprintf_r+0x130>
 8004b6e:	7863      	ldrb	r3, [r4, #1]
 8004b70:	2b2a      	cmp	r3, #42	; 0x2a
 8004b72:	d134      	bne.n	8004bde <_svfiprintf_r+0x186>
 8004b74:	9b03      	ldr	r3, [sp, #12]
 8004b76:	1d1a      	adds	r2, r3, #4
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	9203      	str	r2, [sp, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	bfb8      	it	lt
 8004b80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004b84:	3402      	adds	r4, #2
 8004b86:	9305      	str	r3, [sp, #20]
 8004b88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004c50 <_svfiprintf_r+0x1f8>
 8004b8c:	7821      	ldrb	r1, [r4, #0]
 8004b8e:	2203      	movs	r2, #3
 8004b90:	4650      	mov	r0, sl
 8004b92:	f7fb fb35 	bl	8000200 <memchr>
 8004b96:	b138      	cbz	r0, 8004ba8 <_svfiprintf_r+0x150>
 8004b98:	9b04      	ldr	r3, [sp, #16]
 8004b9a:	eba0 000a 	sub.w	r0, r0, sl
 8004b9e:	2240      	movs	r2, #64	; 0x40
 8004ba0:	4082      	lsls	r2, r0
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	3401      	adds	r4, #1
 8004ba6:	9304      	str	r3, [sp, #16]
 8004ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bac:	4825      	ldr	r0, [pc, #148]	; (8004c44 <_svfiprintf_r+0x1ec>)
 8004bae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bb2:	2206      	movs	r2, #6
 8004bb4:	f7fb fb24 	bl	8000200 <memchr>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	d038      	beq.n	8004c2e <_svfiprintf_r+0x1d6>
 8004bbc:	4b22      	ldr	r3, [pc, #136]	; (8004c48 <_svfiprintf_r+0x1f0>)
 8004bbe:	bb1b      	cbnz	r3, 8004c08 <_svfiprintf_r+0x1b0>
 8004bc0:	9b03      	ldr	r3, [sp, #12]
 8004bc2:	3307      	adds	r3, #7
 8004bc4:	f023 0307 	bic.w	r3, r3, #7
 8004bc8:	3308      	adds	r3, #8
 8004bca:	9303      	str	r3, [sp, #12]
 8004bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bce:	4433      	add	r3, r6
 8004bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8004bd2:	e768      	b.n	8004aa6 <_svfiprintf_r+0x4e>
 8004bd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bd8:	460c      	mov	r4, r1
 8004bda:	2001      	movs	r0, #1
 8004bdc:	e7a6      	b.n	8004b2c <_svfiprintf_r+0xd4>
 8004bde:	2300      	movs	r3, #0
 8004be0:	3401      	adds	r4, #1
 8004be2:	9305      	str	r3, [sp, #20]
 8004be4:	4619      	mov	r1, r3
 8004be6:	f04f 0c0a 	mov.w	ip, #10
 8004bea:	4620      	mov	r0, r4
 8004bec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bf0:	3a30      	subs	r2, #48	; 0x30
 8004bf2:	2a09      	cmp	r2, #9
 8004bf4:	d903      	bls.n	8004bfe <_svfiprintf_r+0x1a6>
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0c6      	beq.n	8004b88 <_svfiprintf_r+0x130>
 8004bfa:	9105      	str	r1, [sp, #20]
 8004bfc:	e7c4      	b.n	8004b88 <_svfiprintf_r+0x130>
 8004bfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c02:	4604      	mov	r4, r0
 8004c04:	2301      	movs	r3, #1
 8004c06:	e7f0      	b.n	8004bea <_svfiprintf_r+0x192>
 8004c08:	ab03      	add	r3, sp, #12
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	462a      	mov	r2, r5
 8004c0e:	4b0f      	ldr	r3, [pc, #60]	; (8004c4c <_svfiprintf_r+0x1f4>)
 8004c10:	a904      	add	r1, sp, #16
 8004c12:	4638      	mov	r0, r7
 8004c14:	f3af 8000 	nop.w
 8004c18:	1c42      	adds	r2, r0, #1
 8004c1a:	4606      	mov	r6, r0
 8004c1c:	d1d6      	bne.n	8004bcc <_svfiprintf_r+0x174>
 8004c1e:	89ab      	ldrh	r3, [r5, #12]
 8004c20:	065b      	lsls	r3, r3, #25
 8004c22:	f53f af2d 	bmi.w	8004a80 <_svfiprintf_r+0x28>
 8004c26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c28:	b01d      	add	sp, #116	; 0x74
 8004c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c2e:	ab03      	add	r3, sp, #12
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	462a      	mov	r2, r5
 8004c34:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <_svfiprintf_r+0x1f4>)
 8004c36:	a904      	add	r1, sp, #16
 8004c38:	4638      	mov	r0, r7
 8004c3a:	f000 f879 	bl	8004d30 <_printf_i>
 8004c3e:	e7eb      	b.n	8004c18 <_svfiprintf_r+0x1c0>
 8004c40:	08005126 	.word	0x08005126
 8004c44:	08005130 	.word	0x08005130
 8004c48:	00000000 	.word	0x00000000
 8004c4c:	080049a5 	.word	0x080049a5
 8004c50:	0800512c 	.word	0x0800512c

08004c54 <_printf_common>:
 8004c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c58:	4616      	mov	r6, r2
 8004c5a:	4699      	mov	r9, r3
 8004c5c:	688a      	ldr	r2, [r1, #8]
 8004c5e:	690b      	ldr	r3, [r1, #16]
 8004c60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c64:	4293      	cmp	r3, r2
 8004c66:	bfb8      	it	lt
 8004c68:	4613      	movlt	r3, r2
 8004c6a:	6033      	str	r3, [r6, #0]
 8004c6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c70:	4607      	mov	r7, r0
 8004c72:	460c      	mov	r4, r1
 8004c74:	b10a      	cbz	r2, 8004c7a <_printf_common+0x26>
 8004c76:	3301      	adds	r3, #1
 8004c78:	6033      	str	r3, [r6, #0]
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	0699      	lsls	r1, r3, #26
 8004c7e:	bf42      	ittt	mi
 8004c80:	6833      	ldrmi	r3, [r6, #0]
 8004c82:	3302      	addmi	r3, #2
 8004c84:	6033      	strmi	r3, [r6, #0]
 8004c86:	6825      	ldr	r5, [r4, #0]
 8004c88:	f015 0506 	ands.w	r5, r5, #6
 8004c8c:	d106      	bne.n	8004c9c <_printf_common+0x48>
 8004c8e:	f104 0a19 	add.w	sl, r4, #25
 8004c92:	68e3      	ldr	r3, [r4, #12]
 8004c94:	6832      	ldr	r2, [r6, #0]
 8004c96:	1a9b      	subs	r3, r3, r2
 8004c98:	42ab      	cmp	r3, r5
 8004c9a:	dc26      	bgt.n	8004cea <_printf_common+0x96>
 8004c9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ca0:	1e13      	subs	r3, r2, #0
 8004ca2:	6822      	ldr	r2, [r4, #0]
 8004ca4:	bf18      	it	ne
 8004ca6:	2301      	movne	r3, #1
 8004ca8:	0692      	lsls	r2, r2, #26
 8004caa:	d42b      	bmi.n	8004d04 <_printf_common+0xb0>
 8004cac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cb0:	4649      	mov	r1, r9
 8004cb2:	4638      	mov	r0, r7
 8004cb4:	47c0      	blx	r8
 8004cb6:	3001      	adds	r0, #1
 8004cb8:	d01e      	beq.n	8004cf8 <_printf_common+0xa4>
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	6922      	ldr	r2, [r4, #16]
 8004cbe:	f003 0306 	and.w	r3, r3, #6
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	bf02      	ittt	eq
 8004cc6:	68e5      	ldreq	r5, [r4, #12]
 8004cc8:	6833      	ldreq	r3, [r6, #0]
 8004cca:	1aed      	subeq	r5, r5, r3
 8004ccc:	68a3      	ldr	r3, [r4, #8]
 8004cce:	bf0c      	ite	eq
 8004cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cd4:	2500      	movne	r5, #0
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	bfc4      	itt	gt
 8004cda:	1a9b      	subgt	r3, r3, r2
 8004cdc:	18ed      	addgt	r5, r5, r3
 8004cde:	2600      	movs	r6, #0
 8004ce0:	341a      	adds	r4, #26
 8004ce2:	42b5      	cmp	r5, r6
 8004ce4:	d11a      	bne.n	8004d1c <_printf_common+0xc8>
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	e008      	b.n	8004cfc <_printf_common+0xa8>
 8004cea:	2301      	movs	r3, #1
 8004cec:	4652      	mov	r2, sl
 8004cee:	4649      	mov	r1, r9
 8004cf0:	4638      	mov	r0, r7
 8004cf2:	47c0      	blx	r8
 8004cf4:	3001      	adds	r0, #1
 8004cf6:	d103      	bne.n	8004d00 <_printf_common+0xac>
 8004cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d00:	3501      	adds	r5, #1
 8004d02:	e7c6      	b.n	8004c92 <_printf_common+0x3e>
 8004d04:	18e1      	adds	r1, r4, r3
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	2030      	movs	r0, #48	; 0x30
 8004d0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d0e:	4422      	add	r2, r4
 8004d10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d18:	3302      	adds	r3, #2
 8004d1a:	e7c7      	b.n	8004cac <_printf_common+0x58>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	4622      	mov	r2, r4
 8004d20:	4649      	mov	r1, r9
 8004d22:	4638      	mov	r0, r7
 8004d24:	47c0      	blx	r8
 8004d26:	3001      	adds	r0, #1
 8004d28:	d0e6      	beq.n	8004cf8 <_printf_common+0xa4>
 8004d2a:	3601      	adds	r6, #1
 8004d2c:	e7d9      	b.n	8004ce2 <_printf_common+0x8e>
	...

08004d30 <_printf_i>:
 8004d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d34:	7e0f      	ldrb	r7, [r1, #24]
 8004d36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d38:	2f78      	cmp	r7, #120	; 0x78
 8004d3a:	4691      	mov	r9, r2
 8004d3c:	4680      	mov	r8, r0
 8004d3e:	460c      	mov	r4, r1
 8004d40:	469a      	mov	sl, r3
 8004d42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d46:	d807      	bhi.n	8004d58 <_printf_i+0x28>
 8004d48:	2f62      	cmp	r7, #98	; 0x62
 8004d4a:	d80a      	bhi.n	8004d62 <_printf_i+0x32>
 8004d4c:	2f00      	cmp	r7, #0
 8004d4e:	f000 80d4 	beq.w	8004efa <_printf_i+0x1ca>
 8004d52:	2f58      	cmp	r7, #88	; 0x58
 8004d54:	f000 80c0 	beq.w	8004ed8 <_printf_i+0x1a8>
 8004d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d60:	e03a      	b.n	8004dd8 <_printf_i+0xa8>
 8004d62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d66:	2b15      	cmp	r3, #21
 8004d68:	d8f6      	bhi.n	8004d58 <_printf_i+0x28>
 8004d6a:	a101      	add	r1, pc, #4	; (adr r1, 8004d70 <_printf_i+0x40>)
 8004d6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d70:	08004dc9 	.word	0x08004dc9
 8004d74:	08004ddd 	.word	0x08004ddd
 8004d78:	08004d59 	.word	0x08004d59
 8004d7c:	08004d59 	.word	0x08004d59
 8004d80:	08004d59 	.word	0x08004d59
 8004d84:	08004d59 	.word	0x08004d59
 8004d88:	08004ddd 	.word	0x08004ddd
 8004d8c:	08004d59 	.word	0x08004d59
 8004d90:	08004d59 	.word	0x08004d59
 8004d94:	08004d59 	.word	0x08004d59
 8004d98:	08004d59 	.word	0x08004d59
 8004d9c:	08004ee1 	.word	0x08004ee1
 8004da0:	08004e09 	.word	0x08004e09
 8004da4:	08004e9b 	.word	0x08004e9b
 8004da8:	08004d59 	.word	0x08004d59
 8004dac:	08004d59 	.word	0x08004d59
 8004db0:	08004f03 	.word	0x08004f03
 8004db4:	08004d59 	.word	0x08004d59
 8004db8:	08004e09 	.word	0x08004e09
 8004dbc:	08004d59 	.word	0x08004d59
 8004dc0:	08004d59 	.word	0x08004d59
 8004dc4:	08004ea3 	.word	0x08004ea3
 8004dc8:	682b      	ldr	r3, [r5, #0]
 8004dca:	1d1a      	adds	r2, r3, #4
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	602a      	str	r2, [r5, #0]
 8004dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e09f      	b.n	8004f1c <_printf_i+0x1ec>
 8004ddc:	6820      	ldr	r0, [r4, #0]
 8004dde:	682b      	ldr	r3, [r5, #0]
 8004de0:	0607      	lsls	r7, r0, #24
 8004de2:	f103 0104 	add.w	r1, r3, #4
 8004de6:	6029      	str	r1, [r5, #0]
 8004de8:	d501      	bpl.n	8004dee <_printf_i+0xbe>
 8004dea:	681e      	ldr	r6, [r3, #0]
 8004dec:	e003      	b.n	8004df6 <_printf_i+0xc6>
 8004dee:	0646      	lsls	r6, r0, #25
 8004df0:	d5fb      	bpl.n	8004dea <_printf_i+0xba>
 8004df2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004df6:	2e00      	cmp	r6, #0
 8004df8:	da03      	bge.n	8004e02 <_printf_i+0xd2>
 8004dfa:	232d      	movs	r3, #45	; 0x2d
 8004dfc:	4276      	negs	r6, r6
 8004dfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e02:	485a      	ldr	r0, [pc, #360]	; (8004f6c <_printf_i+0x23c>)
 8004e04:	230a      	movs	r3, #10
 8004e06:	e012      	b.n	8004e2e <_printf_i+0xfe>
 8004e08:	682b      	ldr	r3, [r5, #0]
 8004e0a:	6820      	ldr	r0, [r4, #0]
 8004e0c:	1d19      	adds	r1, r3, #4
 8004e0e:	6029      	str	r1, [r5, #0]
 8004e10:	0605      	lsls	r5, r0, #24
 8004e12:	d501      	bpl.n	8004e18 <_printf_i+0xe8>
 8004e14:	681e      	ldr	r6, [r3, #0]
 8004e16:	e002      	b.n	8004e1e <_printf_i+0xee>
 8004e18:	0641      	lsls	r1, r0, #25
 8004e1a:	d5fb      	bpl.n	8004e14 <_printf_i+0xe4>
 8004e1c:	881e      	ldrh	r6, [r3, #0]
 8004e1e:	4853      	ldr	r0, [pc, #332]	; (8004f6c <_printf_i+0x23c>)
 8004e20:	2f6f      	cmp	r7, #111	; 0x6f
 8004e22:	bf0c      	ite	eq
 8004e24:	2308      	moveq	r3, #8
 8004e26:	230a      	movne	r3, #10
 8004e28:	2100      	movs	r1, #0
 8004e2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e2e:	6865      	ldr	r5, [r4, #4]
 8004e30:	60a5      	str	r5, [r4, #8]
 8004e32:	2d00      	cmp	r5, #0
 8004e34:	bfa2      	ittt	ge
 8004e36:	6821      	ldrge	r1, [r4, #0]
 8004e38:	f021 0104 	bicge.w	r1, r1, #4
 8004e3c:	6021      	strge	r1, [r4, #0]
 8004e3e:	b90e      	cbnz	r6, 8004e44 <_printf_i+0x114>
 8004e40:	2d00      	cmp	r5, #0
 8004e42:	d04b      	beq.n	8004edc <_printf_i+0x1ac>
 8004e44:	4615      	mov	r5, r2
 8004e46:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e4a:	fb03 6711 	mls	r7, r3, r1, r6
 8004e4e:	5dc7      	ldrb	r7, [r0, r7]
 8004e50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e54:	4637      	mov	r7, r6
 8004e56:	42bb      	cmp	r3, r7
 8004e58:	460e      	mov	r6, r1
 8004e5a:	d9f4      	bls.n	8004e46 <_printf_i+0x116>
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	d10b      	bne.n	8004e78 <_printf_i+0x148>
 8004e60:	6823      	ldr	r3, [r4, #0]
 8004e62:	07de      	lsls	r6, r3, #31
 8004e64:	d508      	bpl.n	8004e78 <_printf_i+0x148>
 8004e66:	6923      	ldr	r3, [r4, #16]
 8004e68:	6861      	ldr	r1, [r4, #4]
 8004e6a:	4299      	cmp	r1, r3
 8004e6c:	bfde      	ittt	le
 8004e6e:	2330      	movle	r3, #48	; 0x30
 8004e70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e74:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004e78:	1b52      	subs	r2, r2, r5
 8004e7a:	6122      	str	r2, [r4, #16]
 8004e7c:	f8cd a000 	str.w	sl, [sp]
 8004e80:	464b      	mov	r3, r9
 8004e82:	aa03      	add	r2, sp, #12
 8004e84:	4621      	mov	r1, r4
 8004e86:	4640      	mov	r0, r8
 8004e88:	f7ff fee4 	bl	8004c54 <_printf_common>
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	d14a      	bne.n	8004f26 <_printf_i+0x1f6>
 8004e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e94:	b004      	add	sp, #16
 8004e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	f043 0320 	orr.w	r3, r3, #32
 8004ea0:	6023      	str	r3, [r4, #0]
 8004ea2:	4833      	ldr	r0, [pc, #204]	; (8004f70 <_printf_i+0x240>)
 8004ea4:	2778      	movs	r7, #120	; 0x78
 8004ea6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	6829      	ldr	r1, [r5, #0]
 8004eae:	061f      	lsls	r7, r3, #24
 8004eb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004eb4:	d402      	bmi.n	8004ebc <_printf_i+0x18c>
 8004eb6:	065f      	lsls	r7, r3, #25
 8004eb8:	bf48      	it	mi
 8004eba:	b2b6      	uxthmi	r6, r6
 8004ebc:	07df      	lsls	r7, r3, #31
 8004ebe:	bf48      	it	mi
 8004ec0:	f043 0320 	orrmi.w	r3, r3, #32
 8004ec4:	6029      	str	r1, [r5, #0]
 8004ec6:	bf48      	it	mi
 8004ec8:	6023      	strmi	r3, [r4, #0]
 8004eca:	b91e      	cbnz	r6, 8004ed4 <_printf_i+0x1a4>
 8004ecc:	6823      	ldr	r3, [r4, #0]
 8004ece:	f023 0320 	bic.w	r3, r3, #32
 8004ed2:	6023      	str	r3, [r4, #0]
 8004ed4:	2310      	movs	r3, #16
 8004ed6:	e7a7      	b.n	8004e28 <_printf_i+0xf8>
 8004ed8:	4824      	ldr	r0, [pc, #144]	; (8004f6c <_printf_i+0x23c>)
 8004eda:	e7e4      	b.n	8004ea6 <_printf_i+0x176>
 8004edc:	4615      	mov	r5, r2
 8004ede:	e7bd      	b.n	8004e5c <_printf_i+0x12c>
 8004ee0:	682b      	ldr	r3, [r5, #0]
 8004ee2:	6826      	ldr	r6, [r4, #0]
 8004ee4:	6961      	ldr	r1, [r4, #20]
 8004ee6:	1d18      	adds	r0, r3, #4
 8004ee8:	6028      	str	r0, [r5, #0]
 8004eea:	0635      	lsls	r5, r6, #24
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	d501      	bpl.n	8004ef4 <_printf_i+0x1c4>
 8004ef0:	6019      	str	r1, [r3, #0]
 8004ef2:	e002      	b.n	8004efa <_printf_i+0x1ca>
 8004ef4:	0670      	lsls	r0, r6, #25
 8004ef6:	d5fb      	bpl.n	8004ef0 <_printf_i+0x1c0>
 8004ef8:	8019      	strh	r1, [r3, #0]
 8004efa:	2300      	movs	r3, #0
 8004efc:	6123      	str	r3, [r4, #16]
 8004efe:	4615      	mov	r5, r2
 8004f00:	e7bc      	b.n	8004e7c <_printf_i+0x14c>
 8004f02:	682b      	ldr	r3, [r5, #0]
 8004f04:	1d1a      	adds	r2, r3, #4
 8004f06:	602a      	str	r2, [r5, #0]
 8004f08:	681d      	ldr	r5, [r3, #0]
 8004f0a:	6862      	ldr	r2, [r4, #4]
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	4628      	mov	r0, r5
 8004f10:	f7fb f976 	bl	8000200 <memchr>
 8004f14:	b108      	cbz	r0, 8004f1a <_printf_i+0x1ea>
 8004f16:	1b40      	subs	r0, r0, r5
 8004f18:	6060      	str	r0, [r4, #4]
 8004f1a:	6863      	ldr	r3, [r4, #4]
 8004f1c:	6123      	str	r3, [r4, #16]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f24:	e7aa      	b.n	8004e7c <_printf_i+0x14c>
 8004f26:	6923      	ldr	r3, [r4, #16]
 8004f28:	462a      	mov	r2, r5
 8004f2a:	4649      	mov	r1, r9
 8004f2c:	4640      	mov	r0, r8
 8004f2e:	47d0      	blx	sl
 8004f30:	3001      	adds	r0, #1
 8004f32:	d0ad      	beq.n	8004e90 <_printf_i+0x160>
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	079b      	lsls	r3, r3, #30
 8004f38:	d413      	bmi.n	8004f62 <_printf_i+0x232>
 8004f3a:	68e0      	ldr	r0, [r4, #12]
 8004f3c:	9b03      	ldr	r3, [sp, #12]
 8004f3e:	4298      	cmp	r0, r3
 8004f40:	bfb8      	it	lt
 8004f42:	4618      	movlt	r0, r3
 8004f44:	e7a6      	b.n	8004e94 <_printf_i+0x164>
 8004f46:	2301      	movs	r3, #1
 8004f48:	4632      	mov	r2, r6
 8004f4a:	4649      	mov	r1, r9
 8004f4c:	4640      	mov	r0, r8
 8004f4e:	47d0      	blx	sl
 8004f50:	3001      	adds	r0, #1
 8004f52:	d09d      	beq.n	8004e90 <_printf_i+0x160>
 8004f54:	3501      	adds	r5, #1
 8004f56:	68e3      	ldr	r3, [r4, #12]
 8004f58:	9903      	ldr	r1, [sp, #12]
 8004f5a:	1a5b      	subs	r3, r3, r1
 8004f5c:	42ab      	cmp	r3, r5
 8004f5e:	dcf2      	bgt.n	8004f46 <_printf_i+0x216>
 8004f60:	e7eb      	b.n	8004f3a <_printf_i+0x20a>
 8004f62:	2500      	movs	r5, #0
 8004f64:	f104 0619 	add.w	r6, r4, #25
 8004f68:	e7f5      	b.n	8004f56 <_printf_i+0x226>
 8004f6a:	bf00      	nop
 8004f6c:	08005137 	.word	0x08005137
 8004f70:	08005148 	.word	0x08005148

08004f74 <memmove>:
 8004f74:	4288      	cmp	r0, r1
 8004f76:	b510      	push	{r4, lr}
 8004f78:	eb01 0402 	add.w	r4, r1, r2
 8004f7c:	d902      	bls.n	8004f84 <memmove+0x10>
 8004f7e:	4284      	cmp	r4, r0
 8004f80:	4623      	mov	r3, r4
 8004f82:	d807      	bhi.n	8004f94 <memmove+0x20>
 8004f84:	1e43      	subs	r3, r0, #1
 8004f86:	42a1      	cmp	r1, r4
 8004f88:	d008      	beq.n	8004f9c <memmove+0x28>
 8004f8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f92:	e7f8      	b.n	8004f86 <memmove+0x12>
 8004f94:	4402      	add	r2, r0
 8004f96:	4601      	mov	r1, r0
 8004f98:	428a      	cmp	r2, r1
 8004f9a:	d100      	bne.n	8004f9e <memmove+0x2a>
 8004f9c:	bd10      	pop	{r4, pc}
 8004f9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fa6:	e7f7      	b.n	8004f98 <memmove+0x24>

08004fa8 <_sbrk_r>:
 8004fa8:	b538      	push	{r3, r4, r5, lr}
 8004faa:	4d06      	ldr	r5, [pc, #24]	; (8004fc4 <_sbrk_r+0x1c>)
 8004fac:	2300      	movs	r3, #0
 8004fae:	4604      	mov	r4, r0
 8004fb0:	4608      	mov	r0, r1
 8004fb2:	602b      	str	r3, [r5, #0]
 8004fb4:	f7fc fc70 	bl	8001898 <_sbrk>
 8004fb8:	1c43      	adds	r3, r0, #1
 8004fba:	d102      	bne.n	8004fc2 <_sbrk_r+0x1a>
 8004fbc:	682b      	ldr	r3, [r5, #0]
 8004fbe:	b103      	cbz	r3, 8004fc2 <_sbrk_r+0x1a>
 8004fc0:	6023      	str	r3, [r4, #0]
 8004fc2:	bd38      	pop	{r3, r4, r5, pc}
 8004fc4:	200002b4 	.word	0x200002b4

08004fc8 <memcpy>:
 8004fc8:	440a      	add	r2, r1
 8004fca:	4291      	cmp	r1, r2
 8004fcc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004fd0:	d100      	bne.n	8004fd4 <memcpy+0xc>
 8004fd2:	4770      	bx	lr
 8004fd4:	b510      	push	{r4, lr}
 8004fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fde:	4291      	cmp	r1, r2
 8004fe0:	d1f9      	bne.n	8004fd6 <memcpy+0xe>
 8004fe2:	bd10      	pop	{r4, pc}

08004fe4 <_realloc_r>:
 8004fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fe8:	4680      	mov	r8, r0
 8004fea:	4614      	mov	r4, r2
 8004fec:	460e      	mov	r6, r1
 8004fee:	b921      	cbnz	r1, 8004ffa <_realloc_r+0x16>
 8004ff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ff4:	4611      	mov	r1, r2
 8004ff6:	f7ff bc49 	b.w	800488c <_malloc_r>
 8004ffa:	b92a      	cbnz	r2, 8005008 <_realloc_r+0x24>
 8004ffc:	f7ff fbda 	bl	80047b4 <_free_r>
 8005000:	4625      	mov	r5, r4
 8005002:	4628      	mov	r0, r5
 8005004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005008:	f000 f81b 	bl	8005042 <_malloc_usable_size_r>
 800500c:	4284      	cmp	r4, r0
 800500e:	4607      	mov	r7, r0
 8005010:	d802      	bhi.n	8005018 <_realloc_r+0x34>
 8005012:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005016:	d812      	bhi.n	800503e <_realloc_r+0x5a>
 8005018:	4621      	mov	r1, r4
 800501a:	4640      	mov	r0, r8
 800501c:	f7ff fc36 	bl	800488c <_malloc_r>
 8005020:	4605      	mov	r5, r0
 8005022:	2800      	cmp	r0, #0
 8005024:	d0ed      	beq.n	8005002 <_realloc_r+0x1e>
 8005026:	42bc      	cmp	r4, r7
 8005028:	4622      	mov	r2, r4
 800502a:	4631      	mov	r1, r6
 800502c:	bf28      	it	cs
 800502e:	463a      	movcs	r2, r7
 8005030:	f7ff ffca 	bl	8004fc8 <memcpy>
 8005034:	4631      	mov	r1, r6
 8005036:	4640      	mov	r0, r8
 8005038:	f7ff fbbc 	bl	80047b4 <_free_r>
 800503c:	e7e1      	b.n	8005002 <_realloc_r+0x1e>
 800503e:	4635      	mov	r5, r6
 8005040:	e7df      	b.n	8005002 <_realloc_r+0x1e>

08005042 <_malloc_usable_size_r>:
 8005042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005046:	1f18      	subs	r0, r3, #4
 8005048:	2b00      	cmp	r3, #0
 800504a:	bfbc      	itt	lt
 800504c:	580b      	ldrlt	r3, [r1, r0]
 800504e:	18c0      	addlt	r0, r0, r3
 8005050:	4770      	bx	lr
	...

08005054 <_init>:
 8005054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005056:	bf00      	nop
 8005058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800505a:	bc08      	pop	{r3}
 800505c:	469e      	mov	lr, r3
 800505e:	4770      	bx	lr

08005060 <_fini>:
 8005060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005062:	bf00      	nop
 8005064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005066:	bc08      	pop	{r3}
 8005068:	469e      	mov	lr, r3
 800506a:	4770      	bx	lr
