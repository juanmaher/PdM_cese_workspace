
parking_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055b4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08005764  08005764  00015764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005850  08005850  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005850  08005850  00015850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005858  08005858  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005858  08005858  00015858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800585c  0800585c  0001585c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000002bc  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000328  20000328  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001032b  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002704  00000000  00000000  0003040a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001058  00000000  00000000  00032b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cd6  00000000  00000000  00033b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027bb6  00000000  00000000  0003483e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017f19  00000000  00000000  0005c3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ec98f  00000000  00000000  0007430d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004ae0  00000000  00000000  00160c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  0016577c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800574c 	.word	0x0800574c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	0800574c 	.word	0x0800574c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2uiz>:
 8000b4c:	004a      	lsls	r2, r1, #1
 8000b4e:	d211      	bcs.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d211      	bcs.n	8000b7a <__aeabi_d2uiz+0x2e>
 8000b56:	d50d      	bpl.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d40e      	bmi.n	8000b80 <__aeabi_d2uiz+0x34>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_d2uiz+0x3a>
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ba0:	f000 b970 	b.w	8000e84 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9e08      	ldr	r6, [sp, #32]
 8000bc2:	460d      	mov	r5, r1
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	460f      	mov	r7, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14a      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bcc:	428a      	cmp	r2, r1
 8000bce:	4694      	mov	ip, r2
 8000bd0:	d965      	bls.n	8000c9e <__udivmoddi4+0xe2>
 8000bd2:	fab2 f382 	clz	r3, r2
 8000bd6:	b143      	cbz	r3, 8000bea <__udivmoddi4+0x2e>
 8000bd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bdc:	f1c3 0220 	rsb	r2, r3, #32
 8000be0:	409f      	lsls	r7, r3
 8000be2:	fa20 f202 	lsr.w	r2, r0, r2
 8000be6:	4317      	orrs	r7, r2
 8000be8:	409c      	lsls	r4, r3
 8000bea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bee:	fa1f f58c 	uxth.w	r5, ip
 8000bf2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bf6:	0c22      	lsrs	r2, r4, #16
 8000bf8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c00:	fb01 f005 	mul.w	r0, r1, r5
 8000c04:	4290      	cmp	r0, r2
 8000c06:	d90a      	bls.n	8000c1e <__udivmoddi4+0x62>
 8000c08:	eb1c 0202 	adds.w	r2, ip, r2
 8000c0c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c10:	f080 811c 	bcs.w	8000e4c <__udivmoddi4+0x290>
 8000c14:	4290      	cmp	r0, r2
 8000c16:	f240 8119 	bls.w	8000e4c <__udivmoddi4+0x290>
 8000c1a:	3902      	subs	r1, #2
 8000c1c:	4462      	add	r2, ip
 8000c1e:	1a12      	subs	r2, r2, r0
 8000c20:	b2a4      	uxth	r4, r4
 8000c22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c2e:	fb00 f505 	mul.w	r5, r0, r5
 8000c32:	42a5      	cmp	r5, r4
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x90>
 8000c36:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c3e:	f080 8107 	bcs.w	8000e50 <__udivmoddi4+0x294>
 8000c42:	42a5      	cmp	r5, r4
 8000c44:	f240 8104 	bls.w	8000e50 <__udivmoddi4+0x294>
 8000c48:	4464      	add	r4, ip
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c50:	1b64      	subs	r4, r4, r5
 8000c52:	2100      	movs	r1, #0
 8000c54:	b11e      	cbz	r6, 8000c5e <__udivmoddi4+0xa2>
 8000c56:	40dc      	lsrs	r4, r3
 8000c58:	2300      	movs	r3, #0
 8000c5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0xbc>
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	f000 80ed 	beq.w	8000e46 <__udivmoddi4+0x28a>
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c72:	4608      	mov	r0, r1
 8000c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c78:	fab3 f183 	clz	r1, r3
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	d149      	bne.n	8000d14 <__udivmoddi4+0x158>
 8000c80:	42ab      	cmp	r3, r5
 8000c82:	d302      	bcc.n	8000c8a <__udivmoddi4+0xce>
 8000c84:	4282      	cmp	r2, r0
 8000c86:	f200 80f8 	bhi.w	8000e7a <__udivmoddi4+0x2be>
 8000c8a:	1a84      	subs	r4, r0, r2
 8000c8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c90:	2001      	movs	r0, #1
 8000c92:	4617      	mov	r7, r2
 8000c94:	2e00      	cmp	r6, #0
 8000c96:	d0e2      	beq.n	8000c5e <__udivmoddi4+0xa2>
 8000c98:	e9c6 4700 	strd	r4, r7, [r6]
 8000c9c:	e7df      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xe6>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f382 	clz	r3, r2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8090 	bne.w	8000dcc <__udivmoddi4+0x210>
 8000cac:	1a8a      	subs	r2, r1, r2
 8000cae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb2:	fa1f fe8c 	uxth.w	lr, ip
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cbc:	fb07 2015 	mls	r0, r7, r5, r2
 8000cc0:	0c22      	lsrs	r2, r4, #16
 8000cc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cc6:	fb0e f005 	mul.w	r0, lr, r5
 8000cca:	4290      	cmp	r0, r2
 8000ccc:	d908      	bls.n	8000ce0 <__udivmoddi4+0x124>
 8000cce:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x122>
 8000cd8:	4290      	cmp	r0, r2
 8000cda:	f200 80cb 	bhi.w	8000e74 <__udivmoddi4+0x2b8>
 8000cde:	4645      	mov	r5, r8
 8000ce0:	1a12      	subs	r2, r2, r0
 8000ce2:	b2a4      	uxth	r4, r4
 8000ce4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ce8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cf0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf4:	45a6      	cmp	lr, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x14e>
 8000cf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d00:	d202      	bcs.n	8000d08 <__udivmoddi4+0x14c>
 8000d02:	45a6      	cmp	lr, r4
 8000d04:	f200 80bb 	bhi.w	8000e7e <__udivmoddi4+0x2c2>
 8000d08:	4610      	mov	r0, r2
 8000d0a:	eba4 040e 	sub.w	r4, r4, lr
 8000d0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d12:	e79f      	b.n	8000c54 <__udivmoddi4+0x98>
 8000d14:	f1c1 0720 	rsb	r7, r1, #32
 8000d18:	408b      	lsls	r3, r1
 8000d1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d22:	fa05 f401 	lsl.w	r4, r5, r1
 8000d26:	fa20 f307 	lsr.w	r3, r0, r7
 8000d2a:	40fd      	lsrs	r5, r7
 8000d2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d30:	4323      	orrs	r3, r4
 8000d32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d3e:	0c1c      	lsrs	r4, r3, #16
 8000d40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d44:	fb08 f50e 	mul.w	r5, r8, lr
 8000d48:	42a5      	cmp	r5, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d52:	d90b      	bls.n	8000d6c <__udivmoddi4+0x1b0>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d5c:	f080 8088 	bcs.w	8000e70 <__udivmoddi4+0x2b4>
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	f240 8085 	bls.w	8000e70 <__udivmoddi4+0x2b4>
 8000d66:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6a:	4464      	add	r4, ip
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	b29d      	uxth	r5, r3
 8000d70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d74:	fb09 4413 	mls	r4, r9, r3, r4
 8000d78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1da>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d8c:	d26c      	bcs.n	8000e68 <__udivmoddi4+0x2ac>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	d96a      	bls.n	8000e68 <__udivmoddi4+0x2ac>
 8000d92:	3b02      	subs	r3, #2
 8000d94:	4464      	add	r4, ip
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	42ac      	cmp	r4, r5
 8000da4:	46c8      	mov	r8, r9
 8000da6:	46ae      	mov	lr, r5
 8000da8:	d356      	bcc.n	8000e58 <__udivmoddi4+0x29c>
 8000daa:	d053      	beq.n	8000e54 <__udivmoddi4+0x298>
 8000dac:	b156      	cbz	r6, 8000dc4 <__udivmoddi4+0x208>
 8000dae:	ebb0 0208 	subs.w	r2, r0, r8
 8000db2:	eb64 040e 	sbc.w	r4, r4, lr
 8000db6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dba:	40ca      	lsrs	r2, r1
 8000dbc:	40cc      	lsrs	r4, r1
 8000dbe:	4317      	orrs	r7, r2
 8000dc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dcc:	f1c3 0120 	rsb	r1, r3, #32
 8000dd0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dd4:	fa20 f201 	lsr.w	r2, r0, r1
 8000dd8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ddc:	409d      	lsls	r5, r3
 8000dde:	432a      	orrs	r2, r5
 8000de0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de4:	fa1f fe8c 	uxth.w	lr, ip
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1510 	mls	r5, r7, r0, r1
 8000df0:	0c11      	lsrs	r1, r2, #16
 8000df2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000df6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dfa:	428d      	cmp	r5, r1
 8000dfc:	fa04 f403 	lsl.w	r4, r4, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x258>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e0a:	d22f      	bcs.n	8000e6c <__udivmoddi4+0x2b0>
 8000e0c:	428d      	cmp	r5, r1
 8000e0e:	d92d      	bls.n	8000e6c <__udivmoddi4+0x2b0>
 8000e10:	3802      	subs	r0, #2
 8000e12:	4461      	add	r1, ip
 8000e14:	1b49      	subs	r1, r1, r5
 8000e16:	b292      	uxth	r2, r2
 8000e18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e24:	fb05 f10e 	mul.w	r1, r5, lr
 8000e28:	4291      	cmp	r1, r2
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x282>
 8000e2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e30:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e34:	d216      	bcs.n	8000e64 <__udivmoddi4+0x2a8>
 8000e36:	4291      	cmp	r1, r2
 8000e38:	d914      	bls.n	8000e64 <__udivmoddi4+0x2a8>
 8000e3a:	3d02      	subs	r5, #2
 8000e3c:	4462      	add	r2, ip
 8000e3e:	1a52      	subs	r2, r2, r1
 8000e40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e44:	e738      	b.n	8000cb8 <__udivmoddi4+0xfc>
 8000e46:	4631      	mov	r1, r6
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e708      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000e4c:	4639      	mov	r1, r7
 8000e4e:	e6e6      	b.n	8000c1e <__udivmoddi4+0x62>
 8000e50:	4610      	mov	r0, r2
 8000e52:	e6fb      	b.n	8000c4c <__udivmoddi4+0x90>
 8000e54:	4548      	cmp	r0, r9
 8000e56:	d2a9      	bcs.n	8000dac <__udivmoddi4+0x1f0>
 8000e58:	ebb9 0802 	subs.w	r8, r9, r2
 8000e5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e60:	3b01      	subs	r3, #1
 8000e62:	e7a3      	b.n	8000dac <__udivmoddi4+0x1f0>
 8000e64:	4645      	mov	r5, r8
 8000e66:	e7ea      	b.n	8000e3e <__udivmoddi4+0x282>
 8000e68:	462b      	mov	r3, r5
 8000e6a:	e794      	b.n	8000d96 <__udivmoddi4+0x1da>
 8000e6c:	4640      	mov	r0, r8
 8000e6e:	e7d1      	b.n	8000e14 <__udivmoddi4+0x258>
 8000e70:	46d0      	mov	r8, sl
 8000e72:	e77b      	b.n	8000d6c <__udivmoddi4+0x1b0>
 8000e74:	3d02      	subs	r5, #2
 8000e76:	4462      	add	r2, ip
 8000e78:	e732      	b.n	8000ce0 <__udivmoddi4+0x124>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e70a      	b.n	8000c94 <__udivmoddi4+0xd8>
 8000e7e:	4464      	add	r4, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e742      	b.n	8000d0a <__udivmoddi4+0x14e>

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <debounceFSM_init>:

/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
/* Public functions ---------------------------------------------------------*/
void debounceFSM_init()
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	debounceState = BUTTON_UP;
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <debounceFSM_init+0x1c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]
	buttonState = false;
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <debounceFSM_init+0x20>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
	delayInit(&delay, DELAY_DURATION_MS);
 8000e98:	2128      	movs	r1, #40	; 0x28
 8000e9a:	4804      	ldr	r0, [pc, #16]	; (8000eac <debounceFSM_init+0x24>)
 8000e9c:	f000 f880 	bl	8000fa0 <delayInit>
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000088 	.word	0x20000088
 8000ea8:	20000089 	.word	0x20000089
 8000eac:	2000008c 	.word	0x2000008c

08000eb0 <debounceFSM_update>:

void debounceFSM_update()
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	switch (debounceState) {
 8000eb4:	4b2e      	ldr	r3, [pc, #184]	; (8000f70 <debounceFSM_update+0xc0>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	d84d      	bhi.n	8000f58 <debounceFSM_update+0xa8>
 8000ebc:	a201      	add	r2, pc, #4	; (adr r2, 8000ec4 <debounceFSM_update+0x14>)
 8000ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec2:	bf00      	nop
 8000ec4:	08000ed5 	.word	0x08000ed5
 8000ec8:	08000ee9 	.word	0x08000ee9
 8000ecc:	08000f17 	.word	0x08000f17
 8000ed0:	08000f45 	.word	0x08000f45
		case BUTTON_UP:
			if (BSP_PB_GetState(BUTTON_USER)) {
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f000 fe99 	bl	8001c0c <BSP_PB_GetState>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d03d      	beq.n	8000f5c <debounceFSM_update+0xac>
				debounceState = BUTTON_FALLING;
 8000ee0:	4b23      	ldr	r3, [pc, #140]	; (8000f70 <debounceFSM_update+0xc0>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000ee6:	e039      	b.n	8000f5c <debounceFSM_update+0xac>
		case BUTTON_FALLING:
			if (delayRead(&delay)) {
 8000ee8:	4822      	ldr	r0, [pc, #136]	; (8000f74 <debounceFSM_update+0xc4>)
 8000eea:	f000 f873 	bl	8000fd4 <delayRead>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d035      	beq.n	8000f60 <debounceFSM_update+0xb0>
				if (BSP_PB_GetState(BUTTON_USER)) {
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f000 fe89 	bl	8001c0c <BSP_PB_GetState>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d006      	beq.n	8000f0e <debounceFSM_update+0x5e>
					debounceState = BUTTON_DOWN;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <debounceFSM_update+0xc0>)
 8000f02:	2203      	movs	r2, #3
 8000f04:	701a      	strb	r2, [r3, #0]
					buttonState = true;
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <debounceFSM_update+0xc8>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
				} else {
					debounceState = BUTTON_UP;
				}
			}
			break;
 8000f0c:	e028      	b.n	8000f60 <debounceFSM_update+0xb0>
					debounceState = BUTTON_UP;
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <debounceFSM_update+0xc0>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
			break;
 8000f14:	e024      	b.n	8000f60 <debounceFSM_update+0xb0>
		case BUTTON_RISING:
			if (delayRead(&delay)) {
 8000f16:	4817      	ldr	r0, [pc, #92]	; (8000f74 <debounceFSM_update+0xc4>)
 8000f18:	f000 f85c 	bl	8000fd4 <delayRead>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d020      	beq.n	8000f64 <debounceFSM_update+0xb4>
				if (BSP_PB_GetState(BUTTON_USER)) {
 8000f22:	2000      	movs	r0, #0
 8000f24:	f000 fe72 	bl	8001c0c <BSP_PB_GetState>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <debounceFSM_update+0x86>
					debounceState = BUTTON_DOWN;
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <debounceFSM_update+0xc0>)
 8000f30:	2203      	movs	r2, #3
 8000f32:	701a      	strb	r2, [r3, #0]
				} else {
					debounceState = BUTTON_UP;
					buttonState = false;
				}
			}
			break;
 8000f34:	e016      	b.n	8000f64 <debounceFSM_update+0xb4>
					debounceState = BUTTON_UP;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <debounceFSM_update+0xc0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
					buttonState = false;
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <debounceFSM_update+0xc8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
			break;
 8000f42:	e00f      	b.n	8000f64 <debounceFSM_update+0xb4>
		case BUTTON_DOWN:
			if (!BSP_PB_GetState(BUTTON_USER)) {
 8000f44:	2000      	movs	r0, #0
 8000f46:	f000 fe61 	bl	8001c0c <BSP_PB_GetState>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d10b      	bne.n	8000f68 <debounceFSM_update+0xb8>
				debounceState = BUTTON_RISING;
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <debounceFSM_update+0xc0>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000f56:	e007      	b.n	8000f68 <debounceFSM_update+0xb8>
		default:
			break;
 8000f58:	bf00      	nop
 8000f5a:	e006      	b.n	8000f6a <debounceFSM_update+0xba>
			break;
 8000f5c:	bf00      	nop
 8000f5e:	e004      	b.n	8000f6a <debounceFSM_update+0xba>
			break;
 8000f60:	bf00      	nop
 8000f62:	e002      	b.n	8000f6a <debounceFSM_update+0xba>
			break;
 8000f64:	bf00      	nop
 8000f66:	e000      	b.n	8000f6a <debounceFSM_update+0xba>
			break;
 8000f68:	bf00      	nop
	}
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000088 	.word	0x20000088
 8000f74:	2000008c 	.word	0x2000008c
 8000f78:	20000089 	.word	0x20000089

08000f7c <readKey>:

bool_t readKey()
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
    return buttonState;
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <readKey+0x14>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000089 	.word	0x20000089

08000f94 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f000 fe1d 	bl	8001bd8 <BSP_LED_On>
	while (1)
 8000f9e:	e7fe      	b.n	8000f9e <Error_Handler+0xa>

08000fa0 <delayInit>:
	}
}

/* Public functions ---------------------------------------------------------*/
void delayInit(delay_t * delay, tick_t duration)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
	if (delay == NULL || duration == 0)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d002      	beq.n	8000fb6 <delayInit+0x16>
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d101      	bne.n	8000fba <delayInit+0x1a>
	{
		Error_Handler();
 8000fb6:	f7ff ffed 	bl	8000f94 <Error_Handler>
	}

	delay->running = false;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	721a      	strb	r2, [r3, #8]
	delay->startTime = DEFAULT_START_TIME;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
	delay->duration = duration;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	605a      	str	r2, [r3, #4]
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <delayRead>:

bool_t delayRead(delay_t * delay)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	if (delay == NULL)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d103      	bne.n	8000fea <delayRead+0x16>
	{
		Error_Handler();
 8000fe2:	f7ff ffd7 	bl	8000f94 <Error_Handler>
		return false;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e020      	b.n	800102c <delayRead+0x58>
	}

	if (delay->running == false)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	7a1b      	ldrb	r3, [r3, #8]
 8000fee:	f083 0301 	eor.w	r3, r3, #1
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d009      	beq.n	800100c <delayRead+0x38>
	{
		delay->running = true;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	721a      	strb	r2, [r3, #8]
		delay->startTime = (tick_t) HAL_GetTick();
 8000ffe:	f000 ff15 	bl	8001e2c <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	601a      	str	r2, [r3, #0]
		return false;
 8001008:	2300      	movs	r3, #0
 800100a:	e00f      	b.n	800102c <delayRead+0x58>
	}

	if (HAL_GetTick() - delay->startTime >= delay->duration)
 800100c:	f000 ff0e 	bl	8001e2c <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	1ad2      	subs	r2, r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	429a      	cmp	r2, r3
 800101e:	d304      	bcc.n	800102a <delayRead+0x56>
	{
		delay->running = false;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	721a      	strb	r2, [r3, #8]
		return true;
 8001026:	2301      	movs	r3, #1
 8001028:	e000      	b.n	800102c <delayRead+0x58>
	}
		
	return false;
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <display_Send4bitsCmd>:
                                            if (x != DISPLAY_OK) { return x; } \
                                        } while(0U)

/* Private functions ---------------------------------------------------------*/
static display_Status_t display_Send4bitsCmd(uint8_t value, display_RsType_t rs_type, bool bck_enable)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af02      	add	r7, sp, #8
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
 800103e:	460b      	mov	r3, r1
 8001040:	71bb      	strb	r3, [r7, #6]
 8001042:	4613      	mov	r3, r2
 8001044:	717b      	strb	r3, [r7, #5]
    uint8_t cmd = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]
    // E = enable bit
    // B = enable backlight bit
    // R (R/W) = read/write bit
    // T (RS) = data or control bit
    // DDDDEBRT
    HAL_Delay(DELAY_1MS);
 800104a:	2001      	movs	r0, #1
 800104c:	f000 fefa 	bl	8001e44 <HAL_Delay>
    if (bck_enable) {
 8001050:	797b      	ldrb	r3, [r7, #5]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d030      	beq.n	80010b8 <display_Send4bitsCmd+0x84>
        cmd = value | BIT_BACKLIGHT | BIT_ENABLE | rs_type;
 8001056:	79fa      	ldrb	r2, [r7, #7]
 8001058:	79bb      	ldrb	r3, [r7, #6]
 800105a:	4313      	orrs	r3, r2
 800105c:	b2db      	uxtb	r3, r3
 800105e:	f043 030c 	orr.w	r3, r3, #12
 8001062:	b2db      	uxtb	r3, r3
 8001064:	73fb      	strb	r3, [r7, #15]
        CHECK_I2C(display_TransmitData(cmd));
 8001066:	f107 020f 	add.w	r2, r7, #15
 800106a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2301      	movs	r3, #1
 8001072:	214e      	movs	r1, #78	; 0x4e
 8001074:	482a      	ldr	r0, [pc, #168]	; (8001120 <display_Send4bitsCmd+0xec>)
 8001076:	f001 fb3d 	bl	80026f4 <HAL_I2C_Master_Transmit>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <display_Send4bitsCmd+0x50>
 8001080:	2302      	movs	r3, #2
 8001082:	e048      	b.n	8001116 <display_Send4bitsCmd+0xe2>
        HAL_Delay(DELAY_1MS);
 8001084:	2001      	movs	r0, #1
 8001086:	f000 fedd 	bl	8001e44 <HAL_Delay>
        cmd = value | BIT_BACKLIGHT | rs_type;
 800108a:	79fa      	ldrb	r2, [r7, #7]
 800108c:	79bb      	ldrb	r3, [r7, #6]
 800108e:	4313      	orrs	r3, r2
 8001090:	b2db      	uxtb	r3, r3
 8001092:	f043 0308 	orr.w	r3, r3, #8
 8001096:	b2db      	uxtb	r3, r3
 8001098:	73fb      	strb	r3, [r7, #15]
        CHECK_I2C(display_TransmitData(cmd));
 800109a:	f107 020f 	add.w	r2, r7, #15
 800109e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2301      	movs	r3, #1
 80010a6:	214e      	movs	r1, #78	; 0x4e
 80010a8:	481d      	ldr	r0, [pc, #116]	; (8001120 <display_Send4bitsCmd+0xec>)
 80010aa:	f001 fb23 	bl	80026f4 <HAL_I2C_Master_Transmit>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d02f      	beq.n	8001114 <display_Send4bitsCmd+0xe0>
 80010b4:	2302      	movs	r3, #2
 80010b6:	e02e      	b.n	8001116 <display_Send4bitsCmd+0xe2>
    } else {
        cmd = value | BIT_ENABLE | rs_type;
 80010b8:	79fa      	ldrb	r2, [r7, #7]
 80010ba:	79bb      	ldrb	r3, [r7, #6]
 80010bc:	4313      	orrs	r3, r2
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	73fb      	strb	r3, [r7, #15]
        CHECK_I2C(display_TransmitData(cmd));
 80010c8:	f107 020f 	add.w	r2, r7, #15
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2301      	movs	r3, #1
 80010d4:	214e      	movs	r1, #78	; 0x4e
 80010d6:	4812      	ldr	r0, [pc, #72]	; (8001120 <display_Send4bitsCmd+0xec>)
 80010d8:	f001 fb0c 	bl	80026f4 <HAL_I2C_Master_Transmit>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <display_Send4bitsCmd+0xb2>
 80010e2:	2302      	movs	r3, #2
 80010e4:	e017      	b.n	8001116 <display_Send4bitsCmd+0xe2>
        HAL_Delay(DELAY_1MS);
 80010e6:	2001      	movs	r0, #1
 80010e8:	f000 feac 	bl	8001e44 <HAL_Delay>
        cmd = value | rs_type;
 80010ec:	79fa      	ldrb	r2, [r7, #7]
 80010ee:	79bb      	ldrb	r3, [r7, #6]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	73fb      	strb	r3, [r7, #15]
        CHECK_I2C(display_TransmitData(cmd));
 80010f6:	f107 020f 	add.w	r2, r7, #15
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2301      	movs	r3, #1
 8001102:	214e      	movs	r1, #78	; 0x4e
 8001104:	4806      	ldr	r0, [pc, #24]	; (8001120 <display_Send4bitsCmd+0xec>)
 8001106:	f001 faf5 	bl	80026f4 <HAL_I2C_Master_Transmit>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <display_Send4bitsCmd+0xe0>
 8001110:	2302      	movs	r3, #2
 8001112:	e000      	b.n	8001116 <display_Send4bitsCmd+0xe2>
    }

    return DISPLAY_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000098 	.word	0x20000098

08001124 <display_Send8bitsCmd>:

static display_Status_t display_Send8bitsCmd(uint8_t value, display_RsType_t rs_type, bool bck_enable)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
 800112e:	460b      	mov	r3, r1
 8001130:	71bb      	strb	r3, [r7, #6]
 8001132:	4613      	mov	r3, r2
 8001134:	717b      	strb	r3, [r7, #5]
    uint8_t cmd = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	73fb      	strb	r3, [r7, #15]
    cmd = value & HIGH_NIBBLE_MASK;
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f023 030f 	bic.w	r3, r3, #15
 8001140:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(display_Send4bitsCmd(cmd, rs_type, bck_enable));
 8001142:	797a      	ldrb	r2, [r7, #5]
 8001144:	79b9      	ldrb	r1, [r7, #6]
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff73 	bl	8001034 <display_Send4bitsCmd>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d007      	beq.n	8001164 <display_Send8bitsCmd+0x40>
 8001154:	797a      	ldrb	r2, [r7, #5]
 8001156:	79b9      	ldrb	r1, [r7, #6]
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff6a 	bl	8001034 <display_Send4bitsCmd>
 8001160:	4603      	mov	r3, r0
 8001162:	e014      	b.n	800118e <display_Send8bitsCmd+0x6a>
    cmd = value << HIGH_NIBBLE_SHIFT;
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(display_Send4bitsCmd(cmd, rs_type, bck_enable));
 800116a:	797a      	ldrb	r2, [r7, #5]
 800116c:	79b9      	ldrb	r1, [r7, #6]
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff5f 	bl	8001034 <display_Send4bitsCmd>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d007      	beq.n	800118c <display_Send8bitsCmd+0x68>
 800117c:	797a      	ldrb	r2, [r7, #5]
 800117e:	79b9      	ldrb	r1, [r7, #6]
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ff56 	bl	8001034 <display_Send4bitsCmd>
 8001188:	4603      	mov	r3, r0
 800118a:	e000      	b.n	800118e <display_Send8bitsCmd+0x6a>
    return DISPLAY_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef  GPIO_InitStruct;

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    I2Cx_SCL_GPIO_CLK_ENABLE();
 80011a0:	2300      	movs	r3, #0
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	4b22      	ldr	r3, [pc, #136]	; (8001230 <HAL_I2C_MspInit+0x98>)
 80011a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a8:	4a21      	ldr	r2, [pc, #132]	; (8001230 <HAL_I2C_MspInit+0x98>)
 80011aa:	f043 0302 	orr.w	r3, r3, #2
 80011ae:	6313      	str	r3, [r2, #48]	; 0x30
 80011b0:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <HAL_I2C_MspInit+0x98>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	693b      	ldr	r3, [r7, #16]
    I2Cx_SDA_GPIO_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <HAL_I2C_MspInit+0x98>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	4a1a      	ldr	r2, [pc, #104]	; (8001230 <HAL_I2C_MspInit+0x98>)
 80011c6:	f043 0302 	orr.w	r3, r3, #2
 80011ca:	6313      	str	r3, [r2, #48]	; 0x30
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <HAL_I2C_MspInit+0x98>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]

    /*** Configure the I2C peripheral ***/
    GPIO_InitStruct.Pin = I2Cx_SCL_PIN;
 80011d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011de:	2312      	movs	r3, #18
 80011e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
 80011ea:	2304      	movs	r3, #4
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	480f      	ldr	r0, [pc, #60]	; (8001234 <HAL_I2C_MspInit+0x9c>)
 80011f6:	f000 ff5b 	bl	80020b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2Cx_SDA_PIN;
 80011fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	480b      	ldr	r0, [pc, #44]	; (8001234 <HAL_I2C_MspInit+0x9c>)
 8001208:	f000 ff52 	bl	80020b0 <HAL_GPIO_Init>

    /* Enable I2C clock */
    I2Cx_CLK_ENABLE();
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <HAL_I2C_MspInit+0x98>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	4a06      	ldr	r2, [pc, #24]	; (8001230 <HAL_I2C_MspInit+0x98>)
 8001216:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800121a:	6413      	str	r3, [r2, #64]	; 0x40
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <HAL_I2C_MspInit+0x98>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	68bb      	ldr	r3, [r7, #8]
}
 8001228:	bf00      	nop
 800122a:	3728      	adds	r7, #40	; 0x28
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40023800 	.word	0x40023800
 8001234:	40020400 	.word	0x40020400

08001238 <myI2Cx_Init>:

static display_Status_t myI2Cx_Init()
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2Cx;
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <myI2Cx_Init+0x54>)
 800123e:	4a14      	ldr	r2, [pc, #80]	; (8001290 <myI2Cx_Init+0x58>)
 8001240:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = I2C_CLOCK_RATE;
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <myI2Cx_Init+0x54>)
 8001244:	4a13      	ldr	r2, [pc, #76]	; (8001294 <myI2Cx_Init+0x5c>)
 8001246:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001248:	4b10      	ldr	r3, [pc, #64]	; (800128c <myI2Cx_Init+0x54>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 800124e:	4b0f      	ldr	r3, [pc, #60]	; (800128c <myI2Cx_Init+0x54>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001254:	4b0d      	ldr	r3, [pc, #52]	; (800128c <myI2Cx_Init+0x54>)
 8001256:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800125a:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <myI2Cx_Init+0x54>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001262:	4b0a      	ldr	r3, [pc, #40]	; (800128c <myI2Cx_Init+0x54>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <myI2Cx_Init+0x54>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800126e:	4b07      	ldr	r3, [pc, #28]	; (800128c <myI2Cx_Init+0x54>)
 8001270:	2200      	movs	r2, #0
 8001272:	621a      	str	r2, [r3, #32]

    CHECK_I2C(HAL_I2C_Init(&hi2c1));
 8001274:	4805      	ldr	r0, [pc, #20]	; (800128c <myI2Cx_Init+0x54>)
 8001276:	f001 f8f9 	bl	800246c <HAL_I2C_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <myI2Cx_Init+0x4c>
 8001280:	2302      	movs	r3, #2
 8001282:	e000      	b.n	8001286 <myI2Cx_Init+0x4e>

    return DISPLAY_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000098 	.word	0x20000098
 8001290:	40005400 	.word	0x40005400
 8001294:	000186a0 	.word	0x000186a0

08001298 <display_Init>:

/* Public functions ----------------------------------------------------------*/
display_Status_t display_Init()
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
    CHECK_INTERNAL(myI2Cx_Init());
 800129c:	f7ff ffcc 	bl	8001238 <myI2Cx_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <display_Init+0x16>
 80012a6:	f7ff ffc7 	bl	8001238 <myI2Cx_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	e090      	b.n	80013d0 <display_Init+0x138>

    // Initialization sequence recommended by the datasheet
    HAL_Delay(DELAY_20MS);
 80012ae:	2014      	movs	r0, #20
 80012b0:	f000 fdc8 	bl	8001e44 <HAL_Delay>
    // 0x3c - 0x38
    CHECK_INTERNAL(display_Send4bitsControlCmd(CMD_INIT_1, false));
 80012b4:	2200      	movs	r2, #0
 80012b6:	2100      	movs	r1, #0
 80012b8:	2030      	movs	r0, #48	; 0x30
 80012ba:	f7ff febb 	bl	8001034 <display_Send4bitsCmd>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d006      	beq.n	80012d2 <display_Init+0x3a>
 80012c4:	2200      	movs	r2, #0
 80012c6:	2100      	movs	r1, #0
 80012c8:	2030      	movs	r0, #48	; 0x30
 80012ca:	f7ff feb3 	bl	8001034 <display_Send4bitsCmd>
 80012ce:	4603      	mov	r3, r0
 80012d0:	e07e      	b.n	80013d0 <display_Init+0x138>
    HAL_Delay(DELAY_10MS);
 80012d2:	200a      	movs	r0, #10
 80012d4:	f000 fdb6 	bl	8001e44 <HAL_Delay>
    // 0x3c - 0x38
    CHECK_INTERNAL(display_Send4bitsControlCmd(CMD_INIT_1, false));
 80012d8:	2200      	movs	r2, #0
 80012da:	2100      	movs	r1, #0
 80012dc:	2030      	movs	r0, #48	; 0x30
 80012de:	f7ff fea9 	bl	8001034 <display_Send4bitsCmd>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d006      	beq.n	80012f6 <display_Init+0x5e>
 80012e8:	2200      	movs	r2, #0
 80012ea:	2100      	movs	r1, #0
 80012ec:	2030      	movs	r0, #48	; 0x30
 80012ee:	f7ff fea1 	bl	8001034 <display_Send4bitsCmd>
 80012f2:	4603      	mov	r3, r0
 80012f4:	e06c      	b.n	80013d0 <display_Init+0x138>
    HAL_Delay(DELAY_1MS);
 80012f6:	2001      	movs	r0, #1
 80012f8:	f000 fda4 	bl	8001e44 <HAL_Delay>
    // 0x3c - 0x38
    CHECK_INTERNAL(display_Send4bitsControlCmd(CMD_INIT_1, false));
 80012fc:	2200      	movs	r2, #0
 80012fe:	2100      	movs	r1, #0
 8001300:	2030      	movs	r0, #48	; 0x30
 8001302:	f7ff fe97 	bl	8001034 <display_Send4bitsCmd>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d006      	beq.n	800131a <display_Init+0x82>
 800130c:	2200      	movs	r2, #0
 800130e:	2100      	movs	r1, #0
 8001310:	2030      	movs	r0, #48	; 0x30
 8001312:	f7ff fe8f 	bl	8001034 <display_Send4bitsCmd>
 8001316:	4603      	mov	r3, r0
 8001318:	e05a      	b.n	80013d0 <display_Init+0x138>
    // 0x2c - 0x28
    CHECK_INTERNAL(display_Send4bitsControlCmd(CMD_INIT_2, false));
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	2020      	movs	r0, #32
 8001320:	f7ff fe88 	bl	8001034 <display_Send4bitsCmd>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d006      	beq.n	8001338 <display_Init+0xa0>
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	2020      	movs	r0, #32
 8001330:	f7ff fe80 	bl	8001034 <display_Send4bitsCmd>
 8001334:	4603      	mov	r3, r0
 8001336:	e04b      	b.n	80013d0 <display_Init+0x138>

    // Custom settings
    CHECK_INTERNAL(display_Send8bitsControlCmd(CMD_FUNCTION_SET_4B_2L, false));
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	2028      	movs	r0, #40	; 0x28
 800133e:	f7ff fef1 	bl	8001124 <display_Send8bitsCmd>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d006      	beq.n	8001356 <display_Init+0xbe>
 8001348:	2200      	movs	r2, #0
 800134a:	2100      	movs	r1, #0
 800134c:	2028      	movs	r0, #40	; 0x28
 800134e:	f7ff fee9 	bl	8001124 <display_Send8bitsCmd>
 8001352:	4603      	mov	r3, r0
 8001354:	e03c      	b.n	80013d0 <display_Init+0x138>
    CHECK_INTERNAL(display_Send8bitsControlCmd(INSTR_DISPLAY_CONTROL, false));
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	2008      	movs	r0, #8
 800135c:	f7ff fee2 	bl	8001124 <display_Send8bitsCmd>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d006      	beq.n	8001374 <display_Init+0xdc>
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	2008      	movs	r0, #8
 800136c:	f7ff feda 	bl	8001124 <display_Send8bitsCmd>
 8001370:	4603      	mov	r3, r0
 8001372:	e02d      	b.n	80013d0 <display_Init+0x138>
    CHECK_INTERNAL(display_Send8bitsControlCmd(INSTR_RETURN_HOME, false));
 8001374:	2200      	movs	r2, #0
 8001376:	2100      	movs	r1, #0
 8001378:	2002      	movs	r0, #2
 800137a:	f7ff fed3 	bl	8001124 <display_Send8bitsCmd>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d006      	beq.n	8001392 <display_Init+0xfa>
 8001384:	2200      	movs	r2, #0
 8001386:	2100      	movs	r1, #0
 8001388:	2002      	movs	r0, #2
 800138a:	f7ff fecb 	bl	8001124 <display_Send8bitsCmd>
 800138e:	4603      	mov	r3, r0
 8001390:	e01e      	b.n	80013d0 <display_Init+0x138>
    CHECK_INTERNAL(display_Send8bitsControlCmd(CMD_ENTRY_MODE_INCREMENT, false));
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	2006      	movs	r0, #6
 8001398:	f7ff fec4 	bl	8001124 <display_Send8bitsCmd>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d006      	beq.n	80013b0 <display_Init+0x118>
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	2006      	movs	r0, #6
 80013a8:	f7ff febc 	bl	8001124 <display_Send8bitsCmd>
 80013ac:	4603      	mov	r3, r0
 80013ae:	e00f      	b.n	80013d0 <display_Init+0x138>
    CHECK_INTERNAL(display_Send8bitsControlCmd(INSTR_CLR_DISPLAY, false));
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	2001      	movs	r0, #1
 80013b6:	f7ff feb5 	bl	8001124 <display_Send8bitsCmd>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d006      	beq.n	80013ce <display_Init+0x136>
 80013c0:	2200      	movs	r2, #0
 80013c2:	2100      	movs	r1, #0
 80013c4:	2001      	movs	r0, #1
 80013c6:	f7ff fead 	bl	8001124 <display_Send8bitsCmd>
 80013ca:	4603      	mov	r3, r0
 80013cc:	e000      	b.n	80013d0 <display_Init+0x138>

    return DISPLAY_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <display_Clear>:

display_Status_t display_Clear()
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
    CHECK_INTERNAL(display_Send8bitsControlCmd(INSTR_CLR_DISPLAY, true));
 80013d8:	2201      	movs	r2, #1
 80013da:	2100      	movs	r1, #0
 80013dc:	2001      	movs	r0, #1
 80013de:	f7ff fea1 	bl	8001124 <display_Send8bitsCmd>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d006      	beq.n	80013f6 <display_Clear+0x22>
 80013e8:	2201      	movs	r2, #1
 80013ea:	2100      	movs	r1, #0
 80013ec:	2001      	movs	r0, #1
 80013ee:	f7ff fe99 	bl	8001124 <display_Send8bitsCmd>
 80013f2:	4603      	mov	r3, r0
 80013f4:	e003      	b.n	80013fe <display_Clear+0x2a>
    HAL_Delay(DELAY_2MS);
 80013f6:	2002      	movs	r0, #2
 80013f8:	f000 fd24 	bl	8001e44 <HAL_Delay>
    return DISPLAY_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	bd80      	pop	{r7, pc}

08001402 <display_PrintChar>:

display_Status_t display_PrintChar(uint8_t ch)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
    CHECK_INTERNAL(display_Send8bitsDataCmd(ch));
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	2201      	movs	r2, #1
 8001410:	2101      	movs	r1, #1
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fe86 	bl	8001124 <display_Send8bitsCmd>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d007      	beq.n	800142e <display_PrintChar+0x2c>
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	2201      	movs	r2, #1
 8001422:	2101      	movs	r1, #1
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fe7d 	bl	8001124 <display_Send8bitsCmd>
 800142a:	4603      	mov	r3, r0
 800142c:	e000      	b.n	8001430 <display_PrintChar+0x2e>
    return DISPLAY_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <display_PrintStringInTopLine>:

display_Status_t display_PrintStringInTopLine(uint8_t * buf)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
    CHECK_NULL(buf);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <display_PrintStringInTopLine+0x12>
 8001446:	2301      	movs	r3, #1
 8001448:	e031      	b.n	80014ae <display_PrintStringInTopLine+0x76>

    CHECK_INTERNAL(display_Send8bitsControlCmd(CMD_SET_CURSOR_LINE1, true));
 800144a:	2201      	movs	r2, #1
 800144c:	2100      	movs	r1, #0
 800144e:	2080      	movs	r0, #128	; 0x80
 8001450:	f7ff fe68 	bl	8001124 <display_Send8bitsCmd>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d006      	beq.n	8001468 <display_PrintStringInTopLine+0x30>
 800145a:	2201      	movs	r2, #1
 800145c:	2100      	movs	r1, #0
 800145e:	2080      	movs	r0, #128	; 0x80
 8001460:	f7ff fe60 	bl	8001124 <display_Send8bitsCmd>
 8001464:	4603      	mov	r3, r0
 8001466:	e022      	b.n	80014ae <display_PrintStringInTopLine+0x76>

    for (int i = 0; i < MAX_CHAR_PER_LINE && buf[i] != '\0'; i++) {
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	e015      	b.n	800149a <display_PrintStringInTopLine+0x62>
        CHECK_INTERNAL(display_PrintChar(buf[i]));
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	4413      	add	r3, r2
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff ffc3 	bl	8001402 <display_PrintChar>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d008      	beq.n	8001494 <display_PrintStringInTopLine+0x5c>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	4413      	add	r3, r2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ffb9 	bl	8001402 <display_PrintChar>
 8001490:	4603      	mov	r3, r0
 8001492:	e00c      	b.n	80014ae <display_PrintStringInTopLine+0x76>
    for (int i = 0; i < MAX_CHAR_PER_LINE && buf[i] != '\0'; i++) {
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	3301      	adds	r3, #1
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2b0f      	cmp	r3, #15
 800149e:	dc05      	bgt.n	80014ac <display_PrintStringInTopLine+0x74>
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1e0      	bne.n	800146e <display_PrintStringInTopLine+0x36>
    }

    return DISPLAY_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <display_PrintStringInBottomLine>:

display_Status_t display_PrintStringInBottomLine(uint8_t * buf)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b084      	sub	sp, #16
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
    CHECK_NULL(buf);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <display_PrintStringInBottomLine+0x12>
 80014c4:	2301      	movs	r3, #1
 80014c6:	e031      	b.n	800152c <display_PrintStringInBottomLine+0x76>

    CHECK_INTERNAL(display_Send8bitsControlCmd(CMD_SET_CURSOR_LINE2, true));
 80014c8:	2201      	movs	r2, #1
 80014ca:	2100      	movs	r1, #0
 80014cc:	20c0      	movs	r0, #192	; 0xc0
 80014ce:	f7ff fe29 	bl	8001124 <display_Send8bitsCmd>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d006      	beq.n	80014e6 <display_PrintStringInBottomLine+0x30>
 80014d8:	2201      	movs	r2, #1
 80014da:	2100      	movs	r1, #0
 80014dc:	20c0      	movs	r0, #192	; 0xc0
 80014de:	f7ff fe21 	bl	8001124 <display_Send8bitsCmd>
 80014e2:	4603      	mov	r3, r0
 80014e4:	e022      	b.n	800152c <display_PrintStringInBottomLine+0x76>

    for (int i = 0; i < MAX_CHAR_PER_LINE && buf[i] != '\0'; i++) {
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	e015      	b.n	8001518 <display_PrintStringInBottomLine+0x62>
        CHECK_INTERNAL(display_PrintChar(buf[i]));
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff84 	bl	8001402 <display_PrintChar>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d008      	beq.n	8001512 <display_PrintStringInBottomLine+0x5c>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff7a 	bl	8001402 <display_PrintChar>
 800150e:	4603      	mov	r3, r0
 8001510:	e00c      	b.n	800152c <display_PrintStringInBottomLine+0x76>
    for (int i = 0; i < MAX_CHAR_PER_LINE && buf[i] != '\0'; i++) {
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	3301      	adds	r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b0f      	cmp	r3, #15
 800151c:	dc05      	bgt.n	800152a <display_PrintStringInBottomLine+0x74>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	4413      	add	r3, r2
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1e0      	bne.n	80014ec <display_PrintStringInBottomLine+0x36>
    }

    return DISPLAY_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <display_TurnOn>:

display_Status_t display_TurnOn()
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
    CHECK_INTERNAL(display_Send8bitsControlCmd(CMD_TURN_ON_DISPLAY, true));
 8001538:	2201      	movs	r2, #1
 800153a:	2100      	movs	r1, #0
 800153c:	200c      	movs	r0, #12
 800153e:	f7ff fdf1 	bl	8001124 <display_Send8bitsCmd>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d006      	beq.n	8001556 <display_TurnOn+0x22>
 8001548:	2201      	movs	r2, #1
 800154a:	2100      	movs	r1, #0
 800154c:	200c      	movs	r0, #12
 800154e:	f7ff fde9 	bl	8001124 <display_Send8bitsCmd>
 8001552:	4603      	mov	r3, r0
 8001554:	e003      	b.n	800155e <display_TurnOn+0x2a>
    display_state = TURN_ON;
 8001556:	4b03      	ldr	r3, [pc, #12]	; (8001564 <display_TurnOn+0x30>)
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
    return DISPLAY_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200000ec 	.word	0x200000ec

08001568 <display_TurnOff>:

display_Status_t display_TurnOff()
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
    CHECK_INTERNAL(display_Send8bitsControlCmd(CMD_TURN_OFF_DISPLAY, false));
 800156c:	2200      	movs	r2, #0
 800156e:	2100      	movs	r1, #0
 8001570:	2008      	movs	r0, #8
 8001572:	f7ff fdd7 	bl	8001124 <display_Send8bitsCmd>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d006      	beq.n	800158a <display_TurnOff+0x22>
 800157c:	2200      	movs	r2, #0
 800157e:	2100      	movs	r1, #0
 8001580:	2008      	movs	r0, #8
 8001582:	f7ff fdcf 	bl	8001124 <display_Send8bitsCmd>
 8001586:	4603      	mov	r3, r0
 8001588:	e003      	b.n	8001592 <display_TurnOff+0x2a>
    display_state = TURN_OFF;
 800158a:	4b03      	ldr	r3, [pc, #12]	; (8001598 <display_TurnOff+0x30>)
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
    return DISPLAY_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200000ec 	.word	0x200000ec

0800159c <display_GetState>:

display_State_t display_GetState()
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
    return display_state;
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <display_GetState+0x14>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	200000ec 	.word	0x200000ec
 80015b4:	00000000 	.word	0x00000000

080015b8 <HAL_TIM_IC_CaptureCallback>:
uint32_t Difference = 0;
uint8_t Is_First_Captured = 0;  // is the first value captured ?
uint8_t Distance  = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	7f1b      	ldrb	r3, [r3, #28]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	f040 808c 	bne.w	80016e2 <HAL_TIM_IC_CaptureCallback+0x12a>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 80015ca:	4b4b      	ldr	r3, [pc, #300]	; (80016f8 <HAL_TIM_IC_CaptureCallback+0x140>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d11a      	bne.n	8001608 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80015d2:	2100      	movs	r1, #0
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f002 fb4f 	bl	8003c78 <HAL_TIM_ReadCapturedValue>
 80015da:	4603      	mov	r3, r0
 80015dc:	4a47      	ldr	r2, [pc, #284]	; (80016fc <HAL_TIM_IC_CaptureCallback+0x144>)
 80015de:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80015e0:	4b45      	ldr	r3, [pc, #276]	; (80016f8 <HAL_TIM_IC_CaptureCallback+0x140>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6a1a      	ldr	r2, [r3, #32]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 020a 	bic.w	r2, r2, #10
 80015f4:	621a      	str	r2, [r3, #32]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6a1a      	ldr	r2, [r3, #32]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f042 0202 	orr.w	r2, r2, #2
 8001604:	621a      	str	r2, [r3, #32]

            measuring = false;
            hcsr04_IRQ_Callback(Distance);
		}
	}
}
 8001606:	e06c      	b.n	80016e2 <HAL_TIM_IC_CaptureCallback+0x12a>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001608:	4b3b      	ldr	r3, [pc, #236]	; (80016f8 <HAL_TIM_IC_CaptureCallback+0x140>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d168      	bne.n	80016e2 <HAL_TIM_IC_CaptureCallback+0x12a>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001610:	2100      	movs	r1, #0
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f002 fb30 	bl	8003c78 <HAL_TIM_ReadCapturedValue>
 8001618:	4603      	mov	r3, r0
 800161a:	4a39      	ldr	r2, [pc, #228]	; (8001700 <HAL_TIM_IC_CaptureCallback+0x148>)
 800161c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2200      	movs	r2, #0
 8001624:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8001626:	4b36      	ldr	r3, [pc, #216]	; (8001700 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	4b34      	ldr	r3, [pc, #208]	; (80016fc <HAL_TIM_IC_CaptureCallback+0x144>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d907      	bls.n	8001642 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8001632:	4b33      	ldr	r3, [pc, #204]	; (8001700 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4b31      	ldr	r3, [pc, #196]	; (80016fc <HAL_TIM_IC_CaptureCallback+0x144>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	4a31      	ldr	r2, [pc, #196]	; (8001704 <HAL_TIM_IC_CaptureCallback+0x14c>)
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	e00f      	b.n	8001662 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8001642:	4b2e      	ldr	r3, [pc, #184]	; (80016fc <HAL_TIM_IC_CaptureCallback+0x144>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	4b2e      	ldr	r3, [pc, #184]	; (8001700 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d909      	bls.n	8001662 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 800164e:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <HAL_TIM_IC_CaptureCallback+0x144>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800165c:	33ff      	adds	r3, #255	; 0xff
 800165e:	4a29      	ldr	r2, [pc, #164]	; (8001704 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001660:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8001662:	4b28      	ldr	r3, [pc, #160]	; (8001704 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff5c 	bl	8000524 <__aeabi_ui2d>
 800166c:	a320      	add	r3, pc, #128	; (adr r3, 80016f0 <HAL_TIM_IC_CaptureCallback+0x138>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	f7fe ffd1 	bl	8000618 <__aeabi_dmul>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001686:	f7ff f8f1 	bl	800086c <__aeabi_ddiv>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4610      	mov	r0, r2
 8001690:	4619      	mov	r1, r3
 8001692:	f7ff fa5b 	bl	8000b4c <__aeabi_d2uiz>
 8001696:	4603      	mov	r3, r0
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_TIM_IC_CaptureCallback+0x150>)
 800169c:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_TIM_IC_CaptureCallback+0x140>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6a1a      	ldr	r2, [r3, #32]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 020a 	bic.w	r2, r2, #10
 80016b2:	621a      	str	r2, [r3, #32]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6a12      	ldr	r2, [r2, #32]
 80016be:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_TIM_IC_CaptureCallback+0x154>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68da      	ldr	r2, [r3, #12]
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <HAL_TIM_IC_CaptureCallback+0x154>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0202 	bic.w	r2, r2, #2
 80016ce:	60da      	str	r2, [r3, #12]
            measuring = false;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_TIM_IC_CaptureCallback+0x158>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
            hcsr04_IRQ_Callback(Distance);
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <HAL_TIM_IC_CaptureCallback+0x150>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4618      	mov	r0, r3
 80016de:	f003 fa69 	bl	8004bb4 <hcsr04_IRQ_Callback>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	f3af 8000 	nop.w
 80016f0:	b020c49c 	.word	0xb020c49c
 80016f4:	3fa16872 	.word	0x3fa16872
 80016f8:	20000148 	.word	0x20000148
 80016fc:	2000013c 	.word	0x2000013c
 8001700:	20000140 	.word	0x20000140
 8001704:	20000144 	.word	0x20000144
 8001708:	20000149 	.word	0x20000149
 800170c:	200000f0 	.word	0x200000f0
 8001710:	20000138 	.word	0x20000138

08001714 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
    if(htim_ic->Instance==hcsr04_TIMER)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a1d      	ldr	r2, [pc, #116]	; (80017a8 <HAL_TIM_IC_MspInit+0x94>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d134      	bne.n	80017a0 <HAL_TIM_IC_MspInit+0x8c>
    {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_TIM1_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <HAL_TIM_IC_MspInit+0x98>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	4a1b      	ldr	r2, [pc, #108]	; (80017ac <HAL_TIM_IC_MspInit+0x98>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6453      	str	r3, [r2, #68]	; 0x44
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_TIM_IC_MspInit+0x98>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]

        hcsr04_ECHO_GPIO_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <HAL_TIM_IC_MspInit+0x98>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a14      	ldr	r2, [pc, #80]	; (80017ac <HAL_TIM_IC_MspInit+0x98>)
 800175c:	f043 0310 	orr.w	r3, r3, #16
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_TIM_IC_MspInit+0x98>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
        /**TIM1 GPIO Configuration
        PE9     ------> TIM1_CH1
        */
        GPIO_InitStruct.Pin = hcsr04_ECHO_PIN;
 800176e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001772:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001780:	2301      	movs	r3, #1
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(hcsr04_ECHO_GPIO_PORT, &GPIO_InitStruct);
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4619      	mov	r1, r3
 800178a:	4809      	ldr	r0, [pc, #36]	; (80017b0 <HAL_TIM_IC_MspInit+0x9c>)
 800178c:	f000 fc90 	bl	80020b0 <HAL_GPIO_Init>

        /* TIM1 interrupt Init */
        HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001790:	2200      	movs	r2, #0
 8001792:	2100      	movs	r1, #0
 8001794:	201b      	movs	r0, #27
 8001796:	f000 fc54 	bl	8002042 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800179a:	201b      	movs	r0, #27
 800179c:	f000 fc6d 	bl	800207a <HAL_NVIC_EnableIRQ>
    }
}
 80017a0:	bf00      	nop
 80017a2:	3728      	adds	r7, #40	; 0x28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40010000 	.word	0x40010000
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40021000 	.word	0x40021000

080017b4 <myTIM_Init>:

hcsr04_Status_t myTIM_Init()
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ba:	f107 0310 	add.w	r3, r7, #16
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
    TIM_IC_InitTypeDef sConfigIC = {0};
 80017c4:	463b      	mov	r3, r7
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]

    htim1.Instance = hcsr04_TIMER;
 80017d0:	4b22      	ldr	r3, [pc, #136]	; (800185c <myTIM_Init+0xa8>)
 80017d2:	4a23      	ldr	r2, [pc, #140]	; (8001860 <myTIM_Init+0xac>)
 80017d4:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 168-1;
 80017d6:	4b21      	ldr	r3, [pc, #132]	; (800185c <myTIM_Init+0xa8>)
 80017d8:	22a7      	movs	r2, #167	; 0xa7
 80017da:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017dc:	4b1f      	ldr	r3, [pc, #124]	; (800185c <myTIM_Init+0xa8>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 0xffff-1;
 80017e2:	4b1e      	ldr	r3, [pc, #120]	; (800185c <myTIM_Init+0xa8>)
 80017e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80017e8:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ea:	4b1c      	ldr	r3, [pc, #112]	; (800185c <myTIM_Init+0xa8>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 80017f0:	4b1a      	ldr	r3, [pc, #104]	; (800185c <myTIM_Init+0xa8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f6:	4b19      	ldr	r3, [pc, #100]	; (800185c <myTIM_Init+0xa8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
    CHECK_HAL(HAL_TIM_IC_Init(&htim1));
 80017fc:	4817      	ldr	r0, [pc, #92]	; (800185c <myTIM_Init+0xa8>)
 80017fe:	f001 ff1f 	bl	8003640 <HAL_TIM_IC_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <myTIM_Init+0x58>
 8001808:	2302      	movs	r3, #2
 800180a:	e022      	b.n	8001852 <myTIM_Init+0x9e>

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180c:	2300      	movs	r3, #0
 800180e:	613b      	str	r3, [r7, #16]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
    CHECK_HAL(HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig));
 8001814:	f107 0310 	add.w	r3, r7, #16
 8001818:	4619      	mov	r1, r3
 800181a:	4810      	ldr	r0, [pc, #64]	; (800185c <myTIM_Init+0xa8>)
 800181c:	f002 fc88 	bl	8004130 <HAL_TIMEx_MasterConfigSynchronization>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <myTIM_Init+0x76>
 8001826:	2302      	movs	r3, #2
 8001828:	e013      	b.n	8001852 <myTIM_Init+0x9e>

    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800182a:	2300      	movs	r3, #0
 800182c:	603b      	str	r3, [r7, #0]
    sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800182e:	2301      	movs	r3, #1
 8001830:	607b      	str	r3, [r7, #4]
    sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
    sConfigIC.ICFilter = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
    CHECK_HAL(HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1));
 800183a:	463b      	mov	r3, r7
 800183c:	2200      	movs	r2, #0
 800183e:	4619      	mov	r1, r3
 8001840:	4806      	ldr	r0, [pc, #24]	; (800185c <myTIM_Init+0xa8>)
 8001842:	f002 f97d 	bl	8003b40 <HAL_TIM_IC_ConfigChannel>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <myTIM_Init+0x9c>
 800184c:	2302      	movs	r3, #2
 800184e:	e000      	b.n	8001852 <myTIM_Init+0x9e>

    return HCSR04_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200000f0 	.word	0x200000f0
 8001860:	40010000 	.word	0x40010000

08001864 <myGPIO_Init>:

hcsr04_Status_t myGPIO_Init()
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]

    hcsr04_TRIG_GPIO_CLK_ENABLE();
 8001878:	2300      	movs	r3, #0
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <myGPIO_Init+0x60>)
 800187e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001880:	4a10      	ldr	r2, [pc, #64]	; (80018c4 <myGPIO_Init+0x60>)
 8001882:	f043 0310 	orr.w	r3, r3, #16
 8001886:	6313      	str	r3, [r2, #48]	; 0x30
 8001888:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <myGPIO_Init+0x60>)
 800188a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188c:	f003 0310 	and.w	r3, r3, #16
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(hcsr04_TRIG_GPIO_PORT, hcsr04_TRIG_PIN, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	2104      	movs	r1, #4
 8001898:	480b      	ldr	r0, [pc, #44]	; (80018c8 <myGPIO_Init+0x64>)
 800189a:	f000 fdcd 	bl	8002438 <HAL_GPIO_WritePin>

    /*Configure TRIG GPIO pin : PE2 */
    GPIO_InitStruct.Pin = hcsr04_TRIG_PIN;
 800189e:	2304      	movs	r3, #4
 80018a0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(hcsr04_TRIG_GPIO_PORT, &GPIO_InitStruct);
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	4619      	mov	r1, r3
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <myGPIO_Init+0x64>)
 80018b4:	f000 fbfc 	bl	80020b0 <HAL_GPIO_Init>

    return HCSR04_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40021000 	.word	0x40021000

080018cc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <TIM1_CC_IRQHandler+0x10>)
 80018d2:	f002 f82d 	bl	8003930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200000f0 	.word	0x200000f0

080018e0 <delay>:

void delay(uint16_t time)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <delay+0x30>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2200      	movs	r2, #0
 80018f0:	625a      	str	r2, [r3, #36]	; 0x24
    while(__HAL_TIM_GET_COUNTER(&htim1) < time);
 80018f2:	bf00      	nop
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <delay+0x30>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d3f9      	bcc.n	80018f4 <delay+0x14>
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	200000f0 	.word	0x200000f0

08001914 <hcsr04_Init>:

/* Public functions ----------------------------------------------------------*/
hcsr04_Status_t hcsr04_Init()
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
    myGPIO_Init();
 8001918:	f7ff ffa4 	bl	8001864 <myGPIO_Init>
    myTIM_Init();
 800191c:	f7ff ff4a 	bl	80017b4 <myTIM_Init>
    HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001920:	2100      	movs	r1, #0
 8001922:	4807      	ldr	r0, [pc, #28]	; (8001940 <hcsr04_Init+0x2c>)
 8001924:	f001 fedc 	bl	80036e0 <HAL_TIM_IC_Start_IT>
    __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <hcsr04_Init+0x2c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68da      	ldr	r2, [r3, #12]
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <hcsr04_Init+0x2c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0202 	bic.w	r2, r2, #2
 8001936:	60da      	str	r2, [r3, #12]
    return HCSR04_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200000f0 	.word	0x200000f0

08001944 <hcsr04_StartMeasure>:

hcsr04_Status_t hcsr04_StartMeasure()
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
    if (!measuring) {
 8001948:	4b10      	ldr	r3, [pc, #64]	; (800198c <hcsr04_StartMeasure+0x48>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	f083 0301 	eor.w	r3, r3, #1
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d017      	beq.n	8001986 <hcsr04_StartMeasure+0x42>
        HAL_GPIO_WritePin(hcsr04_TRIG_GPIO_PORT, hcsr04_TRIG_PIN, GPIO_PIN_SET);
 8001956:	2201      	movs	r2, #1
 8001958:	2104      	movs	r1, #4
 800195a:	480d      	ldr	r0, [pc, #52]	; (8001990 <hcsr04_StartMeasure+0x4c>)
 800195c:	f000 fd6c 	bl	8002438 <HAL_GPIO_WritePin>
        delay(10);
 8001960:	200a      	movs	r0, #10
 8001962:	f7ff ffbd 	bl	80018e0 <delay>
        HAL_GPIO_WritePin(hcsr04_TRIG_GPIO_PORT, hcsr04_TRIG_PIN, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	2104      	movs	r1, #4
 800196a:	4809      	ldr	r0, [pc, #36]	; (8001990 <hcsr04_StartMeasure+0x4c>)
 800196c:	f000 fd64 	bl	8002438 <HAL_GPIO_WritePin>
        measuring = true;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <hcsr04_StartMeasure+0x48>)
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]

        __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001976:	4b07      	ldr	r3, [pc, #28]	; (8001994 <hcsr04_StartMeasure+0x50>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <hcsr04_StartMeasure+0x50>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f042 0202 	orr.w	r2, r2, #2
 8001984:	60da      	str	r2, [r3, #12]
    }

    return HCSR04_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000138 	.word	0x20000138
 8001990:	40021000 	.word	0x40021000
 8001994:	200000f0 	.word	0x200000f0

08001998 <hcsr04_GetStatusMeasuring>:

bool hcsr04_GetStatusMeasuring()
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
    return measuring;
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <hcsr04_GetStatusMeasuring+0x14>)
 800199e:	781b      	ldrb	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20000138 	.word	0x20000138

080019b0 <reverse_Init>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
/* Public functions ----------------------------------------------------------*/
reverse_Status_t reverse_Init()
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    /* Enable the BUTTON Clock */
    REVERSE_GPIO_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	603b      	str	r3, [r7, #0]
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <reverse_Init+0x4c>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a0f      	ldr	r2, [pc, #60]	; (80019fc <reverse_Init+0x4c>)
 80019c0:	f043 0304 	orr.w	r3, r3, #4
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <reverse_Init+0x4c>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]

    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = REVERSE_PIN;
 80019d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019dc:	2302      	movs	r3, #2
 80019de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80019e0:	2302      	movs	r3, #2
 80019e2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(REVERSE_GPIO_PORT, &GPIO_InitStruct);
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	4619      	mov	r1, r3
 80019e8:	4805      	ldr	r0, [pc, #20]	; (8001a00 <reverse_Init+0x50>)
 80019ea:	f000 fb61 	bl	80020b0 <HAL_GPIO_Init>

    debounceFSM_init();
 80019ee:	f7ff fa4b 	bl	8000e88 <debounceFSM_init>

    return REVERSE_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020800 	.word	0x40020800

08001a04 <reverse_GetState>:

    return REVERSE_OK;
}

uint32_t reverse_GetState()
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
    debounceFSM_update();
 8001a08:	f7ff fa52 	bl	8000eb0 <debounceFSM_update>
    return readKey();
 8001a0c:	f7ff fab6 	bl	8000f7c <readKey>
 8001a10:	4603      	mov	r3, r0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	; 0x28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef  GPIO_InitStruct;

    if(huart->Instance == USARTx) {
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a26      	ldr	r2, [pc, #152]	; (8001ac0 <HAL_UART_MspInit+0xa8>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d145      	bne.n	8001ab6 <HAL_UART_MspInit+0x9e>
        /* Enable GPIO TX/RX clock */
        USARTx_TX_GPIO_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <HAL_UART_MspInit+0xac>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a24      	ldr	r2, [pc, #144]	; (8001ac4 <HAL_UART_MspInit+0xac>)
 8001a34:	f043 0308 	orr.w	r3, r3, #8
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <HAL_UART_MspInit+0xac>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	693b      	ldr	r3, [r7, #16]
        USARTx_RX_GPIO_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <HAL_UART_MspInit+0xac>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a1d      	ldr	r2, [pc, #116]	; (8001ac4 <HAL_UART_MspInit+0xac>)
 8001a50:	f043 0308 	orr.w	r3, r3, #8
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <HAL_UART_MspInit+0xac>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]

        /* Enable USARTx clock */
        USARTx_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <HAL_UART_MspInit+0xac>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	4a16      	ldr	r2, [pc, #88]	; (8001ac4 <HAL_UART_MspInit+0xac>)
 8001a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a70:	6413      	str	r3, [r2, #64]	; 0x40
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <HAL_UART_MspInit+0xac>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]

        /* UART TX GPIO pin configuration  */
        GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8001a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a82:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001a90:	2307      	movs	r3, #7
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24

        HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480b      	ldr	r0, [pc, #44]	; (8001ac8 <HAL_UART_MspInit+0xb0>)
 8001a9c:	f000 fb08 	bl	80020b0 <HAL_GPIO_Init>

        /* UART RX GPIO pin configuration  */
        GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aa4:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8001aa6:	2307      	movs	r3, #7
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24

        HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <HAL_UART_MspInit+0xb0>)
 8001ab2:	f000 fafd 	bl	80020b0 <HAL_GPIO_Init>
    }
}
 8001ab6:	bf00      	nop
 8001ab8:	3728      	adds	r7, #40	; 0x28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40004800 	.word	0x40004800
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020c00 	.word	0x40020c00

08001acc <myUART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static uart_Status_t myUART_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
    huart3.Instance        = USART3;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <myUART_Init+0x4c>)
 8001ad2:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <myUART_Init+0x50>)
 8001ad4:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate   = 115200;
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <myUART_Init+0x4c>)
 8001ad8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001adc:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <myUART_Init+0x4c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits   = UART_STOPBITS_1;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <myUART_Init+0x4c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity     = UART_PARITY_NONE;
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <myUART_Init+0x4c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
    huart3.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <myUART_Init+0x4c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	619a      	str	r2, [r3, #24]
    huart3.Init.Mode       = UART_MODE_TX_RX;
 8001af6:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <myUART_Init+0x4c>)
 8001af8:	220c      	movs	r2, #12
 8001afa:	615a      	str	r2, [r3, #20]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <myUART_Init+0x4c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
    CHECK_HAL(HAL_UART_Init(&huart3));
 8001b02:	4805      	ldr	r0, [pc, #20]	; (8001b18 <myUART_Init+0x4c>)
 8001b04:	f002 fba4 	bl	8004250 <HAL_UART_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <myUART_Init+0x46>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e000      	b.n	8001b14 <myUART_Init+0x48>

    return UART_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	2000014c 	.word	0x2000014c
 8001b1c:	40004800 	.word	0x40004800

08001b20 <calculateStringLength>:
 * @brief  This function calculates the string length
 * @param  uint8_t* The string to calculate
 * @retval uint8_t The string length
 */
static uint8_t calculateStringLength(uint8_t * pString)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
    if (pString == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <calculateStringLength+0x12>
    {
        return 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	e00c      	b.n	8001b4c <calculateStringLength+0x2c>
    }

    uint8_t i = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	73fb      	strb	r3, [r7, #15]
    while (pString[i] != '\0')
 8001b36:	e002      	b.n	8001b3e <calculateStringLength+0x1e>
    {
        i++;
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	73fb      	strb	r3, [r7, #15]
    while (pString[i] != '\0')
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	4413      	add	r3, r2
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f6      	bne.n	8001b38 <calculateStringLength+0x18>
    }
    return i;
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <uart_Init>:

/* Public functions ---------------------------------------------------------*/
uart_Status_t uart_Init()
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
    myUART_Init();
 8001b5c:	f7ff ffb6 	bl	8001acc <myUART_Init>

    uart_SendStringSize((uint8_t *)welcome_msg, strlen(welcome_msg));
 8001b60:	2123      	movs	r1, #35	; 0x23
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <uart_Init+0x20>)
 8001b64:	f000 f80c 	bl	8001b80 <uart_SendStringSize>
    uart_SendStringSize((uint8_t *)info_msg, strlen(info_msg));
 8001b68:	215a      	movs	r1, #90	; 0x5a
 8001b6a:	4804      	ldr	r0, [pc, #16]	; (8001b7c <uart_Init+0x24>)
 8001b6c:	f000 f808 	bl	8001b80 <uart_SendStringSize>

    return UART_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	0800576c 	.word	0x0800576c
 8001b7c:	08005790 	.word	0x08005790

08001b80 <uart_SendStringSize>:
    CHECK_HAL(HAL_UART_Transmit(&huart3, pString, calculateStringLength(pString), HAL_MAX_DELAY));
    return UART_OK;
}

uart_Status_t uart_SendStringSize(uint8_t * pString, uint16_t size)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	807b      	strh	r3, [r7, #2]
    CHECK_NULL(pString);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <uart_SendStringSize+0x16>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e019      	b.n	8001bca <uart_SendStringSize+0x4a>

    if (size > calculateStringLength(pString))
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ffc2 	bl	8001b20 <calculateStringLength>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	887a      	ldrh	r2, [r7, #2]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d904      	bls.n	8001bb0 <uart_SendStringSize+0x30>
    {
        size = calculateStringLength(pString);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ffba 	bl	8001b20 <calculateStringLength>
 8001bac:	4603      	mov	r3, r0
 8001bae:	807b      	strh	r3, [r7, #2]
    }

    CHECK_HAL(HAL_UART_Transmit(&huart3, pString, size, HAL_MAX_DELAY));
 8001bb0:	887a      	ldrh	r2, [r7, #2]
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <uart_SendStringSize+0x54>)
 8001bba:	f002 fb96 	bl	80042ea <HAL_UART_Transmit>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <uart_SendStringSize+0x48>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e000      	b.n	8001bca <uart_SendStringSize+0x4a>
    return UART_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	2000014c 	.word	0x2000014c

08001bd8 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	4a07      	ldr	r2, [pc, #28]	; (8001c04 <BSP_LED_On+0x2c>)
 8001be6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	4a06      	ldr	r2, [pc, #24]	; (8001c08 <BSP_LED_On+0x30>)
 8001bee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f000 fc1f 	bl	8002438 <HAL_GPIO_WritePin>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000000 	.word	0x20000000
 8001c08:	080057ec 	.word	0x080057ec

08001c0c <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	4a06      	ldr	r2, [pc, #24]	; (8001c34 <BSP_PB_GetState+0x28>)
 8001c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c22:	4611      	mov	r1, r2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 fbef 	bl	8002408 <HAL_GPIO_ReadPin>
 8001c2a:	4603      	mov	r3, r0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	2000000c 	.word	0x2000000c

08001c38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c3c:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <SystemInit+0x60>)
 8001c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c42:	4a15      	ldr	r2, [pc, #84]	; (8001c98 <SystemInit+0x60>)
 8001c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001c4c:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <SystemInit+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <SystemInit+0x64>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c58:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <SystemInit+0x64>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <SystemInit+0x64>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a0e      	ldr	r2, [pc, #56]	; (8001c9c <SystemInit+0x64>)
 8001c64:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <SystemInit+0x64>)
 8001c70:	4a0b      	ldr	r2, [pc, #44]	; (8001ca0 <SystemInit+0x68>)
 8001c72:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <SystemInit+0x64>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a08      	ldr	r2, [pc, #32]	; (8001c9c <SystemInit+0x64>)
 8001c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <SystemInit+0x64>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c86:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <SystemInit+0x60>)
 8001c88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c8c:	609a      	str	r2, [r3, #8]
#endif
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	24003010 	.word	0x24003010

08001ca4 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001cb6:	e7fe      	b.n	8001cb6 <HardFault_Handler+0x4>

08001cb8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <MemManage_Handler+0x4>

08001cbe <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001cc2:	e7fe      	b.n	8001cc2 <BusFault_Handler+0x4>

08001cc4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <UsageFault_Handler+0x4>

08001cca <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001cf8:	f000 f884 	bl	8001e04 <HAL_IncTick>
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d08:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <_sbrk+0x5c>)
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <_sbrk+0x60>)
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d102      	bne.n	8001d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <_sbrk+0x64>)
 8001d1e:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <_sbrk+0x68>)
 8001d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <_sbrk+0x64>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d207      	bcs.n	8001d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d30:	f003 f890 	bl	8004e54 <__errno>
 8001d34:	4603      	mov	r3, r0
 8001d36:	220c      	movs	r2, #12
 8001d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d3e:	e009      	b.n	8001d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <_sbrk+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d46:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <_sbrk+0x64>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <_sbrk+0x64>)
 8001d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d52:	68fb      	ldr	r3, [r7, #12]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20030000 	.word	0x20030000
 8001d60:	00000400 	.word	0x00000400
 8001d64:	20000190 	.word	0x20000190
 8001d68:	20000328 	.word	0x20000328

08001d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_Init+0x34>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <HAL_Init+0x34>)
 8001d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d7a:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <HAL_Init+0x34>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a07      	ldr	r2, [pc, #28]	; (8001da0 <HAL_Init+0x34>)
 8001d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d88:	2003      	movs	r0, #3
 8001d8a:	f000 f94f 	bl	800202c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d8e:	200f      	movs	r0, #15
 8001d90:	f000 f808 	bl	8001da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d94:	f000 ffb5 	bl	8002d02 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023c00 	.word	0x40023c00

08001da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_InitTick+0x54>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_InitTick+0x58>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	4619      	mov	r1, r3
 8001db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 f967 	bl	8002096 <HAL_SYSTICK_Config>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00e      	b.n	8001df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b0f      	cmp	r3, #15
 8001dd6:	d80a      	bhi.n	8001dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001de0:	f000 f92f 	bl	8002042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de4:	4a06      	ldr	r2, [pc, #24]	; (8001e00 <HAL_InitTick+0x5c>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	e000      	b.n	8001df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000010 	.word	0x20000010
 8001dfc:	20000018 	.word	0x20000018
 8001e00:	20000014 	.word	0x20000014

08001e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_IncTick+0x20>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_IncTick+0x24>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <HAL_IncTick+0x24>)
 8001e16:	6013      	str	r3, [r2, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000018 	.word	0x20000018
 8001e28:	20000194 	.word	0x20000194

08001e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <HAL_GetTick+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000194 	.word	0x20000194

08001e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e4c:	f7ff ffee 	bl	8001e2c <HAL_GetTick>
 8001e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e5c:	d005      	beq.n	8001e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <HAL_Delay+0x44>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4413      	add	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e6a:	bf00      	nop
 8001e6c:	f7ff ffde 	bl	8001e2c <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d8f7      	bhi.n	8001e6c <HAL_Delay+0x28>
  {
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000018 	.word	0x20000018

08001e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ebe:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	60d3      	str	r3, [r2, #12]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <__NVIC_GetPriorityGrouping+0x18>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	f003 0307 	and.w	r3, r3, #7
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	db0b      	blt.n	8001f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	f003 021f 	and.w	r2, r3, #31
 8001f08:	4907      	ldr	r1, [pc, #28]	; (8001f28 <__NVIC_EnableIRQ+0x38>)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	095b      	lsrs	r3, r3, #5
 8001f10:	2001      	movs	r0, #1
 8001f12:	fa00 f202 	lsl.w	r2, r0, r2
 8001f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000e100 	.word	0xe000e100

08001f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	6039      	str	r1, [r7, #0]
 8001f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	db0a      	blt.n	8001f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	490c      	ldr	r1, [pc, #48]	; (8001f78 <__NVIC_SetPriority+0x4c>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	0112      	lsls	r2, r2, #4
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	440b      	add	r3, r1
 8001f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f54:	e00a      	b.n	8001f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4908      	ldr	r1, [pc, #32]	; (8001f7c <__NVIC_SetPriority+0x50>)
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	3b04      	subs	r3, #4
 8001f64:	0112      	lsls	r2, r2, #4
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	440b      	add	r3, r1
 8001f6a:	761a      	strb	r2, [r3, #24]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000e100 	.word	0xe000e100
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	; 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f1c3 0307 	rsb	r3, r3, #7
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	bf28      	it	cs
 8001f9e:	2304      	movcs	r3, #4
 8001fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d902      	bls.n	8001fb0 <NVIC_EncodePriority+0x30>
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3b03      	subs	r3, #3
 8001fae:	e000      	b.n	8001fb2 <NVIC_EncodePriority+0x32>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	43d9      	mvns	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	4313      	orrs	r3, r2
         );
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3724      	adds	r7, #36	; 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
	...

08001fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff8:	d301      	bcc.n	8001ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e00f      	b.n	800201e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <SysTick_Config+0x40>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3b01      	subs	r3, #1
 8002004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002006:	210f      	movs	r1, #15
 8002008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800200c:	f7ff ff8e 	bl	8001f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <SysTick_Config+0x40>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002016:	4b04      	ldr	r3, [pc, #16]	; (8002028 <SysTick_Config+0x40>)
 8002018:	2207      	movs	r2, #7
 800201a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	e000e010 	.word	0xe000e010

0800202c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ff29 	bl	8001e8c <__NVIC_SetPriorityGrouping>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002042:	b580      	push	{r7, lr}
 8002044:	b086      	sub	sp, #24
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002054:	f7ff ff3e 	bl	8001ed4 <__NVIC_GetPriorityGrouping>
 8002058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	6978      	ldr	r0, [r7, #20]
 8002060:	f7ff ff8e 	bl	8001f80 <NVIC_EncodePriority>
 8002064:	4602      	mov	r2, r0
 8002066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff5d 	bl	8001f2c <__NVIC_SetPriority>
}
 8002072:	bf00      	nop
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	4603      	mov	r3, r0
 8002082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff31 	bl	8001ef0 <__NVIC_EnableIRQ>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ffa2 	bl	8001fe8 <SysTick_Config>
 80020a4:	4603      	mov	r3, r0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b089      	sub	sp, #36	; 0x24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
 80020ca:	e177      	b.n	80023bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020cc:	2201      	movs	r2, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	f040 8166 	bne.w	80023b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d005      	beq.n	8002102 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d130      	bne.n	8002164 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	2203      	movs	r2, #3
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002138:	2201      	movs	r2, #1
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	f003 0201 	and.w	r2, r3, #1
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	2b03      	cmp	r3, #3
 800216e:	d017      	beq.n	80021a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	2203      	movs	r2, #3
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d123      	bne.n	80021f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	08da      	lsrs	r2, r3, #3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3208      	adds	r2, #8
 80021b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	220f      	movs	r2, #15
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	08da      	lsrs	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3208      	adds	r2, #8
 80021ee:	69b9      	ldr	r1, [r7, #24]
 80021f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	2203      	movs	r2, #3
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0203 	and.w	r2, r3, #3
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80c0 	beq.w	80023b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	4b66      	ldr	r3, [pc, #408]	; (80023d4 <HAL_GPIO_Init+0x324>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	4a65      	ldr	r2, [pc, #404]	; (80023d4 <HAL_GPIO_Init+0x324>)
 8002240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002244:	6453      	str	r3, [r2, #68]	; 0x44
 8002246:	4b63      	ldr	r3, [pc, #396]	; (80023d4 <HAL_GPIO_Init+0x324>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002252:	4a61      	ldr	r2, [pc, #388]	; (80023d8 <HAL_GPIO_Init+0x328>)
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	089b      	lsrs	r3, r3, #2
 8002258:	3302      	adds	r3, #2
 800225a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	220f      	movs	r2, #15
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a58      	ldr	r2, [pc, #352]	; (80023dc <HAL_GPIO_Init+0x32c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d037      	beq.n	80022ee <HAL_GPIO_Init+0x23e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a57      	ldr	r2, [pc, #348]	; (80023e0 <HAL_GPIO_Init+0x330>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d031      	beq.n	80022ea <HAL_GPIO_Init+0x23a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a56      	ldr	r2, [pc, #344]	; (80023e4 <HAL_GPIO_Init+0x334>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d02b      	beq.n	80022e6 <HAL_GPIO_Init+0x236>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a55      	ldr	r2, [pc, #340]	; (80023e8 <HAL_GPIO_Init+0x338>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d025      	beq.n	80022e2 <HAL_GPIO_Init+0x232>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a54      	ldr	r2, [pc, #336]	; (80023ec <HAL_GPIO_Init+0x33c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d01f      	beq.n	80022de <HAL_GPIO_Init+0x22e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a53      	ldr	r2, [pc, #332]	; (80023f0 <HAL_GPIO_Init+0x340>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d019      	beq.n	80022da <HAL_GPIO_Init+0x22a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a52      	ldr	r2, [pc, #328]	; (80023f4 <HAL_GPIO_Init+0x344>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d013      	beq.n	80022d6 <HAL_GPIO_Init+0x226>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a51      	ldr	r2, [pc, #324]	; (80023f8 <HAL_GPIO_Init+0x348>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00d      	beq.n	80022d2 <HAL_GPIO_Init+0x222>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a50      	ldr	r2, [pc, #320]	; (80023fc <HAL_GPIO_Init+0x34c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d007      	beq.n	80022ce <HAL_GPIO_Init+0x21e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a4f      	ldr	r2, [pc, #316]	; (8002400 <HAL_GPIO_Init+0x350>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d101      	bne.n	80022ca <HAL_GPIO_Init+0x21a>
 80022c6:	2309      	movs	r3, #9
 80022c8:	e012      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022ca:	230a      	movs	r3, #10
 80022cc:	e010      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022ce:	2308      	movs	r3, #8
 80022d0:	e00e      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022d2:	2307      	movs	r3, #7
 80022d4:	e00c      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022d6:	2306      	movs	r3, #6
 80022d8:	e00a      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022da:	2305      	movs	r3, #5
 80022dc:	e008      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022de:	2304      	movs	r3, #4
 80022e0:	e006      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022e2:	2303      	movs	r3, #3
 80022e4:	e004      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e002      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022ee:	2300      	movs	r3, #0
 80022f0:	69fa      	ldr	r2, [r7, #28]
 80022f2:	f002 0203 	and.w	r2, r2, #3
 80022f6:	0092      	lsls	r2, r2, #2
 80022f8:	4093      	lsls	r3, r2
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002300:	4935      	ldr	r1, [pc, #212]	; (80023d8 <HAL_GPIO_Init+0x328>)
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	089b      	lsrs	r3, r3, #2
 8002306:	3302      	adds	r3, #2
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800230e:	4b3d      	ldr	r3, [pc, #244]	; (8002404 <HAL_GPIO_Init+0x354>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002332:	4a34      	ldr	r2, [pc, #208]	; (8002404 <HAL_GPIO_Init+0x354>)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002338:	4b32      	ldr	r3, [pc, #200]	; (8002404 <HAL_GPIO_Init+0x354>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800235c:	4a29      	ldr	r2, [pc, #164]	; (8002404 <HAL_GPIO_Init+0x354>)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002362:	4b28      	ldr	r3, [pc, #160]	; (8002404 <HAL_GPIO_Init+0x354>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002386:	4a1f      	ldr	r2, [pc, #124]	; (8002404 <HAL_GPIO_Init+0x354>)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800238c:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <HAL_GPIO_Init+0x354>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023b0:	4a14      	ldr	r2, [pc, #80]	; (8002404 <HAL_GPIO_Init+0x354>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3301      	adds	r3, #1
 80023ba:	61fb      	str	r3, [r7, #28]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	2b0f      	cmp	r3, #15
 80023c0:	f67f ae84 	bls.w	80020cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	3724      	adds	r7, #36	; 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40013800 	.word	0x40013800
 80023dc:	40020000 	.word	0x40020000
 80023e0:	40020400 	.word	0x40020400
 80023e4:	40020800 	.word	0x40020800
 80023e8:	40020c00 	.word	0x40020c00
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40021400 	.word	0x40021400
 80023f4:	40021800 	.word	0x40021800
 80023f8:	40021c00 	.word	0x40021c00
 80023fc:	40022000 	.word	0x40022000
 8002400:	40022400 	.word	0x40022400
 8002404:	40013c00 	.word	0x40013c00

08002408 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	887b      	ldrh	r3, [r7, #2]
 800241a:	4013      	ands	r3, r2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002420:	2301      	movs	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]
 8002424:	e001      	b.n	800242a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002426:	2300      	movs	r3, #0
 8002428:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800242a:	7bfb      	ldrb	r3, [r7, #15]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	807b      	strh	r3, [r7, #2]
 8002444:	4613      	mov	r3, r2
 8002446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002448:	787b      	ldrb	r3, [r7, #1]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800244e:	887a      	ldrh	r2, [r7, #2]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002454:	e003      	b.n	800245e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002456:	887b      	ldrh	r3, [r7, #2]
 8002458:	041a      	lsls	r2, r3, #16
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	619a      	str	r2, [r3, #24]
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e12b      	b.n	80026d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d106      	bne.n	8002498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7fe fe80 	bl	8001198 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2224      	movs	r2, #36	; 0x24
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024d0:	f001 f88e 	bl	80035f0 <HAL_RCC_GetPCLK1Freq>
 80024d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4a81      	ldr	r2, [pc, #516]	; (80026e0 <HAL_I2C_Init+0x274>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d807      	bhi.n	80024f0 <HAL_I2C_Init+0x84>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4a80      	ldr	r2, [pc, #512]	; (80026e4 <HAL_I2C_Init+0x278>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	bf94      	ite	ls
 80024e8:	2301      	movls	r3, #1
 80024ea:	2300      	movhi	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	e006      	b.n	80024fe <HAL_I2C_Init+0x92>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4a7d      	ldr	r2, [pc, #500]	; (80026e8 <HAL_I2C_Init+0x27c>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	bf94      	ite	ls
 80024f8:	2301      	movls	r3, #1
 80024fa:	2300      	movhi	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e0e7      	b.n	80026d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4a78      	ldr	r2, [pc, #480]	; (80026ec <HAL_I2C_Init+0x280>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	0c9b      	lsrs	r3, r3, #18
 8002510:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	430a      	orrs	r2, r1
 8002524:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	4a6a      	ldr	r2, [pc, #424]	; (80026e0 <HAL_I2C_Init+0x274>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d802      	bhi.n	8002540 <HAL_I2C_Init+0xd4>
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	3301      	adds	r3, #1
 800253e:	e009      	b.n	8002554 <HAL_I2C_Init+0xe8>
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002546:	fb02 f303 	mul.w	r3, r2, r3
 800254a:	4a69      	ldr	r2, [pc, #420]	; (80026f0 <HAL_I2C_Init+0x284>)
 800254c:	fba2 2303 	umull	r2, r3, r2, r3
 8002550:	099b      	lsrs	r3, r3, #6
 8002552:	3301      	adds	r3, #1
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	430b      	orrs	r3, r1
 800255a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002566:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	495c      	ldr	r1, [pc, #368]	; (80026e0 <HAL_I2C_Init+0x274>)
 8002570:	428b      	cmp	r3, r1
 8002572:	d819      	bhi.n	80025a8 <HAL_I2C_Init+0x13c>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	1e59      	subs	r1, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002582:	1c59      	adds	r1, r3, #1
 8002584:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002588:	400b      	ands	r3, r1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00a      	beq.n	80025a4 <HAL_I2C_Init+0x138>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1e59      	subs	r1, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fbb1 f3f3 	udiv	r3, r1, r3
 800259c:	3301      	adds	r3, #1
 800259e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a2:	e051      	b.n	8002648 <HAL_I2C_Init+0x1dc>
 80025a4:	2304      	movs	r3, #4
 80025a6:	e04f      	b.n	8002648 <HAL_I2C_Init+0x1dc>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d111      	bne.n	80025d4 <HAL_I2C_Init+0x168>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1e58      	subs	r0, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	440b      	add	r3, r1
 80025be:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c2:	3301      	adds	r3, #1
 80025c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	bf0c      	ite	eq
 80025cc:	2301      	moveq	r3, #1
 80025ce:	2300      	movne	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	e012      	b.n	80025fa <HAL_I2C_Init+0x18e>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	1e58      	subs	r0, r3, #1
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6859      	ldr	r1, [r3, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	0099      	lsls	r1, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ea:	3301      	adds	r3, #1
 80025ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf0c      	ite	eq
 80025f4:	2301      	moveq	r3, #1
 80025f6:	2300      	movne	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_I2C_Init+0x196>
 80025fe:	2301      	movs	r3, #1
 8002600:	e022      	b.n	8002648 <HAL_I2C_Init+0x1dc>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10e      	bne.n	8002628 <HAL_I2C_Init+0x1bc>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1e58      	subs	r0, r3, #1
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6859      	ldr	r1, [r3, #4]
 8002612:	460b      	mov	r3, r1
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	440b      	add	r3, r1
 8002618:	fbb0 f3f3 	udiv	r3, r0, r3
 800261c:	3301      	adds	r3, #1
 800261e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002626:	e00f      	b.n	8002648 <HAL_I2C_Init+0x1dc>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1e58      	subs	r0, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6859      	ldr	r1, [r3, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	0099      	lsls	r1, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	fbb0 f3f3 	udiv	r3, r0, r3
 800263e:	3301      	adds	r3, #1
 8002640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002644:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	6809      	ldr	r1, [r1, #0]
 800264c:	4313      	orrs	r3, r2
 800264e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69da      	ldr	r2, [r3, #28]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002676:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6911      	ldr	r1, [r2, #16]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	68d2      	ldr	r2, [r2, #12]
 8002682:	4311      	orrs	r1, r2
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	430b      	orrs	r3, r1
 800268a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695a      	ldr	r2, [r3, #20]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0201 	orr.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	000186a0 	.word	0x000186a0
 80026e4:	001e847f 	.word	0x001e847f
 80026e8:	003d08ff 	.word	0x003d08ff
 80026ec:	431bde83 	.word	0x431bde83
 80026f0:	10624dd3 	.word	0x10624dd3

080026f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af02      	add	r7, sp, #8
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	607a      	str	r2, [r7, #4]
 80026fe:	461a      	mov	r2, r3
 8002700:	460b      	mov	r3, r1
 8002702:	817b      	strh	r3, [r7, #10]
 8002704:	4613      	mov	r3, r2
 8002706:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002708:	f7ff fb90 	bl	8001e2c <HAL_GetTick>
 800270c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b20      	cmp	r3, #32
 8002718:	f040 80e0 	bne.w	80028dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	2319      	movs	r3, #25
 8002722:	2201      	movs	r2, #1
 8002724:	4970      	ldr	r1, [pc, #448]	; (80028e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 f964 	bl	80029f4 <I2C_WaitOnFlagUntilTimeout>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002732:	2302      	movs	r3, #2
 8002734:	e0d3      	b.n	80028de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_I2C_Master_Transmit+0x50>
 8002740:	2302      	movs	r3, #2
 8002742:	e0cc      	b.n	80028de <HAL_I2C_Master_Transmit+0x1ea>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b01      	cmp	r3, #1
 8002758:	d007      	beq.n	800276a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0201 	orr.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002778:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2221      	movs	r2, #33	; 0x21
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2210      	movs	r2, #16
 8002786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	893a      	ldrh	r2, [r7, #8]
 800279a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4a50      	ldr	r2, [pc, #320]	; (80028ec <HAL_I2C_Master_Transmit+0x1f8>)
 80027aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027ac:	8979      	ldrh	r1, [r7, #10]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	6a3a      	ldr	r2, [r7, #32]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f89c 	bl	80028f0 <I2C_MasterRequestWrite>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e08d      	b.n	80028de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027d8:	e066      	b.n	80028a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	6a39      	ldr	r1, [r7, #32]
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 f9de 	bl	8002ba0 <I2C_WaitOnTXEFlagUntilTimeout>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00d      	beq.n	8002806 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d107      	bne.n	8002802 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002800:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e06b      	b.n	80028de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	781a      	ldrb	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002820:	b29b      	uxth	r3, r3
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282e:	3b01      	subs	r3, #1
 8002830:	b29a      	uxth	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b04      	cmp	r3, #4
 8002842:	d11b      	bne.n	800287c <HAL_I2C_Master_Transmit+0x188>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002848:	2b00      	cmp	r3, #0
 800284a:	d017      	beq.n	800287c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	781a      	ldrb	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	6a39      	ldr	r1, [r7, #32]
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 f9ce 	bl	8002c22 <I2C_WaitOnBTFFlagUntilTimeout>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00d      	beq.n	80028a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	2b04      	cmp	r3, #4
 8002892:	d107      	bne.n	80028a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e01a      	b.n	80028de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d194      	bne.n	80027da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	e000      	b.n	80028de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028dc:	2302      	movs	r3, #2
  }
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	00100002 	.word	0x00100002
 80028ec:	ffff0000 	.word	0xffff0000

080028f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af02      	add	r7, sp, #8
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	460b      	mov	r3, r1
 80028fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2b08      	cmp	r3, #8
 800290a:	d006      	beq.n	800291a <I2C_MasterRequestWrite+0x2a>
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d003      	beq.n	800291a <I2C_MasterRequestWrite+0x2a>
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002918:	d108      	bne.n	800292c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	e00b      	b.n	8002944 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	2b12      	cmp	r3, #18
 8002932:	d107      	bne.n	8002944 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002942:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 f84f 	bl	80029f4 <I2C_WaitOnFlagUntilTimeout>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00d      	beq.n	8002978 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800296a:	d103      	bne.n	8002974 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002972:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e035      	b.n	80029e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002980:	d108      	bne.n	8002994 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002982:	897b      	ldrh	r3, [r7, #10]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	461a      	mov	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002990:	611a      	str	r2, [r3, #16]
 8002992:	e01b      	b.n	80029cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002994:	897b      	ldrh	r3, [r7, #10]
 8002996:	11db      	asrs	r3, r3, #7
 8002998:	b2db      	uxtb	r3, r3
 800299a:	f003 0306 	and.w	r3, r3, #6
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	f063 030f 	orn	r3, r3, #15
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	490e      	ldr	r1, [pc, #56]	; (80029ec <I2C_MasterRequestWrite+0xfc>)
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 f875 	bl	8002aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e010      	b.n	80029e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029c2:	897b      	ldrh	r3, [r7, #10]
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	4907      	ldr	r1, [pc, #28]	; (80029f0 <I2C_MasterRequestWrite+0x100>)
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 f865 	bl	8002aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	00010008 	.word	0x00010008
 80029f0:	00010002 	.word	0x00010002

080029f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	4613      	mov	r3, r2
 8002a02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a04:	e025      	b.n	8002a52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a0c:	d021      	beq.n	8002a52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a0e:	f7ff fa0d 	bl	8001e2c <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d302      	bcc.n	8002a24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d116      	bne.n	8002a52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f043 0220 	orr.w	r2, r3, #32
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e023      	b.n	8002a9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	0c1b      	lsrs	r3, r3, #16
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d10d      	bne.n	8002a78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	43da      	mvns	r2, r3
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	4013      	ands	r3, r2
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	bf0c      	ite	eq
 8002a6e:	2301      	moveq	r3, #1
 8002a70:	2300      	movne	r3, #0
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	461a      	mov	r2, r3
 8002a76:	e00c      	b.n	8002a92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	43da      	mvns	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	4013      	ands	r3, r2
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	bf0c      	ite	eq
 8002a8a:	2301      	moveq	r3, #1
 8002a8c:	2300      	movne	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	461a      	mov	r2, r3
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d0b6      	beq.n	8002a06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	607a      	str	r2, [r7, #4]
 8002aae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ab0:	e051      	b.n	8002b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac0:	d123      	bne.n	8002b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ada:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f043 0204 	orr.w	r2, r3, #4
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e046      	b.n	8002b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b10:	d021      	beq.n	8002b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b12:	f7ff f98b 	bl	8001e2c <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d302      	bcc.n	8002b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d116      	bne.n	8002b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f043 0220 	orr.w	r2, r3, #32
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e020      	b.n	8002b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	0c1b      	lsrs	r3, r3, #16
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d10c      	bne.n	8002b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	43da      	mvns	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	bf14      	ite	ne
 8002b72:	2301      	movne	r3, #1
 8002b74:	2300      	moveq	r3, #0
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	e00b      	b.n	8002b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	43da      	mvns	r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	4013      	ands	r3, r2
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	bf14      	ite	ne
 8002b8c:	2301      	movne	r3, #1
 8002b8e:	2300      	moveq	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d18d      	bne.n	8002ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bac:	e02d      	b.n	8002c0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 f878 	bl	8002ca4 <I2C_IsAcknowledgeFailed>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e02d      	b.n	8002c1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bc4:	d021      	beq.n	8002c0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc6:	f7ff f931 	bl	8001e2c <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d302      	bcc.n	8002bdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d116      	bne.n	8002c0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2220      	movs	r2, #32
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f043 0220 	orr.w	r2, r3, #32
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e007      	b.n	8002c1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c14:	2b80      	cmp	r3, #128	; 0x80
 8002c16:	d1ca      	bne.n	8002bae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b084      	sub	sp, #16
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	60f8      	str	r0, [r7, #12]
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c2e:	e02d      	b.n	8002c8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 f837 	bl	8002ca4 <I2C_IsAcknowledgeFailed>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e02d      	b.n	8002c9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c46:	d021      	beq.n	8002c8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c48:	f7ff f8f0 	bl	8001e2c <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d302      	bcc.n	8002c5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d116      	bne.n	8002c8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	f043 0220 	orr.w	r2, r3, #32
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e007      	b.n	8002c9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d1ca      	bne.n	8002c30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cba:	d11b      	bne.n	8002cf4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	f043 0204 	orr.w	r2, r3, #4
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0

}
 8002d06:	bf00      	nop
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e267      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d075      	beq.n	8002e1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d2e:	4b88      	ldr	r3, [pc, #544]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d00c      	beq.n	8002d54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d3a:	4b85      	ldr	r3, [pc, #532]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d112      	bne.n	8002d6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d46:	4b82      	ldr	r3, [pc, #520]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d52:	d10b      	bne.n	8002d6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d54:	4b7e      	ldr	r3, [pc, #504]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d05b      	beq.n	8002e18 <HAL_RCC_OscConfig+0x108>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d157      	bne.n	8002e18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e242      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d74:	d106      	bne.n	8002d84 <HAL_RCC_OscConfig+0x74>
 8002d76:	4b76      	ldr	r3, [pc, #472]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a75      	ldr	r2, [pc, #468]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	e01d      	b.n	8002dc0 <HAL_RCC_OscConfig+0xb0>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d8c:	d10c      	bne.n	8002da8 <HAL_RCC_OscConfig+0x98>
 8002d8e:	4b70      	ldr	r3, [pc, #448]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a6f      	ldr	r2, [pc, #444]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	4b6d      	ldr	r3, [pc, #436]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a6c      	ldr	r2, [pc, #432]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	e00b      	b.n	8002dc0 <HAL_RCC_OscConfig+0xb0>
 8002da8:	4b69      	ldr	r3, [pc, #420]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a68      	ldr	r2, [pc, #416]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	4b66      	ldr	r3, [pc, #408]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a65      	ldr	r2, [pc, #404]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d013      	beq.n	8002df0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7ff f830 	bl	8001e2c <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd0:	f7ff f82c 	bl	8001e2c <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	; 0x64
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e207      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	4b5b      	ldr	r3, [pc, #364]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0xc0>
 8002dee:	e014      	b.n	8002e1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7ff f81c 	bl	8001e2c <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df8:	f7ff f818 	bl	8001e2c <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b64      	cmp	r3, #100	; 0x64
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e1f3      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0a:	4b51      	ldr	r3, [pc, #324]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0xe8>
 8002e16:	e000      	b.n	8002e1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d063      	beq.n	8002eee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e26:	4b4a      	ldr	r3, [pc, #296]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00b      	beq.n	8002e4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e32:	4b47      	ldr	r3, [pc, #284]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d11c      	bne.n	8002e78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e3e:	4b44      	ldr	r3, [pc, #272]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d116      	bne.n	8002e78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4a:	4b41      	ldr	r3, [pc, #260]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d005      	beq.n	8002e62 <HAL_RCC_OscConfig+0x152>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d001      	beq.n	8002e62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e1c7      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e62:	4b3b      	ldr	r3, [pc, #236]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4937      	ldr	r1, [pc, #220]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e76:	e03a      	b.n	8002eee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d020      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e80:	4b34      	ldr	r3, [pc, #208]	; (8002f54 <HAL_RCC_OscConfig+0x244>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e86:	f7fe ffd1 	bl	8001e2c <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e8e:	f7fe ffcd 	bl	8001e2c <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e1a8      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea0:	4b2b      	ldr	r3, [pc, #172]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eac:	4b28      	ldr	r3, [pc, #160]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4925      	ldr	r1, [pc, #148]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]
 8002ec0:	e015      	b.n	8002eee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec2:	4b24      	ldr	r3, [pc, #144]	; (8002f54 <HAL_RCC_OscConfig+0x244>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7fe ffb0 	bl	8001e2c <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ed0:	f7fe ffac 	bl	8001e2c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e187      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee2:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d036      	beq.n	8002f68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d016      	beq.n	8002f30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <HAL_RCC_OscConfig+0x248>)
 8002f04:	2201      	movs	r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f08:	f7fe ff90 	bl	8001e2c <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f10:	f7fe ff8c 	bl	8001e2c <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e167      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f22:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0x200>
 8002f2e:	e01b      	b.n	8002f68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f30:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <HAL_RCC_OscConfig+0x248>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f36:	f7fe ff79 	bl	8001e2c <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f3c:	e00e      	b.n	8002f5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f3e:	f7fe ff75 	bl	8001e2c <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d907      	bls.n	8002f5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e150      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
 8002f50:	40023800 	.word	0x40023800
 8002f54:	42470000 	.word	0x42470000
 8002f58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f5c:	4b88      	ldr	r3, [pc, #544]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1ea      	bne.n	8002f3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 8097 	beq.w	80030a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f76:	2300      	movs	r3, #0
 8002f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f7a:	4b81      	ldr	r3, [pc, #516]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10f      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	4b7d      	ldr	r3, [pc, #500]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	4a7c      	ldr	r2, [pc, #496]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f94:	6413      	str	r3, [r2, #64]	; 0x40
 8002f96:	4b7a      	ldr	r3, [pc, #488]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa6:	4b77      	ldr	r3, [pc, #476]	; (8003184 <HAL_RCC_OscConfig+0x474>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d118      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fb2:	4b74      	ldr	r3, [pc, #464]	; (8003184 <HAL_RCC_OscConfig+0x474>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a73      	ldr	r2, [pc, #460]	; (8003184 <HAL_RCC_OscConfig+0x474>)
 8002fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fbe:	f7fe ff35 	bl	8001e2c <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc6:	f7fe ff31 	bl	8001e2c <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e10c      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd8:	4b6a      	ldr	r3, [pc, #424]	; (8003184 <HAL_RCC_OscConfig+0x474>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d106      	bne.n	8002ffa <HAL_RCC_OscConfig+0x2ea>
 8002fec:	4b64      	ldr	r3, [pc, #400]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff0:	4a63      	ldr	r2, [pc, #396]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff8:	e01c      	b.n	8003034 <HAL_RCC_OscConfig+0x324>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2b05      	cmp	r3, #5
 8003000:	d10c      	bne.n	800301c <HAL_RCC_OscConfig+0x30c>
 8003002:	4b5f      	ldr	r3, [pc, #380]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003006:	4a5e      	ldr	r2, [pc, #376]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003008:	f043 0304 	orr.w	r3, r3, #4
 800300c:	6713      	str	r3, [r2, #112]	; 0x70
 800300e:	4b5c      	ldr	r3, [pc, #368]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	4a5b      	ldr	r2, [pc, #364]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	6713      	str	r3, [r2, #112]	; 0x70
 800301a:	e00b      	b.n	8003034 <HAL_RCC_OscConfig+0x324>
 800301c:	4b58      	ldr	r3, [pc, #352]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800301e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003020:	4a57      	ldr	r2, [pc, #348]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003022:	f023 0301 	bic.w	r3, r3, #1
 8003026:	6713      	str	r3, [r2, #112]	; 0x70
 8003028:	4b55      	ldr	r3, [pc, #340]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800302a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302c:	4a54      	ldr	r2, [pc, #336]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800302e:	f023 0304 	bic.w	r3, r3, #4
 8003032:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d015      	beq.n	8003068 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303c:	f7fe fef6 	bl	8001e2c <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003042:	e00a      	b.n	800305a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003044:	f7fe fef2 	bl	8001e2c <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003052:	4293      	cmp	r3, r2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e0cb      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305a:	4b49      	ldr	r3, [pc, #292]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0ee      	beq.n	8003044 <HAL_RCC_OscConfig+0x334>
 8003066:	e014      	b.n	8003092 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003068:	f7fe fee0 	bl	8001e2c <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800306e:	e00a      	b.n	8003086 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003070:	f7fe fedc 	bl	8001e2c <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	f241 3288 	movw	r2, #5000	; 0x1388
 800307e:	4293      	cmp	r3, r2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e0b5      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003086:	4b3e      	ldr	r3, [pc, #248]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1ee      	bne.n	8003070 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003092:	7dfb      	ldrb	r3, [r7, #23]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d105      	bne.n	80030a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003098:	4b39      	ldr	r3, [pc, #228]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	4a38      	ldr	r2, [pc, #224]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800309e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 80a1 	beq.w	80031f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030ae:	4b34      	ldr	r3, [pc, #208]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d05c      	beq.n	8003174 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d141      	bne.n	8003146 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c2:	4b31      	ldr	r3, [pc, #196]	; (8003188 <HAL_RCC_OscConfig+0x478>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c8:	f7fe feb0 	bl	8001e2c <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d0:	f7fe feac 	bl	8001e2c <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e087      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e2:	4b27      	ldr	r3, [pc, #156]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69da      	ldr	r2, [r3, #28]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	019b      	lsls	r3, r3, #6
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003104:	085b      	lsrs	r3, r3, #1
 8003106:	3b01      	subs	r3, #1
 8003108:	041b      	lsls	r3, r3, #16
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	061b      	lsls	r3, r3, #24
 8003112:	491b      	ldr	r1, [pc, #108]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003114:	4313      	orrs	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003118:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <HAL_RCC_OscConfig+0x478>)
 800311a:	2201      	movs	r2, #1
 800311c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311e:	f7fe fe85 	bl	8001e2c <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003126:	f7fe fe81 	bl	8001e2c <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e05c      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003138:	4b11      	ldr	r3, [pc, #68]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0f0      	beq.n	8003126 <HAL_RCC_OscConfig+0x416>
 8003144:	e054      	b.n	80031f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003146:	4b10      	ldr	r3, [pc, #64]	; (8003188 <HAL_RCC_OscConfig+0x478>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7fe fe6e 	bl	8001e2c <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003154:	f7fe fe6a 	bl	8001e2c <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e045      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003166:	4b06      	ldr	r3, [pc, #24]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x444>
 8003172:	e03d      	b.n	80031f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d107      	bne.n	800318c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e038      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
 8003180:	40023800 	.word	0x40023800
 8003184:	40007000 	.word	0x40007000
 8003188:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800318c:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <HAL_RCC_OscConfig+0x4ec>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d028      	beq.n	80031ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d121      	bne.n	80031ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d11a      	bne.n	80031ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031bc:	4013      	ands	r3, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d111      	bne.n	80031ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	085b      	lsrs	r3, r3, #1
 80031d4:	3b01      	subs	r3, #1
 80031d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031d8:	429a      	cmp	r2, r3
 80031da:	d107      	bne.n	80031ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d001      	beq.n	80031f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e000      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40023800 	.word	0x40023800

08003200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0cc      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003214:	4b68      	ldr	r3, [pc, #416]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d90c      	bls.n	800323c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003222:	4b65      	ldr	r3, [pc, #404]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800322a:	4b63      	ldr	r3, [pc, #396]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d001      	beq.n	800323c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0b8      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d020      	beq.n	800328a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003254:	4b59      	ldr	r3, [pc, #356]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	4a58      	ldr	r2, [pc, #352]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800325e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0308 	and.w	r3, r3, #8
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800326c:	4b53      	ldr	r3, [pc, #332]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	4a52      	ldr	r2, [pc, #328]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003276:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003278:	4b50      	ldr	r3, [pc, #320]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	494d      	ldr	r1, [pc, #308]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d044      	beq.n	8003320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d107      	bne.n	80032ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	4b47      	ldr	r3, [pc, #284]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d119      	bne.n	80032de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e07f      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d003      	beq.n	80032be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d107      	bne.n	80032ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032be:	4b3f      	ldr	r3, [pc, #252]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e06f      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ce:	4b3b      	ldr	r3, [pc, #236]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e067      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032de:	4b37      	ldr	r3, [pc, #220]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f023 0203 	bic.w	r2, r3, #3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	4934      	ldr	r1, [pc, #208]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032f0:	f7fe fd9c 	bl	8001e2c <HAL_GetTick>
 80032f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f6:	e00a      	b.n	800330e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f8:	f7fe fd98 	bl	8001e2c <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	f241 3288 	movw	r2, #5000	; 0x1388
 8003306:	4293      	cmp	r3, r2
 8003308:	d901      	bls.n	800330e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e04f      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330e:	4b2b      	ldr	r3, [pc, #172]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 020c 	and.w	r2, r3, #12
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	429a      	cmp	r2, r3
 800331e:	d1eb      	bne.n	80032f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003320:	4b25      	ldr	r3, [pc, #148]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d20c      	bcs.n	8003348 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332e:	4b22      	ldr	r3, [pc, #136]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003336:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d001      	beq.n	8003348 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e032      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003354:	4b19      	ldr	r3, [pc, #100]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	4916      	ldr	r1, [pc, #88]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d009      	beq.n	8003386 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003372:	4b12      	ldr	r3, [pc, #72]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	490e      	ldr	r1, [pc, #56]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	4313      	orrs	r3, r2
 8003384:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003386:	f000 f821 	bl	80033cc <HAL_RCC_GetSysClockFreq>
 800338a:	4602      	mov	r2, r0
 800338c:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	091b      	lsrs	r3, r3, #4
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	490a      	ldr	r1, [pc, #40]	; (80033c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003398:	5ccb      	ldrb	r3, [r1, r3]
 800339a:	fa22 f303 	lsr.w	r3, r2, r3
 800339e:	4a09      	ldr	r2, [pc, #36]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 80033a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033a2:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fe fcfc 	bl	8001da4 <HAL_InitTick>

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40023c00 	.word	0x40023c00
 80033bc:	40023800 	.word	0x40023800
 80033c0:	080057f4 	.word	0x080057f4
 80033c4:	20000010 	.word	0x20000010
 80033c8:	20000014 	.word	0x20000014

080033cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033d0:	b094      	sub	sp, #80	; 0x50
 80033d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	647b      	str	r3, [r7, #68]	; 0x44
 80033d8:	2300      	movs	r3, #0
 80033da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033dc:	2300      	movs	r3, #0
 80033de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033e4:	4b79      	ldr	r3, [pc, #484]	; (80035cc <HAL_RCC_GetSysClockFreq+0x200>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 030c 	and.w	r3, r3, #12
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d00d      	beq.n	800340c <HAL_RCC_GetSysClockFreq+0x40>
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	f200 80e1 	bhi.w	80035b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0x34>
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d003      	beq.n	8003406 <HAL_RCC_GetSysClockFreq+0x3a>
 80033fe:	e0db      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003400:	4b73      	ldr	r3, [pc, #460]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003402:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003404:	e0db      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003406:	4b73      	ldr	r3, [pc, #460]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003408:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800340a:	e0d8      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800340c:	4b6f      	ldr	r3, [pc, #444]	; (80035cc <HAL_RCC_GetSysClockFreq+0x200>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003414:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003416:	4b6d      	ldr	r3, [pc, #436]	; (80035cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d063      	beq.n	80034ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003422:	4b6a      	ldr	r3, [pc, #424]	; (80035cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	099b      	lsrs	r3, r3, #6
 8003428:	2200      	movs	r2, #0
 800342a:	63bb      	str	r3, [r7, #56]	; 0x38
 800342c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800342e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003434:	633b      	str	r3, [r7, #48]	; 0x30
 8003436:	2300      	movs	r3, #0
 8003438:	637b      	str	r3, [r7, #52]	; 0x34
 800343a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800343e:	4622      	mov	r2, r4
 8003440:	462b      	mov	r3, r5
 8003442:	f04f 0000 	mov.w	r0, #0
 8003446:	f04f 0100 	mov.w	r1, #0
 800344a:	0159      	lsls	r1, r3, #5
 800344c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003450:	0150      	lsls	r0, r2, #5
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4621      	mov	r1, r4
 8003458:	1a51      	subs	r1, r2, r1
 800345a:	6139      	str	r1, [r7, #16]
 800345c:	4629      	mov	r1, r5
 800345e:	eb63 0301 	sbc.w	r3, r3, r1
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003470:	4659      	mov	r1, fp
 8003472:	018b      	lsls	r3, r1, #6
 8003474:	4651      	mov	r1, sl
 8003476:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800347a:	4651      	mov	r1, sl
 800347c:	018a      	lsls	r2, r1, #6
 800347e:	4651      	mov	r1, sl
 8003480:	ebb2 0801 	subs.w	r8, r2, r1
 8003484:	4659      	mov	r1, fp
 8003486:	eb63 0901 	sbc.w	r9, r3, r1
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003496:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800349a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800349e:	4690      	mov	r8, r2
 80034a0:	4699      	mov	r9, r3
 80034a2:	4623      	mov	r3, r4
 80034a4:	eb18 0303 	adds.w	r3, r8, r3
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	462b      	mov	r3, r5
 80034ac:	eb49 0303 	adc.w	r3, r9, r3
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034be:	4629      	mov	r1, r5
 80034c0:	024b      	lsls	r3, r1, #9
 80034c2:	4621      	mov	r1, r4
 80034c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034c8:	4621      	mov	r1, r4
 80034ca:	024a      	lsls	r2, r1, #9
 80034cc:	4610      	mov	r0, r2
 80034ce:	4619      	mov	r1, r3
 80034d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034d2:	2200      	movs	r2, #0
 80034d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034dc:	f7fd fb56 	bl	8000b8c <__aeabi_uldivmod>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4613      	mov	r3, r2
 80034e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034e8:	e058      	b.n	800359c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ea:	4b38      	ldr	r3, [pc, #224]	; (80035cc <HAL_RCC_GetSysClockFreq+0x200>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	099b      	lsrs	r3, r3, #6
 80034f0:	2200      	movs	r2, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	4611      	mov	r1, r2
 80034f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034fa:	623b      	str	r3, [r7, #32]
 80034fc:	2300      	movs	r3, #0
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003500:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003504:	4642      	mov	r2, r8
 8003506:	464b      	mov	r3, r9
 8003508:	f04f 0000 	mov.w	r0, #0
 800350c:	f04f 0100 	mov.w	r1, #0
 8003510:	0159      	lsls	r1, r3, #5
 8003512:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003516:	0150      	lsls	r0, r2, #5
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	4641      	mov	r1, r8
 800351e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003522:	4649      	mov	r1, r9
 8003524:	eb63 0b01 	sbc.w	fp, r3, r1
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003534:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003538:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800353c:	ebb2 040a 	subs.w	r4, r2, sl
 8003540:	eb63 050b 	sbc.w	r5, r3, fp
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	00eb      	lsls	r3, r5, #3
 800354e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003552:	00e2      	lsls	r2, r4, #3
 8003554:	4614      	mov	r4, r2
 8003556:	461d      	mov	r5, r3
 8003558:	4643      	mov	r3, r8
 800355a:	18e3      	adds	r3, r4, r3
 800355c:	603b      	str	r3, [r7, #0]
 800355e:	464b      	mov	r3, r9
 8003560:	eb45 0303 	adc.w	r3, r5, r3
 8003564:	607b      	str	r3, [r7, #4]
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003572:	4629      	mov	r1, r5
 8003574:	028b      	lsls	r3, r1, #10
 8003576:	4621      	mov	r1, r4
 8003578:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800357c:	4621      	mov	r1, r4
 800357e:	028a      	lsls	r2, r1, #10
 8003580:	4610      	mov	r0, r2
 8003582:	4619      	mov	r1, r3
 8003584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003586:	2200      	movs	r2, #0
 8003588:	61bb      	str	r3, [r7, #24]
 800358a:	61fa      	str	r2, [r7, #28]
 800358c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003590:	f7fd fafc 	bl	8000b8c <__aeabi_uldivmod>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4613      	mov	r3, r2
 800359a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_RCC_GetSysClockFreq+0x200>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	0c1b      	lsrs	r3, r3, #16
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	3301      	adds	r3, #1
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80035ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035b6:	e002      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035b8:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80035ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3750      	adds	r7, #80	; 0x50
 80035c4:	46bd      	mov	sp, r7
 80035c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ca:	bf00      	nop
 80035cc:	40023800 	.word	0x40023800
 80035d0:	00f42400 	.word	0x00f42400
 80035d4:	007a1200 	.word	0x007a1200

080035d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035dc:	4b03      	ldr	r3, [pc, #12]	; (80035ec <HAL_RCC_GetHCLKFreq+0x14>)
 80035de:	681b      	ldr	r3, [r3, #0]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	20000010 	.word	0x20000010

080035f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035f4:	f7ff fff0 	bl	80035d8 <HAL_RCC_GetHCLKFreq>
 80035f8:	4602      	mov	r2, r0
 80035fa:	4b05      	ldr	r3, [pc, #20]	; (8003610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	0a9b      	lsrs	r3, r3, #10
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	4903      	ldr	r1, [pc, #12]	; (8003614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003606:	5ccb      	ldrb	r3, [r1, r3]
 8003608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800360c:	4618      	mov	r0, r3
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40023800 	.word	0x40023800
 8003614:	08005804 	.word	0x08005804

08003618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800361c:	f7ff ffdc 	bl	80035d8 <HAL_RCC_GetHCLKFreq>
 8003620:	4602      	mov	r2, r0
 8003622:	4b05      	ldr	r3, [pc, #20]	; (8003638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	0b5b      	lsrs	r3, r3, #13
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	4903      	ldr	r1, [pc, #12]	; (800363c <HAL_RCC_GetPCLK2Freq+0x24>)
 800362e:	5ccb      	ldrb	r3, [r1, r3]
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003634:	4618      	mov	r0, r3
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40023800 	.word	0x40023800
 800363c:	08005804 	.word	0x08005804

08003640 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e041      	b.n	80036d6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fe f854 	bl	8001714 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3304      	adds	r3, #4
 800367c:	4619      	mov	r1, r3
 800367e:	4610      	mov	r0, r2
 8003680:	f000 fb66 	bl	8003d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d104      	bne.n	80036fe <HAL_TIM_IC_Start_IT+0x1e>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	e013      	b.n	8003726 <HAL_TIM_IC_Start_IT+0x46>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b04      	cmp	r3, #4
 8003702:	d104      	bne.n	800370e <HAL_TIM_IC_Start_IT+0x2e>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800370a:	b2db      	uxtb	r3, r3
 800370c:	e00b      	b.n	8003726 <HAL_TIM_IC_Start_IT+0x46>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b08      	cmp	r3, #8
 8003712:	d104      	bne.n	800371e <HAL_TIM_IC_Start_IT+0x3e>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800371a:	b2db      	uxtb	r3, r3
 800371c:	e003      	b.n	8003726 <HAL_TIM_IC_Start_IT+0x46>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003724:	b2db      	uxtb	r3, r3
 8003726:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d104      	bne.n	8003738 <HAL_TIM_IC_Start_IT+0x58>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003734:	b2db      	uxtb	r3, r3
 8003736:	e013      	b.n	8003760 <HAL_TIM_IC_Start_IT+0x80>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2b04      	cmp	r3, #4
 800373c:	d104      	bne.n	8003748 <HAL_TIM_IC_Start_IT+0x68>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003744:	b2db      	uxtb	r3, r3
 8003746:	e00b      	b.n	8003760 <HAL_TIM_IC_Start_IT+0x80>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	2b08      	cmp	r3, #8
 800374c:	d104      	bne.n	8003758 <HAL_TIM_IC_Start_IT+0x78>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003754:	b2db      	uxtb	r3, r3
 8003756:	e003      	b.n	8003760 <HAL_TIM_IC_Start_IT+0x80>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800375e:	b2db      	uxtb	r3, r3
 8003760:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003762:	7bbb      	ldrb	r3, [r7, #14]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d102      	bne.n	800376e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003768:	7b7b      	ldrb	r3, [r7, #13]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d001      	beq.n	8003772 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e0cc      	b.n	800390c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d104      	bne.n	8003782 <HAL_TIM_IC_Start_IT+0xa2>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003780:	e013      	b.n	80037aa <HAL_TIM_IC_Start_IT+0xca>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b04      	cmp	r3, #4
 8003786:	d104      	bne.n	8003792 <HAL_TIM_IC_Start_IT+0xb2>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003790:	e00b      	b.n	80037aa <HAL_TIM_IC_Start_IT+0xca>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b08      	cmp	r3, #8
 8003796:	d104      	bne.n	80037a2 <HAL_TIM_IC_Start_IT+0xc2>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037a0:	e003      	b.n	80037aa <HAL_TIM_IC_Start_IT+0xca>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2202      	movs	r2, #2
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d104      	bne.n	80037ba <HAL_TIM_IC_Start_IT+0xda>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037b8:	e013      	b.n	80037e2 <HAL_TIM_IC_Start_IT+0x102>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d104      	bne.n	80037ca <HAL_TIM_IC_Start_IT+0xea>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037c8:	e00b      	b.n	80037e2 <HAL_TIM_IC_Start_IT+0x102>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d104      	bne.n	80037da <HAL_TIM_IC_Start_IT+0xfa>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037d8:	e003      	b.n	80037e2 <HAL_TIM_IC_Start_IT+0x102>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2202      	movs	r2, #2
 80037de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b0c      	cmp	r3, #12
 80037e6:	d841      	bhi.n	800386c <HAL_TIM_IC_Start_IT+0x18c>
 80037e8:	a201      	add	r2, pc, #4	; (adr r2, 80037f0 <HAL_TIM_IC_Start_IT+0x110>)
 80037ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ee:	bf00      	nop
 80037f0:	08003825 	.word	0x08003825
 80037f4:	0800386d 	.word	0x0800386d
 80037f8:	0800386d 	.word	0x0800386d
 80037fc:	0800386d 	.word	0x0800386d
 8003800:	08003837 	.word	0x08003837
 8003804:	0800386d 	.word	0x0800386d
 8003808:	0800386d 	.word	0x0800386d
 800380c:	0800386d 	.word	0x0800386d
 8003810:	08003849 	.word	0x08003849
 8003814:	0800386d 	.word	0x0800386d
 8003818:	0800386d 	.word	0x0800386d
 800381c:	0800386d 	.word	0x0800386d
 8003820:	0800385b 	.word	0x0800385b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0202 	orr.w	r2, r2, #2
 8003832:	60da      	str	r2, [r3, #12]
      break;
 8003834:	e01d      	b.n	8003872 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f042 0204 	orr.w	r2, r2, #4
 8003844:	60da      	str	r2, [r3, #12]
      break;
 8003846:	e014      	b.n	8003872 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0208 	orr.w	r2, r2, #8
 8003856:	60da      	str	r2, [r3, #12]
      break;
 8003858:	e00b      	b.n	8003872 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0210 	orr.w	r2, r2, #16
 8003868:	60da      	str	r2, [r3, #12]
      break;
 800386a:	e002      	b.n	8003872 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
      break;
 8003870:	bf00      	nop
  }

  if (status == HAL_OK)
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d148      	bne.n	800390a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2201      	movs	r2, #1
 800387e:	6839      	ldr	r1, [r7, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fc2f 	bl	80040e4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a22      	ldr	r2, [pc, #136]	; (8003914 <HAL_TIM_IC_Start_IT+0x234>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d022      	beq.n	80038d6 <HAL_TIM_IC_Start_IT+0x1f6>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003898:	d01d      	beq.n	80038d6 <HAL_TIM_IC_Start_IT+0x1f6>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a1e      	ldr	r2, [pc, #120]	; (8003918 <HAL_TIM_IC_Start_IT+0x238>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d018      	beq.n	80038d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a1c      	ldr	r2, [pc, #112]	; (800391c <HAL_TIM_IC_Start_IT+0x23c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d013      	beq.n	80038d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a1b      	ldr	r2, [pc, #108]	; (8003920 <HAL_TIM_IC_Start_IT+0x240>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00e      	beq.n	80038d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a19      	ldr	r2, [pc, #100]	; (8003924 <HAL_TIM_IC_Start_IT+0x244>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d009      	beq.n	80038d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a18      	ldr	r2, [pc, #96]	; (8003928 <HAL_TIM_IC_Start_IT+0x248>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d004      	beq.n	80038d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a16      	ldr	r2, [pc, #88]	; (800392c <HAL_TIM_IC_Start_IT+0x24c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d111      	bne.n	80038fa <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2b06      	cmp	r3, #6
 80038e6:	d010      	beq.n	800390a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f8:	e007      	b.n	800390a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f042 0201 	orr.w	r2, r2, #1
 8003908:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800390a:	7bfb      	ldrb	r3, [r7, #15]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40010000 	.word	0x40010000
 8003918:	40000400 	.word	0x40000400
 800391c:	40000800 	.word	0x40000800
 8003920:	40000c00 	.word	0x40000c00
 8003924:	40010400 	.word	0x40010400
 8003928:	40014000 	.word	0x40014000
 800392c:	40001800 	.word	0x40001800

08003930 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b02      	cmp	r3, #2
 8003944:	d122      	bne.n	800398c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b02      	cmp	r3, #2
 8003952:	d11b      	bne.n	800398c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f06f 0202 	mvn.w	r2, #2
 800395c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7fd fe20 	bl	80015b8 <HAL_TIM_IC_CaptureCallback>
 8003978:	e005      	b.n	8003986 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f9ca 	bl	8003d14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f9d1 	bl	8003d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b04      	cmp	r3, #4
 8003998:	d122      	bne.n	80039e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d11b      	bne.n	80039e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0204 	mvn.w	r2, #4
 80039b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2202      	movs	r2, #2
 80039b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7fd fdf6 	bl	80015b8 <HAL_TIM_IC_CaptureCallback>
 80039cc:	e005      	b.n	80039da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f9a0 	bl	8003d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f9a7 	bl	8003d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d122      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d11b      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f06f 0208 	mvn.w	r2, #8
 8003a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2204      	movs	r2, #4
 8003a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fd fdcc 	bl	80015b8 <HAL_TIM_IC_CaptureCallback>
 8003a20:	e005      	b.n	8003a2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f976 	bl	8003d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f97d 	bl	8003d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f003 0310 	and.w	r3, r3, #16
 8003a3e:	2b10      	cmp	r3, #16
 8003a40:	d122      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b10      	cmp	r3, #16
 8003a4e:	d11b      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0210 	mvn.w	r2, #16
 8003a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2208      	movs	r2, #8
 8003a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7fd fda2 	bl	80015b8 <HAL_TIM_IC_CaptureCallback>
 8003a74:	e005      	b.n	8003a82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f94c 	bl	8003d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f953 	bl	8003d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d10e      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d107      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0201 	mvn.w	r2, #1
 8003aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f926 	bl	8003d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abe:	2b80      	cmp	r3, #128	; 0x80
 8003ac0:	d10e      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003acc:	2b80      	cmp	r3, #128	; 0x80
 8003ace:	d107      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 fbae 	bl	800423c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aea:	2b40      	cmp	r3, #64	; 0x40
 8003aec:	d10e      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	d107      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f918 	bl	8003d3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f003 0320 	and.w	r3, r3, #32
 8003b16:	2b20      	cmp	r3, #32
 8003b18:	d10e      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b20      	cmp	r3, #32
 8003b26:	d107      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0220 	mvn.w	r2, #32
 8003b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 fb78 	bl	8004228 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d101      	bne.n	8003b5e <HAL_TIM_IC_ConfigChannel+0x1e>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e088      	b.n	8003c70 <HAL_TIM_IC_ConfigChannel+0x130>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d11b      	bne.n	8003ba4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	6819      	ldr	r1, [r3, #0]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f000 f988 	bl	8003e90 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 020c 	bic.w	r2, r2, #12
 8003b8e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6999      	ldr	r1, [r3, #24]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	619a      	str	r2, [r3, #24]
 8003ba2:	e060      	b.n	8003c66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d11c      	bne.n	8003be4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6818      	ldr	r0, [r3, #0]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	6819      	ldr	r1, [r3, #0]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f000 f9dd 	bl	8003f78 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699a      	ldr	r2, [r3, #24]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003bcc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6999      	ldr	r1, [r3, #24]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	021a      	lsls	r2, r3, #8
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	619a      	str	r2, [r3, #24]
 8003be2:	e040      	b.n	8003c66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d11b      	bne.n	8003c22 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	6819      	ldr	r1, [r3, #0]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f000 f9fa 	bl	8003ff2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	69da      	ldr	r2, [r3, #28]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 020c 	bic.w	r2, r2, #12
 8003c0c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	69d9      	ldr	r1, [r3, #28]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	61da      	str	r2, [r3, #28]
 8003c20:	e021      	b.n	8003c66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b0c      	cmp	r3, #12
 8003c26:	d11c      	bne.n	8003c62 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6818      	ldr	r0, [r3, #0]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	6819      	ldr	r1, [r3, #0]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f000 fa17 	bl	800406a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	69da      	ldr	r2, [r3, #28]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003c4a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	69d9      	ldr	r1, [r3, #28]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	021a      	lsls	r2, r3, #8
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	61da      	str	r2, [r3, #28]
 8003c60:	e001      	b.n	8003c66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b0c      	cmp	r3, #12
 8003c8a:	d831      	bhi.n	8003cf0 <HAL_TIM_ReadCapturedValue+0x78>
 8003c8c:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c92:	bf00      	nop
 8003c94:	08003cc9 	.word	0x08003cc9
 8003c98:	08003cf1 	.word	0x08003cf1
 8003c9c:	08003cf1 	.word	0x08003cf1
 8003ca0:	08003cf1 	.word	0x08003cf1
 8003ca4:	08003cd3 	.word	0x08003cd3
 8003ca8:	08003cf1 	.word	0x08003cf1
 8003cac:	08003cf1 	.word	0x08003cf1
 8003cb0:	08003cf1 	.word	0x08003cf1
 8003cb4:	08003cdd 	.word	0x08003cdd
 8003cb8:	08003cf1 	.word	0x08003cf1
 8003cbc:	08003cf1 	.word	0x08003cf1
 8003cc0:	08003cf1 	.word	0x08003cf1
 8003cc4:	08003ce7 	.word	0x08003ce7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cce:	60fb      	str	r3, [r7, #12]

      break;
 8003cd0:	e00f      	b.n	8003cf2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd8:	60fb      	str	r3, [r7, #12]

      break;
 8003cda:	e00a      	b.n	8003cf2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce2:	60fb      	str	r3, [r7, #12]

      break;
 8003ce4:	e005      	b.n	8003cf2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	60fb      	str	r3, [r7, #12]

      break;
 8003cee:	e000      	b.n	8003cf2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003cf0:	bf00      	nop
  }

  return tmpreg;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a40      	ldr	r2, [pc, #256]	; (8003e64 <TIM_Base_SetConfig+0x114>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d013      	beq.n	8003d90 <TIM_Base_SetConfig+0x40>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6e:	d00f      	beq.n	8003d90 <TIM_Base_SetConfig+0x40>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a3d      	ldr	r2, [pc, #244]	; (8003e68 <TIM_Base_SetConfig+0x118>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00b      	beq.n	8003d90 <TIM_Base_SetConfig+0x40>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a3c      	ldr	r2, [pc, #240]	; (8003e6c <TIM_Base_SetConfig+0x11c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d007      	beq.n	8003d90 <TIM_Base_SetConfig+0x40>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a3b      	ldr	r2, [pc, #236]	; (8003e70 <TIM_Base_SetConfig+0x120>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d003      	beq.n	8003d90 <TIM_Base_SetConfig+0x40>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a3a      	ldr	r2, [pc, #232]	; (8003e74 <TIM_Base_SetConfig+0x124>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d108      	bne.n	8003da2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a2f      	ldr	r2, [pc, #188]	; (8003e64 <TIM_Base_SetConfig+0x114>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d02b      	beq.n	8003e02 <TIM_Base_SetConfig+0xb2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db0:	d027      	beq.n	8003e02 <TIM_Base_SetConfig+0xb2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a2c      	ldr	r2, [pc, #176]	; (8003e68 <TIM_Base_SetConfig+0x118>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d023      	beq.n	8003e02 <TIM_Base_SetConfig+0xb2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a2b      	ldr	r2, [pc, #172]	; (8003e6c <TIM_Base_SetConfig+0x11c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d01f      	beq.n	8003e02 <TIM_Base_SetConfig+0xb2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a2a      	ldr	r2, [pc, #168]	; (8003e70 <TIM_Base_SetConfig+0x120>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d01b      	beq.n	8003e02 <TIM_Base_SetConfig+0xb2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a29      	ldr	r2, [pc, #164]	; (8003e74 <TIM_Base_SetConfig+0x124>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d017      	beq.n	8003e02 <TIM_Base_SetConfig+0xb2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a28      	ldr	r2, [pc, #160]	; (8003e78 <TIM_Base_SetConfig+0x128>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d013      	beq.n	8003e02 <TIM_Base_SetConfig+0xb2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a27      	ldr	r2, [pc, #156]	; (8003e7c <TIM_Base_SetConfig+0x12c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00f      	beq.n	8003e02 <TIM_Base_SetConfig+0xb2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a26      	ldr	r2, [pc, #152]	; (8003e80 <TIM_Base_SetConfig+0x130>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d00b      	beq.n	8003e02 <TIM_Base_SetConfig+0xb2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a25      	ldr	r2, [pc, #148]	; (8003e84 <TIM_Base_SetConfig+0x134>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d007      	beq.n	8003e02 <TIM_Base_SetConfig+0xb2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a24      	ldr	r2, [pc, #144]	; (8003e88 <TIM_Base_SetConfig+0x138>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d003      	beq.n	8003e02 <TIM_Base_SetConfig+0xb2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a23      	ldr	r2, [pc, #140]	; (8003e8c <TIM_Base_SetConfig+0x13c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d108      	bne.n	8003e14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a0a      	ldr	r2, [pc, #40]	; (8003e64 <TIM_Base_SetConfig+0x114>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d003      	beq.n	8003e48 <TIM_Base_SetConfig+0xf8>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a0c      	ldr	r2, [pc, #48]	; (8003e74 <TIM_Base_SetConfig+0x124>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d103      	bne.n	8003e50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	691a      	ldr	r2, [r3, #16]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	615a      	str	r2, [r3, #20]
}
 8003e56:	bf00      	nop
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	40010000 	.word	0x40010000
 8003e68:	40000400 	.word	0x40000400
 8003e6c:	40000800 	.word	0x40000800
 8003e70:	40000c00 	.word	0x40000c00
 8003e74:	40010400 	.word	0x40010400
 8003e78:	40014000 	.word	0x40014000
 8003e7c:	40014400 	.word	0x40014400
 8003e80:	40014800 	.word	0x40014800
 8003e84:	40001800 	.word	0x40001800
 8003e88:	40001c00 	.word	0x40001c00
 8003e8c:	40002000 	.word	0x40002000

08003e90 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
 8003e9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	f023 0201 	bic.w	r2, r3, #1
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4a28      	ldr	r2, [pc, #160]	; (8003f5c <TIM_TI1_SetConfig+0xcc>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d01b      	beq.n	8003ef6 <TIM_TI1_SetConfig+0x66>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec4:	d017      	beq.n	8003ef6 <TIM_TI1_SetConfig+0x66>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4a25      	ldr	r2, [pc, #148]	; (8003f60 <TIM_TI1_SetConfig+0xd0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d013      	beq.n	8003ef6 <TIM_TI1_SetConfig+0x66>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4a24      	ldr	r2, [pc, #144]	; (8003f64 <TIM_TI1_SetConfig+0xd4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00f      	beq.n	8003ef6 <TIM_TI1_SetConfig+0x66>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4a23      	ldr	r2, [pc, #140]	; (8003f68 <TIM_TI1_SetConfig+0xd8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00b      	beq.n	8003ef6 <TIM_TI1_SetConfig+0x66>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4a22      	ldr	r2, [pc, #136]	; (8003f6c <TIM_TI1_SetConfig+0xdc>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d007      	beq.n	8003ef6 <TIM_TI1_SetConfig+0x66>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4a21      	ldr	r2, [pc, #132]	; (8003f70 <TIM_TI1_SetConfig+0xe0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d003      	beq.n	8003ef6 <TIM_TI1_SetConfig+0x66>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4a20      	ldr	r2, [pc, #128]	; (8003f74 <TIM_TI1_SetConfig+0xe4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d101      	bne.n	8003efa <TIM_TI1_SetConfig+0x6a>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e000      	b.n	8003efc <TIM_TI1_SetConfig+0x6c>
 8003efa:	2300      	movs	r3, #0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d008      	beq.n	8003f12 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f023 0303 	bic.w	r3, r3, #3
 8003f06:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	e003      	b.n	8003f1a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f043 0301 	orr.w	r3, r3, #1
 8003f18:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f023 030a 	bic.w	r3, r3, #10
 8003f34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	f003 030a 	and.w	r3, r3, #10
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	621a      	str	r2, [r3, #32]
}
 8003f4e:	bf00      	nop
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40010000 	.word	0x40010000
 8003f60:	40000400 	.word	0x40000400
 8003f64:	40000800 	.word	0x40000800
 8003f68:	40000c00 	.word	0x40000c00
 8003f6c:	40010400 	.word	0x40010400
 8003f70:	40014000 	.word	0x40014000
 8003f74:	40001800 	.word	0x40001800

08003f78 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	f023 0210 	bic.w	r2, r3, #16
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	021b      	lsls	r3, r3, #8
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fb6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	031b      	lsls	r3, r3, #12
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	011b      	lsls	r3, r3, #4
 8003fd0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	621a      	str	r2, [r3, #32]
}
 8003fe6:	bf00      	nop
 8003fe8:	371c      	adds	r7, #28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b087      	sub	sp, #28
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	607a      	str	r2, [r7, #4]
 8003ffe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f023 0303 	bic.w	r3, r3, #3
 800401e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4313      	orrs	r3, r2
 8004026:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800402e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	b2db      	uxtb	r3, r3
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	4313      	orrs	r3, r2
 800403a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004042:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	021b      	lsls	r3, r3, #8
 8004048:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	621a      	str	r2, [r3, #32]
}
 800405e:	bf00      	nop
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800406a:	b480      	push	{r7}
 800406c:	b087      	sub	sp, #28
 800406e:	af00      	add	r7, sp, #0
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	607a      	str	r2, [r7, #4]
 8004076:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004096:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	021b      	lsls	r3, r3, #8
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	4313      	orrs	r3, r2
 80040a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	031b      	lsls	r3, r3, #12
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80040bc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	031b      	lsls	r3, r3, #12
 80040c2:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	621a      	str	r2, [r3, #32]
}
 80040d8:	bf00      	nop
 80040da:	371c      	adds	r7, #28
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f003 031f 	and.w	r3, r3, #31
 80040f6:	2201      	movs	r2, #1
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a1a      	ldr	r2, [r3, #32]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	43db      	mvns	r3, r3
 8004106:	401a      	ands	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a1a      	ldr	r2, [r3, #32]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f003 031f 	and.w	r3, r3, #31
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	fa01 f303 	lsl.w	r3, r1, r3
 800411c:	431a      	orrs	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	621a      	str	r2, [r3, #32]
}
 8004122:	bf00      	nop
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
	...

08004130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004140:	2b01      	cmp	r3, #1
 8004142:	d101      	bne.n	8004148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004144:	2302      	movs	r3, #2
 8004146:	e05a      	b.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a21      	ldr	r2, [pc, #132]	; (800420c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d022      	beq.n	80041d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004194:	d01d      	beq.n	80041d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a1d      	ldr	r2, [pc, #116]	; (8004210 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d018      	beq.n	80041d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a1b      	ldr	r2, [pc, #108]	; (8004214 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d013      	beq.n	80041d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a1a      	ldr	r2, [pc, #104]	; (8004218 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d00e      	beq.n	80041d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a18      	ldr	r2, [pc, #96]	; (800421c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d009      	beq.n	80041d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a17      	ldr	r2, [pc, #92]	; (8004220 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d004      	beq.n	80041d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a15      	ldr	r2, [pc, #84]	; (8004224 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d10c      	bne.n	80041ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40010000 	.word	0x40010000
 8004210:	40000400 	.word	0x40000400
 8004214:	40000800 	.word	0x40000800
 8004218:	40000c00 	.word	0x40000c00
 800421c:	40010400 	.word	0x40010400
 8004220:	40014000 	.word	0x40014000
 8004224:	40001800 	.word	0x40001800

08004228 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e03f      	b.n	80042e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fd fbce 	bl	8001a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2224      	movs	r2, #36	; 0x24
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004292:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f929 	bl	80044ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695a      	ldr	r2, [r3, #20]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68da      	ldr	r2, [r3, #12]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b08a      	sub	sp, #40	; 0x28
 80042ee:	af02      	add	r7, sp, #8
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	603b      	str	r3, [r7, #0]
 80042f6:	4613      	mov	r3, r2
 80042f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b20      	cmp	r3, #32
 8004308:	d17c      	bne.n	8004404 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <HAL_UART_Transmit+0x2c>
 8004310:	88fb      	ldrh	r3, [r7, #6]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e075      	b.n	8004406 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004320:	2b01      	cmp	r3, #1
 8004322:	d101      	bne.n	8004328 <HAL_UART_Transmit+0x3e>
 8004324:	2302      	movs	r3, #2
 8004326:	e06e      	b.n	8004406 <HAL_UART_Transmit+0x11c>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2221      	movs	r2, #33	; 0x21
 800433a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800433e:	f7fd fd75 	bl	8001e2c <HAL_GetTick>
 8004342:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	88fa      	ldrh	r2, [r7, #6]
 8004348:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	88fa      	ldrh	r2, [r7, #6]
 800434e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004358:	d108      	bne.n	800436c <HAL_UART_Transmit+0x82>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d104      	bne.n	800436c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004362:	2300      	movs	r3, #0
 8004364:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	e003      	b.n	8004374 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004370:	2300      	movs	r3, #0
 8004372:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800437c:	e02a      	b.n	80043d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2200      	movs	r2, #0
 8004386:	2180      	movs	r1, #128	; 0x80
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 f840 	bl	800440e <UART_WaitOnFlagUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e036      	b.n	8004406 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10b      	bne.n	80043b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	461a      	mov	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	3302      	adds	r3, #2
 80043b2:	61bb      	str	r3, [r7, #24]
 80043b4:	e007      	b.n	80043c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	781a      	ldrb	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	3301      	adds	r3, #1
 80043c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043d8:	b29b      	uxth	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1cf      	bne.n	800437e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2200      	movs	r2, #0
 80043e6:	2140      	movs	r1, #64	; 0x40
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 f810 	bl	800440e <UART_WaitOnFlagUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e006      	b.n	8004406 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004400:	2300      	movs	r3, #0
 8004402:	e000      	b.n	8004406 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004404:	2302      	movs	r3, #2
  }
}
 8004406:	4618      	mov	r0, r3
 8004408:	3720      	adds	r7, #32
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b090      	sub	sp, #64	; 0x40
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	603b      	str	r3, [r7, #0]
 800441a:	4613      	mov	r3, r2
 800441c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800441e:	e050      	b.n	80044c2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004426:	d04c      	beq.n	80044c2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800442a:	2b00      	cmp	r3, #0
 800442c:	d007      	beq.n	800443e <UART_WaitOnFlagUntilTimeout+0x30>
 800442e:	f7fd fcfd 	bl	8001e2c <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800443a:	429a      	cmp	r2, r3
 800443c:	d241      	bcs.n	80044c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	330c      	adds	r3, #12
 8004444:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004448:	e853 3f00 	ldrex	r3, [r3]
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004454:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	330c      	adds	r3, #12
 800445c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800445e:	637a      	str	r2, [r7, #52]	; 0x34
 8004460:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004462:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004464:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004466:	e841 2300 	strex	r3, r2, [r1]
 800446a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800446c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1e5      	bne.n	800443e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3314      	adds	r3, #20
 8004478:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	613b      	str	r3, [r7, #16]
   return(result);
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f023 0301 	bic.w	r3, r3, #1
 8004488:	63bb      	str	r3, [r7, #56]	; 0x38
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3314      	adds	r3, #20
 8004490:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004492:	623a      	str	r2, [r7, #32]
 8004494:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	69f9      	ldr	r1, [r7, #28]
 8004498:	6a3a      	ldr	r2, [r7, #32]
 800449a:	e841 2300 	strex	r3, r2, [r1]
 800449e:	61bb      	str	r3, [r7, #24]
   return(result);
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1e5      	bne.n	8004472 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e00f      	b.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	4013      	ands	r3, r2
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	bf0c      	ite	eq
 80044d2:	2301      	moveq	r3, #1
 80044d4:	2300      	movne	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	461a      	mov	r2, r3
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d09f      	beq.n	8004420 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3740      	adds	r7, #64	; 0x40
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044f0:	b0c0      	sub	sp, #256	; 0x100
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004508:	68d9      	ldr	r1, [r3, #12]
 800450a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	ea40 0301 	orr.w	r3, r0, r1
 8004514:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	431a      	orrs	r2, r3
 8004524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	431a      	orrs	r2, r3
 800452c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	4313      	orrs	r3, r2
 8004534:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004544:	f021 010c 	bic.w	r1, r1, #12
 8004548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004552:	430b      	orrs	r3, r1
 8004554:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004566:	6999      	ldr	r1, [r3, #24]
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	ea40 0301 	orr.w	r3, r0, r1
 8004572:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	4b8f      	ldr	r3, [pc, #572]	; (80047b8 <UART_SetConfig+0x2cc>)
 800457c:	429a      	cmp	r2, r3
 800457e:	d005      	beq.n	800458c <UART_SetConfig+0xa0>
 8004580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	4b8d      	ldr	r3, [pc, #564]	; (80047bc <UART_SetConfig+0x2d0>)
 8004588:	429a      	cmp	r2, r3
 800458a:	d104      	bne.n	8004596 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800458c:	f7ff f844 	bl	8003618 <HAL_RCC_GetPCLK2Freq>
 8004590:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004594:	e003      	b.n	800459e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004596:	f7ff f82b 	bl	80035f0 <HAL_RCC_GetPCLK1Freq>
 800459a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800459e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045a8:	f040 810c 	bne.w	80047c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045b0:	2200      	movs	r2, #0
 80045b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80045ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80045be:	4622      	mov	r2, r4
 80045c0:	462b      	mov	r3, r5
 80045c2:	1891      	adds	r1, r2, r2
 80045c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80045c6:	415b      	adcs	r3, r3
 80045c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045ce:	4621      	mov	r1, r4
 80045d0:	eb12 0801 	adds.w	r8, r2, r1
 80045d4:	4629      	mov	r1, r5
 80045d6:	eb43 0901 	adc.w	r9, r3, r1
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045ee:	4690      	mov	r8, r2
 80045f0:	4699      	mov	r9, r3
 80045f2:	4623      	mov	r3, r4
 80045f4:	eb18 0303 	adds.w	r3, r8, r3
 80045f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045fc:	462b      	mov	r3, r5
 80045fe:	eb49 0303 	adc.w	r3, r9, r3
 8004602:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004612:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004616:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800461a:	460b      	mov	r3, r1
 800461c:	18db      	adds	r3, r3, r3
 800461e:	653b      	str	r3, [r7, #80]	; 0x50
 8004620:	4613      	mov	r3, r2
 8004622:	eb42 0303 	adc.w	r3, r2, r3
 8004626:	657b      	str	r3, [r7, #84]	; 0x54
 8004628:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800462c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004630:	f7fc faac 	bl	8000b8c <__aeabi_uldivmod>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4b61      	ldr	r3, [pc, #388]	; (80047c0 <UART_SetConfig+0x2d4>)
 800463a:	fba3 2302 	umull	r2, r3, r3, r2
 800463e:	095b      	lsrs	r3, r3, #5
 8004640:	011c      	lsls	r4, r3, #4
 8004642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004646:	2200      	movs	r2, #0
 8004648:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800464c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004650:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004654:	4642      	mov	r2, r8
 8004656:	464b      	mov	r3, r9
 8004658:	1891      	adds	r1, r2, r2
 800465a:	64b9      	str	r1, [r7, #72]	; 0x48
 800465c:	415b      	adcs	r3, r3
 800465e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004660:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004664:	4641      	mov	r1, r8
 8004666:	eb12 0a01 	adds.w	sl, r2, r1
 800466a:	4649      	mov	r1, r9
 800466c:	eb43 0b01 	adc.w	fp, r3, r1
 8004670:	f04f 0200 	mov.w	r2, #0
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800467c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004680:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004684:	4692      	mov	sl, r2
 8004686:	469b      	mov	fp, r3
 8004688:	4643      	mov	r3, r8
 800468a:	eb1a 0303 	adds.w	r3, sl, r3
 800468e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004692:	464b      	mov	r3, r9
 8004694:	eb4b 0303 	adc.w	r3, fp, r3
 8004698:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800469c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80046ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80046b0:	460b      	mov	r3, r1
 80046b2:	18db      	adds	r3, r3, r3
 80046b4:	643b      	str	r3, [r7, #64]	; 0x40
 80046b6:	4613      	mov	r3, r2
 80046b8:	eb42 0303 	adc.w	r3, r2, r3
 80046bc:	647b      	str	r3, [r7, #68]	; 0x44
 80046be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80046c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80046c6:	f7fc fa61 	bl	8000b8c <__aeabi_uldivmod>
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4611      	mov	r1, r2
 80046d0:	4b3b      	ldr	r3, [pc, #236]	; (80047c0 <UART_SetConfig+0x2d4>)
 80046d2:	fba3 2301 	umull	r2, r3, r3, r1
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	2264      	movs	r2, #100	; 0x64
 80046da:	fb02 f303 	mul.w	r3, r2, r3
 80046de:	1acb      	subs	r3, r1, r3
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80046e6:	4b36      	ldr	r3, [pc, #216]	; (80047c0 <UART_SetConfig+0x2d4>)
 80046e8:	fba3 2302 	umull	r2, r3, r3, r2
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046f4:	441c      	add	r4, r3
 80046f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046fa:	2200      	movs	r2, #0
 80046fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004700:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004704:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004708:	4642      	mov	r2, r8
 800470a:	464b      	mov	r3, r9
 800470c:	1891      	adds	r1, r2, r2
 800470e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004710:	415b      	adcs	r3, r3
 8004712:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004714:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004718:	4641      	mov	r1, r8
 800471a:	1851      	adds	r1, r2, r1
 800471c:	6339      	str	r1, [r7, #48]	; 0x30
 800471e:	4649      	mov	r1, r9
 8004720:	414b      	adcs	r3, r1
 8004722:	637b      	str	r3, [r7, #52]	; 0x34
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004730:	4659      	mov	r1, fp
 8004732:	00cb      	lsls	r3, r1, #3
 8004734:	4651      	mov	r1, sl
 8004736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800473a:	4651      	mov	r1, sl
 800473c:	00ca      	lsls	r2, r1, #3
 800473e:	4610      	mov	r0, r2
 8004740:	4619      	mov	r1, r3
 8004742:	4603      	mov	r3, r0
 8004744:	4642      	mov	r2, r8
 8004746:	189b      	adds	r3, r3, r2
 8004748:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800474c:	464b      	mov	r3, r9
 800474e:	460a      	mov	r2, r1
 8004750:	eb42 0303 	adc.w	r3, r2, r3
 8004754:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004764:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004768:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800476c:	460b      	mov	r3, r1
 800476e:	18db      	adds	r3, r3, r3
 8004770:	62bb      	str	r3, [r7, #40]	; 0x28
 8004772:	4613      	mov	r3, r2
 8004774:	eb42 0303 	adc.w	r3, r2, r3
 8004778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800477a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800477e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004782:	f7fc fa03 	bl	8000b8c <__aeabi_uldivmod>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	4b0d      	ldr	r3, [pc, #52]	; (80047c0 <UART_SetConfig+0x2d4>)
 800478c:	fba3 1302 	umull	r1, r3, r3, r2
 8004790:	095b      	lsrs	r3, r3, #5
 8004792:	2164      	movs	r1, #100	; 0x64
 8004794:	fb01 f303 	mul.w	r3, r1, r3
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	3332      	adds	r3, #50	; 0x32
 800479e:	4a08      	ldr	r2, [pc, #32]	; (80047c0 <UART_SetConfig+0x2d4>)
 80047a0:	fba2 2303 	umull	r2, r3, r2, r3
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	f003 0207 	and.w	r2, r3, #7
 80047aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4422      	add	r2, r4
 80047b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047b4:	e106      	b.n	80049c4 <UART_SetConfig+0x4d8>
 80047b6:	bf00      	nop
 80047b8:	40011000 	.word	0x40011000
 80047bc:	40011400 	.word	0x40011400
 80047c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047c8:	2200      	movs	r2, #0
 80047ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80047d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80047d6:	4642      	mov	r2, r8
 80047d8:	464b      	mov	r3, r9
 80047da:	1891      	adds	r1, r2, r2
 80047dc:	6239      	str	r1, [r7, #32]
 80047de:	415b      	adcs	r3, r3
 80047e0:	627b      	str	r3, [r7, #36]	; 0x24
 80047e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047e6:	4641      	mov	r1, r8
 80047e8:	1854      	adds	r4, r2, r1
 80047ea:	4649      	mov	r1, r9
 80047ec:	eb43 0501 	adc.w	r5, r3, r1
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	00eb      	lsls	r3, r5, #3
 80047fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047fe:	00e2      	lsls	r2, r4, #3
 8004800:	4614      	mov	r4, r2
 8004802:	461d      	mov	r5, r3
 8004804:	4643      	mov	r3, r8
 8004806:	18e3      	adds	r3, r4, r3
 8004808:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800480c:	464b      	mov	r3, r9
 800480e:	eb45 0303 	adc.w	r3, r5, r3
 8004812:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004822:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004832:	4629      	mov	r1, r5
 8004834:	008b      	lsls	r3, r1, #2
 8004836:	4621      	mov	r1, r4
 8004838:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800483c:	4621      	mov	r1, r4
 800483e:	008a      	lsls	r2, r1, #2
 8004840:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004844:	f7fc f9a2 	bl	8000b8c <__aeabi_uldivmod>
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	4b60      	ldr	r3, [pc, #384]	; (80049d0 <UART_SetConfig+0x4e4>)
 800484e:	fba3 2302 	umull	r2, r3, r3, r2
 8004852:	095b      	lsrs	r3, r3, #5
 8004854:	011c      	lsls	r4, r3, #4
 8004856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800485a:	2200      	movs	r2, #0
 800485c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004860:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004864:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004868:	4642      	mov	r2, r8
 800486a:	464b      	mov	r3, r9
 800486c:	1891      	adds	r1, r2, r2
 800486e:	61b9      	str	r1, [r7, #24]
 8004870:	415b      	adcs	r3, r3
 8004872:	61fb      	str	r3, [r7, #28]
 8004874:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004878:	4641      	mov	r1, r8
 800487a:	1851      	adds	r1, r2, r1
 800487c:	6139      	str	r1, [r7, #16]
 800487e:	4649      	mov	r1, r9
 8004880:	414b      	adcs	r3, r1
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	f04f 0300 	mov.w	r3, #0
 800488c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004890:	4659      	mov	r1, fp
 8004892:	00cb      	lsls	r3, r1, #3
 8004894:	4651      	mov	r1, sl
 8004896:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800489a:	4651      	mov	r1, sl
 800489c:	00ca      	lsls	r2, r1, #3
 800489e:	4610      	mov	r0, r2
 80048a0:	4619      	mov	r1, r3
 80048a2:	4603      	mov	r3, r0
 80048a4:	4642      	mov	r2, r8
 80048a6:	189b      	adds	r3, r3, r2
 80048a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048ac:	464b      	mov	r3, r9
 80048ae:	460a      	mov	r2, r1
 80048b0:	eb42 0303 	adc.w	r3, r2, r3
 80048b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80048c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	f04f 0300 	mov.w	r3, #0
 80048cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80048d0:	4649      	mov	r1, r9
 80048d2:	008b      	lsls	r3, r1, #2
 80048d4:	4641      	mov	r1, r8
 80048d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048da:	4641      	mov	r1, r8
 80048dc:	008a      	lsls	r2, r1, #2
 80048de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80048e2:	f7fc f953 	bl	8000b8c <__aeabi_uldivmod>
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	4611      	mov	r1, r2
 80048ec:	4b38      	ldr	r3, [pc, #224]	; (80049d0 <UART_SetConfig+0x4e4>)
 80048ee:	fba3 2301 	umull	r2, r3, r3, r1
 80048f2:	095b      	lsrs	r3, r3, #5
 80048f4:	2264      	movs	r2, #100	; 0x64
 80048f6:	fb02 f303 	mul.w	r3, r2, r3
 80048fa:	1acb      	subs	r3, r1, r3
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	3332      	adds	r3, #50	; 0x32
 8004900:	4a33      	ldr	r2, [pc, #204]	; (80049d0 <UART_SetConfig+0x4e4>)
 8004902:	fba2 2303 	umull	r2, r3, r2, r3
 8004906:	095b      	lsrs	r3, r3, #5
 8004908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800490c:	441c      	add	r4, r3
 800490e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004912:	2200      	movs	r2, #0
 8004914:	673b      	str	r3, [r7, #112]	; 0x70
 8004916:	677a      	str	r2, [r7, #116]	; 0x74
 8004918:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800491c:	4642      	mov	r2, r8
 800491e:	464b      	mov	r3, r9
 8004920:	1891      	adds	r1, r2, r2
 8004922:	60b9      	str	r1, [r7, #8]
 8004924:	415b      	adcs	r3, r3
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800492c:	4641      	mov	r1, r8
 800492e:	1851      	adds	r1, r2, r1
 8004930:	6039      	str	r1, [r7, #0]
 8004932:	4649      	mov	r1, r9
 8004934:	414b      	adcs	r3, r1
 8004936:	607b      	str	r3, [r7, #4]
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004944:	4659      	mov	r1, fp
 8004946:	00cb      	lsls	r3, r1, #3
 8004948:	4651      	mov	r1, sl
 800494a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800494e:	4651      	mov	r1, sl
 8004950:	00ca      	lsls	r2, r1, #3
 8004952:	4610      	mov	r0, r2
 8004954:	4619      	mov	r1, r3
 8004956:	4603      	mov	r3, r0
 8004958:	4642      	mov	r2, r8
 800495a:	189b      	adds	r3, r3, r2
 800495c:	66bb      	str	r3, [r7, #104]	; 0x68
 800495e:	464b      	mov	r3, r9
 8004960:	460a      	mov	r2, r1
 8004962:	eb42 0303 	adc.w	r3, r2, r3
 8004966:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	663b      	str	r3, [r7, #96]	; 0x60
 8004972:	667a      	str	r2, [r7, #100]	; 0x64
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	f04f 0300 	mov.w	r3, #0
 800497c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004980:	4649      	mov	r1, r9
 8004982:	008b      	lsls	r3, r1, #2
 8004984:	4641      	mov	r1, r8
 8004986:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800498a:	4641      	mov	r1, r8
 800498c:	008a      	lsls	r2, r1, #2
 800498e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004992:	f7fc f8fb 	bl	8000b8c <__aeabi_uldivmod>
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4b0d      	ldr	r3, [pc, #52]	; (80049d0 <UART_SetConfig+0x4e4>)
 800499c:	fba3 1302 	umull	r1, r3, r3, r2
 80049a0:	095b      	lsrs	r3, r3, #5
 80049a2:	2164      	movs	r1, #100	; 0x64
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	3332      	adds	r3, #50	; 0x32
 80049ae:	4a08      	ldr	r2, [pc, #32]	; (80049d0 <UART_SetConfig+0x4e4>)
 80049b0:	fba2 2303 	umull	r2, r3, r2, r3
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	f003 020f 	and.w	r2, r3, #15
 80049ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4422      	add	r2, r4
 80049c2:	609a      	str	r2, [r3, #8]
}
 80049c4:	bf00      	nop
 80049c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80049ca:	46bd      	mov	sp, r7
 80049cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049d0:	51eb851f 	.word	0x51eb851f

080049d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
    HAL_Init();
 80049d8:	f7fd f9c8 	bl	8001d6c <HAL_Init>

    /* Configure the system clock to 180 MHz */
    SystemClock_Config();
 80049dc:	f000 f976 	bl	8004ccc <SystemClock_Config>

    /* Infinite loop */
    while (1) {
        parkingSensor_UpdateFSM();
 80049e0:	f000 f804 	bl	80049ec <parkingSensor_UpdateFSM>
        HAL_Delay(100);
 80049e4:	2064      	movs	r0, #100	; 0x64
 80049e6:	f7fd fa2d 	bl	8001e44 <HAL_Delay>
        parkingSensor_UpdateFSM();
 80049ea:	e7f9      	b.n	80049e0 <main+0xc>

080049ec <parkingSensor_UpdateFSM>:
    }
}

static void parkingSensor_UpdateFSM()
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
    switch (parkingSensor_State) {
 80049f0:	4b66      	ldr	r3, [pc, #408]	; (8004b8c <parkingSensor_UpdateFSM+0x1a0>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	f200 80bd 	bhi.w	8004b74 <parkingSensor_UpdateFSM+0x188>
 80049fa:	a201      	add	r2, pc, #4	; (adr r2, 8004a00 <parkingSensor_UpdateFSM+0x14>)
 80049fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a00:	08004a15 	.word	0x08004a15
 8004a04:	08004a69 	.word	0x08004a69
 8004a08:	08004aa3 	.word	0x08004aa3
 8004a0c:	08004ab5 	.word	0x08004ab5
 8004a10:	08004ae1 	.word	0x08004ae1
        case CONFIGURATION:
            if (display_Init() != DISPLAY_OK)
 8004a14:	f7fc fc40 	bl	8001298 <display_Init>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <parkingSensor_UpdateFSM+0x36>
                Error_Handler();
 8004a1e:	f000 f9bf 	bl	8004da0 <Error_Handler>

            if (hcsr04_Init() != HCSR04_OK)
 8004a22:	f7fc ff77 	bl	8001914 <hcsr04_Init>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <parkingSensor_UpdateFSM+0x44>
                Error_Handler();
 8004a2c:	f000 f9b8 	bl	8004da0 <Error_Handler>

            if (uart_Init() != UART_OK)
 8004a30:	f7fd f892 	bl	8001b58 <uart_Init>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <parkingSensor_UpdateFSM+0x52>
                Error_Handler();
 8004a3a:	f000 f9b1 	bl	8004da0 <Error_Handler>
            
            if (reverse_Init() != REVERSE_OK)
 8004a3e:	f7fc ffb7 	bl	80019b0 <reverse_Init>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <parkingSensor_UpdateFSM+0x60>
                Error_Handler();
 8004a48:	f000 f9aa 	bl	8004da0 <Error_Handler>

            delayInit(&welcome_delay, WELCOME_DELAY_DURATION_MS);
 8004a4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004a50:	484f      	ldr	r0, [pc, #316]	; (8004b90 <parkingSensor_UpdateFSM+0x1a4>)
 8004a52:	f7fc faa5 	bl	8000fa0 <delayInit>
            delayInit(&displaying_data_delay, DISPLAYING_DATA_DELAY_DURATION_MS);
 8004a56:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004a5a:	484e      	ldr	r0, [pc, #312]	; (8004b94 <parkingSensor_UpdateFSM+0x1a8>)
 8004a5c:	f7fc faa0 	bl	8000fa0 <delayInit>
            parkingSensor_State = WELCOME;
 8004a60:	4b4a      	ldr	r3, [pc, #296]	; (8004b8c <parkingSensor_UpdateFSM+0x1a0>)
 8004a62:	2201      	movs	r2, #1
 8004a64:	701a      	strb	r2, [r3, #0]
            break;
 8004a66:	e08f      	b.n	8004b88 <parkingSensor_UpdateFSM+0x19c>

        case WELCOME:
            if (!welcome_msg_flag) {
 8004a68:	4b4b      	ldr	r3, [pc, #300]	; (8004b98 <parkingSensor_UpdateFSM+0x1ac>)
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	f083 0301 	eor.w	r3, r3, #1
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d009      	beq.n	8004a8a <parkingSensor_UpdateFSM+0x9e>
                welcome_msg_flag = true;
 8004a76:	4b48      	ldr	r3, [pc, #288]	; (8004b98 <parkingSensor_UpdateFSM+0x1ac>)
 8004a78:	2201      	movs	r2, #1
 8004a7a:	701a      	strb	r2, [r3, #0]
                display_Clear();
 8004a7c:	f7fc fcaa 	bl	80013d4 <display_Clear>
                display_PrintStringInTopLine((uint8_t *) welcome_msg);
 8004a80:	4846      	ldr	r0, [pc, #280]	; (8004b9c <parkingSensor_UpdateFSM+0x1b0>)
 8004a82:	f7fc fcd9 	bl	8001438 <display_PrintStringInTopLine>
                display_TurnOn();
 8004a86:	f7fc fd55 	bl	8001534 <display_TurnOn>
            }
            
            if (delayRead(&welcome_delay)) {
 8004a8a:	4841      	ldr	r0, [pc, #260]	; (8004b90 <parkingSensor_UpdateFSM+0x1a4>)
 8004a8c:	f7fc faa2 	bl	8000fd4 <delayRead>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d071      	beq.n	8004b7a <parkingSensor_UpdateFSM+0x18e>
                display_TurnOff();
 8004a96:	f7fc fd67 	bl	8001568 <display_TurnOff>
                parkingSensor_State = IDLE;
 8004a9a:	4b3c      	ldr	r3, [pc, #240]	; (8004b8c <parkingSensor_UpdateFSM+0x1a0>)
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8004aa0:	e06b      	b.n	8004b7a <parkingSensor_UpdateFSM+0x18e>

        case IDLE:
            if (reverse_GetState())
 8004aa2:	f7fc ffaf 	bl	8001a04 <reverse_GetState>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d068      	beq.n	8004b7e <parkingSensor_UpdateFSM+0x192>
                parkingSensor_State = MEASURING;
 8004aac:	4b37      	ldr	r3, [pc, #220]	; (8004b8c <parkingSensor_UpdateFSM+0x1a0>)
 8004aae:	2203      	movs	r2, #3
 8004ab0:	701a      	strb	r2, [r3, #0]
            break;
 8004ab2:	e064      	b.n	8004b7e <parkingSensor_UpdateFSM+0x192>

        case MEASURING:
            if (reverse_GetState()) {
 8004ab4:	f7fc ffa6 	bl	8001a04 <reverse_GetState>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <parkingSensor_UpdateFSM+0xe8>
                if (!hcsr04_GetStatusMeasuring())
 8004abe:	f7fc ff6b 	bl	8001998 <hcsr04_GetStatusMeasuring>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	f083 0301 	eor.w	r3, r3, #1
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d059      	beq.n	8004b82 <parkingSensor_UpdateFSM+0x196>
                    hcsr04_StartMeasure();
 8004ace:	f7fc ff39 	bl	8001944 <hcsr04_StartMeasure>
            } else {
                display_TurnOff();
                parkingSensor_State = IDLE;
            }
            break;
 8004ad2:	e056      	b.n	8004b82 <parkingSensor_UpdateFSM+0x196>
                display_TurnOff();
 8004ad4:	f7fc fd48 	bl	8001568 <display_TurnOff>
                parkingSensor_State = IDLE;
 8004ad8:	4b2c      	ldr	r3, [pc, #176]	; (8004b8c <parkingSensor_UpdateFSM+0x1a0>)
 8004ada:	2202      	movs	r2, #2
 8004adc:	701a      	strb	r2, [r3, #0]
            break;
 8004ade:	e050      	b.n	8004b82 <parkingSensor_UpdateFSM+0x196>

        case SHARING:
            if (reverse_GetState()) {
 8004ae0:	f7fc ff90 	bl	8001a04 <reverse_GetState>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d03e      	beq.n	8004b68 <parkingSensor_UpdateFSM+0x17c>
                if (!distance_msg_flag) {
 8004aea:	4b2d      	ldr	r3, [pc, #180]	; (8004ba0 <parkingSensor_UpdateFSM+0x1b4>)
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	f083 0301 	eor.w	r3, r3, #1
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d02d      	beq.n	8004b54 <parkingSensor_UpdateFSM+0x168>
                    distance_msg_flag = true;
 8004af8:	4b29      	ldr	r3, [pc, #164]	; (8004ba0 <parkingSensor_UpdateFSM+0x1b4>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	701a      	strb	r2, [r3, #0]
                    distance_processed = parking_ProcessData();
 8004afe:	f000 f873 	bl	8004be8 <parking_ProcessData>
 8004b02:	4603      	mov	r3, r0
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	4b27      	ldr	r3, [pc, #156]	; (8004ba4 <parkingSensor_UpdateFSM+0x1b8>)
 8004b08:	801a      	strh	r2, [r3, #0]
                    sprintf(distance_dbg_msg, "%u \r\n", distance_processed);
 8004b0a:	4b26      	ldr	r3, [pc, #152]	; (8004ba4 <parkingSensor_UpdateFSM+0x1b8>)
 8004b0c:	881b      	ldrh	r3, [r3, #0]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	4925      	ldr	r1, [pc, #148]	; (8004ba8 <parkingSensor_UpdateFSM+0x1bc>)
 8004b12:	4826      	ldr	r0, [pc, #152]	; (8004bac <parkingSensor_UpdateFSM+0x1c0>)
 8004b14:	f000 f976 	bl	8004e04 <siprintf>
                    uart_SendStringSize((uint8_t *) distance_dbg_msg, strlen(distance_dbg_msg));
 8004b18:	4824      	ldr	r0, [pc, #144]	; (8004bac <parkingSensor_UpdateFSM+0x1c0>)
 8004b1a:	f7fb fb69 	bl	80001f0 <strlen>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	4619      	mov	r1, r3
 8004b24:	4821      	ldr	r0, [pc, #132]	; (8004bac <parkingSensor_UpdateFSM+0x1c0>)
 8004b26:	f7fd f82b 	bl	8001b80 <uart_SendStringSize>
                    parking_GenerateLevel(distance_msg, distance_processed);
 8004b2a:	4b1e      	ldr	r3, [pc, #120]	; (8004ba4 <parkingSensor_UpdateFSM+0x1b8>)
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	4619      	mov	r1, r3
 8004b30:	481f      	ldr	r0, [pc, #124]	; (8004bb0 <parkingSensor_UpdateFSM+0x1c4>)
 8004b32:	f000 f89b 	bl	8004c6c <parking_GenerateLevel>
                    display_Clear();
 8004b36:	f7fc fc4d 	bl	80013d4 <display_Clear>
                    display_PrintStringInTopLine((uint8_t *) distance_msg);
 8004b3a:	481d      	ldr	r0, [pc, #116]	; (8004bb0 <parkingSensor_UpdateFSM+0x1c4>)
 8004b3c:	f7fc fc7c 	bl	8001438 <display_PrintStringInTopLine>
                    display_PrintStringInBottomLine((uint8_t *) distance_msg);
 8004b40:	481b      	ldr	r0, [pc, #108]	; (8004bb0 <parkingSensor_UpdateFSM+0x1c4>)
 8004b42:	f7fc fcb8 	bl	80014b6 <display_PrintStringInBottomLine>
                    if (!display_GetState()) {
 8004b46:	f7fc fd29 	bl	800159c <display_GetState>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <parkingSensor_UpdateFSM+0x168>
                        display_TurnOn();
 8004b50:	f7fc fcf0 	bl	8001534 <display_TurnOn>
                    }
                }
                if (delayRead(&displaying_data_delay))
 8004b54:	480f      	ldr	r0, [pc, #60]	; (8004b94 <parkingSensor_UpdateFSM+0x1a8>)
 8004b56:	f7fc fa3d 	bl	8000fd4 <delayRead>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d012      	beq.n	8004b86 <parkingSensor_UpdateFSM+0x19a>
                    parkingSensor_State = MEASURING;
 8004b60:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <parkingSensor_UpdateFSM+0x1a0>)
 8004b62:	2203      	movs	r2, #3
 8004b64:	701a      	strb	r2, [r3, #0]
            } else {
                display_TurnOff();
                parkingSensor_State = IDLE;
            }
            break;
 8004b66:	e00e      	b.n	8004b86 <parkingSensor_UpdateFSM+0x19a>
                display_TurnOff();
 8004b68:	f7fc fcfe 	bl	8001568 <display_TurnOff>
                parkingSensor_State = IDLE;
 8004b6c:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <parkingSensor_UpdateFSM+0x1a0>)
 8004b6e:	2202      	movs	r2, #2
 8004b70:	701a      	strb	r2, [r3, #0]
            break;
 8004b72:	e008      	b.n	8004b86 <parkingSensor_UpdateFSM+0x19a>

        default:
            Error_Handler();
 8004b74:	f000 f914 	bl	8004da0 <Error_Handler>
            break;
 8004b78:	e006      	b.n	8004b88 <parkingSensor_UpdateFSM+0x19c>
            break;
 8004b7a:	bf00      	nop
 8004b7c:	e004      	b.n	8004b88 <parkingSensor_UpdateFSM+0x19c>
            break;
 8004b7e:	bf00      	nop
 8004b80:	e002      	b.n	8004b88 <parkingSensor_UpdateFSM+0x19c>
            break;
 8004b82:	bf00      	nop
 8004b84:	e000      	b.n	8004b88 <parkingSensor_UpdateFSM+0x19c>
            break;
 8004b86:	bf00      	nop
    }
}
 8004b88:	bf00      	nop
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	20000198 	.word	0x20000198
 8004b90:	2000019c 	.word	0x2000019c
 8004b94:	200001a8 	.word	0x200001a8
 8004b98:	200001b4 	.word	0x200001b4
 8004b9c:	0800580c 	.word	0x0800580c
 8004ba0:	200001d8 	.word	0x200001d8
 8004ba4:	200001dc 	.word	0x200001dc
 8004ba8:	08005764 	.word	0x08005764
 8004bac:	200001b8 	.word	0x200001b8
 8004bb0:	200001c8 	.word	0x200001c8

08004bb4 <hcsr04_IRQ_Callback>:

void hcsr04_IRQ_Callback(uint16_t distance)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	80fb      	strh	r3, [r7, #6]
    last_distance = distance;
 8004bbe:	4a07      	ldr	r2, [pc, #28]	; (8004bdc <hcsr04_IRQ_Callback+0x28>)
 8004bc0:	88fb      	ldrh	r3, [r7, #6]
 8004bc2:	8013      	strh	r3, [r2, #0]
    distance_msg_flag = false;
 8004bc4:	4b06      	ldr	r3, [pc, #24]	; (8004be0 <hcsr04_IRQ_Callback+0x2c>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	701a      	strb	r2, [r3, #0]
    parkingSensor_State = SHARING;
 8004bca:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <hcsr04_IRQ_Callback+0x30>)
 8004bcc:	2204      	movs	r2, #4
 8004bce:	701a      	strb	r2, [r3, #0]
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	200001da 	.word	0x200001da
 8004be0:	200001d8 	.word	0x200001d8
 8004be4:	20000198 	.word	0x20000198

08004be8 <parking_ProcessData>:

uint8_t parking_ProcessData()
{
 8004be8:	b5b0      	push	{r4, r5, r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
    if (last_distance > 50) {
 8004bee:	4b1c      	ldr	r3, [pc, #112]	; (8004c60 <parking_ProcessData+0x78>)
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	2b32      	cmp	r3, #50	; 0x32
 8004bf4:	d901      	bls.n	8004bfa <parking_ProcessData+0x12>
        return 0;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	e02d      	b.n	8004c56 <parking_ProcessData+0x6e>
    }

    for (int i = 1; i <= 8; i++) {
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	607b      	str	r3, [r7, #4]
 8004bfe:	e026      	b.n	8004c4e <parking_ProcessData+0x66>
        if (last_distance >= (50 - (i * 6.25))) {
 8004c00:	4b17      	ldr	r3, [pc, #92]	; (8004c60 <parking_ProcessData+0x78>)
 8004c02:	881b      	ldrh	r3, [r3, #0]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fb fc9d 	bl	8000544 <__aeabi_i2d>
 8004c0a:	4604      	mov	r4, r0
 8004c0c:	460d      	mov	r5, r1
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7fb fc98 	bl	8000544 <__aeabi_i2d>
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	4b12      	ldr	r3, [pc, #72]	; (8004c64 <parking_ProcessData+0x7c>)
 8004c1a:	f7fb fcfd 	bl	8000618 <__aeabi_dmul>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	f04f 0000 	mov.w	r0, #0
 8004c26:	4910      	ldr	r1, [pc, #64]	; (8004c68 <parking_ProcessData+0x80>)
 8004c28:	f7fb fb3e 	bl	80002a8 <__aeabi_dsub>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4620      	mov	r0, r4
 8004c32:	4629      	mov	r1, r5
 8004c34:	f7fb ff76 	bl	8000b24 <__aeabi_dcmpge>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d004      	beq.n	8004c48 <parking_ProcessData+0x60>
            return i - 1;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	3b01      	subs	r3, #1
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	e006      	b.n	8004c56 <parking_ProcessData+0x6e>
    for (int i = 1; i <= 8; i++) {
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	607b      	str	r3, [r7, #4]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	ddd5      	ble.n	8004c00 <parking_ProcessData+0x18>
        }
    }

    return 7;
 8004c54:	2307      	movs	r3, #7
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	200001da 	.word	0x200001da
 8004c64:	40190000 	.word	0x40190000
 8004c68:	40490000 	.word	0x40490000

08004c6c <parking_GenerateLevel>:

void parking_GenerateLevel(char * st, int nivel_resolucion)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
    if (st == NULL || nivel_resolucion < 0 || nivel_resolucion > 8) {
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <parking_GenerateLevel+0x1c>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	db02      	blt.n	8004c88 <parking_GenerateLevel+0x1c>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	dd02      	ble.n	8004c8e <parking_GenerateLevel+0x22>
        Error_Handler();
 8004c88:	f000 f88a 	bl	8004da0 <Error_Handler>
        return;
 8004c8c:	e01a      	b.n	8004cc4 <parking_GenerateLevel+0x58>
    }

    memset(st, 0, sizeof(distance_msg));
 8004c8e:	2210      	movs	r2, #16
 8004c90:	2100      	movs	r1, #0
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f8d6 	bl	8004e44 <memset>

    if (nivel_resolucion == 0) {
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d011      	beq.n	8004cc2 <parking_GenerateLevel+0x56>
        return;
    }

    for (int i = 0; i < nivel_resolucion*2+2; i++) {
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	e007      	b.n	8004cb4 <parking_GenerateLevel+0x48>
        st[i] = 0xFF;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	4413      	add	r3, r2
 8004caa:	22ff      	movs	r2, #255	; 0xff
 8004cac:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < nivel_resolucion*2+2; i++) {
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	dbf1      	blt.n	8004ca4 <parking_GenerateLevel+0x38>
 8004cc0:	e000      	b.n	8004cc4 <parking_GenerateLevel+0x58>
        return;
 8004cc2:	bf00      	nop
    }
}
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
	...

08004ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b094      	sub	sp, #80	; 0x50
 8004cd0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004cd2:	f107 0320 	add.w	r3, r7, #32
 8004cd6:	2230      	movs	r2, #48	; 0x30
 8004cd8:	2100      	movs	r1, #0
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 f8b2 	bl	8004e44 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ce0:	f107 030c 	add.w	r3, r7, #12
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	605a      	str	r2, [r3, #4]
 8004cea:	609a      	str	r2, [r3, #8]
 8004cec:	60da      	str	r2, [r3, #12]
 8004cee:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60bb      	str	r3, [r7, #8]
 8004cf4:	4b28      	ldr	r3, [pc, #160]	; (8004d98 <SystemClock_Config+0xcc>)
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf8:	4a27      	ldr	r2, [pc, #156]	; (8004d98 <SystemClock_Config+0xcc>)
 8004cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8004d00:	4b25      	ldr	r3, [pc, #148]	; (8004d98 <SystemClock_Config+0xcc>)
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d08:	60bb      	str	r3, [r7, #8]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	607b      	str	r3, [r7, #4]
 8004d10:	4b22      	ldr	r3, [pc, #136]	; (8004d9c <SystemClock_Config+0xd0>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a21      	ldr	r2, [pc, #132]	; (8004d9c <SystemClock_Config+0xd0>)
 8004d16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d1a:	6013      	str	r3, [r2, #0]
 8004d1c:	4b1f      	ldr	r3, [pc, #124]	; (8004d9c <SystemClock_Config+0xd0>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004d24:	607b      	str	r3, [r7, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004d2c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004d30:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d32:	2302      	movs	r3, #2
 8004d34:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 4;
 8004d3c:	2304      	movs	r3, #4
 8004d3e:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 8004d40:	23a8      	movs	r3, #168	; 0xa8
 8004d42:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004d44:	2302      	movs	r3, #2
 8004d46:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8004d48:	2307      	movs	r3, #7
 8004d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d4c:	f107 0320 	add.w	r3, r7, #32
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7fd ffdd 	bl	8002d10 <HAL_RCC_OscConfig>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <SystemClock_Config+0x94>
    {
        Error_Handler();
 8004d5c:	f000 f820 	bl	8004da0 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d60:	230f      	movs	r3, #15
 8004d62:	60fb      	str	r3, [r7, #12]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d64:	2302      	movs	r3, #2
 8004d66:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004d6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004d70:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004d72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d76:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004d78:	f107 030c 	add.w	r3, r7, #12
 8004d7c:	2105      	movs	r1, #5
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fe fa3e 	bl	8003200 <HAL_RCC_ClockConfig>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <SystemClock_Config+0xc2>
    {
        Error_Handler();
 8004d8a:	f000 f809 	bl	8004da0 <Error_Handler>
    }
}
 8004d8e:	bf00      	nop
 8004d90:	3750      	adds	r7, #80	; 0x50
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	40007000 	.word	0x40007000

08004da0 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
    /* Turn LED2 on */
    BSP_LED_On(LED2);
 8004da4:	2001      	movs	r0, #1
 8004da6:	f7fc ff17 	bl	8001bd8 <BSP_LED_On>
  __ASM volatile ("cpsid i" : : : "memory");
 8004daa:	b672      	cpsid	i
}
 8004dac:	bf00      	nop
    __disable_irq();
    while (1);
 8004dae:	e7fe      	b.n	8004dae <Error_Handler+0xe>

08004db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004de8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004db4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004db6:	e003      	b.n	8004dc0 <LoopCopyDataInit>

08004db8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004db8:	4b0c      	ldr	r3, [pc, #48]	; (8004dec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004dba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004dbc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004dbe:	3104      	adds	r1, #4

08004dc0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004dc0:	480b      	ldr	r0, [pc, #44]	; (8004df0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004dc2:	4b0c      	ldr	r3, [pc, #48]	; (8004df4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004dc4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004dc6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004dc8:	d3f6      	bcc.n	8004db8 <CopyDataInit>
  ldr  r2, =_sbss
 8004dca:	4a0b      	ldr	r2, [pc, #44]	; (8004df8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004dcc:	e002      	b.n	8004dd4 <LoopFillZerobss>

08004dce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004dce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004dd0:	f842 3b04 	str.w	r3, [r2], #4

08004dd4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004dd4:	4b09      	ldr	r3, [pc, #36]	; (8004dfc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004dd6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004dd8:	d3f9      	bcc.n	8004dce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004dda:	f7fc ff2d 	bl	8001c38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004dde:	f000 f83f 	bl	8004e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004de2:	f7ff fdf7 	bl	80049d4 <main>
  bx  lr    
 8004de6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004de8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004dec:	08005860 	.word	0x08005860
  ldr  r0, =_sdata
 8004df0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004df4:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 8004df8:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 8004dfc:	20000328 	.word	0x20000328

08004e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e00:	e7fe      	b.n	8004e00 <ADC_IRQHandler>
	...

08004e04 <siprintf>:
 8004e04:	b40e      	push	{r1, r2, r3}
 8004e06:	b500      	push	{lr}
 8004e08:	b09c      	sub	sp, #112	; 0x70
 8004e0a:	ab1d      	add	r3, sp, #116	; 0x74
 8004e0c:	9002      	str	r0, [sp, #8]
 8004e0e:	9006      	str	r0, [sp, #24]
 8004e10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e14:	4809      	ldr	r0, [pc, #36]	; (8004e3c <siprintf+0x38>)
 8004e16:	9107      	str	r1, [sp, #28]
 8004e18:	9104      	str	r1, [sp, #16]
 8004e1a:	4909      	ldr	r1, [pc, #36]	; (8004e40 <siprintf+0x3c>)
 8004e1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e20:	9105      	str	r1, [sp, #20]
 8004e22:	6800      	ldr	r0, [r0, #0]
 8004e24:	9301      	str	r3, [sp, #4]
 8004e26:	a902      	add	r1, sp, #8
 8004e28:	f000 f992 	bl	8005150 <_svfiprintf_r>
 8004e2c:	9b02      	ldr	r3, [sp, #8]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	701a      	strb	r2, [r3, #0]
 8004e32:	b01c      	add	sp, #112	; 0x70
 8004e34:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e38:	b003      	add	sp, #12
 8004e3a:	4770      	bx	lr
 8004e3c:	20000068 	.word	0x20000068
 8004e40:	ffff0208 	.word	0xffff0208

08004e44 <memset>:
 8004e44:	4402      	add	r2, r0
 8004e46:	4603      	mov	r3, r0
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d100      	bne.n	8004e4e <memset+0xa>
 8004e4c:	4770      	bx	lr
 8004e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e52:	e7f9      	b.n	8004e48 <memset+0x4>

08004e54 <__errno>:
 8004e54:	4b01      	ldr	r3, [pc, #4]	; (8004e5c <__errno+0x8>)
 8004e56:	6818      	ldr	r0, [r3, #0]
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	20000068 	.word	0x20000068

08004e60 <__libc_init_array>:
 8004e60:	b570      	push	{r4, r5, r6, lr}
 8004e62:	4d0d      	ldr	r5, [pc, #52]	; (8004e98 <__libc_init_array+0x38>)
 8004e64:	4c0d      	ldr	r4, [pc, #52]	; (8004e9c <__libc_init_array+0x3c>)
 8004e66:	1b64      	subs	r4, r4, r5
 8004e68:	10a4      	asrs	r4, r4, #2
 8004e6a:	2600      	movs	r6, #0
 8004e6c:	42a6      	cmp	r6, r4
 8004e6e:	d109      	bne.n	8004e84 <__libc_init_array+0x24>
 8004e70:	4d0b      	ldr	r5, [pc, #44]	; (8004ea0 <__libc_init_array+0x40>)
 8004e72:	4c0c      	ldr	r4, [pc, #48]	; (8004ea4 <__libc_init_array+0x44>)
 8004e74:	f000 fc6a 	bl	800574c <_init>
 8004e78:	1b64      	subs	r4, r4, r5
 8004e7a:	10a4      	asrs	r4, r4, #2
 8004e7c:	2600      	movs	r6, #0
 8004e7e:	42a6      	cmp	r6, r4
 8004e80:	d105      	bne.n	8004e8e <__libc_init_array+0x2e>
 8004e82:	bd70      	pop	{r4, r5, r6, pc}
 8004e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e88:	4798      	blx	r3
 8004e8a:	3601      	adds	r6, #1
 8004e8c:	e7ee      	b.n	8004e6c <__libc_init_array+0xc>
 8004e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e92:	4798      	blx	r3
 8004e94:	3601      	adds	r6, #1
 8004e96:	e7f2      	b.n	8004e7e <__libc_init_array+0x1e>
 8004e98:	08005858 	.word	0x08005858
 8004e9c:	08005858 	.word	0x08005858
 8004ea0:	08005858 	.word	0x08005858
 8004ea4:	0800585c 	.word	0x0800585c

08004ea8 <__retarget_lock_acquire_recursive>:
 8004ea8:	4770      	bx	lr

08004eaa <__retarget_lock_release_recursive>:
 8004eaa:	4770      	bx	lr

08004eac <_free_r>:
 8004eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004eae:	2900      	cmp	r1, #0
 8004eb0:	d044      	beq.n	8004f3c <_free_r+0x90>
 8004eb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eb6:	9001      	str	r0, [sp, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f1a1 0404 	sub.w	r4, r1, #4
 8004ebe:	bfb8      	it	lt
 8004ec0:	18e4      	addlt	r4, r4, r3
 8004ec2:	f000 f8df 	bl	8005084 <__malloc_lock>
 8004ec6:	4a1e      	ldr	r2, [pc, #120]	; (8004f40 <_free_r+0x94>)
 8004ec8:	9801      	ldr	r0, [sp, #4]
 8004eca:	6813      	ldr	r3, [r2, #0]
 8004ecc:	b933      	cbnz	r3, 8004edc <_free_r+0x30>
 8004ece:	6063      	str	r3, [r4, #4]
 8004ed0:	6014      	str	r4, [r2, #0]
 8004ed2:	b003      	add	sp, #12
 8004ed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ed8:	f000 b8da 	b.w	8005090 <__malloc_unlock>
 8004edc:	42a3      	cmp	r3, r4
 8004ede:	d908      	bls.n	8004ef2 <_free_r+0x46>
 8004ee0:	6825      	ldr	r5, [r4, #0]
 8004ee2:	1961      	adds	r1, r4, r5
 8004ee4:	428b      	cmp	r3, r1
 8004ee6:	bf01      	itttt	eq
 8004ee8:	6819      	ldreq	r1, [r3, #0]
 8004eea:	685b      	ldreq	r3, [r3, #4]
 8004eec:	1949      	addeq	r1, r1, r5
 8004eee:	6021      	streq	r1, [r4, #0]
 8004ef0:	e7ed      	b.n	8004ece <_free_r+0x22>
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	b10b      	cbz	r3, 8004efc <_free_r+0x50>
 8004ef8:	42a3      	cmp	r3, r4
 8004efa:	d9fa      	bls.n	8004ef2 <_free_r+0x46>
 8004efc:	6811      	ldr	r1, [r2, #0]
 8004efe:	1855      	adds	r5, r2, r1
 8004f00:	42a5      	cmp	r5, r4
 8004f02:	d10b      	bne.n	8004f1c <_free_r+0x70>
 8004f04:	6824      	ldr	r4, [r4, #0]
 8004f06:	4421      	add	r1, r4
 8004f08:	1854      	adds	r4, r2, r1
 8004f0a:	42a3      	cmp	r3, r4
 8004f0c:	6011      	str	r1, [r2, #0]
 8004f0e:	d1e0      	bne.n	8004ed2 <_free_r+0x26>
 8004f10:	681c      	ldr	r4, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	6053      	str	r3, [r2, #4]
 8004f16:	440c      	add	r4, r1
 8004f18:	6014      	str	r4, [r2, #0]
 8004f1a:	e7da      	b.n	8004ed2 <_free_r+0x26>
 8004f1c:	d902      	bls.n	8004f24 <_free_r+0x78>
 8004f1e:	230c      	movs	r3, #12
 8004f20:	6003      	str	r3, [r0, #0]
 8004f22:	e7d6      	b.n	8004ed2 <_free_r+0x26>
 8004f24:	6825      	ldr	r5, [r4, #0]
 8004f26:	1961      	adds	r1, r4, r5
 8004f28:	428b      	cmp	r3, r1
 8004f2a:	bf04      	itt	eq
 8004f2c:	6819      	ldreq	r1, [r3, #0]
 8004f2e:	685b      	ldreq	r3, [r3, #4]
 8004f30:	6063      	str	r3, [r4, #4]
 8004f32:	bf04      	itt	eq
 8004f34:	1949      	addeq	r1, r1, r5
 8004f36:	6021      	streq	r1, [r4, #0]
 8004f38:	6054      	str	r4, [r2, #4]
 8004f3a:	e7ca      	b.n	8004ed2 <_free_r+0x26>
 8004f3c:	b003      	add	sp, #12
 8004f3e:	bd30      	pop	{r4, r5, pc}
 8004f40:	20000320 	.word	0x20000320

08004f44 <sbrk_aligned>:
 8004f44:	b570      	push	{r4, r5, r6, lr}
 8004f46:	4e0e      	ldr	r6, [pc, #56]	; (8004f80 <sbrk_aligned+0x3c>)
 8004f48:	460c      	mov	r4, r1
 8004f4a:	6831      	ldr	r1, [r6, #0]
 8004f4c:	4605      	mov	r5, r0
 8004f4e:	b911      	cbnz	r1, 8004f56 <sbrk_aligned+0x12>
 8004f50:	f000 fba6 	bl	80056a0 <_sbrk_r>
 8004f54:	6030      	str	r0, [r6, #0]
 8004f56:	4621      	mov	r1, r4
 8004f58:	4628      	mov	r0, r5
 8004f5a:	f000 fba1 	bl	80056a0 <_sbrk_r>
 8004f5e:	1c43      	adds	r3, r0, #1
 8004f60:	d00a      	beq.n	8004f78 <sbrk_aligned+0x34>
 8004f62:	1cc4      	adds	r4, r0, #3
 8004f64:	f024 0403 	bic.w	r4, r4, #3
 8004f68:	42a0      	cmp	r0, r4
 8004f6a:	d007      	beq.n	8004f7c <sbrk_aligned+0x38>
 8004f6c:	1a21      	subs	r1, r4, r0
 8004f6e:	4628      	mov	r0, r5
 8004f70:	f000 fb96 	bl	80056a0 <_sbrk_r>
 8004f74:	3001      	adds	r0, #1
 8004f76:	d101      	bne.n	8004f7c <sbrk_aligned+0x38>
 8004f78:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	bd70      	pop	{r4, r5, r6, pc}
 8004f80:	20000324 	.word	0x20000324

08004f84 <_malloc_r>:
 8004f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f88:	1ccd      	adds	r5, r1, #3
 8004f8a:	f025 0503 	bic.w	r5, r5, #3
 8004f8e:	3508      	adds	r5, #8
 8004f90:	2d0c      	cmp	r5, #12
 8004f92:	bf38      	it	cc
 8004f94:	250c      	movcc	r5, #12
 8004f96:	2d00      	cmp	r5, #0
 8004f98:	4607      	mov	r7, r0
 8004f9a:	db01      	blt.n	8004fa0 <_malloc_r+0x1c>
 8004f9c:	42a9      	cmp	r1, r5
 8004f9e:	d905      	bls.n	8004fac <_malloc_r+0x28>
 8004fa0:	230c      	movs	r3, #12
 8004fa2:	603b      	str	r3, [r7, #0]
 8004fa4:	2600      	movs	r6, #0
 8004fa6:	4630      	mov	r0, r6
 8004fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005080 <_malloc_r+0xfc>
 8004fb0:	f000 f868 	bl	8005084 <__malloc_lock>
 8004fb4:	f8d8 3000 	ldr.w	r3, [r8]
 8004fb8:	461c      	mov	r4, r3
 8004fba:	bb5c      	cbnz	r4, 8005014 <_malloc_r+0x90>
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	4638      	mov	r0, r7
 8004fc0:	f7ff ffc0 	bl	8004f44 <sbrk_aligned>
 8004fc4:	1c43      	adds	r3, r0, #1
 8004fc6:	4604      	mov	r4, r0
 8004fc8:	d155      	bne.n	8005076 <_malloc_r+0xf2>
 8004fca:	f8d8 4000 	ldr.w	r4, [r8]
 8004fce:	4626      	mov	r6, r4
 8004fd0:	2e00      	cmp	r6, #0
 8004fd2:	d145      	bne.n	8005060 <_malloc_r+0xdc>
 8004fd4:	2c00      	cmp	r4, #0
 8004fd6:	d048      	beq.n	800506a <_malloc_r+0xe6>
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	4631      	mov	r1, r6
 8004fdc:	4638      	mov	r0, r7
 8004fde:	eb04 0903 	add.w	r9, r4, r3
 8004fe2:	f000 fb5d 	bl	80056a0 <_sbrk_r>
 8004fe6:	4581      	cmp	r9, r0
 8004fe8:	d13f      	bne.n	800506a <_malloc_r+0xe6>
 8004fea:	6821      	ldr	r1, [r4, #0]
 8004fec:	1a6d      	subs	r5, r5, r1
 8004fee:	4629      	mov	r1, r5
 8004ff0:	4638      	mov	r0, r7
 8004ff2:	f7ff ffa7 	bl	8004f44 <sbrk_aligned>
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	d037      	beq.n	800506a <_malloc_r+0xe6>
 8004ffa:	6823      	ldr	r3, [r4, #0]
 8004ffc:	442b      	add	r3, r5
 8004ffe:	6023      	str	r3, [r4, #0]
 8005000:	f8d8 3000 	ldr.w	r3, [r8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d038      	beq.n	800507a <_malloc_r+0xf6>
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	42a2      	cmp	r2, r4
 800500c:	d12b      	bne.n	8005066 <_malloc_r+0xe2>
 800500e:	2200      	movs	r2, #0
 8005010:	605a      	str	r2, [r3, #4]
 8005012:	e00f      	b.n	8005034 <_malloc_r+0xb0>
 8005014:	6822      	ldr	r2, [r4, #0]
 8005016:	1b52      	subs	r2, r2, r5
 8005018:	d41f      	bmi.n	800505a <_malloc_r+0xd6>
 800501a:	2a0b      	cmp	r2, #11
 800501c:	d917      	bls.n	800504e <_malloc_r+0xca>
 800501e:	1961      	adds	r1, r4, r5
 8005020:	42a3      	cmp	r3, r4
 8005022:	6025      	str	r5, [r4, #0]
 8005024:	bf18      	it	ne
 8005026:	6059      	strne	r1, [r3, #4]
 8005028:	6863      	ldr	r3, [r4, #4]
 800502a:	bf08      	it	eq
 800502c:	f8c8 1000 	streq.w	r1, [r8]
 8005030:	5162      	str	r2, [r4, r5]
 8005032:	604b      	str	r3, [r1, #4]
 8005034:	4638      	mov	r0, r7
 8005036:	f104 060b 	add.w	r6, r4, #11
 800503a:	f000 f829 	bl	8005090 <__malloc_unlock>
 800503e:	f026 0607 	bic.w	r6, r6, #7
 8005042:	1d23      	adds	r3, r4, #4
 8005044:	1af2      	subs	r2, r6, r3
 8005046:	d0ae      	beq.n	8004fa6 <_malloc_r+0x22>
 8005048:	1b9b      	subs	r3, r3, r6
 800504a:	50a3      	str	r3, [r4, r2]
 800504c:	e7ab      	b.n	8004fa6 <_malloc_r+0x22>
 800504e:	42a3      	cmp	r3, r4
 8005050:	6862      	ldr	r2, [r4, #4]
 8005052:	d1dd      	bne.n	8005010 <_malloc_r+0x8c>
 8005054:	f8c8 2000 	str.w	r2, [r8]
 8005058:	e7ec      	b.n	8005034 <_malloc_r+0xb0>
 800505a:	4623      	mov	r3, r4
 800505c:	6864      	ldr	r4, [r4, #4]
 800505e:	e7ac      	b.n	8004fba <_malloc_r+0x36>
 8005060:	4634      	mov	r4, r6
 8005062:	6876      	ldr	r6, [r6, #4]
 8005064:	e7b4      	b.n	8004fd0 <_malloc_r+0x4c>
 8005066:	4613      	mov	r3, r2
 8005068:	e7cc      	b.n	8005004 <_malloc_r+0x80>
 800506a:	230c      	movs	r3, #12
 800506c:	603b      	str	r3, [r7, #0]
 800506e:	4638      	mov	r0, r7
 8005070:	f000 f80e 	bl	8005090 <__malloc_unlock>
 8005074:	e797      	b.n	8004fa6 <_malloc_r+0x22>
 8005076:	6025      	str	r5, [r4, #0]
 8005078:	e7dc      	b.n	8005034 <_malloc_r+0xb0>
 800507a:	605b      	str	r3, [r3, #4]
 800507c:	deff      	udf	#255	; 0xff
 800507e:	bf00      	nop
 8005080:	20000320 	.word	0x20000320

08005084 <__malloc_lock>:
 8005084:	4801      	ldr	r0, [pc, #4]	; (800508c <__malloc_lock+0x8>)
 8005086:	f7ff bf0f 	b.w	8004ea8 <__retarget_lock_acquire_recursive>
 800508a:	bf00      	nop
 800508c:	2000031c 	.word	0x2000031c

08005090 <__malloc_unlock>:
 8005090:	4801      	ldr	r0, [pc, #4]	; (8005098 <__malloc_unlock+0x8>)
 8005092:	f7ff bf0a 	b.w	8004eaa <__retarget_lock_release_recursive>
 8005096:	bf00      	nop
 8005098:	2000031c 	.word	0x2000031c

0800509c <__ssputs_r>:
 800509c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050a0:	688e      	ldr	r6, [r1, #8]
 80050a2:	461f      	mov	r7, r3
 80050a4:	42be      	cmp	r6, r7
 80050a6:	680b      	ldr	r3, [r1, #0]
 80050a8:	4682      	mov	sl, r0
 80050aa:	460c      	mov	r4, r1
 80050ac:	4690      	mov	r8, r2
 80050ae:	d82c      	bhi.n	800510a <__ssputs_r+0x6e>
 80050b0:	898a      	ldrh	r2, [r1, #12]
 80050b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050b6:	d026      	beq.n	8005106 <__ssputs_r+0x6a>
 80050b8:	6965      	ldr	r5, [r4, #20]
 80050ba:	6909      	ldr	r1, [r1, #16]
 80050bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050c0:	eba3 0901 	sub.w	r9, r3, r1
 80050c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050c8:	1c7b      	adds	r3, r7, #1
 80050ca:	444b      	add	r3, r9
 80050cc:	106d      	asrs	r5, r5, #1
 80050ce:	429d      	cmp	r5, r3
 80050d0:	bf38      	it	cc
 80050d2:	461d      	movcc	r5, r3
 80050d4:	0553      	lsls	r3, r2, #21
 80050d6:	d527      	bpl.n	8005128 <__ssputs_r+0x8c>
 80050d8:	4629      	mov	r1, r5
 80050da:	f7ff ff53 	bl	8004f84 <_malloc_r>
 80050de:	4606      	mov	r6, r0
 80050e0:	b360      	cbz	r0, 800513c <__ssputs_r+0xa0>
 80050e2:	6921      	ldr	r1, [r4, #16]
 80050e4:	464a      	mov	r2, r9
 80050e6:	f000 faeb 	bl	80056c0 <memcpy>
 80050ea:	89a3      	ldrh	r3, [r4, #12]
 80050ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80050f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f4:	81a3      	strh	r3, [r4, #12]
 80050f6:	6126      	str	r6, [r4, #16]
 80050f8:	6165      	str	r5, [r4, #20]
 80050fa:	444e      	add	r6, r9
 80050fc:	eba5 0509 	sub.w	r5, r5, r9
 8005100:	6026      	str	r6, [r4, #0]
 8005102:	60a5      	str	r5, [r4, #8]
 8005104:	463e      	mov	r6, r7
 8005106:	42be      	cmp	r6, r7
 8005108:	d900      	bls.n	800510c <__ssputs_r+0x70>
 800510a:	463e      	mov	r6, r7
 800510c:	6820      	ldr	r0, [r4, #0]
 800510e:	4632      	mov	r2, r6
 8005110:	4641      	mov	r1, r8
 8005112:	f000 faab 	bl	800566c <memmove>
 8005116:	68a3      	ldr	r3, [r4, #8]
 8005118:	1b9b      	subs	r3, r3, r6
 800511a:	60a3      	str	r3, [r4, #8]
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	4433      	add	r3, r6
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	2000      	movs	r0, #0
 8005124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005128:	462a      	mov	r2, r5
 800512a:	f000 fad7 	bl	80056dc <_realloc_r>
 800512e:	4606      	mov	r6, r0
 8005130:	2800      	cmp	r0, #0
 8005132:	d1e0      	bne.n	80050f6 <__ssputs_r+0x5a>
 8005134:	6921      	ldr	r1, [r4, #16]
 8005136:	4650      	mov	r0, sl
 8005138:	f7ff feb8 	bl	8004eac <_free_r>
 800513c:	230c      	movs	r3, #12
 800513e:	f8ca 3000 	str.w	r3, [sl]
 8005142:	89a3      	ldrh	r3, [r4, #12]
 8005144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005148:	81a3      	strh	r3, [r4, #12]
 800514a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800514e:	e7e9      	b.n	8005124 <__ssputs_r+0x88>

08005150 <_svfiprintf_r>:
 8005150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005154:	4698      	mov	r8, r3
 8005156:	898b      	ldrh	r3, [r1, #12]
 8005158:	061b      	lsls	r3, r3, #24
 800515a:	b09d      	sub	sp, #116	; 0x74
 800515c:	4607      	mov	r7, r0
 800515e:	460d      	mov	r5, r1
 8005160:	4614      	mov	r4, r2
 8005162:	d50e      	bpl.n	8005182 <_svfiprintf_r+0x32>
 8005164:	690b      	ldr	r3, [r1, #16]
 8005166:	b963      	cbnz	r3, 8005182 <_svfiprintf_r+0x32>
 8005168:	2140      	movs	r1, #64	; 0x40
 800516a:	f7ff ff0b 	bl	8004f84 <_malloc_r>
 800516e:	6028      	str	r0, [r5, #0]
 8005170:	6128      	str	r0, [r5, #16]
 8005172:	b920      	cbnz	r0, 800517e <_svfiprintf_r+0x2e>
 8005174:	230c      	movs	r3, #12
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800517c:	e0d0      	b.n	8005320 <_svfiprintf_r+0x1d0>
 800517e:	2340      	movs	r3, #64	; 0x40
 8005180:	616b      	str	r3, [r5, #20]
 8005182:	2300      	movs	r3, #0
 8005184:	9309      	str	r3, [sp, #36]	; 0x24
 8005186:	2320      	movs	r3, #32
 8005188:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800518c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005190:	2330      	movs	r3, #48	; 0x30
 8005192:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005338 <_svfiprintf_r+0x1e8>
 8005196:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800519a:	f04f 0901 	mov.w	r9, #1
 800519e:	4623      	mov	r3, r4
 80051a0:	469a      	mov	sl, r3
 80051a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051a6:	b10a      	cbz	r2, 80051ac <_svfiprintf_r+0x5c>
 80051a8:	2a25      	cmp	r2, #37	; 0x25
 80051aa:	d1f9      	bne.n	80051a0 <_svfiprintf_r+0x50>
 80051ac:	ebba 0b04 	subs.w	fp, sl, r4
 80051b0:	d00b      	beq.n	80051ca <_svfiprintf_r+0x7a>
 80051b2:	465b      	mov	r3, fp
 80051b4:	4622      	mov	r2, r4
 80051b6:	4629      	mov	r1, r5
 80051b8:	4638      	mov	r0, r7
 80051ba:	f7ff ff6f 	bl	800509c <__ssputs_r>
 80051be:	3001      	adds	r0, #1
 80051c0:	f000 80a9 	beq.w	8005316 <_svfiprintf_r+0x1c6>
 80051c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051c6:	445a      	add	r2, fp
 80051c8:	9209      	str	r2, [sp, #36]	; 0x24
 80051ca:	f89a 3000 	ldrb.w	r3, [sl]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 80a1 	beq.w	8005316 <_svfiprintf_r+0x1c6>
 80051d4:	2300      	movs	r3, #0
 80051d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051de:	f10a 0a01 	add.w	sl, sl, #1
 80051e2:	9304      	str	r3, [sp, #16]
 80051e4:	9307      	str	r3, [sp, #28]
 80051e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051ea:	931a      	str	r3, [sp, #104]	; 0x68
 80051ec:	4654      	mov	r4, sl
 80051ee:	2205      	movs	r2, #5
 80051f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051f4:	4850      	ldr	r0, [pc, #320]	; (8005338 <_svfiprintf_r+0x1e8>)
 80051f6:	f7fb f803 	bl	8000200 <memchr>
 80051fa:	9a04      	ldr	r2, [sp, #16]
 80051fc:	b9d8      	cbnz	r0, 8005236 <_svfiprintf_r+0xe6>
 80051fe:	06d0      	lsls	r0, r2, #27
 8005200:	bf44      	itt	mi
 8005202:	2320      	movmi	r3, #32
 8005204:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005208:	0711      	lsls	r1, r2, #28
 800520a:	bf44      	itt	mi
 800520c:	232b      	movmi	r3, #43	; 0x2b
 800520e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005212:	f89a 3000 	ldrb.w	r3, [sl]
 8005216:	2b2a      	cmp	r3, #42	; 0x2a
 8005218:	d015      	beq.n	8005246 <_svfiprintf_r+0xf6>
 800521a:	9a07      	ldr	r2, [sp, #28]
 800521c:	4654      	mov	r4, sl
 800521e:	2000      	movs	r0, #0
 8005220:	f04f 0c0a 	mov.w	ip, #10
 8005224:	4621      	mov	r1, r4
 8005226:	f811 3b01 	ldrb.w	r3, [r1], #1
 800522a:	3b30      	subs	r3, #48	; 0x30
 800522c:	2b09      	cmp	r3, #9
 800522e:	d94d      	bls.n	80052cc <_svfiprintf_r+0x17c>
 8005230:	b1b0      	cbz	r0, 8005260 <_svfiprintf_r+0x110>
 8005232:	9207      	str	r2, [sp, #28]
 8005234:	e014      	b.n	8005260 <_svfiprintf_r+0x110>
 8005236:	eba0 0308 	sub.w	r3, r0, r8
 800523a:	fa09 f303 	lsl.w	r3, r9, r3
 800523e:	4313      	orrs	r3, r2
 8005240:	9304      	str	r3, [sp, #16]
 8005242:	46a2      	mov	sl, r4
 8005244:	e7d2      	b.n	80051ec <_svfiprintf_r+0x9c>
 8005246:	9b03      	ldr	r3, [sp, #12]
 8005248:	1d19      	adds	r1, r3, #4
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	9103      	str	r1, [sp, #12]
 800524e:	2b00      	cmp	r3, #0
 8005250:	bfbb      	ittet	lt
 8005252:	425b      	neglt	r3, r3
 8005254:	f042 0202 	orrlt.w	r2, r2, #2
 8005258:	9307      	strge	r3, [sp, #28]
 800525a:	9307      	strlt	r3, [sp, #28]
 800525c:	bfb8      	it	lt
 800525e:	9204      	strlt	r2, [sp, #16]
 8005260:	7823      	ldrb	r3, [r4, #0]
 8005262:	2b2e      	cmp	r3, #46	; 0x2e
 8005264:	d10c      	bne.n	8005280 <_svfiprintf_r+0x130>
 8005266:	7863      	ldrb	r3, [r4, #1]
 8005268:	2b2a      	cmp	r3, #42	; 0x2a
 800526a:	d134      	bne.n	80052d6 <_svfiprintf_r+0x186>
 800526c:	9b03      	ldr	r3, [sp, #12]
 800526e:	1d1a      	adds	r2, r3, #4
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	9203      	str	r2, [sp, #12]
 8005274:	2b00      	cmp	r3, #0
 8005276:	bfb8      	it	lt
 8005278:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800527c:	3402      	adds	r4, #2
 800527e:	9305      	str	r3, [sp, #20]
 8005280:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005348 <_svfiprintf_r+0x1f8>
 8005284:	7821      	ldrb	r1, [r4, #0]
 8005286:	2203      	movs	r2, #3
 8005288:	4650      	mov	r0, sl
 800528a:	f7fa ffb9 	bl	8000200 <memchr>
 800528e:	b138      	cbz	r0, 80052a0 <_svfiprintf_r+0x150>
 8005290:	9b04      	ldr	r3, [sp, #16]
 8005292:	eba0 000a 	sub.w	r0, r0, sl
 8005296:	2240      	movs	r2, #64	; 0x40
 8005298:	4082      	lsls	r2, r0
 800529a:	4313      	orrs	r3, r2
 800529c:	3401      	adds	r4, #1
 800529e:	9304      	str	r3, [sp, #16]
 80052a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052a4:	4825      	ldr	r0, [pc, #148]	; (800533c <_svfiprintf_r+0x1ec>)
 80052a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052aa:	2206      	movs	r2, #6
 80052ac:	f7fa ffa8 	bl	8000200 <memchr>
 80052b0:	2800      	cmp	r0, #0
 80052b2:	d038      	beq.n	8005326 <_svfiprintf_r+0x1d6>
 80052b4:	4b22      	ldr	r3, [pc, #136]	; (8005340 <_svfiprintf_r+0x1f0>)
 80052b6:	bb1b      	cbnz	r3, 8005300 <_svfiprintf_r+0x1b0>
 80052b8:	9b03      	ldr	r3, [sp, #12]
 80052ba:	3307      	adds	r3, #7
 80052bc:	f023 0307 	bic.w	r3, r3, #7
 80052c0:	3308      	adds	r3, #8
 80052c2:	9303      	str	r3, [sp, #12]
 80052c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052c6:	4433      	add	r3, r6
 80052c8:	9309      	str	r3, [sp, #36]	; 0x24
 80052ca:	e768      	b.n	800519e <_svfiprintf_r+0x4e>
 80052cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80052d0:	460c      	mov	r4, r1
 80052d2:	2001      	movs	r0, #1
 80052d4:	e7a6      	b.n	8005224 <_svfiprintf_r+0xd4>
 80052d6:	2300      	movs	r3, #0
 80052d8:	3401      	adds	r4, #1
 80052da:	9305      	str	r3, [sp, #20]
 80052dc:	4619      	mov	r1, r3
 80052de:	f04f 0c0a 	mov.w	ip, #10
 80052e2:	4620      	mov	r0, r4
 80052e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052e8:	3a30      	subs	r2, #48	; 0x30
 80052ea:	2a09      	cmp	r2, #9
 80052ec:	d903      	bls.n	80052f6 <_svfiprintf_r+0x1a6>
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0c6      	beq.n	8005280 <_svfiprintf_r+0x130>
 80052f2:	9105      	str	r1, [sp, #20]
 80052f4:	e7c4      	b.n	8005280 <_svfiprintf_r+0x130>
 80052f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80052fa:	4604      	mov	r4, r0
 80052fc:	2301      	movs	r3, #1
 80052fe:	e7f0      	b.n	80052e2 <_svfiprintf_r+0x192>
 8005300:	ab03      	add	r3, sp, #12
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	462a      	mov	r2, r5
 8005306:	4b0f      	ldr	r3, [pc, #60]	; (8005344 <_svfiprintf_r+0x1f4>)
 8005308:	a904      	add	r1, sp, #16
 800530a:	4638      	mov	r0, r7
 800530c:	f3af 8000 	nop.w
 8005310:	1c42      	adds	r2, r0, #1
 8005312:	4606      	mov	r6, r0
 8005314:	d1d6      	bne.n	80052c4 <_svfiprintf_r+0x174>
 8005316:	89ab      	ldrh	r3, [r5, #12]
 8005318:	065b      	lsls	r3, r3, #25
 800531a:	f53f af2d 	bmi.w	8005178 <_svfiprintf_r+0x28>
 800531e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005320:	b01d      	add	sp, #116	; 0x74
 8005322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005326:	ab03      	add	r3, sp, #12
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	462a      	mov	r2, r5
 800532c:	4b05      	ldr	r3, [pc, #20]	; (8005344 <_svfiprintf_r+0x1f4>)
 800532e:	a904      	add	r1, sp, #16
 8005330:	4638      	mov	r0, r7
 8005332:	f000 f879 	bl	8005428 <_printf_i>
 8005336:	e7eb      	b.n	8005310 <_svfiprintf_r+0x1c0>
 8005338:	0800581b 	.word	0x0800581b
 800533c:	08005825 	.word	0x08005825
 8005340:	00000000 	.word	0x00000000
 8005344:	0800509d 	.word	0x0800509d
 8005348:	08005821 	.word	0x08005821

0800534c <_printf_common>:
 800534c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005350:	4616      	mov	r6, r2
 8005352:	4699      	mov	r9, r3
 8005354:	688a      	ldr	r2, [r1, #8]
 8005356:	690b      	ldr	r3, [r1, #16]
 8005358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800535c:	4293      	cmp	r3, r2
 800535e:	bfb8      	it	lt
 8005360:	4613      	movlt	r3, r2
 8005362:	6033      	str	r3, [r6, #0]
 8005364:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005368:	4607      	mov	r7, r0
 800536a:	460c      	mov	r4, r1
 800536c:	b10a      	cbz	r2, 8005372 <_printf_common+0x26>
 800536e:	3301      	adds	r3, #1
 8005370:	6033      	str	r3, [r6, #0]
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	0699      	lsls	r1, r3, #26
 8005376:	bf42      	ittt	mi
 8005378:	6833      	ldrmi	r3, [r6, #0]
 800537a:	3302      	addmi	r3, #2
 800537c:	6033      	strmi	r3, [r6, #0]
 800537e:	6825      	ldr	r5, [r4, #0]
 8005380:	f015 0506 	ands.w	r5, r5, #6
 8005384:	d106      	bne.n	8005394 <_printf_common+0x48>
 8005386:	f104 0a19 	add.w	sl, r4, #25
 800538a:	68e3      	ldr	r3, [r4, #12]
 800538c:	6832      	ldr	r2, [r6, #0]
 800538e:	1a9b      	subs	r3, r3, r2
 8005390:	42ab      	cmp	r3, r5
 8005392:	dc26      	bgt.n	80053e2 <_printf_common+0x96>
 8005394:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005398:	1e13      	subs	r3, r2, #0
 800539a:	6822      	ldr	r2, [r4, #0]
 800539c:	bf18      	it	ne
 800539e:	2301      	movne	r3, #1
 80053a0:	0692      	lsls	r2, r2, #26
 80053a2:	d42b      	bmi.n	80053fc <_printf_common+0xb0>
 80053a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053a8:	4649      	mov	r1, r9
 80053aa:	4638      	mov	r0, r7
 80053ac:	47c0      	blx	r8
 80053ae:	3001      	adds	r0, #1
 80053b0:	d01e      	beq.n	80053f0 <_printf_common+0xa4>
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	6922      	ldr	r2, [r4, #16]
 80053b6:	f003 0306 	and.w	r3, r3, #6
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	bf02      	ittt	eq
 80053be:	68e5      	ldreq	r5, [r4, #12]
 80053c0:	6833      	ldreq	r3, [r6, #0]
 80053c2:	1aed      	subeq	r5, r5, r3
 80053c4:	68a3      	ldr	r3, [r4, #8]
 80053c6:	bf0c      	ite	eq
 80053c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053cc:	2500      	movne	r5, #0
 80053ce:	4293      	cmp	r3, r2
 80053d0:	bfc4      	itt	gt
 80053d2:	1a9b      	subgt	r3, r3, r2
 80053d4:	18ed      	addgt	r5, r5, r3
 80053d6:	2600      	movs	r6, #0
 80053d8:	341a      	adds	r4, #26
 80053da:	42b5      	cmp	r5, r6
 80053dc:	d11a      	bne.n	8005414 <_printf_common+0xc8>
 80053de:	2000      	movs	r0, #0
 80053e0:	e008      	b.n	80053f4 <_printf_common+0xa8>
 80053e2:	2301      	movs	r3, #1
 80053e4:	4652      	mov	r2, sl
 80053e6:	4649      	mov	r1, r9
 80053e8:	4638      	mov	r0, r7
 80053ea:	47c0      	blx	r8
 80053ec:	3001      	adds	r0, #1
 80053ee:	d103      	bne.n	80053f8 <_printf_common+0xac>
 80053f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053f8:	3501      	adds	r5, #1
 80053fa:	e7c6      	b.n	800538a <_printf_common+0x3e>
 80053fc:	18e1      	adds	r1, r4, r3
 80053fe:	1c5a      	adds	r2, r3, #1
 8005400:	2030      	movs	r0, #48	; 0x30
 8005402:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005406:	4422      	add	r2, r4
 8005408:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800540c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005410:	3302      	adds	r3, #2
 8005412:	e7c7      	b.n	80053a4 <_printf_common+0x58>
 8005414:	2301      	movs	r3, #1
 8005416:	4622      	mov	r2, r4
 8005418:	4649      	mov	r1, r9
 800541a:	4638      	mov	r0, r7
 800541c:	47c0      	blx	r8
 800541e:	3001      	adds	r0, #1
 8005420:	d0e6      	beq.n	80053f0 <_printf_common+0xa4>
 8005422:	3601      	adds	r6, #1
 8005424:	e7d9      	b.n	80053da <_printf_common+0x8e>
	...

08005428 <_printf_i>:
 8005428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800542c:	7e0f      	ldrb	r7, [r1, #24]
 800542e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005430:	2f78      	cmp	r7, #120	; 0x78
 8005432:	4691      	mov	r9, r2
 8005434:	4680      	mov	r8, r0
 8005436:	460c      	mov	r4, r1
 8005438:	469a      	mov	sl, r3
 800543a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800543e:	d807      	bhi.n	8005450 <_printf_i+0x28>
 8005440:	2f62      	cmp	r7, #98	; 0x62
 8005442:	d80a      	bhi.n	800545a <_printf_i+0x32>
 8005444:	2f00      	cmp	r7, #0
 8005446:	f000 80d4 	beq.w	80055f2 <_printf_i+0x1ca>
 800544a:	2f58      	cmp	r7, #88	; 0x58
 800544c:	f000 80c0 	beq.w	80055d0 <_printf_i+0x1a8>
 8005450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005454:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005458:	e03a      	b.n	80054d0 <_printf_i+0xa8>
 800545a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800545e:	2b15      	cmp	r3, #21
 8005460:	d8f6      	bhi.n	8005450 <_printf_i+0x28>
 8005462:	a101      	add	r1, pc, #4	; (adr r1, 8005468 <_printf_i+0x40>)
 8005464:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005468:	080054c1 	.word	0x080054c1
 800546c:	080054d5 	.word	0x080054d5
 8005470:	08005451 	.word	0x08005451
 8005474:	08005451 	.word	0x08005451
 8005478:	08005451 	.word	0x08005451
 800547c:	08005451 	.word	0x08005451
 8005480:	080054d5 	.word	0x080054d5
 8005484:	08005451 	.word	0x08005451
 8005488:	08005451 	.word	0x08005451
 800548c:	08005451 	.word	0x08005451
 8005490:	08005451 	.word	0x08005451
 8005494:	080055d9 	.word	0x080055d9
 8005498:	08005501 	.word	0x08005501
 800549c:	08005593 	.word	0x08005593
 80054a0:	08005451 	.word	0x08005451
 80054a4:	08005451 	.word	0x08005451
 80054a8:	080055fb 	.word	0x080055fb
 80054ac:	08005451 	.word	0x08005451
 80054b0:	08005501 	.word	0x08005501
 80054b4:	08005451 	.word	0x08005451
 80054b8:	08005451 	.word	0x08005451
 80054bc:	0800559b 	.word	0x0800559b
 80054c0:	682b      	ldr	r3, [r5, #0]
 80054c2:	1d1a      	adds	r2, r3, #4
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	602a      	str	r2, [r5, #0]
 80054c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054d0:	2301      	movs	r3, #1
 80054d2:	e09f      	b.n	8005614 <_printf_i+0x1ec>
 80054d4:	6820      	ldr	r0, [r4, #0]
 80054d6:	682b      	ldr	r3, [r5, #0]
 80054d8:	0607      	lsls	r7, r0, #24
 80054da:	f103 0104 	add.w	r1, r3, #4
 80054de:	6029      	str	r1, [r5, #0]
 80054e0:	d501      	bpl.n	80054e6 <_printf_i+0xbe>
 80054e2:	681e      	ldr	r6, [r3, #0]
 80054e4:	e003      	b.n	80054ee <_printf_i+0xc6>
 80054e6:	0646      	lsls	r6, r0, #25
 80054e8:	d5fb      	bpl.n	80054e2 <_printf_i+0xba>
 80054ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80054ee:	2e00      	cmp	r6, #0
 80054f0:	da03      	bge.n	80054fa <_printf_i+0xd2>
 80054f2:	232d      	movs	r3, #45	; 0x2d
 80054f4:	4276      	negs	r6, r6
 80054f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054fa:	485a      	ldr	r0, [pc, #360]	; (8005664 <_printf_i+0x23c>)
 80054fc:	230a      	movs	r3, #10
 80054fe:	e012      	b.n	8005526 <_printf_i+0xfe>
 8005500:	682b      	ldr	r3, [r5, #0]
 8005502:	6820      	ldr	r0, [r4, #0]
 8005504:	1d19      	adds	r1, r3, #4
 8005506:	6029      	str	r1, [r5, #0]
 8005508:	0605      	lsls	r5, r0, #24
 800550a:	d501      	bpl.n	8005510 <_printf_i+0xe8>
 800550c:	681e      	ldr	r6, [r3, #0]
 800550e:	e002      	b.n	8005516 <_printf_i+0xee>
 8005510:	0641      	lsls	r1, r0, #25
 8005512:	d5fb      	bpl.n	800550c <_printf_i+0xe4>
 8005514:	881e      	ldrh	r6, [r3, #0]
 8005516:	4853      	ldr	r0, [pc, #332]	; (8005664 <_printf_i+0x23c>)
 8005518:	2f6f      	cmp	r7, #111	; 0x6f
 800551a:	bf0c      	ite	eq
 800551c:	2308      	moveq	r3, #8
 800551e:	230a      	movne	r3, #10
 8005520:	2100      	movs	r1, #0
 8005522:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005526:	6865      	ldr	r5, [r4, #4]
 8005528:	60a5      	str	r5, [r4, #8]
 800552a:	2d00      	cmp	r5, #0
 800552c:	bfa2      	ittt	ge
 800552e:	6821      	ldrge	r1, [r4, #0]
 8005530:	f021 0104 	bicge.w	r1, r1, #4
 8005534:	6021      	strge	r1, [r4, #0]
 8005536:	b90e      	cbnz	r6, 800553c <_printf_i+0x114>
 8005538:	2d00      	cmp	r5, #0
 800553a:	d04b      	beq.n	80055d4 <_printf_i+0x1ac>
 800553c:	4615      	mov	r5, r2
 800553e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005542:	fb03 6711 	mls	r7, r3, r1, r6
 8005546:	5dc7      	ldrb	r7, [r0, r7]
 8005548:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800554c:	4637      	mov	r7, r6
 800554e:	42bb      	cmp	r3, r7
 8005550:	460e      	mov	r6, r1
 8005552:	d9f4      	bls.n	800553e <_printf_i+0x116>
 8005554:	2b08      	cmp	r3, #8
 8005556:	d10b      	bne.n	8005570 <_printf_i+0x148>
 8005558:	6823      	ldr	r3, [r4, #0]
 800555a:	07de      	lsls	r6, r3, #31
 800555c:	d508      	bpl.n	8005570 <_printf_i+0x148>
 800555e:	6923      	ldr	r3, [r4, #16]
 8005560:	6861      	ldr	r1, [r4, #4]
 8005562:	4299      	cmp	r1, r3
 8005564:	bfde      	ittt	le
 8005566:	2330      	movle	r3, #48	; 0x30
 8005568:	f805 3c01 	strble.w	r3, [r5, #-1]
 800556c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005570:	1b52      	subs	r2, r2, r5
 8005572:	6122      	str	r2, [r4, #16]
 8005574:	f8cd a000 	str.w	sl, [sp]
 8005578:	464b      	mov	r3, r9
 800557a:	aa03      	add	r2, sp, #12
 800557c:	4621      	mov	r1, r4
 800557e:	4640      	mov	r0, r8
 8005580:	f7ff fee4 	bl	800534c <_printf_common>
 8005584:	3001      	adds	r0, #1
 8005586:	d14a      	bne.n	800561e <_printf_i+0x1f6>
 8005588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800558c:	b004      	add	sp, #16
 800558e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	f043 0320 	orr.w	r3, r3, #32
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	4833      	ldr	r0, [pc, #204]	; (8005668 <_printf_i+0x240>)
 800559c:	2778      	movs	r7, #120	; 0x78
 800559e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	6829      	ldr	r1, [r5, #0]
 80055a6:	061f      	lsls	r7, r3, #24
 80055a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80055ac:	d402      	bmi.n	80055b4 <_printf_i+0x18c>
 80055ae:	065f      	lsls	r7, r3, #25
 80055b0:	bf48      	it	mi
 80055b2:	b2b6      	uxthmi	r6, r6
 80055b4:	07df      	lsls	r7, r3, #31
 80055b6:	bf48      	it	mi
 80055b8:	f043 0320 	orrmi.w	r3, r3, #32
 80055bc:	6029      	str	r1, [r5, #0]
 80055be:	bf48      	it	mi
 80055c0:	6023      	strmi	r3, [r4, #0]
 80055c2:	b91e      	cbnz	r6, 80055cc <_printf_i+0x1a4>
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	f023 0320 	bic.w	r3, r3, #32
 80055ca:	6023      	str	r3, [r4, #0]
 80055cc:	2310      	movs	r3, #16
 80055ce:	e7a7      	b.n	8005520 <_printf_i+0xf8>
 80055d0:	4824      	ldr	r0, [pc, #144]	; (8005664 <_printf_i+0x23c>)
 80055d2:	e7e4      	b.n	800559e <_printf_i+0x176>
 80055d4:	4615      	mov	r5, r2
 80055d6:	e7bd      	b.n	8005554 <_printf_i+0x12c>
 80055d8:	682b      	ldr	r3, [r5, #0]
 80055da:	6826      	ldr	r6, [r4, #0]
 80055dc:	6961      	ldr	r1, [r4, #20]
 80055de:	1d18      	adds	r0, r3, #4
 80055e0:	6028      	str	r0, [r5, #0]
 80055e2:	0635      	lsls	r5, r6, #24
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	d501      	bpl.n	80055ec <_printf_i+0x1c4>
 80055e8:	6019      	str	r1, [r3, #0]
 80055ea:	e002      	b.n	80055f2 <_printf_i+0x1ca>
 80055ec:	0670      	lsls	r0, r6, #25
 80055ee:	d5fb      	bpl.n	80055e8 <_printf_i+0x1c0>
 80055f0:	8019      	strh	r1, [r3, #0]
 80055f2:	2300      	movs	r3, #0
 80055f4:	6123      	str	r3, [r4, #16]
 80055f6:	4615      	mov	r5, r2
 80055f8:	e7bc      	b.n	8005574 <_printf_i+0x14c>
 80055fa:	682b      	ldr	r3, [r5, #0]
 80055fc:	1d1a      	adds	r2, r3, #4
 80055fe:	602a      	str	r2, [r5, #0]
 8005600:	681d      	ldr	r5, [r3, #0]
 8005602:	6862      	ldr	r2, [r4, #4]
 8005604:	2100      	movs	r1, #0
 8005606:	4628      	mov	r0, r5
 8005608:	f7fa fdfa 	bl	8000200 <memchr>
 800560c:	b108      	cbz	r0, 8005612 <_printf_i+0x1ea>
 800560e:	1b40      	subs	r0, r0, r5
 8005610:	6060      	str	r0, [r4, #4]
 8005612:	6863      	ldr	r3, [r4, #4]
 8005614:	6123      	str	r3, [r4, #16]
 8005616:	2300      	movs	r3, #0
 8005618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800561c:	e7aa      	b.n	8005574 <_printf_i+0x14c>
 800561e:	6923      	ldr	r3, [r4, #16]
 8005620:	462a      	mov	r2, r5
 8005622:	4649      	mov	r1, r9
 8005624:	4640      	mov	r0, r8
 8005626:	47d0      	blx	sl
 8005628:	3001      	adds	r0, #1
 800562a:	d0ad      	beq.n	8005588 <_printf_i+0x160>
 800562c:	6823      	ldr	r3, [r4, #0]
 800562e:	079b      	lsls	r3, r3, #30
 8005630:	d413      	bmi.n	800565a <_printf_i+0x232>
 8005632:	68e0      	ldr	r0, [r4, #12]
 8005634:	9b03      	ldr	r3, [sp, #12]
 8005636:	4298      	cmp	r0, r3
 8005638:	bfb8      	it	lt
 800563a:	4618      	movlt	r0, r3
 800563c:	e7a6      	b.n	800558c <_printf_i+0x164>
 800563e:	2301      	movs	r3, #1
 8005640:	4632      	mov	r2, r6
 8005642:	4649      	mov	r1, r9
 8005644:	4640      	mov	r0, r8
 8005646:	47d0      	blx	sl
 8005648:	3001      	adds	r0, #1
 800564a:	d09d      	beq.n	8005588 <_printf_i+0x160>
 800564c:	3501      	adds	r5, #1
 800564e:	68e3      	ldr	r3, [r4, #12]
 8005650:	9903      	ldr	r1, [sp, #12]
 8005652:	1a5b      	subs	r3, r3, r1
 8005654:	42ab      	cmp	r3, r5
 8005656:	dcf2      	bgt.n	800563e <_printf_i+0x216>
 8005658:	e7eb      	b.n	8005632 <_printf_i+0x20a>
 800565a:	2500      	movs	r5, #0
 800565c:	f104 0619 	add.w	r6, r4, #25
 8005660:	e7f5      	b.n	800564e <_printf_i+0x226>
 8005662:	bf00      	nop
 8005664:	0800582c 	.word	0x0800582c
 8005668:	0800583d 	.word	0x0800583d

0800566c <memmove>:
 800566c:	4288      	cmp	r0, r1
 800566e:	b510      	push	{r4, lr}
 8005670:	eb01 0402 	add.w	r4, r1, r2
 8005674:	d902      	bls.n	800567c <memmove+0x10>
 8005676:	4284      	cmp	r4, r0
 8005678:	4623      	mov	r3, r4
 800567a:	d807      	bhi.n	800568c <memmove+0x20>
 800567c:	1e43      	subs	r3, r0, #1
 800567e:	42a1      	cmp	r1, r4
 8005680:	d008      	beq.n	8005694 <memmove+0x28>
 8005682:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005686:	f803 2f01 	strb.w	r2, [r3, #1]!
 800568a:	e7f8      	b.n	800567e <memmove+0x12>
 800568c:	4402      	add	r2, r0
 800568e:	4601      	mov	r1, r0
 8005690:	428a      	cmp	r2, r1
 8005692:	d100      	bne.n	8005696 <memmove+0x2a>
 8005694:	bd10      	pop	{r4, pc}
 8005696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800569a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800569e:	e7f7      	b.n	8005690 <memmove+0x24>

080056a0 <_sbrk_r>:
 80056a0:	b538      	push	{r3, r4, r5, lr}
 80056a2:	4d06      	ldr	r5, [pc, #24]	; (80056bc <_sbrk_r+0x1c>)
 80056a4:	2300      	movs	r3, #0
 80056a6:	4604      	mov	r4, r0
 80056a8:	4608      	mov	r0, r1
 80056aa:	602b      	str	r3, [r5, #0]
 80056ac:	f7fc fb28 	bl	8001d00 <_sbrk>
 80056b0:	1c43      	adds	r3, r0, #1
 80056b2:	d102      	bne.n	80056ba <_sbrk_r+0x1a>
 80056b4:	682b      	ldr	r3, [r5, #0]
 80056b6:	b103      	cbz	r3, 80056ba <_sbrk_r+0x1a>
 80056b8:	6023      	str	r3, [r4, #0]
 80056ba:	bd38      	pop	{r3, r4, r5, pc}
 80056bc:	20000318 	.word	0x20000318

080056c0 <memcpy>:
 80056c0:	440a      	add	r2, r1
 80056c2:	4291      	cmp	r1, r2
 80056c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80056c8:	d100      	bne.n	80056cc <memcpy+0xc>
 80056ca:	4770      	bx	lr
 80056cc:	b510      	push	{r4, lr}
 80056ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056d6:	4291      	cmp	r1, r2
 80056d8:	d1f9      	bne.n	80056ce <memcpy+0xe>
 80056da:	bd10      	pop	{r4, pc}

080056dc <_realloc_r>:
 80056dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056e0:	4680      	mov	r8, r0
 80056e2:	4614      	mov	r4, r2
 80056e4:	460e      	mov	r6, r1
 80056e6:	b921      	cbnz	r1, 80056f2 <_realloc_r+0x16>
 80056e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056ec:	4611      	mov	r1, r2
 80056ee:	f7ff bc49 	b.w	8004f84 <_malloc_r>
 80056f2:	b92a      	cbnz	r2, 8005700 <_realloc_r+0x24>
 80056f4:	f7ff fbda 	bl	8004eac <_free_r>
 80056f8:	4625      	mov	r5, r4
 80056fa:	4628      	mov	r0, r5
 80056fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005700:	f000 f81b 	bl	800573a <_malloc_usable_size_r>
 8005704:	4284      	cmp	r4, r0
 8005706:	4607      	mov	r7, r0
 8005708:	d802      	bhi.n	8005710 <_realloc_r+0x34>
 800570a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800570e:	d812      	bhi.n	8005736 <_realloc_r+0x5a>
 8005710:	4621      	mov	r1, r4
 8005712:	4640      	mov	r0, r8
 8005714:	f7ff fc36 	bl	8004f84 <_malloc_r>
 8005718:	4605      	mov	r5, r0
 800571a:	2800      	cmp	r0, #0
 800571c:	d0ed      	beq.n	80056fa <_realloc_r+0x1e>
 800571e:	42bc      	cmp	r4, r7
 8005720:	4622      	mov	r2, r4
 8005722:	4631      	mov	r1, r6
 8005724:	bf28      	it	cs
 8005726:	463a      	movcs	r2, r7
 8005728:	f7ff ffca 	bl	80056c0 <memcpy>
 800572c:	4631      	mov	r1, r6
 800572e:	4640      	mov	r0, r8
 8005730:	f7ff fbbc 	bl	8004eac <_free_r>
 8005734:	e7e1      	b.n	80056fa <_realloc_r+0x1e>
 8005736:	4635      	mov	r5, r6
 8005738:	e7df      	b.n	80056fa <_realloc_r+0x1e>

0800573a <_malloc_usable_size_r>:
 800573a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800573e:	1f18      	subs	r0, r3, #4
 8005740:	2b00      	cmp	r3, #0
 8005742:	bfbc      	itt	lt
 8005744:	580b      	ldrlt	r3, [r1, r0]
 8005746:	18c0      	addlt	r0, r0, r3
 8005748:	4770      	bx	lr
	...

0800574c <_init>:
 800574c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574e:	bf00      	nop
 8005750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005752:	bc08      	pop	{r3}
 8005754:	469e      	mov	lr, r3
 8005756:	4770      	bx	lr

08005758 <_fini>:
 8005758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575a:	bf00      	nop
 800575c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575e:	bc08      	pop	{r3}
 8005760:	469e      	mov	lr, r3
 8005762:	4770      	bx	lr
