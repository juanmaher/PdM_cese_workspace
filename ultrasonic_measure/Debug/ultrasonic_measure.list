
ultrasonic_measure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005eb8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08006068  08006068  00016068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060d0  080060d0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080060d0  080060d0  000160d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060d8  080060d8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060d8  080060d8  000160d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060dc  080060dc  000160dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080060e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000974  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009d0  200009d0  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015f6e  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002950  00000000  00000000  0003603d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013d8  00000000  00000000  00038990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000fb7  00000000  00000000  00039d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026351  00000000  00000000  0003ad1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017460  00000000  00000000  00061070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e65ac  00000000  00000000  000784d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005c64  00000000  00000000  0015ea7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000088  00000000  00000000  001646e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006050 	.word	0x08006050

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08006050 	.word	0x08006050

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a80:	f000 b970 	b.w	8000d64 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	460d      	mov	r5, r1
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	460f      	mov	r7, r1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d14a      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4694      	mov	ip, r2
 8000ab0:	d965      	bls.n	8000b7e <__udivmoddi4+0xe2>
 8000ab2:	fab2 f382 	clz	r3, r2
 8000ab6:	b143      	cbz	r3, 8000aca <__udivmoddi4+0x2e>
 8000ab8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000abc:	f1c3 0220 	rsb	r2, r3, #32
 8000ac0:	409f      	lsls	r7, r3
 8000ac2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ac6:	4317      	orrs	r7, r2
 8000ac8:	409c      	lsls	r4, r3
 8000aca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ace:	fa1f f58c 	uxth.w	r5, ip
 8000ad2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ad6:	0c22      	lsrs	r2, r4, #16
 8000ad8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000adc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ae0:	fb01 f005 	mul.w	r0, r1, r5
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	d90a      	bls.n	8000afe <__udivmoddi4+0x62>
 8000ae8:	eb1c 0202 	adds.w	r2, ip, r2
 8000aec:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000af0:	f080 811c 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000af4:	4290      	cmp	r0, r2
 8000af6:	f240 8119 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000afa:	3902      	subs	r1, #2
 8000afc:	4462      	add	r2, ip
 8000afe:	1a12      	subs	r2, r2, r0
 8000b00:	b2a4      	uxth	r4, r4
 8000b02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b0e:	fb00 f505 	mul.w	r5, r0, r5
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	d90a      	bls.n	8000b2c <__udivmoddi4+0x90>
 8000b16:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b1e:	f080 8107 	bcs.w	8000d30 <__udivmoddi4+0x294>
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	f240 8104 	bls.w	8000d30 <__udivmoddi4+0x294>
 8000b28:	4464      	add	r4, ip
 8000b2a:	3802      	subs	r0, #2
 8000b2c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b30:	1b64      	subs	r4, r4, r5
 8000b32:	2100      	movs	r1, #0
 8000b34:	b11e      	cbz	r6, 8000b3e <__udivmoddi4+0xa2>
 8000b36:	40dc      	lsrs	r4, r3
 8000b38:	2300      	movs	r3, #0
 8000b3a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0xbc>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80ed 	beq.w	8000d26 <__udivmoddi4+0x28a>
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b52:	4608      	mov	r0, r1
 8000b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b58:	fab3 f183 	clz	r1, r3
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	d149      	bne.n	8000bf4 <__udivmoddi4+0x158>
 8000b60:	42ab      	cmp	r3, r5
 8000b62:	d302      	bcc.n	8000b6a <__udivmoddi4+0xce>
 8000b64:	4282      	cmp	r2, r0
 8000b66:	f200 80f8 	bhi.w	8000d5a <__udivmoddi4+0x2be>
 8000b6a:	1a84      	subs	r4, r0, r2
 8000b6c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b70:	2001      	movs	r0, #1
 8000b72:	4617      	mov	r7, r2
 8000b74:	2e00      	cmp	r6, #0
 8000b76:	d0e2      	beq.n	8000b3e <__udivmoddi4+0xa2>
 8000b78:	e9c6 4700 	strd	r4, r7, [r6]
 8000b7c:	e7df      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b7e:	b902      	cbnz	r2, 8000b82 <__udivmoddi4+0xe6>
 8000b80:	deff      	udf	#255	; 0xff
 8000b82:	fab2 f382 	clz	r3, r2
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f040 8090 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8c:	1a8a      	subs	r2, r1, r2
 8000b8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b92:	fa1f fe8c 	uxth.w	lr, ip
 8000b96:	2101      	movs	r1, #1
 8000b98:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b9c:	fb07 2015 	mls	r0, r7, r5, r2
 8000ba0:	0c22      	lsrs	r2, r4, #16
 8000ba2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ba6:	fb0e f005 	mul.w	r0, lr, r5
 8000baa:	4290      	cmp	r0, r2
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bae:	eb1c 0202 	adds.w	r2, ip, r2
 8000bb2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4290      	cmp	r0, r2
 8000bba:	f200 80cb 	bhi.w	8000d54 <__udivmoddi4+0x2b8>
 8000bbe:	4645      	mov	r5, r8
 8000bc0:	1a12      	subs	r2, r2, r0
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bc8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bcc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bd4:	45a6      	cmp	lr, r4
 8000bd6:	d908      	bls.n	8000bea <__udivmoddi4+0x14e>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000be0:	d202      	bcs.n	8000be8 <__udivmoddi4+0x14c>
 8000be2:	45a6      	cmp	lr, r4
 8000be4:	f200 80bb 	bhi.w	8000d5e <__udivmoddi4+0x2c2>
 8000be8:	4610      	mov	r0, r2
 8000bea:	eba4 040e 	sub.w	r4, r4, lr
 8000bee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bf2:	e79f      	b.n	8000b34 <__udivmoddi4+0x98>
 8000bf4:	f1c1 0720 	rsb	r7, r1, #32
 8000bf8:	408b      	lsls	r3, r1
 8000bfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c02:	fa05 f401 	lsl.w	r4, r5, r1
 8000c06:	fa20 f307 	lsr.w	r3, r0, r7
 8000c0a:	40fd      	lsrs	r5, r7
 8000c0c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c10:	4323      	orrs	r3, r4
 8000c12:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c16:	fa1f fe8c 	uxth.w	lr, ip
 8000c1a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c1e:	0c1c      	lsrs	r4, r3, #16
 8000c20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c24:	fb08 f50e 	mul.w	r5, r8, lr
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1c 0404 	adds.w	r4, ip, r4
 8000c38:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c3c:	f080 8088 	bcs.w	8000d50 <__udivmoddi4+0x2b4>
 8000c40:	42a5      	cmp	r5, r4
 8000c42:	f240 8085 	bls.w	8000d50 <__udivmoddi4+0x2b4>
 8000c46:	f1a8 0802 	sub.w	r8, r8, #2
 8000c4a:	4464      	add	r4, ip
 8000c4c:	1b64      	subs	r4, r4, r5
 8000c4e:	b29d      	uxth	r5, r3
 8000c50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c54:	fb09 4413 	mls	r4, r9, r3, r4
 8000c58:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c5c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000c6c:	d26c      	bcs.n	8000d48 <__udivmoddi4+0x2ac>
 8000c6e:	45a6      	cmp	lr, r4
 8000c70:	d96a      	bls.n	8000d48 <__udivmoddi4+0x2ac>
 8000c72:	3b02      	subs	r3, #2
 8000c74:	4464      	add	r4, ip
 8000c76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c7e:	eba4 040e 	sub.w	r4, r4, lr
 8000c82:	42ac      	cmp	r4, r5
 8000c84:	46c8      	mov	r8, r9
 8000c86:	46ae      	mov	lr, r5
 8000c88:	d356      	bcc.n	8000d38 <__udivmoddi4+0x29c>
 8000c8a:	d053      	beq.n	8000d34 <__udivmoddi4+0x298>
 8000c8c:	b156      	cbz	r6, 8000ca4 <__udivmoddi4+0x208>
 8000c8e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c92:	eb64 040e 	sbc.w	r4, r4, lr
 8000c96:	fa04 f707 	lsl.w	r7, r4, r7
 8000c9a:	40ca      	lsrs	r2, r1
 8000c9c:	40cc      	lsrs	r4, r1
 8000c9e:	4317      	orrs	r7, r2
 8000ca0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cac:	f1c3 0120 	rsb	r1, r3, #32
 8000cb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cb8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cbc:	409d      	lsls	r5, r3
 8000cbe:	432a      	orrs	r2, r5
 8000cc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ccc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cd0:	0c11      	lsrs	r1, r2, #16
 8000cd2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cd6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cda:	428d      	cmp	r5, r1
 8000cdc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x258>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000cea:	d22f      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000cec:	428d      	cmp	r5, r1
 8000cee:	d92d      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1b49      	subs	r1, r1, r5
 8000cf6:	b292      	uxth	r2, r2
 8000cf8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cfc:	fb07 1115 	mls	r1, r7, r5, r1
 8000d00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d04:	fb05 f10e 	mul.w	r1, r5, lr
 8000d08:	4291      	cmp	r1, r2
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x282>
 8000d0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d10:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d14:	d216      	bcs.n	8000d44 <__udivmoddi4+0x2a8>
 8000d16:	4291      	cmp	r1, r2
 8000d18:	d914      	bls.n	8000d44 <__udivmoddi4+0x2a8>
 8000d1a:	3d02      	subs	r5, #2
 8000d1c:	4462      	add	r2, ip
 8000d1e:	1a52      	subs	r2, r2, r1
 8000d20:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d24:	e738      	b.n	8000b98 <__udivmoddi4+0xfc>
 8000d26:	4631      	mov	r1, r6
 8000d28:	4630      	mov	r0, r6
 8000d2a:	e708      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000d2c:	4639      	mov	r1, r7
 8000d2e:	e6e6      	b.n	8000afe <__udivmoddi4+0x62>
 8000d30:	4610      	mov	r0, r2
 8000d32:	e6fb      	b.n	8000b2c <__udivmoddi4+0x90>
 8000d34:	4548      	cmp	r0, r9
 8000d36:	d2a9      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d38:	ebb9 0802 	subs.w	r8, r9, r2
 8000d3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d40:	3b01      	subs	r3, #1
 8000d42:	e7a3      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d44:	4645      	mov	r5, r8
 8000d46:	e7ea      	b.n	8000d1e <__udivmoddi4+0x282>
 8000d48:	462b      	mov	r3, r5
 8000d4a:	e794      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4c:	4640      	mov	r0, r8
 8000d4e:	e7d1      	b.n	8000cf4 <__udivmoddi4+0x258>
 8000d50:	46d0      	mov	r8, sl
 8000d52:	e77b      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d54:	3d02      	subs	r5, #2
 8000d56:	4462      	add	r2, ip
 8000d58:	e732      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e70a      	b.n	8000b74 <__udivmoddi4+0xd8>
 8000d5e:	4464      	add	r4, ip
 8000d60:	3802      	subs	r0, #2
 8000d62:	e742      	b.n	8000bea <__udivmoddi4+0x14e>

08000d64 <__aeabi_idiv0>:
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d6e:	f001 f883 	bl	8001e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d72:	f000 f83b 	bl	8000dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d76:	f000 f949 	bl	800100c <MX_GPIO_Init>
  MX_ETH_Init();
 8000d7a:	f000 f8a1 	bl	8000ec0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000d7e:	f000 f8ed 	bl	8000f5c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d82:	f000 f915 	bl	8000fb0 <MX_USB_OTG_FS_PCD_Init>
  //MX_TIM1_Init();
  //HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
  /* USER CODE BEGIN 2 */

	 if (display_Init() != DISPLAY_OK) {
 8000d86:	f000 fd41 	bl	800180c <display_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <main+0x2c>
	 	Error_Handler();
 8000d90:	f000 fa0c 	bl	80011ac <Error_Handler>
	 }

   if (hcsr04_Init() != HCSR04_OK) {
 8000d94:	f001 f836 	bl	8001e04 <hcsr04_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <main+0x3a>
	 	Error_Handler();
 8000d9e:	f000 fa05 	bl	80011ac <Error_Handler>
	// uint8_t count = 0;
	static const char adv_lvl_msg[] = "Cercania:";
    // Definir un array de caracteres (string) para almacenar el resultado
    char cadena[3]; // Se reserva espacio para el número y el carácter nulo de terminación

	display_PrintStringInTopLine((uint8_t *) adv_lvl_msg);
 8000da2:	480f      	ldr	r0, [pc, #60]	; (8000de0 <main+0x78>)
 8000da4:	f000 fdf9 	bl	800199a <display_PrintStringInTopLine>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    hcsr04_StartMeasure();
 8000da8:	f001 f83c 	bl	8001e24 <hcsr04_StartMeasure>
    HAL_Delay(1000);
 8000dac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000db0:	f001 f8d4 	bl	8001f5c <HAL_Delay>

    int Distance = hcsr04_GetDistance();
 8000db4:	f001 f854 	bl	8001e60 <hcsr04_GetDistance>
 8000db8:	4603      	mov	r3, r0
 8000dba:	607b      	str	r3, [r7, #4]
    if (Distance < 0) {
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	da03      	bge.n	8000dca <main+0x62>
    	display_PrintStringInBottomLine((uint8_t *) "Muy lejos");
 8000dc2:	4808      	ldr	r0, [pc, #32]	; (8000de4 <main+0x7c>)
 8000dc4:	f000 fe2f 	bl	8001a26 <display_PrintStringInBottomLine>
 8000dc8:	e7ee      	b.n	8000da8 <main+0x40>
    } else {
    	// Usar sprintf para convertir el número a una cadena de caracteres
    	    sprintf(cadena, "%u", Distance); // %u se utiliza para especificar un entero sin signo
 8000dca:	463b      	mov	r3, r7
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	4906      	ldr	r1, [pc, #24]	; (8000de8 <main+0x80>)
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f004 fc99 	bl	8005708 <siprintf>
    	    display_PrintStringInBottomLine((uint8_t *) cadena);
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 fe24 	bl	8001a26 <display_PrintStringInBottomLine>
  {
 8000dde:	e7e3      	b.n	8000da8 <main+0x40>
 8000de0:	08006078 	.word	0x08006078
 8000de4:	08006068 	.word	0x08006068
 8000de8:	08006074 	.word	0x08006074

08000dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b094      	sub	sp, #80	; 0x50
 8000df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df2:	f107 0320 	add.w	r3, r7, #32
 8000df6:	2230      	movs	r2, #48	; 0x30
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f004 fca4 	bl	8005748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <SystemClock_Config+0xcc>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	4a27      	ldr	r2, [pc, #156]	; (8000eb8 <SystemClock_Config+0xcc>)
 8000e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e20:	4b25      	ldr	r3, [pc, #148]	; (8000eb8 <SystemClock_Config+0xcc>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	4b22      	ldr	r3, [pc, #136]	; (8000ebc <SystemClock_Config+0xd0>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a21      	ldr	r2, [pc, #132]	; (8000ebc <SystemClock_Config+0xd0>)
 8000e36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e3a:	6013      	str	r3, [r2, #0]
 8000e3c:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <SystemClock_Config+0xd0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e4c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e52:	2302      	movs	r3, #2
 8000e54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e60:	23a8      	movs	r3, #168	; 0xa8
 8000e62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e64:	2302      	movs	r3, #2
 8000e66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e68:	2307      	movs	r3, #7
 8000e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6c:	f107 0320 	add.w	r3, r7, #32
 8000e70:	4618      	mov	r0, r3
 8000e72:	f002 fbf1 	bl	8003658 <HAL_RCC_OscConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e7c:	f000 f996 	bl	80011ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e80:	230f      	movs	r3, #15
 8000e82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e84:	2302      	movs	r3, #2
 8000e86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	2105      	movs	r1, #5
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f002 fe52 	bl	8003b48 <HAL_RCC_ClockConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000eaa:	f000 f97f 	bl	80011ac <Error_Handler>
  }
}
 8000eae:	bf00      	nop
 8000eb0:	3750      	adds	r7, #80	; 0x50
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40007000 	.word	0x40007000

08000ec0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <MX_ETH_Init+0x84>)
 8000ec6:	4a20      	ldr	r2, [pc, #128]	; (8000f48 <MX_ETH_Init+0x88>)
 8000ec8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000eca:	4b20      	ldr	r3, [pc, #128]	; (8000f4c <MX_ETH_Init+0x8c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <MX_ETH_Init+0x8c>)
 8000ed2:	2280      	movs	r2, #128	; 0x80
 8000ed4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ed6:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <MX_ETH_Init+0x8c>)
 8000ed8:	22e1      	movs	r2, #225	; 0xe1
 8000eda:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000edc:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <MX_ETH_Init+0x8c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000ee2:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <MX_ETH_Init+0x8c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ee8:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <MX_ETH_Init+0x8c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <MX_ETH_Init+0x84>)
 8000ef0:	4a16      	ldr	r2, [pc, #88]	; (8000f4c <MX_ETH_Init+0x8c>)
 8000ef2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <MX_ETH_Init+0x84>)
 8000ef6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000efa:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_ETH_Init+0x84>)
 8000efe:	4a14      	ldr	r2, [pc, #80]	; (8000f50 <MX_ETH_Init+0x90>)
 8000f00:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <MX_ETH_Init+0x84>)
 8000f04:	4a13      	ldr	r2, [pc, #76]	; (8000f54 <MX_ETH_Init+0x94>)
 8000f06:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_ETH_Init+0x84>)
 8000f0a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000f0e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <MX_ETH_Init+0x84>)
 8000f12:	f001 f959 	bl	80021c8 <HAL_ETH_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000f1c:	f000 f946 	bl	80011ac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000f20:	2238      	movs	r2, #56	; 0x38
 8000f22:	2100      	movs	r1, #0
 8000f24:	480c      	ldr	r0, [pc, #48]	; (8000f58 <MX_ETH_Init+0x98>)
 8000f26:	f004 fc0f 	bl	8005748 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <MX_ETH_Init+0x98>)
 8000f2c:	2221      	movs	r2, #33	; 0x21
 8000f2e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_ETH_Init+0x98>)
 8000f32:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000f36:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <MX_ETH_Init+0x98>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200001f0 	.word	0x200001f0
 8000f48:	40028000 	.word	0x40028000
 8000f4c:	200007cc 	.word	0x200007cc
 8000f50:	20000150 	.word	0x20000150
 8000f54:	200000b0 	.word	0x200000b0
 8000f58:	20000078 	.word	0x20000078

08000f5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_USART3_UART_Init+0x4c>)
 8000f62:	4a12      	ldr	r2, [pc, #72]	; (8000fac <MX_USART3_UART_Init+0x50>)
 8000f64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <MX_USART3_UART_Init+0x4c>)
 8000f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_USART3_UART_Init+0x4c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_USART3_UART_Init+0x4c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <MX_USART3_UART_Init+0x4c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_USART3_UART_Init+0x4c>)
 8000f82:	220c      	movs	r2, #12
 8000f84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <MX_USART3_UART_Init+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_USART3_UART_Init+0x4c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_USART3_UART_Init+0x4c>)
 8000f94:	f003 fdf4 	bl	8004b80 <HAL_UART_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f9e:	f000 f905 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200002a0 	.word	0x200002a0
 8000fac:	40004800 	.word	0x40004800

08000fb0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff4:	f002 fa21 	bl	800343a <HAL_PCD_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ffe:	f000 f8d5 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200002e8 	.word	0x200002e8

0800100c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	; 0x30
 8001010:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
 8001026:	4b5c      	ldr	r3, [pc, #368]	; (8001198 <MX_GPIO_Init+0x18c>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a5b      	ldr	r2, [pc, #364]	; (8001198 <MX_GPIO_Init+0x18c>)
 800102c:	f043 0310 	orr.w	r3, r3, #16
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b59      	ldr	r3, [pc, #356]	; (8001198 <MX_GPIO_Init+0x18c>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0310 	and.w	r3, r3, #16
 800103a:	61bb      	str	r3, [r7, #24]
 800103c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	4b55      	ldr	r3, [pc, #340]	; (8001198 <MX_GPIO_Init+0x18c>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a54      	ldr	r2, [pc, #336]	; (8001198 <MX_GPIO_Init+0x18c>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b52      	ldr	r3, [pc, #328]	; (8001198 <MX_GPIO_Init+0x18c>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	4b4e      	ldr	r3, [pc, #312]	; (8001198 <MX_GPIO_Init+0x18c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a4d      	ldr	r2, [pc, #308]	; (8001198 <MX_GPIO_Init+0x18c>)
 8001064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b4b      	ldr	r3, [pc, #300]	; (8001198 <MX_GPIO_Init+0x18c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b47      	ldr	r3, [pc, #284]	; (8001198 <MX_GPIO_Init+0x18c>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a46      	ldr	r2, [pc, #280]	; (8001198 <MX_GPIO_Init+0x18c>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b44      	ldr	r3, [pc, #272]	; (8001198 <MX_GPIO_Init+0x18c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	4b40      	ldr	r3, [pc, #256]	; (8001198 <MX_GPIO_Init+0x18c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a3f      	ldr	r2, [pc, #252]	; (8001198 <MX_GPIO_Init+0x18c>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b3d      	ldr	r3, [pc, #244]	; (8001198 <MX_GPIO_Init+0x18c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	4b39      	ldr	r3, [pc, #228]	; (8001198 <MX_GPIO_Init+0x18c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a38      	ldr	r2, [pc, #224]	; (8001198 <MX_GPIO_Init+0x18c>)
 80010b8:	f043 0308 	orr.w	r3, r3, #8
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b36      	ldr	r3, [pc, #216]	; (8001198 <MX_GPIO_Init+0x18c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0308 	and.w	r3, r3, #8
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	4b32      	ldr	r3, [pc, #200]	; (8001198 <MX_GPIO_Init+0x18c>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a31      	ldr	r2, [pc, #196]	; (8001198 <MX_GPIO_Init+0x18c>)
 80010d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <MX_GPIO_Init+0x18c>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2104      	movs	r1, #4
 80010ea:	482c      	ldr	r0, [pc, #176]	; (800119c <MX_GPIO_Init+0x190>)
 80010ec:	f001 fd40 	bl	8002b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f244 0181 	movw	r1, #16513	; 0x4081
 80010f6:	482a      	ldr	r0, [pc, #168]	; (80011a0 <MX_GPIO_Init+0x194>)
 80010f8:	f001 fd3a 	bl	8002b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2140      	movs	r1, #64	; 0x40
 8001100:	4828      	ldr	r0, [pc, #160]	; (80011a4 <MX_GPIO_Init+0x198>)
 8001102:	f001 fd35 	bl	8002b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001106:	2304      	movs	r3, #4
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	4619      	mov	r1, r3
 800111c:	481f      	ldr	r0, [pc, #124]	; (800119c <MX_GPIO_Init+0x190>)
 800111e:	f001 fb7b 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001122:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001128:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800112c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	4619      	mov	r1, r3
 8001138:	481b      	ldr	r0, [pc, #108]	; (80011a8 <MX_GPIO_Init+0x19c>)
 800113a:	f001 fb6d 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800113e:	f244 0381 	movw	r3, #16513	; 0x4081
 8001142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001144:	2301      	movs	r3, #1
 8001146:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	4812      	ldr	r0, [pc, #72]	; (80011a0 <MX_GPIO_Init+0x194>)
 8001158:	f001 fb5e 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800115c:	2340      	movs	r3, #64	; 0x40
 800115e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001160:	2301      	movs	r3, #1
 8001162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4619      	mov	r1, r3
 8001172:	480c      	ldr	r0, [pc, #48]	; (80011a4 <MX_GPIO_Init+0x198>)
 8001174:	f001 fb50 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	4619      	mov	r1, r3
 800118a:	4806      	ldr	r0, [pc, #24]	; (80011a4 <MX_GPIO_Init+0x198>)
 800118c:	f001 fb44 	bl	8002818 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001190:	bf00      	nop
 8001192:	3730      	adds	r7, #48	; 0x30
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40023800 	.word	0x40023800
 800119c:	40021000 	.word	0x40021000
 80011a0:	40020400 	.word	0x40020400
 80011a4:	40021800 	.word	0x40021800
 80011a8:	40020800 	.word	0x40020800

080011ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b0:	b672      	cpsid	i
}
 80011b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <Error_Handler+0x8>
	...

080011b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <HAL_MspInit+0x4c>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a0f      	ldr	r2, [pc, #60]	; (8001204 <HAL_MspInit+0x4c>)
 80011c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <HAL_MspInit+0x4c>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <HAL_MspInit+0x4c>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	4a08      	ldr	r2, [pc, #32]	; (8001204 <HAL_MspInit+0x4c>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_MspInit+0x4c>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800

08001208 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08e      	sub	sp, #56	; 0x38
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a55      	ldr	r2, [pc, #340]	; (800137c <HAL_ETH_MspInit+0x174>)
 8001226:	4293      	cmp	r3, r2
 8001228:	f040 80a4 	bne.w	8001374 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800122c:	2300      	movs	r3, #0
 800122e:	623b      	str	r3, [r7, #32]
 8001230:	4b53      	ldr	r3, [pc, #332]	; (8001380 <HAL_ETH_MspInit+0x178>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001234:	4a52      	ldr	r2, [pc, #328]	; (8001380 <HAL_ETH_MspInit+0x178>)
 8001236:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800123a:	6313      	str	r3, [r2, #48]	; 0x30
 800123c:	4b50      	ldr	r3, [pc, #320]	; (8001380 <HAL_ETH_MspInit+0x178>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001244:	623b      	str	r3, [r7, #32]
 8001246:	6a3b      	ldr	r3, [r7, #32]
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	4b4c      	ldr	r3, [pc, #304]	; (8001380 <HAL_ETH_MspInit+0x178>)
 800124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001250:	4a4b      	ldr	r2, [pc, #300]	; (8001380 <HAL_ETH_MspInit+0x178>)
 8001252:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001256:	6313      	str	r3, [r2, #48]	; 0x30
 8001258:	4b49      	ldr	r3, [pc, #292]	; (8001380 <HAL_ETH_MspInit+0x178>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	4b45      	ldr	r3, [pc, #276]	; (8001380 <HAL_ETH_MspInit+0x178>)
 800126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126c:	4a44      	ldr	r2, [pc, #272]	; (8001380 <HAL_ETH_MspInit+0x178>)
 800126e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001272:	6313      	str	r3, [r2, #48]	; 0x30
 8001274:	4b42      	ldr	r3, [pc, #264]	; (8001380 <HAL_ETH_MspInit+0x178>)
 8001276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800127c:	61bb      	str	r3, [r7, #24]
 800127e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	4b3e      	ldr	r3, [pc, #248]	; (8001380 <HAL_ETH_MspInit+0x178>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	4a3d      	ldr	r2, [pc, #244]	; (8001380 <HAL_ETH_MspInit+0x178>)
 800128a:	f043 0304 	orr.w	r3, r3, #4
 800128e:	6313      	str	r3, [r2, #48]	; 0x30
 8001290:	4b3b      	ldr	r3, [pc, #236]	; (8001380 <HAL_ETH_MspInit+0x178>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	4b37      	ldr	r3, [pc, #220]	; (8001380 <HAL_ETH_MspInit+0x178>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	4a36      	ldr	r2, [pc, #216]	; (8001380 <HAL_ETH_MspInit+0x178>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6313      	str	r3, [r2, #48]	; 0x30
 80012ac:	4b34      	ldr	r3, [pc, #208]	; (8001380 <HAL_ETH_MspInit+0x178>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	4b30      	ldr	r3, [pc, #192]	; (8001380 <HAL_ETH_MspInit+0x178>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	4a2f      	ldr	r2, [pc, #188]	; (8001380 <HAL_ETH_MspInit+0x178>)
 80012c2:	f043 0302 	orr.w	r3, r3, #2
 80012c6:	6313      	str	r3, [r2, #48]	; 0x30
 80012c8:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <HAL_ETH_MspInit+0x178>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	4b29      	ldr	r3, [pc, #164]	; (8001380 <HAL_ETH_MspInit+0x178>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	4a28      	ldr	r2, [pc, #160]	; (8001380 <HAL_ETH_MspInit+0x178>)
 80012de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012e2:	6313      	str	r3, [r2, #48]	; 0x30
 80012e4:	4b26      	ldr	r3, [pc, #152]	; (8001380 <HAL_ETH_MspInit+0x178>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80012f0:	2332      	movs	r3, #50	; 0x32
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001300:	230b      	movs	r3, #11
 8001302:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001308:	4619      	mov	r1, r3
 800130a:	481e      	ldr	r0, [pc, #120]	; (8001384 <HAL_ETH_MspInit+0x17c>)
 800130c:	f001 fa84 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001310:	2386      	movs	r3, #134	; 0x86
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001320:	230b      	movs	r3, #11
 8001322:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001328:	4619      	mov	r1, r3
 800132a:	4817      	ldr	r0, [pc, #92]	; (8001388 <HAL_ETH_MspInit+0x180>)
 800132c:	f001 fa74 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001342:	230b      	movs	r3, #11
 8001344:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134a:	4619      	mov	r1, r3
 800134c:	480f      	ldr	r0, [pc, #60]	; (800138c <HAL_ETH_MspInit+0x184>)
 800134e:	f001 fa63 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001352:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001364:	230b      	movs	r3, #11
 8001366:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136c:	4619      	mov	r1, r3
 800136e:	4808      	ldr	r0, [pc, #32]	; (8001390 <HAL_ETH_MspInit+0x188>)
 8001370:	f001 fa52 	bl	8002818 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001374:	bf00      	nop
 8001376:	3738      	adds	r7, #56	; 0x38
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40028000 	.word	0x40028000
 8001380:	40023800 	.word	0x40023800
 8001384:	40020800 	.word	0x40020800
 8001388:	40020000 	.word	0x40020000
 800138c:	40020400 	.word	0x40020400
 8001390:	40021800 	.word	0x40021800

08001394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a19      	ldr	r2, [pc, #100]	; (8001418 <HAL_UART_MspInit+0x84>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d12c      	bne.n	8001410 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <HAL_UART_MspInit+0x88>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	4a17      	ldr	r2, [pc, #92]	; (800141c <HAL_UART_MspInit+0x88>)
 80013c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <HAL_UART_MspInit+0x88>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <HAL_UART_MspInit+0x88>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a10      	ldr	r2, [pc, #64]	; (800141c <HAL_UART_MspInit+0x88>)
 80013dc:	f043 0308 	orr.w	r3, r3, #8
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <HAL_UART_MspInit+0x88>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fc:	2303      	movs	r3, #3
 80013fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001400:	2307      	movs	r3, #7
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <HAL_UART_MspInit+0x8c>)
 800140c:	f001 fa04 	bl	8002818 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001410:	bf00      	nop
 8001412:	3728      	adds	r7, #40	; 0x28
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40004800 	.word	0x40004800
 800141c:	40023800 	.word	0x40023800
 8001420:	40020c00 	.word	0x40020c00

08001424 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001444:	d13f      	bne.n	80014c6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <HAL_PCD_MspInit+0xac>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a20      	ldr	r2, [pc, #128]	; (80014d0 <HAL_PCD_MspInit+0xac>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <HAL_PCD_MspInit+0xac>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001462:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001474:	230a      	movs	r3, #10
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	4815      	ldr	r0, [pc, #84]	; (80014d4 <HAL_PCD_MspInit+0xb0>)
 8001480:	f001 f9ca 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148a:	2300      	movs	r3, #0
 800148c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	480e      	ldr	r0, [pc, #56]	; (80014d4 <HAL_PCD_MspInit+0xb0>)
 800149a:	f001 f9bd 	bl	8002818 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800149e:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <HAL_PCD_MspInit+0xac>)
 80014a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a2:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <HAL_PCD_MspInit+0xac>)
 80014a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a8:	6353      	str	r3, [r2, #52]	; 0x34
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_PCD_MspInit+0xac>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <HAL_PCD_MspInit+0xac>)
 80014b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ba:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <HAL_PCD_MspInit+0xac>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80014c6:	bf00      	nop
 80014c8:	3728      	adds	r7, #40	; 0x28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020000 	.word	0x40020000

080014d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014dc:	e7fe      	b.n	80014dc <NMI_Handler+0x4>

080014de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <HardFault_Handler+0x4>

080014e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <MemManage_Handler+0x4>

080014ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <BusFault_Handler+0x4>

080014f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <UsageFault_Handler+0x4>

080014f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001524:	f000 fcfa 	bl	8001f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}

0800152c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001534:	4a14      	ldr	r2, [pc, #80]	; (8001588 <_sbrk+0x5c>)
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <_sbrk+0x60>)
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <_sbrk+0x64>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d102      	bne.n	800154e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <_sbrk+0x64>)
 800154a:	4a12      	ldr	r2, [pc, #72]	; (8001594 <_sbrk+0x68>)
 800154c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <_sbrk+0x64>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	429a      	cmp	r2, r3
 800155a:	d207      	bcs.n	800156c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800155c:	f004 f8fc 	bl	8005758 <__errno>
 8001560:	4603      	mov	r3, r0
 8001562:	220c      	movs	r2, #12
 8001564:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800156a:	e009      	b.n	8001580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <_sbrk+0x64>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001572:	4b07      	ldr	r3, [pc, #28]	; (8001590 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	4a05      	ldr	r2, [pc, #20]	; (8001590 <_sbrk+0x64>)
 800157c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800157e:	68fb      	ldr	r3, [r7, #12]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20030000 	.word	0x20030000
 800158c:	00000400 	.word	0x00000400
 8001590:	200007d4 	.word	0x200007d4
 8001594:	200009d0 	.word	0x200009d0

08001598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <SystemInit+0x20>)
 800159e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <SystemInit+0x20>)
 80015a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015c0:	f7ff ffea 	bl	8001598 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c4:	480c      	ldr	r0, [pc, #48]	; (80015f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015c6:	490d      	ldr	r1, [pc, #52]	; (80015fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015c8:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015cc:	e002      	b.n	80015d4 <LoopCopyDataInit>

080015ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d2:	3304      	adds	r3, #4

080015d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d8:	d3f9      	bcc.n	80015ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015da:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015dc:	4c0a      	ldr	r4, [pc, #40]	; (8001608 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e0:	e001      	b.n	80015e6 <LoopFillZerobss>

080015e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e4:	3204      	adds	r2, #4

080015e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e8:	d3fb      	bcc.n	80015e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015ea:	f004 f8bb 	bl	8005764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ee:	f7ff fbbb 	bl	8000d68 <main>
  bx  lr    
 80015f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80015f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015fc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001600:	080060e0 	.word	0x080060e0
  ldr r2, =_sbss
 8001604:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001608:	200009d0 	.word	0x200009d0

0800160c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800160c:	e7fe      	b.n	800160c <ADC_IRQHandler>
	...

08001610 <display_Send4bitsCmd>:
                                            if (x != DISPLAY_OK) { return x; } \
                                        } while(0U)

/* Private functions ---------------------------------------------------------*/
static display_Status_t display_Send4bitsCmd(uint8_t value, display_RsType_t rs_type)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af02      	add	r7, sp, #8
 8001616:	4603      	mov	r3, r0
 8001618:	460a      	mov	r2, r1
 800161a:	71fb      	strb	r3, [r7, #7]
 800161c:	4613      	mov	r3, r2
 800161e:	71bb      	strb	r3, [r7, #6]
    uint8_t cmd = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	73fb      	strb	r3, [r7, #15]
    // E = enable bit
    // B = enable backlight bit
    // R (R/W) = read/write bit
    // T (RS) = data or control bit
    // DDDDEBRT
    HAL_Delay(DELAY_1MS);
 8001624:	2001      	movs	r0, #1
 8001626:	f000 fc99 	bl	8001f5c <HAL_Delay>
    cmd = value | BIT_BACKLIGHT | BIT_ENABLE | rs_type;
 800162a:	79fa      	ldrb	r2, [r7, #7]
 800162c:	79bb      	ldrb	r3, [r7, #6]
 800162e:	4313      	orrs	r3, r2
 8001630:	b2db      	uxtb	r3, r3
 8001632:	f043 030c 	orr.w	r3, r3, #12
 8001636:	b2db      	uxtb	r3, r3
 8001638:	73fb      	strb	r3, [r7, #15]
    CHECK_I2C(display_TransmitData(cmd));
 800163a:	f107 020f 	add.w	r2, r7, #15
 800163e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2301      	movs	r3, #1
 8001646:	214e      	movs	r1, #78	; 0x4e
 8001648:	4813      	ldr	r0, [pc, #76]	; (8001698 <display_Send4bitsCmd+0x88>)
 800164a:	f001 fbef 	bl	8002e2c <HAL_I2C_Master_Transmit>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <display_Send4bitsCmd+0x48>
 8001654:	2302      	movs	r3, #2
 8001656:	e01a      	b.n	800168e <display_Send4bitsCmd+0x7e>
    HAL_Delay(DELAY_1MS);
 8001658:	2001      	movs	r0, #1
 800165a:	f000 fc7f 	bl	8001f5c <HAL_Delay>
    cmd = value | BIT_BACKLIGHT | rs_type;
 800165e:	79fa      	ldrb	r2, [r7, #7]
 8001660:	79bb      	ldrb	r3, [r7, #6]
 8001662:	4313      	orrs	r3, r2
 8001664:	b2db      	uxtb	r3, r3
 8001666:	f043 0308 	orr.w	r3, r3, #8
 800166a:	b2db      	uxtb	r3, r3
 800166c:	73fb      	strb	r3, [r7, #15]
    CHECK_I2C(display_TransmitData(cmd));
 800166e:	f107 020f 	add.w	r2, r7, #15
 8001672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2301      	movs	r3, #1
 800167a:	214e      	movs	r1, #78	; 0x4e
 800167c:	4806      	ldr	r0, [pc, #24]	; (8001698 <display_Send4bitsCmd+0x88>)
 800167e:	f001 fbd5 	bl	8002e2c <HAL_I2C_Master_Transmit>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <display_Send4bitsCmd+0x7c>
 8001688:	2302      	movs	r3, #2
 800168a:	e000      	b.n	800168e <display_Send4bitsCmd+0x7e>
    return DISPLAY_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200007d8 	.word	0x200007d8

0800169c <display_Send8bitsCmd>:

static display_Status_t display_Send8bitsCmd(uint8_t value, display_RsType_t rs_type)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	460a      	mov	r2, r1
 80016a6:	71fb      	strb	r3, [r7, #7]
 80016a8:	4613      	mov	r3, r2
 80016aa:	71bb      	strb	r3, [r7, #6]
    uint8_t cmd = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	73fb      	strb	r3, [r7, #15]
    cmd = value & HIGH_NIBBLE_MASK;
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	f023 030f 	bic.w	r3, r3, #15
 80016b6:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(display_Send4bitsCmd(cmd, rs_type));
 80016b8:	79ba      	ldrb	r2, [r7, #6]
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	4611      	mov	r1, r2
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ffa6 	bl	8001610 <display_Send4bitsCmd>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d007      	beq.n	80016da <display_Send8bitsCmd+0x3e>
 80016ca:	79ba      	ldrb	r2, [r7, #6]
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff9d 	bl	8001610 <display_Send4bitsCmd>
 80016d6:	4603      	mov	r3, r0
 80016d8:	e014      	b.n	8001704 <display_Send8bitsCmd+0x68>
    cmd = value << HIGH_NIBBLE_SHIFT;
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(display_Send4bitsCmd(cmd, rs_type));
 80016e0:	79ba      	ldrb	r2, [r7, #6]
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	4611      	mov	r1, r2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ff92 	bl	8001610 <display_Send4bitsCmd>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d007      	beq.n	8001702 <display_Send8bitsCmd+0x66>
 80016f2:	79ba      	ldrb	r2, [r7, #6]
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff89 	bl	8001610 <display_Send4bitsCmd>
 80016fe:	4603      	mov	r3, r0
 8001700:	e000      	b.n	8001704 <display_Send8bitsCmd+0x68>
    return DISPLAY_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef  GPIO_InitStruct;

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    I2Cx_SCL_GPIO_CLK_ENABLE();
 8001714:	2300      	movs	r3, #0
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <HAL_I2C_MspInit+0x98>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	4a21      	ldr	r2, [pc, #132]	; (80017a4 <HAL_I2C_MspInit+0x98>)
 800171e:	f043 0302 	orr.w	r3, r3, #2
 8001722:	6313      	str	r3, [r2, #48]	; 0x30
 8001724:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <HAL_I2C_MspInit+0x98>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	693b      	ldr	r3, [r7, #16]
    I2Cx_SDA_GPIO_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <HAL_I2C_MspInit+0x98>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	4a1a      	ldr	r2, [pc, #104]	; (80017a4 <HAL_I2C_MspInit+0x98>)
 800173a:	f043 0302 	orr.w	r3, r3, #2
 800173e:	6313      	str	r3, [r2, #48]	; 0x30
 8001740:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <HAL_I2C_MspInit+0x98>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]

    /*** Configure the I2C peripheral ***/
    GPIO_InitStruct.Pin = I2Cx_SCL_PIN;
 800174c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001752:	2312      	movs	r3, #18
 8001754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
 800175e:	2304      	movs	r3, #4
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	480f      	ldr	r0, [pc, #60]	; (80017a8 <HAL_I2C_MspInit+0x9c>)
 800176a:	f001 f855 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2Cx_SDA_PIN;
 800176e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001772:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	480b      	ldr	r0, [pc, #44]	; (80017a8 <HAL_I2C_MspInit+0x9c>)
 800177c:	f001 f84c 	bl	8002818 <HAL_GPIO_Init>

    /* Enable I2C clock */
    I2Cx_CLK_ENABLE();
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <HAL_I2C_MspInit+0x98>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	4a06      	ldr	r2, [pc, #24]	; (80017a4 <HAL_I2C_MspInit+0x98>)
 800178a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800178e:	6413      	str	r3, [r2, #64]	; 0x40
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <HAL_I2C_MspInit+0x98>)
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]
}
 800179c:	bf00      	nop
 800179e:	3728      	adds	r7, #40	; 0x28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40020400 	.word	0x40020400

080017ac <myI2Cx_Init>:

static display_Status_t myI2Cx_Init()
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2Cx;
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <myI2Cx_Init+0x54>)
 80017b2:	4a14      	ldr	r2, [pc, #80]	; (8001804 <myI2Cx_Init+0x58>)
 80017b4:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = I2C_CLOCK_RATE;
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <myI2Cx_Init+0x54>)
 80017b8:	4a13      	ldr	r2, [pc, #76]	; (8001808 <myI2Cx_Init+0x5c>)
 80017ba:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017bc:	4b10      	ldr	r3, [pc, #64]	; (8001800 <myI2Cx_Init+0x54>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80017c2:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <myI2Cx_Init+0x54>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c8:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <myI2Cx_Init+0x54>)
 80017ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ce:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <myI2Cx_Init+0x54>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <myI2Cx_Init+0x54>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <myI2Cx_Init+0x54>)
 80017de:	2200      	movs	r2, #0
 80017e0:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <myI2Cx_Init+0x54>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	621a      	str	r2, [r3, #32]

    CHECK_I2C(HAL_I2C_Init(&hi2c1));
 80017e8:	4805      	ldr	r0, [pc, #20]	; (8001800 <myI2Cx_Init+0x54>)
 80017ea:	f001 f9db 	bl	8002ba4 <HAL_I2C_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <myI2Cx_Init+0x4c>
 80017f4:	2302      	movs	r3, #2
 80017f6:	e000      	b.n	80017fa <myI2Cx_Init+0x4e>

    return DISPLAY_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200007d8 	.word	0x200007d8
 8001804:	40005400 	.word	0x40005400
 8001808:	000186a0 	.word	0x000186a0

0800180c <display_Init>:

/* Public functions ----------------------------------------------------------*/
display_Status_t display_Init()
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
    CHECK_INTERNAL(myI2Cx_Init());
 8001810:	f7ff ffcc 	bl	80017ac <myI2Cx_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <display_Init+0x16>
 800181a:	f7ff ffc7 	bl	80017ac <myI2Cx_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	e08b      	b.n	800193a <display_Init+0x12e>

    // Initialization sequence recommended by the datasheet
    HAL_Delay(DELAY_20MS);
 8001822:	2014      	movs	r0, #20
 8001824:	f000 fb9a 	bl	8001f5c <HAL_Delay>
    // 0x3c - 0x38
    CHECK_INTERNAL(display_Send4bitsControlCmd(CMD_INIT_1));
 8001828:	2100      	movs	r1, #0
 800182a:	2030      	movs	r0, #48	; 0x30
 800182c:	f7ff fef0 	bl	8001610 <display_Send4bitsCmd>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d005      	beq.n	8001842 <display_Init+0x36>
 8001836:	2100      	movs	r1, #0
 8001838:	2030      	movs	r0, #48	; 0x30
 800183a:	f7ff fee9 	bl	8001610 <display_Send4bitsCmd>
 800183e:	4603      	mov	r3, r0
 8001840:	e07b      	b.n	800193a <display_Init+0x12e>
    HAL_Delay(DELAY_10MS);
 8001842:	200a      	movs	r0, #10
 8001844:	f000 fb8a 	bl	8001f5c <HAL_Delay>
    // 0x3c - 0x38
    CHECK_INTERNAL(display_Send4bitsControlCmd(CMD_INIT_1));
 8001848:	2100      	movs	r1, #0
 800184a:	2030      	movs	r0, #48	; 0x30
 800184c:	f7ff fee0 	bl	8001610 <display_Send4bitsCmd>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <display_Init+0x56>
 8001856:	2100      	movs	r1, #0
 8001858:	2030      	movs	r0, #48	; 0x30
 800185a:	f7ff fed9 	bl	8001610 <display_Send4bitsCmd>
 800185e:	4603      	mov	r3, r0
 8001860:	e06b      	b.n	800193a <display_Init+0x12e>
    HAL_Delay(DELAY_1MS);
 8001862:	2001      	movs	r0, #1
 8001864:	f000 fb7a 	bl	8001f5c <HAL_Delay>
    // 0x3c - 0x38
    CHECK_INTERNAL(display_Send4bitsControlCmd(CMD_INIT_1));
 8001868:	2100      	movs	r1, #0
 800186a:	2030      	movs	r0, #48	; 0x30
 800186c:	f7ff fed0 	bl	8001610 <display_Send4bitsCmd>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d005      	beq.n	8001882 <display_Init+0x76>
 8001876:	2100      	movs	r1, #0
 8001878:	2030      	movs	r0, #48	; 0x30
 800187a:	f7ff fec9 	bl	8001610 <display_Send4bitsCmd>
 800187e:	4603      	mov	r3, r0
 8001880:	e05b      	b.n	800193a <display_Init+0x12e>
    // 0x2c - 0x28
    CHECK_INTERNAL(display_Send4bitsControlCmd(CMD_INIT_2));
 8001882:	2100      	movs	r1, #0
 8001884:	2020      	movs	r0, #32
 8001886:	f7ff fec3 	bl	8001610 <display_Send4bitsCmd>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <display_Init+0x90>
 8001890:	2100      	movs	r1, #0
 8001892:	2020      	movs	r0, #32
 8001894:	f7ff febc 	bl	8001610 <display_Send4bitsCmd>
 8001898:	4603      	mov	r3, r0
 800189a:	e04e      	b.n	800193a <display_Init+0x12e>

    // Custom settings
    CHECK_INTERNAL(display_Send8bitsControlCmd(CMD_FUNCTION_SET_4B_2L));
 800189c:	2100      	movs	r1, #0
 800189e:	2028      	movs	r0, #40	; 0x28
 80018a0:	f7ff fefc 	bl	800169c <display_Send8bitsCmd>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <display_Init+0xaa>
 80018aa:	2100      	movs	r1, #0
 80018ac:	2028      	movs	r0, #40	; 0x28
 80018ae:	f7ff fef5 	bl	800169c <display_Send8bitsCmd>
 80018b2:	4603      	mov	r3, r0
 80018b4:	e041      	b.n	800193a <display_Init+0x12e>
    CHECK_INTERNAL(display_Send8bitsControlCmd(INSTR_DISPLAY_CONTROL));
 80018b6:	2100      	movs	r1, #0
 80018b8:	2008      	movs	r0, #8
 80018ba:	f7ff feef 	bl	800169c <display_Send8bitsCmd>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <display_Init+0xc4>
 80018c4:	2100      	movs	r1, #0
 80018c6:	2008      	movs	r0, #8
 80018c8:	f7ff fee8 	bl	800169c <display_Send8bitsCmd>
 80018cc:	4603      	mov	r3, r0
 80018ce:	e034      	b.n	800193a <display_Init+0x12e>
    CHECK_INTERNAL(display_Send8bitsControlCmd(INSTR_RETURN_HOME));
 80018d0:	2100      	movs	r1, #0
 80018d2:	2002      	movs	r0, #2
 80018d4:	f7ff fee2 	bl	800169c <display_Send8bitsCmd>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <display_Init+0xde>
 80018de:	2100      	movs	r1, #0
 80018e0:	2002      	movs	r0, #2
 80018e2:	f7ff fedb 	bl	800169c <display_Send8bitsCmd>
 80018e6:	4603      	mov	r3, r0
 80018e8:	e027      	b.n	800193a <display_Init+0x12e>
    CHECK_INTERNAL(display_Send8bitsControlCmd(CMD_ENTRY_MODE_INCREMENT));
 80018ea:	2100      	movs	r1, #0
 80018ec:	2006      	movs	r0, #6
 80018ee:	f7ff fed5 	bl	800169c <display_Send8bitsCmd>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <display_Init+0xf8>
 80018f8:	2100      	movs	r1, #0
 80018fa:	2006      	movs	r0, #6
 80018fc:	f7ff fece 	bl	800169c <display_Send8bitsCmd>
 8001900:	4603      	mov	r3, r0
 8001902:	e01a      	b.n	800193a <display_Init+0x12e>
    CHECK_INTERNAL(display_Send8bitsControlCmd(CMD_TURN_ON_DISPLAY));
 8001904:	2100      	movs	r1, #0
 8001906:	200c      	movs	r0, #12
 8001908:	f7ff fec8 	bl	800169c <display_Send8bitsCmd>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d005      	beq.n	800191e <display_Init+0x112>
 8001912:	2100      	movs	r1, #0
 8001914:	200c      	movs	r0, #12
 8001916:	f7ff fec1 	bl	800169c <display_Send8bitsCmd>
 800191a:	4603      	mov	r3, r0
 800191c:	e00d      	b.n	800193a <display_Init+0x12e>
    CHECK_INTERNAL(display_Send8bitsControlCmd(INSTR_CLR_DISPLAY));
 800191e:	2100      	movs	r1, #0
 8001920:	2001      	movs	r0, #1
 8001922:	f7ff febb 	bl	800169c <display_Send8bitsCmd>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <display_Init+0x12c>
 800192c:	2100      	movs	r1, #0
 800192e:	2001      	movs	r0, #1
 8001930:	f7ff feb4 	bl	800169c <display_Send8bitsCmd>
 8001934:	4603      	mov	r3, r0
 8001936:	e000      	b.n	800193a <display_Init+0x12e>

    return DISPLAY_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	bd80      	pop	{r7, pc}

0800193e <display_Clear>:

display_Status_t display_Clear()
{
 800193e:	b580      	push	{r7, lr}
 8001940:	af00      	add	r7, sp, #0
    CHECK_INTERNAL(display_Send8bitsControlCmd(INSTR_CLR_DISPLAY));
 8001942:	2100      	movs	r1, #0
 8001944:	2001      	movs	r0, #1
 8001946:	f7ff fea9 	bl	800169c <display_Send8bitsCmd>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <display_Clear+0x1e>
 8001950:	2100      	movs	r1, #0
 8001952:	2001      	movs	r0, #1
 8001954:	f7ff fea2 	bl	800169c <display_Send8bitsCmd>
 8001958:	4603      	mov	r3, r0
 800195a:	e003      	b.n	8001964 <display_Clear+0x26>
    HAL_Delay(DELAY_2MS);
 800195c:	2002      	movs	r0, #2
 800195e:	f000 fafd 	bl	8001f5c <HAL_Delay>
    return DISPLAY_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	bd80      	pop	{r7, pc}

08001968 <display_PrintChar>:

display_Status_t display_PrintChar(uint8_t ch)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
    CHECK_INTERNAL(display_Send8bitsDataCmd(ch));
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	2101      	movs	r1, #1
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fe90 	bl	800169c <display_Send8bitsCmd>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d006      	beq.n	8001990 <display_PrintChar+0x28>
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	2101      	movs	r1, #1
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fe88 	bl	800169c <display_Send8bitsCmd>
 800198c:	4603      	mov	r3, r0
 800198e:	e000      	b.n	8001992 <display_PrintChar+0x2a>
    return DISPLAY_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <display_PrintStringInTopLine>:

display_Status_t display_PrintStringInTopLine(uint8_t * buf)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b084      	sub	sp, #16
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
    CHECK_NULL(buf);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <display_PrintStringInTopLine+0x12>
 80019a8:	2301      	movs	r3, #1
 80019aa:	e038      	b.n	8001a1e <display_PrintStringInTopLine+0x84>

    CHECK_INTERNAL(display_Clear());
 80019ac:	f7ff ffc7 	bl	800193e <display_Clear>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <display_PrintStringInTopLine+0x24>
 80019b6:	f7ff ffc2 	bl	800193e <display_Clear>
 80019ba:	4603      	mov	r3, r0
 80019bc:	e02f      	b.n	8001a1e <display_PrintStringInTopLine+0x84>
    CHECK_INTERNAL(display_Send8bitsControlCmd(CMD_SET_CURSOR_LINE1));
 80019be:	2100      	movs	r1, #0
 80019c0:	2080      	movs	r0, #128	; 0x80
 80019c2:	f7ff fe6b 	bl	800169c <display_Send8bitsCmd>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <display_PrintStringInTopLine+0x3e>
 80019cc:	2100      	movs	r1, #0
 80019ce:	2080      	movs	r0, #128	; 0x80
 80019d0:	f7ff fe64 	bl	800169c <display_Send8bitsCmd>
 80019d4:	4603      	mov	r3, r0
 80019d6:	e022      	b.n	8001a1e <display_PrintStringInTopLine+0x84>

    for (int i = 0; i < MAX_CHAR_PER_LINE && buf[i] != '\0'; i++) {
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	e015      	b.n	8001a0a <display_PrintStringInTopLine+0x70>
        CHECK_INTERNAL(display_PrintChar(buf[i]));
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	4413      	add	r3, r2
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff ffbe 	bl	8001968 <display_PrintChar>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d008      	beq.n	8001a04 <display_PrintStringInTopLine+0x6a>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	4413      	add	r3, r2
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ffb4 	bl	8001968 <display_PrintChar>
 8001a00:	4603      	mov	r3, r0
 8001a02:	e00c      	b.n	8001a1e <display_PrintStringInTopLine+0x84>
    for (int i = 0; i < MAX_CHAR_PER_LINE && buf[i] != '\0'; i++) {
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	3301      	adds	r3, #1
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2b0f      	cmp	r3, #15
 8001a0e:	dc05      	bgt.n	8001a1c <display_PrintStringInTopLine+0x82>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1e0      	bne.n	80019de <display_PrintStringInTopLine+0x44>
    }

    return DISPLAY_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <display_PrintStringInBottomLine>:

display_Status_t display_PrintStringInBottomLine(uint8_t * buf)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b084      	sub	sp, #16
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
    CHECK_NULL(buf);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <display_PrintStringInBottomLine+0x12>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e038      	b.n	8001aaa <display_PrintStringInBottomLine+0x84>

    CHECK_INTERNAL(display_Clear());
 8001a38:	f7ff ff81 	bl	800193e <display_Clear>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <display_PrintStringInBottomLine+0x24>
 8001a42:	f7ff ff7c 	bl	800193e <display_Clear>
 8001a46:	4603      	mov	r3, r0
 8001a48:	e02f      	b.n	8001aaa <display_PrintStringInBottomLine+0x84>
    CHECK_INTERNAL(display_Send8bitsControlCmd(CMD_SET_CURSOR_LINE2));
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	20c0      	movs	r0, #192	; 0xc0
 8001a4e:	f7ff fe25 	bl	800169c <display_Send8bitsCmd>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <display_PrintStringInBottomLine+0x3e>
 8001a58:	2100      	movs	r1, #0
 8001a5a:	20c0      	movs	r0, #192	; 0xc0
 8001a5c:	f7ff fe1e 	bl	800169c <display_Send8bitsCmd>
 8001a60:	4603      	mov	r3, r0
 8001a62:	e022      	b.n	8001aaa <display_PrintStringInBottomLine+0x84>

    for (int i = 0; i < MAX_CHAR_PER_LINE && buf[i] != '\0'; i++) {
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	e015      	b.n	8001a96 <display_PrintStringInBottomLine+0x70>
        CHECK_INTERNAL(display_PrintChar(buf[i]));
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	4413      	add	r3, r2
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff ff78 	bl	8001968 <display_PrintChar>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d008      	beq.n	8001a90 <display_PrintStringInBottomLine+0x6a>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	4413      	add	r3, r2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff ff6e 	bl	8001968 <display_PrintChar>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	e00c      	b.n	8001aaa <display_PrintStringInBottomLine+0x84>
    for (int i = 0; i < MAX_CHAR_PER_LINE && buf[i] != '\0'; i++) {
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	3301      	adds	r3, #1
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2b0f      	cmp	r3, #15
 8001a9a:	dc05      	bgt.n	8001aa8 <display_PrintStringInBottomLine+0x82>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1e0      	bne.n	8001a6a <display_PrintStringInBottomLine+0x44>
    }

    return DISPLAY_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	0000      	movs	r0, r0
 8001ab4:	0000      	movs	r0, r0
	...

08001ab8 <HAL_TIM_IC_CaptureCallback>:
uint32_t Difference = 0;
uint8_t Is_First_Captured = 0;  // is the first value captured ?
uint8_t Distance  = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	uint8_t partial = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	73fb      	strb	r3, [r7, #15]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	7f1b      	ldrb	r3, [r3, #28]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	f040 8084 	bne.w	8001bd6 <HAL_TIM_IC_CaptureCallback+0x11e>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8001ace:	4b46      	ldr	r3, [pc, #280]	; (8001be8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d11a      	bne.n	8001b0c <HAL_TIM_IC_CaptureCallback+0x54>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f002 fd59 	bl	8004590 <HAL_TIM_ReadCapturedValue>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	4a42      	ldr	r2, [pc, #264]	; (8001bec <HAL_TIM_IC_CaptureCallback+0x134>)
 8001ae2:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001ae4:	4b40      	ldr	r3, [pc, #256]	; (8001be8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6a1a      	ldr	r2, [r3, #32]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 020a 	bic.w	r2, r2, #10
 8001af8:	621a      	str	r2, [r3, #32]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6a1a      	ldr	r2, [r3, #32]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f042 0202 	orr.w	r2, r2, #2
 8001b08:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8001b0a:	e064      	b.n	8001bd6 <HAL_TIM_IC_CaptureCallback+0x11e>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001b0c:	4b36      	ldr	r3, [pc, #216]	; (8001be8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d160      	bne.n	8001bd6 <HAL_TIM_IC_CaptureCallback+0x11e>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001b14:	2100      	movs	r1, #0
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f002 fd3a 	bl	8004590 <HAL_TIM_ReadCapturedValue>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4a34      	ldr	r2, [pc, #208]	; (8001bf0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001b20:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2200      	movs	r2, #0
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8001b2a:	4b31      	ldr	r3, [pc, #196]	; (8001bf0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	4b2f      	ldr	r3, [pc, #188]	; (8001bec <HAL_TIM_IC_CaptureCallback+0x134>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d907      	bls.n	8001b46 <HAL_TIM_IC_CaptureCallback+0x8e>
				Difference = IC_Val2-IC_Val1;
 8001b36:	4b2e      	ldr	r3, [pc, #184]	; (8001bf0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	4b2c      	ldr	r3, [pc, #176]	; (8001bec <HAL_TIM_IC_CaptureCallback+0x134>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	4a2c      	ldr	r2, [pc, #176]	; (8001bf4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	e00f      	b.n	8001b66 <HAL_TIM_IC_CaptureCallback+0xae>
			else if (IC_Val1 > IC_Val2)
 8001b46:	4b29      	ldr	r3, [pc, #164]	; (8001bec <HAL_TIM_IC_CaptureCallback+0x134>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	4b29      	ldr	r3, [pc, #164]	; (8001bf0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d909      	bls.n	8001b66 <HAL_TIM_IC_CaptureCallback+0xae>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001b52:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	4b25      	ldr	r3, [pc, #148]	; (8001bec <HAL_TIM_IC_CaptureCallback+0x134>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001b60:	33ff      	adds	r3, #255	; 0xff
 8001b62:	4a24      	ldr	r2, [pc, #144]	; (8001bf4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001b64:	6013      	str	r3, [r2, #0]
			partial = Difference * .034/2;
 8001b66:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fcd2 	bl	8000514 <__aeabi_ui2d>
 8001b70:	a31b      	add	r3, pc, #108	; (adr r3, 8001be0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b76:	f7fe fd47 	bl	8000608 <__aeabi_dmul>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b8a:	f7fe fe67 	bl	800085c <__aeabi_ddiv>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	f7fe ff49 	bl	8000a2c <__aeabi_d2uiz>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	73fb      	strb	r3, [r7, #15]
			Distance = partial;
 8001b9e:	4a16      	ldr	r2, [pc, #88]	; (8001bf8 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	7013      	strb	r3, [r2, #0]
			Is_First_Captured = 0; // set it back to false
 8001ba4:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6a1a      	ldr	r2, [r3, #32]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 020a 	bic.w	r2, r2, #10
 8001bb8:	621a      	str	r2, [r3, #32]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6a12      	ldr	r2, [r2, #32]
 8001bc4:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8001bc6:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <HAL_TIM_IC_CaptureCallback+0x144>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_TIM_IC_CaptureCallback+0x144>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 0202 	bic.w	r2, r2, #2
 8001bd4:	60da      	str	r2, [r3, #12]
}
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	b020c49c 	.word	0xb020c49c
 8001be4:	3fa16872 	.word	0x3fa16872
 8001be8:	20000880 	.word	0x20000880
 8001bec:	20000874 	.word	0x20000874
 8001bf0:	20000878 	.word	0x20000878
 8001bf4:	2000087c 	.word	0x2000087c
 8001bf8:	20000881 	.word	0x20000881
 8001bfc:	2000082c 	.word	0x2000082c

08001c00 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08a      	sub	sp, #40	; 0x28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
    if(htim_ic->Instance==hcsr04_TIMER)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a1d      	ldr	r2, [pc, #116]	; (8001c94 <HAL_TIM_IC_MspInit+0x94>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d134      	bne.n	8001c8c <HAL_TIM_IC_MspInit+0x8c>
    {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_TIM1_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <HAL_TIM_IC_MspInit+0x98>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	4a1b      	ldr	r2, [pc, #108]	; (8001c98 <HAL_TIM_IC_MspInit+0x98>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6453      	str	r3, [r2, #68]	; 0x44
 8001c32:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <HAL_TIM_IC_MspInit+0x98>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]

        hcsr04_ECHO_GPIO_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <HAL_TIM_IC_MspInit+0x98>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a14      	ldr	r2, [pc, #80]	; (8001c98 <HAL_TIM_IC_MspInit+0x98>)
 8001c48:	f043 0310 	orr.w	r3, r3, #16
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_TIM_IC_MspInit+0x98>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0310 	and.w	r3, r3, #16
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
        /**TIM1 GPIO Configuration
        PE9     ------> TIM1_CH1
        */
        GPIO_InitStruct.Pin = hcsr04_ECHO_PIN;
 8001c5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c5e:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(hcsr04_ECHO_GPIO_PORT, &GPIO_InitStruct);
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	4619      	mov	r1, r3
 8001c76:	4809      	ldr	r0, [pc, #36]	; (8001c9c <HAL_TIM_IC_MspInit+0x9c>)
 8001c78:	f000 fdce 	bl	8002818 <HAL_GPIO_Init>

        /* TIM1 interrupt Init */
        HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2100      	movs	r1, #0
 8001c80:	201b      	movs	r0, #27
 8001c82:	f000 fa6a 	bl	800215a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001c86:	201b      	movs	r0, #27
 8001c88:	f000 fa83 	bl	8002192 <HAL_NVIC_EnableIRQ>
    }
}
 8001c8c:	bf00      	nop
 8001c8e:	3728      	adds	r7, #40	; 0x28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40010000 	.word	0x40010000
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <myTIM_Init>:

hcsr04_Status_t myTIM_Init()
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca6:	f107 0310 	add.w	r3, r7, #16
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
    TIM_IC_InitTypeDef sConfigIC = {0};
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]

    htim1.Instance = hcsr04_TIMER;
 8001cbc:	4b22      	ldr	r3, [pc, #136]	; (8001d48 <myTIM_Init+0xa8>)
 8001cbe:	4a23      	ldr	r2, [pc, #140]	; (8001d4c <myTIM_Init+0xac>)
 8001cc0:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 168-1;
 8001cc2:	4b21      	ldr	r3, [pc, #132]	; (8001d48 <myTIM_Init+0xa8>)
 8001cc4:	22a7      	movs	r2, #167	; 0xa7
 8001cc6:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc8:	4b1f      	ldr	r3, [pc, #124]	; (8001d48 <myTIM_Init+0xa8>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 0xffff-1;
 8001cce:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <myTIM_Init+0xa8>)
 8001cd0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001cd4:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd6:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <myTIM_Init+0xa8>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <myTIM_Init+0xa8>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce2:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <myTIM_Init+0xa8>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
    CHECK_HAL(HAL_TIM_IC_Init(&htim1));
 8001ce8:	4817      	ldr	r0, [pc, #92]	; (8001d48 <myTIM_Init+0xa8>)
 8001cea:	f002 f94d 	bl	8003f88 <HAL_TIM_IC_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <myTIM_Init+0x58>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e022      	b.n	8001d3e <myTIM_Init+0x9e>

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	613b      	str	r3, [r7, #16]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
    CHECK_HAL(HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig));
 8001d00:	f107 0310 	add.w	r3, r7, #16
 8001d04:	4619      	mov	r1, r3
 8001d06:	4810      	ldr	r0, [pc, #64]	; (8001d48 <myTIM_Init+0xa8>)
 8001d08:	f002 feaa 	bl	8004a60 <HAL_TIMEx_MasterConfigSynchronization>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <myTIM_Init+0x76>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e013      	b.n	8001d3e <myTIM_Init+0x9e>

    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d16:	2300      	movs	r3, #0
 8001d18:	603b      	str	r3, [r7, #0]
    sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	607b      	str	r3, [r7, #4]
    sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
    sConfigIC.ICFilter = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
    CHECK_HAL(HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1));
 8001d26:	463b      	mov	r3, r7
 8001d28:	2200      	movs	r2, #0
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4806      	ldr	r0, [pc, #24]	; (8001d48 <myTIM_Init+0xa8>)
 8001d2e:	f002 fb93 	bl	8004458 <HAL_TIM_IC_ConfigChannel>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <myTIM_Init+0x9c>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e000      	b.n	8001d3e <myTIM_Init+0x9e>

    return HCSR04_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	2000082c 	.word	0x2000082c
 8001d4c:	40010000 	.word	0x40010000

08001d50 <myGPIO_Init>:

hcsr04_Status_t myGPIO_Init()
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]

    hcsr04_TRIG_GPIO_CLK_ENABLE();
 8001d64:	2300      	movs	r3, #0
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <myGPIO_Init+0x64>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	4a11      	ldr	r2, [pc, #68]	; (8001db4 <myGPIO_Init+0x64>)
 8001d6e:	f043 0310 	orr.w	r3, r3, #16
 8001d72:	6313      	str	r3, [r2, #48]	; 0x30
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <myGPIO_Init+0x64>)
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d78:	f003 0310 	and.w	r3, r3, #16
 8001d7c:	603b      	str	r3, [r7, #0]
 8001d7e:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(hcsr04_TRIG_GPIO_PORT, hcsr04_ECHO_PIN, GPIO_PIN_RESET);
 8001d80:	2200      	movs	r2, #0
 8001d82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d86:	480c      	ldr	r0, [pc, #48]	; (8001db8 <myGPIO_Init+0x68>)
 8001d88:	f000 fef2 	bl	8002b70 <HAL_GPIO_WritePin>

    /*Configure TRIG GPIO pin : PE2 */
    GPIO_InitStruct.Pin = hcsr04_ECHO_PIN;
 8001d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d90:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d92:	2301      	movs	r3, #1
 8001d94:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(hcsr04_TRIG_GPIO_PORT, &GPIO_InitStruct);
 8001d9e:	1d3b      	adds	r3, r7, #4
 8001da0:	4619      	mov	r1, r3
 8001da2:	4805      	ldr	r0, [pc, #20]	; (8001db8 <myGPIO_Init+0x68>)
 8001da4:	f000 fd38 	bl	8002818 <HAL_GPIO_Init>

    return HCSR04_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40021000 	.word	0x40021000

08001dbc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dc0:	4802      	ldr	r0, [pc, #8]	; (8001dcc <TIM1_CC_IRQHandler+0x10>)
 8001dc2:	f002 fa59 	bl	8004278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	2000082c 	.word	0x2000082c

08001dd0 <delay>:

void delay(uint16_t time)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <delay+0x30>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2200      	movs	r2, #0
 8001de0:	625a      	str	r2, [r3, #36]	; 0x24
    while(__HAL_TIM_GET_COUNTER(&htim1) < time);
 8001de2:	bf00      	nop
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <delay+0x30>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dea:	88fb      	ldrh	r3, [r7, #6]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d3f9      	bcc.n	8001de4 <delay+0x14>
}
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	2000082c 	.word	0x2000082c

08001e04 <hcsr04_Init>:

/* Public functions ----------------------------------------------------------*/
hcsr04_Status_t hcsr04_Init()
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
    myGPIO_Init();
 8001e08:	f7ff ffa2 	bl	8001d50 <myGPIO_Init>
    myTIM_Init();
 8001e0c:	f7ff ff48 	bl	8001ca0 <myTIM_Init>
    HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001e10:	2100      	movs	r1, #0
 8001e12:	4803      	ldr	r0, [pc, #12]	; (8001e20 <hcsr04_Init+0x1c>)
 8001e14:	f002 f908 	bl	8004028 <HAL_TIM_IC_Start_IT>
    return HCSR04_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	2000082c 	.word	0x2000082c

08001e24 <hcsr04_StartMeasure>:

hcsr04_Status_t hcsr04_StartMeasure()
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(hcsr04_TRIG_GPIO_PORT, hcsr04_TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001e28:	2201      	movs	r2, #1
 8001e2a:	2104      	movs	r1, #4
 8001e2c:	480a      	ldr	r0, [pc, #40]	; (8001e58 <hcsr04_StartMeasure+0x34>)
 8001e2e:	f000 fe9f 	bl	8002b70 <HAL_GPIO_WritePin>
    delay(10);  // wait for 10 us
 8001e32:	200a      	movs	r0, #10
 8001e34:	f7ff ffcc 	bl	8001dd0 <delay>
    HAL_GPIO_WritePin(hcsr04_TRIG_GPIO_PORT, hcsr04_TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2104      	movs	r1, #4
 8001e3c:	4806      	ldr	r0, [pc, #24]	; (8001e58 <hcsr04_StartMeasure+0x34>)
 8001e3e:	f000 fe97 	bl	8002b70 <HAL_GPIO_WritePin>

    __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <hcsr04_StartMeasure+0x38>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <hcsr04_StartMeasure+0x38>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0202 	orr.w	r2, r2, #2
 8001e50:	60da      	str	r2, [r3, #12]
    return HCSR04_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	2000082c 	.word	0x2000082c

08001e60 <hcsr04_GetDistance>:

uint8_t hcsr04_GetDistance()
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
    return Distance;
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <hcsr04_GetDistance+0x14>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000881 	.word	0x20000881

08001e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e7c:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <HAL_Init+0x40>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0d      	ldr	r2, [pc, #52]	; (8001eb8 <HAL_Init+0x40>)
 8001e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_Init+0x40>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0a      	ldr	r2, [pc, #40]	; (8001eb8 <HAL_Init+0x40>)
 8001e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_Init+0x40>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <HAL_Init+0x40>)
 8001e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea0:	2003      	movs	r0, #3
 8001ea2:	f000 f94f 	bl	8002144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f000 f808 	bl	8001ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eac:	f7ff f984 	bl	80011b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40023c00 	.word	0x40023c00

08001ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ec4:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_InitTick+0x54>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_InitTick+0x58>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 f967 	bl	80021ae <HAL_SYSTICK_Config>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e00e      	b.n	8001f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b0f      	cmp	r3, #15
 8001eee:	d80a      	bhi.n	8001f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ef8:	f000 f92f 	bl	800215a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001efc:	4a06      	ldr	r2, [pc, #24]	; (8001f18 <HAL_InitTick+0x5c>)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e000      	b.n	8001f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000000 	.word	0x20000000
 8001f14:	20000008 	.word	0x20000008
 8001f18:	20000004 	.word	0x20000004

08001f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_IncTick+0x20>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_IncTick+0x24>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <HAL_IncTick+0x24>)
 8001f2e:	6013      	str	r3, [r2, #0]
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	20000008 	.word	0x20000008
 8001f40:	20000884 	.word	0x20000884

08001f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return uwTick;
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <HAL_GetTick+0x14>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20000884 	.word	0x20000884

08001f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f64:	f7ff ffee 	bl	8001f44 <HAL_GetTick>
 8001f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f74:	d005      	beq.n	8001f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f76:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <HAL_Delay+0x44>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4413      	add	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f82:	bf00      	nop
 8001f84:	f7ff ffde 	bl	8001f44 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d8f7      	bhi.n	8001f84 <HAL_Delay+0x28>
  {
  }
}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000008 	.word	0x20000008

08001fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd6:	4a04      	ldr	r2, [pc, #16]	; (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	60d3      	str	r3, [r2, #12]
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <__NVIC_GetPriorityGrouping+0x18>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	f003 0307 	and.w	r3, r3, #7
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	2b00      	cmp	r3, #0
 8002018:	db0b      	blt.n	8002032 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	f003 021f 	and.w	r2, r3, #31
 8002020:	4907      	ldr	r1, [pc, #28]	; (8002040 <__NVIC_EnableIRQ+0x38>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	2001      	movs	r0, #1
 800202a:	fa00 f202 	lsl.w	r2, r0, r2
 800202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000e100 	.word	0xe000e100

08002044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	6039      	str	r1, [r7, #0]
 800204e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002054:	2b00      	cmp	r3, #0
 8002056:	db0a      	blt.n	800206e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	490c      	ldr	r1, [pc, #48]	; (8002090 <__NVIC_SetPriority+0x4c>)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	0112      	lsls	r2, r2, #4
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	440b      	add	r3, r1
 8002068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800206c:	e00a      	b.n	8002084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	b2da      	uxtb	r2, r3
 8002072:	4908      	ldr	r1, [pc, #32]	; (8002094 <__NVIC_SetPriority+0x50>)
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	3b04      	subs	r3, #4
 800207c:	0112      	lsls	r2, r2, #4
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	440b      	add	r3, r1
 8002082:	761a      	strb	r2, [r3, #24]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000e100 	.word	0xe000e100
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002098:	b480      	push	{r7}
 800209a:	b089      	sub	sp, #36	; 0x24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f1c3 0307 	rsb	r3, r3, #7
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	bf28      	it	cs
 80020b6:	2304      	movcs	r3, #4
 80020b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3304      	adds	r3, #4
 80020be:	2b06      	cmp	r3, #6
 80020c0:	d902      	bls.n	80020c8 <NVIC_EncodePriority+0x30>
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3b03      	subs	r3, #3
 80020c6:	e000      	b.n	80020ca <NVIC_EncodePriority+0x32>
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43da      	mvns	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	401a      	ands	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	43d9      	mvns	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	4313      	orrs	r3, r2
         );
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3724      	adds	r7, #36	; 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3b01      	subs	r3, #1
 800210c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002110:	d301      	bcc.n	8002116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002112:	2301      	movs	r3, #1
 8002114:	e00f      	b.n	8002136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002116:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <SysTick_Config+0x40>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3b01      	subs	r3, #1
 800211c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800211e:	210f      	movs	r1, #15
 8002120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002124:	f7ff ff8e 	bl	8002044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <SysTick_Config+0x40>)
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212e:	4b04      	ldr	r3, [pc, #16]	; (8002140 <SysTick_Config+0x40>)
 8002130:	2207      	movs	r2, #7
 8002132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	e000e010 	.word	0xe000e010

08002144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ff29 	bl	8001fa4 <__NVIC_SetPriorityGrouping>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800215a:	b580      	push	{r7, lr}
 800215c:	b086      	sub	sp, #24
 800215e:	af00      	add	r7, sp, #0
 8002160:	4603      	mov	r3, r0
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
 8002166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800216c:	f7ff ff3e 	bl	8001fec <__NVIC_GetPriorityGrouping>
 8002170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68b9      	ldr	r1, [r7, #8]
 8002176:	6978      	ldr	r0, [r7, #20]
 8002178:	f7ff ff8e 	bl	8002098 <NVIC_EncodePriority>
 800217c:	4602      	mov	r2, r0
 800217e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff5d 	bl	8002044 <__NVIC_SetPriority>
}
 800218a:	bf00      	nop
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	4603      	mov	r3, r0
 800219a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800219c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ff31 	bl	8002008 <__NVIC_EnableIRQ>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff ffa2 	bl	8002100 <SysTick_Config>
 80021bc:	4603      	mov	r3, r0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e06c      	b.n	80022b4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d106      	bne.n	80021f2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2223      	movs	r2, #35	; 0x23
 80021e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff f80b 	bl	8001208 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	4b31      	ldr	r3, [pc, #196]	; (80022bc <HAL_ETH_Init+0xf4>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	4a30      	ldr	r2, [pc, #192]	; (80022bc <HAL_ETH_Init+0xf4>)
 80021fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002200:	6453      	str	r3, [r2, #68]	; 0x44
 8002202:	4b2e      	ldr	r3, [pc, #184]	; (80022bc <HAL_ETH_Init+0xf4>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800220e:	4b2c      	ldr	r3, [pc, #176]	; (80022c0 <HAL_ETH_Init+0xf8>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	4a2b      	ldr	r2, [pc, #172]	; (80022c0 <HAL_ETH_Init+0xf8>)
 8002214:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002218:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800221a:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <HAL_ETH_Init+0xf8>)
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	4927      	ldr	r1, [pc, #156]	; (80022c0 <HAL_ETH_Init+0xf8>)
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002228:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <HAL_ETH_Init+0xf8>)
 800222a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002242:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002244:	f7ff fe7e 	bl	8001f44 <HAL_GetTick>
 8002248:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800224a:	e011      	b.n	8002270 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800224c:	f7ff fe7a 	bl	8001f44 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800225a:	d909      	bls.n	8002270 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2204      	movs	r2, #4
 8002260:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	22e0      	movs	r2, #224	; 0xe0
 8002268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e021      	b.n	80022b4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1e4      	bne.n	800224c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f958 	bl	8002538 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 f9ff 	bl	800268c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 fa55 	bl	800273e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	461a      	mov	r2, r3
 800229a:	2100      	movs	r1, #0
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f9bd 	bl	800261c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2210      	movs	r2, #16
 80022ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40013800 	.word	0x40013800

080022c4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	4b51      	ldr	r3, [pc, #324]	; (8002420 <ETH_SetMACConfig+0x15c>)
 80022da:	4013      	ands	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	7c1b      	ldrb	r3, [r3, #16]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d102      	bne.n	80022ec <ETH_SetMACConfig+0x28>
 80022e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80022ea:	e000      	b.n	80022ee <ETH_SetMACConfig+0x2a>
 80022ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	7c5b      	ldrb	r3, [r3, #17]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d102      	bne.n	80022fc <ETH_SetMACConfig+0x38>
 80022f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022fa:	e000      	b.n	80022fe <ETH_SetMACConfig+0x3a>
 80022fc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022fe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002304:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	7fdb      	ldrb	r3, [r3, #31]
 800230a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800230c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002312:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	7f92      	ldrb	r2, [r2, #30]
 8002318:	2a00      	cmp	r2, #0
 800231a:	d102      	bne.n	8002322 <ETH_SetMACConfig+0x5e>
 800231c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002320:	e000      	b.n	8002324 <ETH_SetMACConfig+0x60>
 8002322:	2200      	movs	r2, #0
                        macconf->Speed |
 8002324:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	7f1b      	ldrb	r3, [r3, #28]
 800232a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800232c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002332:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	791b      	ldrb	r3, [r3, #4]
 8002338:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800233a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002342:	2a00      	cmp	r2, #0
 8002344:	d102      	bne.n	800234c <ETH_SetMACConfig+0x88>
 8002346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800234a:	e000      	b.n	800234e <ETH_SetMACConfig+0x8a>
 800234c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800234e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	7bdb      	ldrb	r3, [r3, #15]
 8002354:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002356:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800235c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002364:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002366:	4313      	orrs	r3, r2
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800237e:	2001      	movs	r0, #1
 8002380:	f7ff fdec 	bl	8001f5c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	f64f 7341 	movw	r3, #65345	; 0xff41
 800239a:	4013      	ands	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80023aa:	2a00      	cmp	r2, #0
 80023ac:	d101      	bne.n	80023b2 <ETH_SetMACConfig+0xee>
 80023ae:	2280      	movs	r2, #128	; 0x80
 80023b0:	e000      	b.n	80023b4 <ETH_SetMACConfig+0xf0>
 80023b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023b4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80023ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80023c2:	2a01      	cmp	r2, #1
 80023c4:	d101      	bne.n	80023ca <ETH_SetMACConfig+0x106>
 80023c6:	2208      	movs	r2, #8
 80023c8:	e000      	b.n	80023cc <ETH_SetMACConfig+0x108>
 80023ca:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80023cc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80023d4:	2a01      	cmp	r2, #1
 80023d6:	d101      	bne.n	80023dc <ETH_SetMACConfig+0x118>
 80023d8:	2204      	movs	r2, #4
 80023da:	e000      	b.n	80023de <ETH_SetMACConfig+0x11a>
 80023dc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80023de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80023e6:	2a01      	cmp	r2, #1
 80023e8:	d101      	bne.n	80023ee <ETH_SetMACConfig+0x12a>
 80023ea:	2202      	movs	r2, #2
 80023ec:	e000      	b.n	80023f0 <ETH_SetMACConfig+0x12c>
 80023ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023f0:	4313      	orrs	r3, r2
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002408:	2001      	movs	r0, #1
 800240a:	f7ff fda7 	bl	8001f5c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	619a      	str	r2, [r3, #24]
}
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	ff20810f 	.word	0xff20810f

08002424 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4b3d      	ldr	r3, [pc, #244]	; (8002534 <ETH_SetDMAConfig+0x110>)
 800243e:	4013      	ands	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	7b1b      	ldrb	r3, [r3, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d102      	bne.n	8002450 <ETH_SetDMAConfig+0x2c>
 800244a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800244e:	e000      	b.n	8002452 <ETH_SetDMAConfig+0x2e>
 8002450:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	7b5b      	ldrb	r3, [r3, #13]
 8002456:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002458:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	7f52      	ldrb	r2, [r2, #29]
 800245e:	2a00      	cmp	r2, #0
 8002460:	d102      	bne.n	8002468 <ETH_SetDMAConfig+0x44>
 8002462:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002466:	e000      	b.n	800246a <ETH_SetDMAConfig+0x46>
 8002468:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800246a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	7b9b      	ldrb	r3, [r3, #14]
 8002470:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002472:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002478:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	7f1b      	ldrb	r3, [r3, #28]
 800247e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002480:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	7f9b      	ldrb	r3, [r3, #30]
 8002486:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002488:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800248e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002496:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002498:	4313      	orrs	r3, r2
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a8:	461a      	mov	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024ba:	2001      	movs	r0, #1
 80024bc:	f7ff fd4e 	bl	8001f5c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c8:	461a      	mov	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	791b      	ldrb	r3, [r3, #4]
 80024d2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024d8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80024de:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80024e4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024ec:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80024ee:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024f6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024fc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002506:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800250a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002518:	2001      	movs	r0, #1
 800251a:	f7ff fd1f 	bl	8001f5c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002526:	461a      	mov	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6013      	str	r3, [r2, #0]
}
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	f8de3f23 	.word	0xf8de3f23

08002538 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b0a6      	sub	sp, #152	; 0x98
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002540:	2301      	movs	r3, #1
 8002542:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002546:	2301      	movs	r3, #1
 8002548:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800254c:	2300      	movs	r3, #0
 800254e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002550:	2300      	movs	r3, #0
 8002552:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002556:	2301      	movs	r3, #1
 8002558:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800255c:	2300      	movs	r3, #0
 800255e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002562:	2301      	movs	r3, #1
 8002564:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800256e:	2300      	movs	r3, #0
 8002570:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002574:	2300      	movs	r3, #0
 8002576:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800257e:	2300      	movs	r3, #0
 8002580:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002582:	2300      	movs	r3, #0
 8002584:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002588:	2300      	movs	r3, #0
 800258a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800258e:	2300      	movs	r3, #0
 8002590:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002594:	2300      	movs	r3, #0
 8002596:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800259a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800259e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80025a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80025ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025b0:	4619      	mov	r1, r3
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff fe86 	bl	80022c4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80025b8:	2301      	movs	r3, #1
 80025ba:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80025bc:	2301      	movs	r3, #1
 80025be:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80025c0:	2301      	movs	r3, #1
 80025c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80025c6:	2301      	movs	r3, #1
 80025c8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80025ce:	2300      	movs	r3, #0
 80025d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80025da:	2300      	movs	r3, #0
 80025dc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80025de:	2301      	movs	r3, #1
 80025e0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80025e4:	2301      	movs	r3, #1
 80025e6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80025e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025ec:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80025ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025f2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025f8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80025fa:	2301      	movs	r3, #1
 80025fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002600:	2300      	movs	r3, #0
 8002602:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002604:	2300      	movs	r3, #0
 8002606:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002608:	f107 0308 	add.w	r3, r7, #8
 800260c:	4619      	mov	r1, r3
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff ff08 	bl	8002424 <ETH_SetDMAConfig>
}
 8002614:	bf00      	nop
 8002616:	3798      	adds	r7, #152	; 0x98
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800261c:	b480      	push	{r7}
 800261e:	b087      	sub	sp, #28
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3305      	adds	r3, #5
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	021b      	lsls	r3, r3, #8
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	3204      	adds	r2, #4
 8002634:	7812      	ldrb	r2, [r2, #0]
 8002636:	4313      	orrs	r3, r2
 8002638:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	4b11      	ldr	r3, [pc, #68]	; (8002684 <ETH_MACAddressConfig+0x68>)
 800263e:	4413      	add	r3, r2
 8002640:	461a      	mov	r2, r3
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3303      	adds	r3, #3
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	061a      	lsls	r2, r3, #24
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3302      	adds	r3, #2
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	041b      	lsls	r3, r3, #16
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3301      	adds	r3, #1
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	021b      	lsls	r3, r3, #8
 8002660:	4313      	orrs	r3, r2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	7812      	ldrb	r2, [r2, #0]
 8002666:	4313      	orrs	r3, r2
 8002668:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <ETH_MACAddressConfig+0x6c>)
 800266e:	4413      	add	r3, r2
 8002670:	461a      	mov	r2, r3
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	6013      	str	r3, [r2, #0]
}
 8002676:	bf00      	nop
 8002678:	371c      	adds	r7, #28
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40028040 	.word	0x40028040
 8002688:	40028044 	.word	0x40028044

0800268c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	e03e      	b.n	8002718 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68d9      	ldr	r1, [r3, #12]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	440b      	add	r3, r1
 80026aa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2200      	movs	r2, #0
 80026b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2200      	movs	r2, #0
 80026c2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80026c4:	68b9      	ldr	r1, [r7, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	3206      	adds	r2, #6
 80026cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d80c      	bhi.n	80026fc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68d9      	ldr	r1, [r3, #12]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	440b      	add	r3, r1
 80026f4:	461a      	mov	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	e004      	b.n	8002706 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	461a      	mov	r2, r3
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	3301      	adds	r3, #1
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2b03      	cmp	r3, #3
 800271c:	d9bd      	bls.n	800269a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002730:	611a      	str	r2, [r3, #16]
}
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	e046      	b.n	80027da <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6919      	ldr	r1, [r3, #16]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	440b      	add	r3, r1
 800275c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2200      	movs	r2, #0
 8002768:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2200      	movs	r2, #0
 800276e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2200      	movs	r2, #0
 8002774:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2200      	movs	r2, #0
 800277a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2200      	movs	r2, #0
 8002780:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002788:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002790:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800279e:	68b9      	ldr	r1, [r7, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	3212      	adds	r2, #18
 80027a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d80c      	bhi.n	80027ca <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6919      	ldr	r1, [r3, #16]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	4613      	mov	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	440b      	add	r3, r1
 80027c2:	461a      	mov	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	60da      	str	r2, [r3, #12]
 80027c8:	e004      	b.n	80027d4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	461a      	mov	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	3301      	adds	r3, #1
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d9b5      	bls.n	800274c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691a      	ldr	r2, [r3, #16]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800280a:	60da      	str	r2, [r3, #12]
}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002818:	b480      	push	{r7}
 800281a:	b089      	sub	sp, #36	; 0x24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800282e:	2300      	movs	r3, #0
 8002830:	61fb      	str	r3, [r7, #28]
 8002832:	e177      	b.n	8002b24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002834:	2201      	movs	r2, #1
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	429a      	cmp	r2, r3
 800284e:	f040 8166 	bne.w	8002b1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	2b01      	cmp	r3, #1
 800285c:	d005      	beq.n	800286a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002866:	2b02      	cmp	r3, #2
 8002868:	d130      	bne.n	80028cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	2203      	movs	r2, #3
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028a0:	2201      	movs	r2, #1
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	091b      	lsrs	r3, r3, #4
 80028b6:	f003 0201 	and.w	r2, r3, #1
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d017      	beq.n	8002908 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	2203      	movs	r2, #3
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d123      	bne.n	800295c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	08da      	lsrs	r2, r3, #3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3208      	adds	r2, #8
 800291c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	220f      	movs	r2, #15
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	08da      	lsrs	r2, r3, #3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3208      	adds	r2, #8
 8002956:	69b9      	ldr	r1, [r7, #24]
 8002958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	2203      	movs	r2, #3
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0203 	and.w	r2, r3, #3
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80c0 	beq.w	8002b1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	4b66      	ldr	r3, [pc, #408]	; (8002b3c <HAL_GPIO_Init+0x324>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	4a65      	ldr	r2, [pc, #404]	; (8002b3c <HAL_GPIO_Init+0x324>)
 80029a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ac:	6453      	str	r3, [r2, #68]	; 0x44
 80029ae:	4b63      	ldr	r3, [pc, #396]	; (8002b3c <HAL_GPIO_Init+0x324>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ba:	4a61      	ldr	r2, [pc, #388]	; (8002b40 <HAL_GPIO_Init+0x328>)
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	089b      	lsrs	r3, r3, #2
 80029c0:	3302      	adds	r3, #2
 80029c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	220f      	movs	r2, #15
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4013      	ands	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a58      	ldr	r2, [pc, #352]	; (8002b44 <HAL_GPIO_Init+0x32c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d037      	beq.n	8002a56 <HAL_GPIO_Init+0x23e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a57      	ldr	r2, [pc, #348]	; (8002b48 <HAL_GPIO_Init+0x330>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d031      	beq.n	8002a52 <HAL_GPIO_Init+0x23a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a56      	ldr	r2, [pc, #344]	; (8002b4c <HAL_GPIO_Init+0x334>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d02b      	beq.n	8002a4e <HAL_GPIO_Init+0x236>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a55      	ldr	r2, [pc, #340]	; (8002b50 <HAL_GPIO_Init+0x338>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d025      	beq.n	8002a4a <HAL_GPIO_Init+0x232>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a54      	ldr	r2, [pc, #336]	; (8002b54 <HAL_GPIO_Init+0x33c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d01f      	beq.n	8002a46 <HAL_GPIO_Init+0x22e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a53      	ldr	r2, [pc, #332]	; (8002b58 <HAL_GPIO_Init+0x340>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d019      	beq.n	8002a42 <HAL_GPIO_Init+0x22a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a52      	ldr	r2, [pc, #328]	; (8002b5c <HAL_GPIO_Init+0x344>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d013      	beq.n	8002a3e <HAL_GPIO_Init+0x226>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a51      	ldr	r2, [pc, #324]	; (8002b60 <HAL_GPIO_Init+0x348>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00d      	beq.n	8002a3a <HAL_GPIO_Init+0x222>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a50      	ldr	r2, [pc, #320]	; (8002b64 <HAL_GPIO_Init+0x34c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d007      	beq.n	8002a36 <HAL_GPIO_Init+0x21e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a4f      	ldr	r2, [pc, #316]	; (8002b68 <HAL_GPIO_Init+0x350>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d101      	bne.n	8002a32 <HAL_GPIO_Init+0x21a>
 8002a2e:	2309      	movs	r3, #9
 8002a30:	e012      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a32:	230a      	movs	r3, #10
 8002a34:	e010      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a36:	2308      	movs	r3, #8
 8002a38:	e00e      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a3a:	2307      	movs	r3, #7
 8002a3c:	e00c      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a3e:	2306      	movs	r3, #6
 8002a40:	e00a      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a42:	2305      	movs	r3, #5
 8002a44:	e008      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a46:	2304      	movs	r3, #4
 8002a48:	e006      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e004      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e002      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a56:	2300      	movs	r3, #0
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	f002 0203 	and.w	r2, r2, #3
 8002a5e:	0092      	lsls	r2, r2, #2
 8002a60:	4093      	lsls	r3, r2
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a68:	4935      	ldr	r1, [pc, #212]	; (8002b40 <HAL_GPIO_Init+0x328>)
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	089b      	lsrs	r3, r3, #2
 8002a6e:	3302      	adds	r3, #2
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a76:	4b3d      	ldr	r3, [pc, #244]	; (8002b6c <HAL_GPIO_Init+0x354>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4013      	ands	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a9a:	4a34      	ldr	r2, [pc, #208]	; (8002b6c <HAL_GPIO_Init+0x354>)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aa0:	4b32      	ldr	r3, [pc, #200]	; (8002b6c <HAL_GPIO_Init+0x354>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ac4:	4a29      	ldr	r2, [pc, #164]	; (8002b6c <HAL_GPIO_Init+0x354>)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aca:	4b28      	ldr	r3, [pc, #160]	; (8002b6c <HAL_GPIO_Init+0x354>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aee:	4a1f      	ldr	r2, [pc, #124]	; (8002b6c <HAL_GPIO_Init+0x354>)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002af4:	4b1d      	ldr	r3, [pc, #116]	; (8002b6c <HAL_GPIO_Init+0x354>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b18:	4a14      	ldr	r2, [pc, #80]	; (8002b6c <HAL_GPIO_Init+0x354>)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3301      	adds	r3, #1
 8002b22:	61fb      	str	r3, [r7, #28]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	2b0f      	cmp	r3, #15
 8002b28:	f67f ae84 	bls.w	8002834 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	bf00      	nop
 8002b30:	3724      	adds	r7, #36	; 0x24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40013800 	.word	0x40013800
 8002b44:	40020000 	.word	0x40020000
 8002b48:	40020400 	.word	0x40020400
 8002b4c:	40020800 	.word	0x40020800
 8002b50:	40020c00 	.word	0x40020c00
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40021400 	.word	0x40021400
 8002b5c:	40021800 	.word	0x40021800
 8002b60:	40021c00 	.word	0x40021c00
 8002b64:	40022000 	.word	0x40022000
 8002b68:	40022400 	.word	0x40022400
 8002b6c:	40013c00 	.word	0x40013c00

08002b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	807b      	strh	r3, [r7, #2]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b80:	787b      	ldrb	r3, [r7, #1]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b86:	887a      	ldrh	r2, [r7, #2]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b8c:	e003      	b.n	8002b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b8e:	887b      	ldrh	r3, [r7, #2]
 8002b90:	041a      	lsls	r2, r3, #16
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	619a      	str	r2, [r3, #24]
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e12b      	b.n	8002e0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d106      	bne.n	8002bd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7fe fd9e 	bl	800170c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2224      	movs	r2, #36	; 0x24
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0201 	bic.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bf6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c08:	f001 f996 	bl	8003f38 <HAL_RCC_GetPCLK1Freq>
 8002c0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	4a81      	ldr	r2, [pc, #516]	; (8002e18 <HAL_I2C_Init+0x274>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d807      	bhi.n	8002c28 <HAL_I2C_Init+0x84>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4a80      	ldr	r2, [pc, #512]	; (8002e1c <HAL_I2C_Init+0x278>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	bf94      	ite	ls
 8002c20:	2301      	movls	r3, #1
 8002c22:	2300      	movhi	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	e006      	b.n	8002c36 <HAL_I2C_Init+0x92>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4a7d      	ldr	r2, [pc, #500]	; (8002e20 <HAL_I2C_Init+0x27c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	bf94      	ite	ls
 8002c30:	2301      	movls	r3, #1
 8002c32:	2300      	movhi	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e0e7      	b.n	8002e0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4a78      	ldr	r2, [pc, #480]	; (8002e24 <HAL_I2C_Init+0x280>)
 8002c42:	fba2 2303 	umull	r2, r3, r2, r3
 8002c46:	0c9b      	lsrs	r3, r3, #18
 8002c48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	4a6a      	ldr	r2, [pc, #424]	; (8002e18 <HAL_I2C_Init+0x274>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d802      	bhi.n	8002c78 <HAL_I2C_Init+0xd4>
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	3301      	adds	r3, #1
 8002c76:	e009      	b.n	8002c8c <HAL_I2C_Init+0xe8>
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c7e:	fb02 f303 	mul.w	r3, r2, r3
 8002c82:	4a69      	ldr	r2, [pc, #420]	; (8002e28 <HAL_I2C_Init+0x284>)
 8002c84:	fba2 2303 	umull	r2, r3, r2, r3
 8002c88:	099b      	lsrs	r3, r3, #6
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	430b      	orrs	r3, r1
 8002c92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	495c      	ldr	r1, [pc, #368]	; (8002e18 <HAL_I2C_Init+0x274>)
 8002ca8:	428b      	cmp	r3, r1
 8002caa:	d819      	bhi.n	8002ce0 <HAL_I2C_Init+0x13c>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	1e59      	subs	r1, r3, #1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cba:	1c59      	adds	r1, r3, #1
 8002cbc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cc0:	400b      	ands	r3, r1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <HAL_I2C_Init+0x138>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	1e59      	subs	r1, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cda:	e051      	b.n	8002d80 <HAL_I2C_Init+0x1dc>
 8002cdc:	2304      	movs	r3, #4
 8002cde:	e04f      	b.n	8002d80 <HAL_I2C_Init+0x1dc>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d111      	bne.n	8002d0c <HAL_I2C_Init+0x168>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	1e58      	subs	r0, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6859      	ldr	r1, [r3, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	440b      	add	r3, r1
 8002cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	bf0c      	ite	eq
 8002d04:	2301      	moveq	r3, #1
 8002d06:	2300      	movne	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	e012      	b.n	8002d32 <HAL_I2C_Init+0x18e>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	1e58      	subs	r0, r3, #1
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6859      	ldr	r1, [r3, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	0099      	lsls	r1, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d22:	3301      	adds	r3, #1
 8002d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	bf0c      	ite	eq
 8002d2c:	2301      	moveq	r3, #1
 8002d2e:	2300      	movne	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_I2C_Init+0x196>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e022      	b.n	8002d80 <HAL_I2C_Init+0x1dc>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10e      	bne.n	8002d60 <HAL_I2C_Init+0x1bc>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	1e58      	subs	r0, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6859      	ldr	r1, [r3, #4]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	440b      	add	r3, r1
 8002d50:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d54:	3301      	adds	r3, #1
 8002d56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d5e:	e00f      	b.n	8002d80 <HAL_I2C_Init+0x1dc>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	1e58      	subs	r0, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6859      	ldr	r1, [r3, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	0099      	lsls	r1, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d76:	3301      	adds	r3, #1
 8002d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	6809      	ldr	r1, [r1, #0]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69da      	ldr	r2, [r3, #28]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6911      	ldr	r1, [r2, #16]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	68d2      	ldr	r2, [r2, #12]
 8002dba:	4311      	orrs	r1, r2
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6812      	ldr	r2, [r2, #0]
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	000186a0 	.word	0x000186a0
 8002e1c:	001e847f 	.word	0x001e847f
 8002e20:	003d08ff 	.word	0x003d08ff
 8002e24:	431bde83 	.word	0x431bde83
 8002e28:	10624dd3 	.word	0x10624dd3

08002e2c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	607a      	str	r2, [r7, #4]
 8002e36:	461a      	mov	r2, r3
 8002e38:	460b      	mov	r3, r1
 8002e3a:	817b      	strh	r3, [r7, #10]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e40:	f7ff f880 	bl	8001f44 <HAL_GetTick>
 8002e44:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b20      	cmp	r3, #32
 8002e50:	f040 80e0 	bne.w	8003014 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	2319      	movs	r3, #25
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	4970      	ldr	r1, [pc, #448]	; (8003020 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f964 	bl	800312c <I2C_WaitOnFlagUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e0d3      	b.n	8003016 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_I2C_Master_Transmit+0x50>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e0cc      	b.n	8003016 <HAL_I2C_Master_Transmit+0x1ea>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d007      	beq.n	8002ea2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0201 	orr.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eb0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2221      	movs	r2, #33	; 0x21
 8002eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2210      	movs	r2, #16
 8002ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	893a      	ldrh	r2, [r7, #8]
 8002ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4a50      	ldr	r2, [pc, #320]	; (8003024 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ee2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ee4:	8979      	ldrh	r1, [r7, #10]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	6a3a      	ldr	r2, [r7, #32]
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f89c 	bl	8003028 <I2C_MasterRequestWrite>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e08d      	b.n	8003016 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002efa:	2300      	movs	r3, #0
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f10:	e066      	b.n	8002fe0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	6a39      	ldr	r1, [r7, #32]
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f9de 	bl	80032d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00d      	beq.n	8002f3e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d107      	bne.n	8002f3a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e06b      	b.n	8003016 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	781a      	ldrb	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	1c5a      	adds	r2, r3, #1
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d11b      	bne.n	8002fb4 <HAL_I2C_Master_Transmit+0x188>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d017      	beq.n	8002fb4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	781a      	ldrb	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	6a39      	ldr	r1, [r7, #32]
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 f9ce 	bl	800335a <I2C_WaitOnBTFFlagUntilTimeout>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00d      	beq.n	8002fe0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d107      	bne.n	8002fdc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fda:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e01a      	b.n	8003016 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d194      	bne.n	8002f12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	e000      	b.n	8003016 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003014:	2302      	movs	r3, #2
  }
}
 8003016:	4618      	mov	r0, r3
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	00100002 	.word	0x00100002
 8003024:	ffff0000 	.word	0xffff0000

08003028 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af02      	add	r7, sp, #8
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	607a      	str	r2, [r7, #4]
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	460b      	mov	r3, r1
 8003036:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2b08      	cmp	r3, #8
 8003042:	d006      	beq.n	8003052 <I2C_MasterRequestWrite+0x2a>
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d003      	beq.n	8003052 <I2C_MasterRequestWrite+0x2a>
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003050:	d108      	bne.n	8003064 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	e00b      	b.n	800307c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	2b12      	cmp	r3, #18
 800306a:	d107      	bne.n	800307c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800307a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 f84f 	bl	800312c <I2C_WaitOnFlagUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00d      	beq.n	80030b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030a2:	d103      	bne.n	80030ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e035      	b.n	800311c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030b8:	d108      	bne.n	80030cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030ba:	897b      	ldrh	r3, [r7, #10]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	461a      	mov	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030c8:	611a      	str	r2, [r3, #16]
 80030ca:	e01b      	b.n	8003104 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030cc:	897b      	ldrh	r3, [r7, #10]
 80030ce:	11db      	asrs	r3, r3, #7
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	f003 0306 	and.w	r3, r3, #6
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	f063 030f 	orn	r3, r3, #15
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	490e      	ldr	r1, [pc, #56]	; (8003124 <I2C_MasterRequestWrite+0xfc>)
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 f875 	bl	80031da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e010      	b.n	800311c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030fa:	897b      	ldrh	r3, [r7, #10]
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	4907      	ldr	r1, [pc, #28]	; (8003128 <I2C_MasterRequestWrite+0x100>)
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f865 	bl	80031da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	00010008 	.word	0x00010008
 8003128:	00010002 	.word	0x00010002

0800312c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	4613      	mov	r3, r2
 800313a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800313c:	e025      	b.n	800318a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003144:	d021      	beq.n	800318a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003146:	f7fe fefd 	bl	8001f44 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d302      	bcc.n	800315c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d116      	bne.n	800318a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f043 0220 	orr.w	r2, r3, #32
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e023      	b.n	80031d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	0c1b      	lsrs	r3, r3, #16
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b01      	cmp	r3, #1
 8003192:	d10d      	bne.n	80031b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	43da      	mvns	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4013      	ands	r3, r2
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	bf0c      	ite	eq
 80031a6:	2301      	moveq	r3, #1
 80031a8:	2300      	movne	r3, #0
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	461a      	mov	r2, r3
 80031ae:	e00c      	b.n	80031ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	43da      	mvns	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	4013      	ands	r3, r2
 80031bc:	b29b      	uxth	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	bf0c      	ite	eq
 80031c2:	2301      	moveq	r3, #1
 80031c4:	2300      	movne	r3, #0
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d0b6      	beq.n	800313e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	607a      	str	r2, [r7, #4]
 80031e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031e8:	e051      	b.n	800328e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f8:	d123      	bne.n	8003242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003208:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003212:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f043 0204 	orr.w	r2, r3, #4
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e046      	b.n	80032d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003248:	d021      	beq.n	800328e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324a:	f7fe fe7b 	bl	8001f44 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	429a      	cmp	r2, r3
 8003258:	d302      	bcc.n	8003260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d116      	bne.n	800328e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2220      	movs	r2, #32
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f043 0220 	orr.w	r2, r3, #32
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e020      	b.n	80032d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	0c1b      	lsrs	r3, r3, #16
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b01      	cmp	r3, #1
 8003296:	d10c      	bne.n	80032b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	43da      	mvns	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4013      	ands	r3, r2
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bf14      	ite	ne
 80032aa:	2301      	movne	r3, #1
 80032ac:	2300      	moveq	r3, #0
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	e00b      	b.n	80032ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	43da      	mvns	r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	4013      	ands	r3, r2
 80032be:	b29b      	uxth	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	bf14      	ite	ne
 80032c4:	2301      	movne	r3, #1
 80032c6:	2300      	moveq	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d18d      	bne.n	80031ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032e4:	e02d      	b.n	8003342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f878 	bl	80033dc <I2C_IsAcknowledgeFailed>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e02d      	b.n	8003352 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032fc:	d021      	beq.n	8003342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032fe:	f7fe fe21 	bl	8001f44 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	429a      	cmp	r2, r3
 800330c:	d302      	bcc.n	8003314 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d116      	bne.n	8003342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2220      	movs	r2, #32
 800331e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f043 0220 	orr.w	r2, r3, #32
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e007      	b.n	8003352 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334c:	2b80      	cmp	r3, #128	; 0x80
 800334e:	d1ca      	bne.n	80032e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003366:	e02d      	b.n	80033c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 f837 	bl	80033dc <I2C_IsAcknowledgeFailed>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e02d      	b.n	80033d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800337e:	d021      	beq.n	80033c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003380:	f7fe fde0 	bl	8001f44 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	429a      	cmp	r2, r3
 800338e:	d302      	bcc.n	8003396 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d116      	bne.n	80033c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	f043 0220 	orr.w	r2, r3, #32
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e007      	b.n	80033d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d1ca      	bne.n	8003368 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f2:	d11b      	bne.n	800342c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	f043 0204 	orr.w	r2, r3, #4
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b086      	sub	sp, #24
 800343e:	af02      	add	r7, sp, #8
 8003440:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e101      	b.n	8003650 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fd ffdc 	bl	8001424 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2203      	movs	r2, #3
 8003470:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800347a:	d102      	bne.n	8003482 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f001 fea2 	bl	80051d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6818      	ldr	r0, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	7c1a      	ldrb	r2, [r3, #16]
 8003494:	f88d 2000 	strb.w	r2, [sp]
 8003498:	3304      	adds	r3, #4
 800349a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800349c:	f001 fe34 	bl	8005108 <USB_CoreInit>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d005      	beq.n	80034b2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2202      	movs	r2, #2
 80034aa:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e0ce      	b.n	8003650 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2100      	movs	r1, #0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f001 fe9a 	bl	80051f2 <USB_SetCurrentMode>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0bf      	b.n	8003650 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034d0:	2300      	movs	r3, #0
 80034d2:	73fb      	strb	r3, [r7, #15]
 80034d4:	e04a      	b.n	800356c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034d6:	7bfa      	ldrb	r2, [r7, #15]
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	3315      	adds	r3, #21
 80034e6:	2201      	movs	r2, #1
 80034e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034ea:	7bfa      	ldrb	r2, [r7, #15]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	3314      	adds	r3, #20
 80034fa:	7bfa      	ldrb	r2, [r7, #15]
 80034fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034fe:	7bfa      	ldrb	r2, [r7, #15]
 8003500:	7bfb      	ldrb	r3, [r7, #15]
 8003502:	b298      	uxth	r0, r3
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	332e      	adds	r3, #46	; 0x2e
 8003512:	4602      	mov	r2, r0
 8003514:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003516:	7bfa      	ldrb	r2, [r7, #15]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	3318      	adds	r3, #24
 8003526:	2200      	movs	r2, #0
 8003528:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800352a:	7bfa      	ldrb	r2, [r7, #15]
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	331c      	adds	r3, #28
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800353e:	7bfa      	ldrb	r2, [r7, #15]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	3320      	adds	r3, #32
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003552:	7bfa      	ldrb	r2, [r7, #15]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	3324      	adds	r3, #36	; 0x24
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003566:	7bfb      	ldrb	r3, [r7, #15]
 8003568:	3301      	adds	r3, #1
 800356a:	73fb      	strb	r3, [r7, #15]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	791b      	ldrb	r3, [r3, #4]
 8003570:	7bfa      	ldrb	r2, [r7, #15]
 8003572:	429a      	cmp	r2, r3
 8003574:	d3af      	bcc.n	80034d6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003576:	2300      	movs	r3, #0
 8003578:	73fb      	strb	r3, [r7, #15]
 800357a:	e044      	b.n	8003606 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800357c:	7bfa      	ldrb	r2, [r7, #15]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	f203 2355 	addw	r3, r3, #597	; 0x255
 800358e:	2200      	movs	r2, #0
 8003590:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003592:	7bfa      	ldrb	r2, [r7, #15]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80035a4:	7bfa      	ldrb	r2, [r7, #15]
 80035a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035a8:	7bfa      	ldrb	r2, [r7, #15]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80035ba:	2200      	movs	r2, #0
 80035bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035be:	7bfa      	ldrb	r2, [r7, #15]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035d4:	7bfa      	ldrb	r2, [r7, #15]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035ea:	7bfa      	ldrb	r2, [r7, #15]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	3301      	adds	r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	791b      	ldrb	r3, [r3, #4]
 800360a:	7bfa      	ldrb	r2, [r7, #15]
 800360c:	429a      	cmp	r2, r3
 800360e:	d3b5      	bcc.n	800357c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6818      	ldr	r0, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	7c1a      	ldrb	r2, [r3, #16]
 8003618:	f88d 2000 	strb.w	r2, [sp]
 800361c:	3304      	adds	r3, #4
 800361e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003620:	f001 fe34 	bl	800528c <USB_DevInit>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2202      	movs	r2, #2
 800362e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e00c      	b.n	8003650 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f001 fffc 	bl	8005646 <USB_DevDisconnect>

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e267      	b.n	8003b3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d075      	beq.n	8003762 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003676:	4b88      	ldr	r3, [pc, #544]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	2b04      	cmp	r3, #4
 8003680:	d00c      	beq.n	800369c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003682:	4b85      	ldr	r3, [pc, #532]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800368a:	2b08      	cmp	r3, #8
 800368c:	d112      	bne.n	80036b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800368e:	4b82      	ldr	r3, [pc, #520]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003696:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800369a:	d10b      	bne.n	80036b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800369c:	4b7e      	ldr	r3, [pc, #504]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d05b      	beq.n	8003760 <HAL_RCC_OscConfig+0x108>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d157      	bne.n	8003760 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e242      	b.n	8003b3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036bc:	d106      	bne.n	80036cc <HAL_RCC_OscConfig+0x74>
 80036be:	4b76      	ldr	r3, [pc, #472]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a75      	ldr	r2, [pc, #468]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 80036c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	e01d      	b.n	8003708 <HAL_RCC_OscConfig+0xb0>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036d4:	d10c      	bne.n	80036f0 <HAL_RCC_OscConfig+0x98>
 80036d6:	4b70      	ldr	r3, [pc, #448]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a6f      	ldr	r2, [pc, #444]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 80036dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	4b6d      	ldr	r3, [pc, #436]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a6c      	ldr	r2, [pc, #432]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 80036e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	e00b      	b.n	8003708 <HAL_RCC_OscConfig+0xb0>
 80036f0:	4b69      	ldr	r3, [pc, #420]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a68      	ldr	r2, [pc, #416]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 80036f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036fa:	6013      	str	r3, [r2, #0]
 80036fc:	4b66      	ldr	r3, [pc, #408]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a65      	ldr	r2, [pc, #404]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 8003702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d013      	beq.n	8003738 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003710:	f7fe fc18 	bl	8001f44 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003718:	f7fe fc14 	bl	8001f44 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b64      	cmp	r3, #100	; 0x64
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e207      	b.n	8003b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372a:	4b5b      	ldr	r3, [pc, #364]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCC_OscConfig+0xc0>
 8003736:	e014      	b.n	8003762 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003738:	f7fe fc04 	bl	8001f44 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003740:	f7fe fc00 	bl	8001f44 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b64      	cmp	r3, #100	; 0x64
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e1f3      	b.n	8003b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003752:	4b51      	ldr	r3, [pc, #324]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0xe8>
 800375e:	e000      	b.n	8003762 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d063      	beq.n	8003836 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800376e:	4b4a      	ldr	r3, [pc, #296]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 030c 	and.w	r3, r3, #12
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00b      	beq.n	8003792 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800377a:	4b47      	ldr	r3, [pc, #284]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003782:	2b08      	cmp	r3, #8
 8003784:	d11c      	bne.n	80037c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003786:	4b44      	ldr	r3, [pc, #272]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d116      	bne.n	80037c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003792:	4b41      	ldr	r3, [pc, #260]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d005      	beq.n	80037aa <HAL_RCC_OscConfig+0x152>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d001      	beq.n	80037aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e1c7      	b.n	8003b3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037aa:	4b3b      	ldr	r3, [pc, #236]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4937      	ldr	r1, [pc, #220]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037be:	e03a      	b.n	8003836 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d020      	beq.n	800380a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037c8:	4b34      	ldr	r3, [pc, #208]	; (800389c <HAL_RCC_OscConfig+0x244>)
 80037ca:	2201      	movs	r2, #1
 80037cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ce:	f7fe fbb9 	bl	8001f44 <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d4:	e008      	b.n	80037e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037d6:	f7fe fbb5 	bl	8001f44 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e1a8      	b.n	8003b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e8:	4b2b      	ldr	r3, [pc, #172]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0f0      	beq.n	80037d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f4:	4b28      	ldr	r3, [pc, #160]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	4925      	ldr	r1, [pc, #148]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 8003804:	4313      	orrs	r3, r2
 8003806:	600b      	str	r3, [r1, #0]
 8003808:	e015      	b.n	8003836 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800380a:	4b24      	ldr	r3, [pc, #144]	; (800389c <HAL_RCC_OscConfig+0x244>)
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003810:	f7fe fb98 	bl	8001f44 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003818:	f7fe fb94 	bl	8001f44 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e187      	b.n	8003b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800382a:	4b1b      	ldr	r3, [pc, #108]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1f0      	bne.n	8003818 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d036      	beq.n	80038b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d016      	beq.n	8003878 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800384a:	4b15      	ldr	r3, [pc, #84]	; (80038a0 <HAL_RCC_OscConfig+0x248>)
 800384c:	2201      	movs	r2, #1
 800384e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003850:	f7fe fb78 	bl	8001f44 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003858:	f7fe fb74 	bl	8001f44 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e167      	b.n	8003b3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800386a:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <HAL_RCC_OscConfig+0x240>)
 800386c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0f0      	beq.n	8003858 <HAL_RCC_OscConfig+0x200>
 8003876:	e01b      	b.n	80038b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003878:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <HAL_RCC_OscConfig+0x248>)
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800387e:	f7fe fb61 	bl	8001f44 <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003884:	e00e      	b.n	80038a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003886:	f7fe fb5d 	bl	8001f44 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d907      	bls.n	80038a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e150      	b.n	8003b3a <HAL_RCC_OscConfig+0x4e2>
 8003898:	40023800 	.word	0x40023800
 800389c:	42470000 	.word	0x42470000
 80038a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a4:	4b88      	ldr	r3, [pc, #544]	; (8003ac8 <HAL_RCC_OscConfig+0x470>)
 80038a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1ea      	bne.n	8003886 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 8097 	beq.w	80039ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038be:	2300      	movs	r3, #0
 80038c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038c2:	4b81      	ldr	r3, [pc, #516]	; (8003ac8 <HAL_RCC_OscConfig+0x470>)
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10f      	bne.n	80038ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ce:	2300      	movs	r3, #0
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	4b7d      	ldr	r3, [pc, #500]	; (8003ac8 <HAL_RCC_OscConfig+0x470>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	4a7c      	ldr	r2, [pc, #496]	; (8003ac8 <HAL_RCC_OscConfig+0x470>)
 80038d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038dc:	6413      	str	r3, [r2, #64]	; 0x40
 80038de:	4b7a      	ldr	r3, [pc, #488]	; (8003ac8 <HAL_RCC_OscConfig+0x470>)
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e6:	60bb      	str	r3, [r7, #8]
 80038e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ea:	2301      	movs	r3, #1
 80038ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ee:	4b77      	ldr	r3, [pc, #476]	; (8003acc <HAL_RCC_OscConfig+0x474>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d118      	bne.n	800392c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038fa:	4b74      	ldr	r3, [pc, #464]	; (8003acc <HAL_RCC_OscConfig+0x474>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a73      	ldr	r2, [pc, #460]	; (8003acc <HAL_RCC_OscConfig+0x474>)
 8003900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003906:	f7fe fb1d 	bl	8001f44 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800390e:	f7fe fb19 	bl	8001f44 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e10c      	b.n	8003b3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003920:	4b6a      	ldr	r3, [pc, #424]	; (8003acc <HAL_RCC_OscConfig+0x474>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0f0      	beq.n	800390e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d106      	bne.n	8003942 <HAL_RCC_OscConfig+0x2ea>
 8003934:	4b64      	ldr	r3, [pc, #400]	; (8003ac8 <HAL_RCC_OscConfig+0x470>)
 8003936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003938:	4a63      	ldr	r2, [pc, #396]	; (8003ac8 <HAL_RCC_OscConfig+0x470>)
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	6713      	str	r3, [r2, #112]	; 0x70
 8003940:	e01c      	b.n	800397c <HAL_RCC_OscConfig+0x324>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	2b05      	cmp	r3, #5
 8003948:	d10c      	bne.n	8003964 <HAL_RCC_OscConfig+0x30c>
 800394a:	4b5f      	ldr	r3, [pc, #380]	; (8003ac8 <HAL_RCC_OscConfig+0x470>)
 800394c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394e:	4a5e      	ldr	r2, [pc, #376]	; (8003ac8 <HAL_RCC_OscConfig+0x470>)
 8003950:	f043 0304 	orr.w	r3, r3, #4
 8003954:	6713      	str	r3, [r2, #112]	; 0x70
 8003956:	4b5c      	ldr	r3, [pc, #368]	; (8003ac8 <HAL_RCC_OscConfig+0x470>)
 8003958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395a:	4a5b      	ldr	r2, [pc, #364]	; (8003ac8 <HAL_RCC_OscConfig+0x470>)
 800395c:	f043 0301 	orr.w	r3, r3, #1
 8003960:	6713      	str	r3, [r2, #112]	; 0x70
 8003962:	e00b      	b.n	800397c <HAL_RCC_OscConfig+0x324>
 8003964:	4b58      	ldr	r3, [pc, #352]	; (8003ac8 <HAL_RCC_OscConfig+0x470>)
 8003966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003968:	4a57      	ldr	r2, [pc, #348]	; (8003ac8 <HAL_RCC_OscConfig+0x470>)
 800396a:	f023 0301 	bic.w	r3, r3, #1
 800396e:	6713      	str	r3, [r2, #112]	; 0x70
 8003970:	4b55      	ldr	r3, [pc, #340]	; (8003ac8 <HAL_RCC_OscConfig+0x470>)
 8003972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003974:	4a54      	ldr	r2, [pc, #336]	; (8003ac8 <HAL_RCC_OscConfig+0x470>)
 8003976:	f023 0304 	bic.w	r3, r3, #4
 800397a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d015      	beq.n	80039b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003984:	f7fe fade 	bl	8001f44 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398a:	e00a      	b.n	80039a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800398c:	f7fe fada 	bl	8001f44 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	f241 3288 	movw	r2, #5000	; 0x1388
 800399a:	4293      	cmp	r3, r2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e0cb      	b.n	8003b3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a2:	4b49      	ldr	r3, [pc, #292]	; (8003ac8 <HAL_RCC_OscConfig+0x470>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0ee      	beq.n	800398c <HAL_RCC_OscConfig+0x334>
 80039ae:	e014      	b.n	80039da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b0:	f7fe fac8 	bl	8001f44 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039b6:	e00a      	b.n	80039ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039b8:	f7fe fac4 	bl	8001f44 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e0b5      	b.n	8003b3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ce:	4b3e      	ldr	r3, [pc, #248]	; (8003ac8 <HAL_RCC_OscConfig+0x470>)
 80039d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1ee      	bne.n	80039b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039da:	7dfb      	ldrb	r3, [r7, #23]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d105      	bne.n	80039ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e0:	4b39      	ldr	r3, [pc, #228]	; (8003ac8 <HAL_RCC_OscConfig+0x470>)
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	4a38      	ldr	r2, [pc, #224]	; (8003ac8 <HAL_RCC_OscConfig+0x470>)
 80039e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80a1 	beq.w	8003b38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039f6:	4b34      	ldr	r3, [pc, #208]	; (8003ac8 <HAL_RCC_OscConfig+0x470>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 030c 	and.w	r3, r3, #12
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d05c      	beq.n	8003abc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d141      	bne.n	8003a8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0a:	4b31      	ldr	r3, [pc, #196]	; (8003ad0 <HAL_RCC_OscConfig+0x478>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a10:	f7fe fa98 	bl	8001f44 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a18:	f7fe fa94 	bl	8001f44 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e087      	b.n	8003b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2a:	4b27      	ldr	r3, [pc, #156]	; (8003ac8 <HAL_RCC_OscConfig+0x470>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69da      	ldr	r2, [r3, #28]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	019b      	lsls	r3, r3, #6
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4c:	085b      	lsrs	r3, r3, #1
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	041b      	lsls	r3, r3, #16
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	061b      	lsls	r3, r3, #24
 8003a5a:	491b      	ldr	r1, [pc, #108]	; (8003ac8 <HAL_RCC_OscConfig+0x470>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a60:	4b1b      	ldr	r3, [pc, #108]	; (8003ad0 <HAL_RCC_OscConfig+0x478>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a66:	f7fe fa6d 	bl	8001f44 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a6e:	f7fe fa69 	bl	8001f44 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e05c      	b.n	8003b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a80:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <HAL_RCC_OscConfig+0x470>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0f0      	beq.n	8003a6e <HAL_RCC_OscConfig+0x416>
 8003a8c:	e054      	b.n	8003b38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8e:	4b10      	ldr	r3, [pc, #64]	; (8003ad0 <HAL_RCC_OscConfig+0x478>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a94:	f7fe fa56 	bl	8001f44 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a9c:	f7fe fa52 	bl	8001f44 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e045      	b.n	8003b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aae:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <HAL_RCC_OscConfig+0x470>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0x444>
 8003aba:	e03d      	b.n	8003b38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d107      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e038      	b.n	8003b3a <HAL_RCC_OscConfig+0x4e2>
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	40007000 	.word	0x40007000
 8003ad0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ad4:	4b1b      	ldr	r3, [pc, #108]	; (8003b44 <HAL_RCC_OscConfig+0x4ec>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d028      	beq.n	8003b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d121      	bne.n	8003b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d11a      	bne.n	8003b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b04:	4013      	ands	r3, r2
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d111      	bne.n	8003b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1a:	085b      	lsrs	r3, r3, #1
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d107      	bne.n	8003b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d001      	beq.n	8003b38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e000      	b.n	8003b3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40023800 	.word	0x40023800

08003b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0cc      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b5c:	4b68      	ldr	r3, [pc, #416]	; (8003d00 <HAL_RCC_ClockConfig+0x1b8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 030f 	and.w	r3, r3, #15
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d90c      	bls.n	8003b84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6a:	4b65      	ldr	r3, [pc, #404]	; (8003d00 <HAL_RCC_ClockConfig+0x1b8>)
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b72:	4b63      	ldr	r3, [pc, #396]	; (8003d00 <HAL_RCC_ClockConfig+0x1b8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0b8      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d020      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b9c:	4b59      	ldr	r3, [pc, #356]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	4a58      	ldr	r2, [pc, #352]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ba6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bb4:	4b53      	ldr	r3, [pc, #332]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	4a52      	ldr	r2, [pc, #328]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bc0:	4b50      	ldr	r3, [pc, #320]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	494d      	ldr	r1, [pc, #308]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d044      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d107      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be6:	4b47      	ldr	r3, [pc, #284]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d119      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e07f      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d003      	beq.n	8003c06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c02:	2b03      	cmp	r3, #3
 8003c04:	d107      	bne.n	8003c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c06:	4b3f      	ldr	r3, [pc, #252]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e06f      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c16:	4b3b      	ldr	r3, [pc, #236]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e067      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c26:	4b37      	ldr	r3, [pc, #220]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f023 0203 	bic.w	r2, r3, #3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	4934      	ldr	r1, [pc, #208]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c38:	f7fe f984 	bl	8001f44 <HAL_GetTick>
 8003c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3e:	e00a      	b.n	8003c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c40:	f7fe f980 	bl	8001f44 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e04f      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c56:	4b2b      	ldr	r3, [pc, #172]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 020c 	and.w	r2, r3, #12
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d1eb      	bne.n	8003c40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c68:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <HAL_RCC_ClockConfig+0x1b8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 030f 	and.w	r3, r3, #15
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d20c      	bcs.n	8003c90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c76:	4b22      	ldr	r3, [pc, #136]	; (8003d00 <HAL_RCC_ClockConfig+0x1b8>)
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7e:	4b20      	ldr	r3, [pc, #128]	; (8003d00 <HAL_RCC_ClockConfig+0x1b8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d001      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e032      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c9c:	4b19      	ldr	r3, [pc, #100]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	4916      	ldr	r1, [pc, #88]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d009      	beq.n	8003cce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cba:	4b12      	ldr	r3, [pc, #72]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	490e      	ldr	r1, [pc, #56]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cce:	f000 f821 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	091b      	lsrs	r3, r3, #4
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	490a      	ldr	r1, [pc, #40]	; (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003ce0:	5ccb      	ldrb	r3, [r1, r3]
 8003ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce6:	4a09      	ldr	r2, [pc, #36]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cea:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <HAL_RCC_ClockConfig+0x1c8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fe f8e4 	bl	8001ebc <HAL_InitTick>

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	40023c00 	.word	0x40023c00
 8003d04:	40023800 	.word	0x40023800
 8003d08:	08006084 	.word	0x08006084
 8003d0c:	20000000 	.word	0x20000000
 8003d10:	20000004 	.word	0x20000004

08003d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d18:	b094      	sub	sp, #80	; 0x50
 8003d1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d20:	2300      	movs	r3, #0
 8003d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d24:	2300      	movs	r3, #0
 8003d26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d2c:	4b79      	ldr	r3, [pc, #484]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 030c 	and.w	r3, r3, #12
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d00d      	beq.n	8003d54 <HAL_RCC_GetSysClockFreq+0x40>
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	f200 80e1 	bhi.w	8003f00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <HAL_RCC_GetSysClockFreq+0x34>
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d003      	beq.n	8003d4e <HAL_RCC_GetSysClockFreq+0x3a>
 8003d46:	e0db      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d48:	4b73      	ldr	r3, [pc, #460]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003d4c:	e0db      	b.n	8003f06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d4e:	4b73      	ldr	r3, [pc, #460]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x208>)
 8003d50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d52:	e0d8      	b.n	8003f06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d54:	4b6f      	ldr	r3, [pc, #444]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d5e:	4b6d      	ldr	r3, [pc, #436]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d063      	beq.n	8003e32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d6a:	4b6a      	ldr	r3, [pc, #424]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	099b      	lsrs	r3, r3, #6
 8003d70:	2200      	movs	r2, #0
 8003d72:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d7c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d7e:	2300      	movs	r3, #0
 8003d80:	637b      	str	r3, [r7, #52]	; 0x34
 8003d82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d86:	4622      	mov	r2, r4
 8003d88:	462b      	mov	r3, r5
 8003d8a:	f04f 0000 	mov.w	r0, #0
 8003d8e:	f04f 0100 	mov.w	r1, #0
 8003d92:	0159      	lsls	r1, r3, #5
 8003d94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d98:	0150      	lsls	r0, r2, #5
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4621      	mov	r1, r4
 8003da0:	1a51      	subs	r1, r2, r1
 8003da2:	6139      	str	r1, [r7, #16]
 8003da4:	4629      	mov	r1, r5
 8003da6:	eb63 0301 	sbc.w	r3, r3, r1
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	f04f 0300 	mov.w	r3, #0
 8003db4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003db8:	4659      	mov	r1, fp
 8003dba:	018b      	lsls	r3, r1, #6
 8003dbc:	4651      	mov	r1, sl
 8003dbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dc2:	4651      	mov	r1, sl
 8003dc4:	018a      	lsls	r2, r1, #6
 8003dc6:	4651      	mov	r1, sl
 8003dc8:	ebb2 0801 	subs.w	r8, r2, r1
 8003dcc:	4659      	mov	r1, fp
 8003dce:	eb63 0901 	sbc.w	r9, r3, r1
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	f04f 0300 	mov.w	r3, #0
 8003dda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003de2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003de6:	4690      	mov	r8, r2
 8003de8:	4699      	mov	r9, r3
 8003dea:	4623      	mov	r3, r4
 8003dec:	eb18 0303 	adds.w	r3, r8, r3
 8003df0:	60bb      	str	r3, [r7, #8]
 8003df2:	462b      	mov	r3, r5
 8003df4:	eb49 0303 	adc.w	r3, r9, r3
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	f04f 0300 	mov.w	r3, #0
 8003e02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e06:	4629      	mov	r1, r5
 8003e08:	024b      	lsls	r3, r1, #9
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e10:	4621      	mov	r1, r4
 8003e12:	024a      	lsls	r2, r1, #9
 8003e14:	4610      	mov	r0, r2
 8003e16:	4619      	mov	r1, r3
 8003e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e24:	f7fc fe22 	bl	8000a6c <__aeabi_uldivmod>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e30:	e058      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e32:	4b38      	ldr	r3, [pc, #224]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	099b      	lsrs	r3, r3, #6
 8003e38:	2200      	movs	r2, #0
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	4611      	mov	r1, r2
 8003e3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e42:	623b      	str	r3, [r7, #32]
 8003e44:	2300      	movs	r3, #0
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24
 8003e48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e4c:	4642      	mov	r2, r8
 8003e4e:	464b      	mov	r3, r9
 8003e50:	f04f 0000 	mov.w	r0, #0
 8003e54:	f04f 0100 	mov.w	r1, #0
 8003e58:	0159      	lsls	r1, r3, #5
 8003e5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e5e:	0150      	lsls	r0, r2, #5
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4641      	mov	r1, r8
 8003e66:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e6a:	4649      	mov	r1, r9
 8003e6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	f04f 0300 	mov.w	r3, #0
 8003e78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e84:	ebb2 040a 	subs.w	r4, r2, sl
 8003e88:	eb63 050b 	sbc.w	r5, r3, fp
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	00eb      	lsls	r3, r5, #3
 8003e96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e9a:	00e2      	lsls	r2, r4, #3
 8003e9c:	4614      	mov	r4, r2
 8003e9e:	461d      	mov	r5, r3
 8003ea0:	4643      	mov	r3, r8
 8003ea2:	18e3      	adds	r3, r4, r3
 8003ea4:	603b      	str	r3, [r7, #0]
 8003ea6:	464b      	mov	r3, r9
 8003ea8:	eb45 0303 	adc.w	r3, r5, r3
 8003eac:	607b      	str	r3, [r7, #4]
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eba:	4629      	mov	r1, r5
 8003ebc:	028b      	lsls	r3, r1, #10
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ec4:	4621      	mov	r1, r4
 8003ec6:	028a      	lsls	r2, r1, #10
 8003ec8:	4610      	mov	r0, r2
 8003eca:	4619      	mov	r1, r3
 8003ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ece:	2200      	movs	r2, #0
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	61fa      	str	r2, [r7, #28]
 8003ed4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ed8:	f7fc fdc8 	bl	8000a6c <__aeabi_uldivmod>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	0c1b      	lsrs	r3, r3, #16
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	3301      	adds	r3, #1
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ef4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003efe:	e002      	b.n	8003f06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f00:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3750      	adds	r7, #80	; 0x50
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f12:	bf00      	nop
 8003f14:	40023800 	.word	0x40023800
 8003f18:	00f42400 	.word	0x00f42400
 8003f1c:	007a1200 	.word	0x007a1200

08003f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f24:	4b03      	ldr	r3, [pc, #12]	; (8003f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f26:	681b      	ldr	r3, [r3, #0]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	20000000 	.word	0x20000000

08003f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f3c:	f7ff fff0 	bl	8003f20 <HAL_RCC_GetHCLKFreq>
 8003f40:	4602      	mov	r2, r0
 8003f42:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	0a9b      	lsrs	r3, r3, #10
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	4903      	ldr	r1, [pc, #12]	; (8003f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f4e:	5ccb      	ldrb	r3, [r1, r3]
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	08006094 	.word	0x08006094

08003f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f64:	f7ff ffdc 	bl	8003f20 <HAL_RCC_GetHCLKFreq>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	0b5b      	lsrs	r3, r3, #13
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	4903      	ldr	r1, [pc, #12]	; (8003f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f76:	5ccb      	ldrb	r3, [r1, r3]
 8003f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40023800 	.word	0x40023800
 8003f84:	08006094 	.word	0x08006094

08003f88 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e041      	b.n	800401e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fd fe26 	bl	8001c00 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	f000 fb4e 	bl	8004668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d104      	bne.n	8004046 <HAL_TIM_IC_Start_IT+0x1e>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004042:	b2db      	uxtb	r3, r3
 8004044:	e013      	b.n	800406e <HAL_TIM_IC_Start_IT+0x46>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b04      	cmp	r3, #4
 800404a:	d104      	bne.n	8004056 <HAL_TIM_IC_Start_IT+0x2e>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004052:	b2db      	uxtb	r3, r3
 8004054:	e00b      	b.n	800406e <HAL_TIM_IC_Start_IT+0x46>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b08      	cmp	r3, #8
 800405a:	d104      	bne.n	8004066 <HAL_TIM_IC_Start_IT+0x3e>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004062:	b2db      	uxtb	r3, r3
 8004064:	e003      	b.n	800406e <HAL_TIM_IC_Start_IT+0x46>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800406c:	b2db      	uxtb	r3, r3
 800406e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d104      	bne.n	8004080 <HAL_TIM_IC_Start_IT+0x58>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800407c:	b2db      	uxtb	r3, r3
 800407e:	e013      	b.n	80040a8 <HAL_TIM_IC_Start_IT+0x80>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	2b04      	cmp	r3, #4
 8004084:	d104      	bne.n	8004090 <HAL_TIM_IC_Start_IT+0x68>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800408c:	b2db      	uxtb	r3, r3
 800408e:	e00b      	b.n	80040a8 <HAL_TIM_IC_Start_IT+0x80>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	2b08      	cmp	r3, #8
 8004094:	d104      	bne.n	80040a0 <HAL_TIM_IC_Start_IT+0x78>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800409c:	b2db      	uxtb	r3, r3
 800409e:	e003      	b.n	80040a8 <HAL_TIM_IC_Start_IT+0x80>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80040aa:	7bbb      	ldrb	r3, [r7, #14]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d102      	bne.n	80040b6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80040b0:	7b7b      	ldrb	r3, [r7, #13]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d001      	beq.n	80040ba <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e0cc      	b.n	8004254 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d104      	bne.n	80040ca <HAL_TIM_IC_Start_IT+0xa2>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040c8:	e013      	b.n	80040f2 <HAL_TIM_IC_Start_IT+0xca>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d104      	bne.n	80040da <HAL_TIM_IC_Start_IT+0xb2>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040d8:	e00b      	b.n	80040f2 <HAL_TIM_IC_Start_IT+0xca>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2b08      	cmp	r3, #8
 80040de:	d104      	bne.n	80040ea <HAL_TIM_IC_Start_IT+0xc2>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040e8:	e003      	b.n	80040f2 <HAL_TIM_IC_Start_IT+0xca>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2202      	movs	r2, #2
 80040ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d104      	bne.n	8004102 <HAL_TIM_IC_Start_IT+0xda>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004100:	e013      	b.n	800412a <HAL_TIM_IC_Start_IT+0x102>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b04      	cmp	r3, #4
 8004106:	d104      	bne.n	8004112 <HAL_TIM_IC_Start_IT+0xea>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004110:	e00b      	b.n	800412a <HAL_TIM_IC_Start_IT+0x102>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b08      	cmp	r3, #8
 8004116:	d104      	bne.n	8004122 <HAL_TIM_IC_Start_IT+0xfa>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004120:	e003      	b.n	800412a <HAL_TIM_IC_Start_IT+0x102>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2202      	movs	r2, #2
 8004126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b0c      	cmp	r3, #12
 800412e:	d841      	bhi.n	80041b4 <HAL_TIM_IC_Start_IT+0x18c>
 8004130:	a201      	add	r2, pc, #4	; (adr r2, 8004138 <HAL_TIM_IC_Start_IT+0x110>)
 8004132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004136:	bf00      	nop
 8004138:	0800416d 	.word	0x0800416d
 800413c:	080041b5 	.word	0x080041b5
 8004140:	080041b5 	.word	0x080041b5
 8004144:	080041b5 	.word	0x080041b5
 8004148:	0800417f 	.word	0x0800417f
 800414c:	080041b5 	.word	0x080041b5
 8004150:	080041b5 	.word	0x080041b5
 8004154:	080041b5 	.word	0x080041b5
 8004158:	08004191 	.word	0x08004191
 800415c:	080041b5 	.word	0x080041b5
 8004160:	080041b5 	.word	0x080041b5
 8004164:	080041b5 	.word	0x080041b5
 8004168:	080041a3 	.word	0x080041a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0202 	orr.w	r2, r2, #2
 800417a:	60da      	str	r2, [r3, #12]
      break;
 800417c:	e01d      	b.n	80041ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0204 	orr.w	r2, r2, #4
 800418c:	60da      	str	r2, [r3, #12]
      break;
 800418e:	e014      	b.n	80041ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0208 	orr.w	r2, r2, #8
 800419e:	60da      	str	r2, [r3, #12]
      break;
 80041a0:	e00b      	b.n	80041ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0210 	orr.w	r2, r2, #16
 80041b0:	60da      	str	r2, [r3, #12]
      break;
 80041b2:	e002      	b.n	80041ba <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]
      break;
 80041b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d148      	bne.n	8004252 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2201      	movs	r2, #1
 80041c6:	6839      	ldr	r1, [r7, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 fc23 	bl	8004a14 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a22      	ldr	r2, [pc, #136]	; (800425c <HAL_TIM_IC_Start_IT+0x234>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d022      	beq.n	800421e <HAL_TIM_IC_Start_IT+0x1f6>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e0:	d01d      	beq.n	800421e <HAL_TIM_IC_Start_IT+0x1f6>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a1e      	ldr	r2, [pc, #120]	; (8004260 <HAL_TIM_IC_Start_IT+0x238>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d018      	beq.n	800421e <HAL_TIM_IC_Start_IT+0x1f6>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a1c      	ldr	r2, [pc, #112]	; (8004264 <HAL_TIM_IC_Start_IT+0x23c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d013      	beq.n	800421e <HAL_TIM_IC_Start_IT+0x1f6>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a1b      	ldr	r2, [pc, #108]	; (8004268 <HAL_TIM_IC_Start_IT+0x240>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d00e      	beq.n	800421e <HAL_TIM_IC_Start_IT+0x1f6>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a19      	ldr	r2, [pc, #100]	; (800426c <HAL_TIM_IC_Start_IT+0x244>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d009      	beq.n	800421e <HAL_TIM_IC_Start_IT+0x1f6>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a18      	ldr	r2, [pc, #96]	; (8004270 <HAL_TIM_IC_Start_IT+0x248>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d004      	beq.n	800421e <HAL_TIM_IC_Start_IT+0x1f6>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a16      	ldr	r2, [pc, #88]	; (8004274 <HAL_TIM_IC_Start_IT+0x24c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d111      	bne.n	8004242 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b06      	cmp	r3, #6
 800422e:	d010      	beq.n	8004252 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0201 	orr.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004240:	e007      	b.n	8004252 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 0201 	orr.w	r2, r2, #1
 8004250:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004252:	7bfb      	ldrb	r3, [r7, #15]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40010000 	.word	0x40010000
 8004260:	40000400 	.word	0x40000400
 8004264:	40000800 	.word	0x40000800
 8004268:	40000c00 	.word	0x40000c00
 800426c:	40010400 	.word	0x40010400
 8004270:	40014000 	.word	0x40014000
 8004274:	40001800 	.word	0x40001800

08004278 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d020      	beq.n	80042dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d01b      	beq.n	80042dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f06f 0202 	mvn.w	r2, #2
 80042ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7fd fbf8 	bl	8001ab8 <HAL_TIM_IC_CaptureCallback>
 80042c8:	e005      	b.n	80042d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f9ae 	bl	800462c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f9b5 	bl	8004640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d020      	beq.n	8004328 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01b      	beq.n	8004328 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f06f 0204 	mvn.w	r2, #4
 80042f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2202      	movs	r2, #2
 80042fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7fd fbd2 	bl	8001ab8 <HAL_TIM_IC_CaptureCallback>
 8004314:	e005      	b.n	8004322 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f988 	bl	800462c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f98f 	bl	8004640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d020      	beq.n	8004374 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b00      	cmp	r3, #0
 800433a:	d01b      	beq.n	8004374 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f06f 0208 	mvn.w	r2, #8
 8004344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2204      	movs	r2, #4
 800434a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fd fbac 	bl	8001ab8 <HAL_TIM_IC_CaptureCallback>
 8004360:	e005      	b.n	800436e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f962 	bl	800462c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f969 	bl	8004640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f003 0310 	and.w	r3, r3, #16
 800437a:	2b00      	cmp	r3, #0
 800437c:	d020      	beq.n	80043c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	2b00      	cmp	r3, #0
 8004386:	d01b      	beq.n	80043c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f06f 0210 	mvn.w	r2, #16
 8004390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2208      	movs	r2, #8
 8004396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fd fb86 	bl	8001ab8 <HAL_TIM_IC_CaptureCallback>
 80043ac:	e005      	b.n	80043ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f93c 	bl	800462c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f943 	bl	8004640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00c      	beq.n	80043e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d007      	beq.n	80043e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f06f 0201 	mvn.w	r2, #1
 80043dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f91a 	bl	8004618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00c      	beq.n	8004408 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d007      	beq.n	8004408 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fbb2 	bl	8004b6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00c      	beq.n	800442c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d007      	beq.n	800442c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f914 	bl	8004654 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f003 0320 	and.w	r3, r3, #32
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00c      	beq.n	8004450 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f003 0320 	and.w	r3, r3, #32
 800443c:	2b00      	cmp	r3, #0
 800443e:	d007      	beq.n	8004450 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f06f 0220 	mvn.w	r2, #32
 8004448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fb84 	bl	8004b58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004450:	bf00      	nop
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004464:	2300      	movs	r3, #0
 8004466:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004472:	2302      	movs	r3, #2
 8004474:	e088      	b.n	8004588 <HAL_TIM_IC_ConfigChannel+0x130>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d11b      	bne.n	80044bc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004494:	f000 f994 	bl	80047c0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699a      	ldr	r2, [r3, #24]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 020c 	bic.w	r2, r2, #12
 80044a6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6999      	ldr	r1, [r3, #24]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	619a      	str	r2, [r3, #24]
 80044ba:	e060      	b.n	800457e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d11c      	bne.n	80044fc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80044d2:	f000 f9e9 	bl	80048a8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	699a      	ldr	r2, [r3, #24]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80044e4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6999      	ldr	r1, [r3, #24]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	021a      	lsls	r2, r3, #8
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	619a      	str	r2, [r3, #24]
 80044fa:	e040      	b.n	800457e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d11b      	bne.n	800453a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004512:	f000 fa06 	bl	8004922 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69da      	ldr	r2, [r3, #28]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 020c 	bic.w	r2, r2, #12
 8004524:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	69d9      	ldr	r1, [r3, #28]
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	61da      	str	r2, [r3, #28]
 8004538:	e021      	b.n	800457e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b0c      	cmp	r3, #12
 800453e:	d11c      	bne.n	800457a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004550:	f000 fa23 	bl	800499a <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	69da      	ldr	r2, [r3, #28]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004562:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	69d9      	ldr	r1, [r3, #28]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	021a      	lsls	r2, r3, #8
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	61da      	str	r2, [r3, #28]
 8004578:	e001      	b.n	800457e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004586:	7dfb      	ldrb	r3, [r7, #23]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b0c      	cmp	r3, #12
 80045a2:	d831      	bhi.n	8004608 <HAL_TIM_ReadCapturedValue+0x78>
 80045a4:	a201      	add	r2, pc, #4	; (adr r2, 80045ac <HAL_TIM_ReadCapturedValue+0x1c>)
 80045a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045aa:	bf00      	nop
 80045ac:	080045e1 	.word	0x080045e1
 80045b0:	08004609 	.word	0x08004609
 80045b4:	08004609 	.word	0x08004609
 80045b8:	08004609 	.word	0x08004609
 80045bc:	080045eb 	.word	0x080045eb
 80045c0:	08004609 	.word	0x08004609
 80045c4:	08004609 	.word	0x08004609
 80045c8:	08004609 	.word	0x08004609
 80045cc:	080045f5 	.word	0x080045f5
 80045d0:	08004609 	.word	0x08004609
 80045d4:	08004609 	.word	0x08004609
 80045d8:	08004609 	.word	0x08004609
 80045dc:	080045ff 	.word	0x080045ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e6:	60fb      	str	r3, [r7, #12]

      break;
 80045e8:	e00f      	b.n	800460a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f0:	60fb      	str	r3, [r7, #12]

      break;
 80045f2:	e00a      	b.n	800460a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fa:	60fb      	str	r3, [r7, #12]

      break;
 80045fc:	e005      	b.n	800460a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	60fb      	str	r3, [r7, #12]

      break;
 8004606:	e000      	b.n	800460a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004608:	bf00      	nop
  }

  return tmpreg;
 800460a:	68fb      	ldr	r3, [r7, #12]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a46      	ldr	r2, [pc, #280]	; (8004794 <TIM_Base_SetConfig+0x12c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d013      	beq.n	80046a8 <TIM_Base_SetConfig+0x40>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004686:	d00f      	beq.n	80046a8 <TIM_Base_SetConfig+0x40>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a43      	ldr	r2, [pc, #268]	; (8004798 <TIM_Base_SetConfig+0x130>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00b      	beq.n	80046a8 <TIM_Base_SetConfig+0x40>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a42      	ldr	r2, [pc, #264]	; (800479c <TIM_Base_SetConfig+0x134>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d007      	beq.n	80046a8 <TIM_Base_SetConfig+0x40>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a41      	ldr	r2, [pc, #260]	; (80047a0 <TIM_Base_SetConfig+0x138>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d003      	beq.n	80046a8 <TIM_Base_SetConfig+0x40>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a40      	ldr	r2, [pc, #256]	; (80047a4 <TIM_Base_SetConfig+0x13c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d108      	bne.n	80046ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a35      	ldr	r2, [pc, #212]	; (8004794 <TIM_Base_SetConfig+0x12c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d02b      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c8:	d027      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a32      	ldr	r2, [pc, #200]	; (8004798 <TIM_Base_SetConfig+0x130>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d023      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a31      	ldr	r2, [pc, #196]	; (800479c <TIM_Base_SetConfig+0x134>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d01f      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a30      	ldr	r2, [pc, #192]	; (80047a0 <TIM_Base_SetConfig+0x138>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d01b      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a2f      	ldr	r2, [pc, #188]	; (80047a4 <TIM_Base_SetConfig+0x13c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d017      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a2e      	ldr	r2, [pc, #184]	; (80047a8 <TIM_Base_SetConfig+0x140>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d013      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a2d      	ldr	r2, [pc, #180]	; (80047ac <TIM_Base_SetConfig+0x144>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00f      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a2c      	ldr	r2, [pc, #176]	; (80047b0 <TIM_Base_SetConfig+0x148>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00b      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a2b      	ldr	r2, [pc, #172]	; (80047b4 <TIM_Base_SetConfig+0x14c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d007      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a2a      	ldr	r2, [pc, #168]	; (80047b8 <TIM_Base_SetConfig+0x150>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d003      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a29      	ldr	r2, [pc, #164]	; (80047bc <TIM_Base_SetConfig+0x154>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d108      	bne.n	800472c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4313      	orrs	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	4313      	orrs	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a10      	ldr	r2, [pc, #64]	; (8004794 <TIM_Base_SetConfig+0x12c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d003      	beq.n	8004760 <TIM_Base_SetConfig+0xf8>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a12      	ldr	r2, [pc, #72]	; (80047a4 <TIM_Base_SetConfig+0x13c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d103      	bne.n	8004768 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b01      	cmp	r3, #1
 8004778:	d105      	bne.n	8004786 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f023 0201 	bic.w	r2, r3, #1
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	611a      	str	r2, [r3, #16]
  }
}
 8004786:	bf00      	nop
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40010000 	.word	0x40010000
 8004798:	40000400 	.word	0x40000400
 800479c:	40000800 	.word	0x40000800
 80047a0:	40000c00 	.word	0x40000c00
 80047a4:	40010400 	.word	0x40010400
 80047a8:	40014000 	.word	0x40014000
 80047ac:	40014400 	.word	0x40014400
 80047b0:	40014800 	.word	0x40014800
 80047b4:	40001800 	.word	0x40001800
 80047b8:	40001c00 	.word	0x40001c00
 80047bc:	40002000 	.word	0x40002000

080047c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
 80047cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	f023 0201 	bic.w	r2, r3, #1
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4a28      	ldr	r2, [pc, #160]	; (800488c <TIM_TI1_SetConfig+0xcc>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d01b      	beq.n	8004826 <TIM_TI1_SetConfig+0x66>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f4:	d017      	beq.n	8004826 <TIM_TI1_SetConfig+0x66>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4a25      	ldr	r2, [pc, #148]	; (8004890 <TIM_TI1_SetConfig+0xd0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d013      	beq.n	8004826 <TIM_TI1_SetConfig+0x66>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4a24      	ldr	r2, [pc, #144]	; (8004894 <TIM_TI1_SetConfig+0xd4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d00f      	beq.n	8004826 <TIM_TI1_SetConfig+0x66>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4a23      	ldr	r2, [pc, #140]	; (8004898 <TIM_TI1_SetConfig+0xd8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00b      	beq.n	8004826 <TIM_TI1_SetConfig+0x66>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4a22      	ldr	r2, [pc, #136]	; (800489c <TIM_TI1_SetConfig+0xdc>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d007      	beq.n	8004826 <TIM_TI1_SetConfig+0x66>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4a21      	ldr	r2, [pc, #132]	; (80048a0 <TIM_TI1_SetConfig+0xe0>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d003      	beq.n	8004826 <TIM_TI1_SetConfig+0x66>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4a20      	ldr	r2, [pc, #128]	; (80048a4 <TIM_TI1_SetConfig+0xe4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d101      	bne.n	800482a <TIM_TI1_SetConfig+0x6a>
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <TIM_TI1_SetConfig+0x6c>
 800482a:	2300      	movs	r3, #0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d008      	beq.n	8004842 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f023 0303 	bic.w	r3, r3, #3
 8004836:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]
 8004840:	e003      	b.n	800484a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f043 0301 	orr.w	r3, r3, #1
 8004848:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004850:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	b2db      	uxtb	r3, r3
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	4313      	orrs	r3, r2
 800485c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f023 030a 	bic.w	r3, r3, #10
 8004864:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f003 030a 	and.w	r3, r3, #10
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	621a      	str	r2, [r3, #32]
}
 800487e:	bf00      	nop
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40010000 	.word	0x40010000
 8004890:	40000400 	.word	0x40000400
 8004894:	40000800 	.word	0x40000800
 8004898:	40000c00 	.word	0x40000c00
 800489c:	40010400 	.word	0x40010400
 80048a0:	40014000 	.word	0x40014000
 80048a4:	40001800 	.word	0x40001800

080048a8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	f023 0210 	bic.w	r2, r3, #16
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	021b      	lsls	r3, r3, #8
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	031b      	lsls	r3, r3, #12
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048fa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	621a      	str	r2, [r3, #32]
}
 8004916:	bf00      	nop
 8004918:	371c      	adds	r7, #28
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004922:	b480      	push	{r7}
 8004924:	b087      	sub	sp, #28
 8004926:	af00      	add	r7, sp, #0
 8004928:	60f8      	str	r0, [r7, #12]
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	607a      	str	r2, [r7, #4]
 800492e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f023 0303 	bic.w	r3, r3, #3
 800494e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4313      	orrs	r3, r2
 8004956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800495e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	b2db      	uxtb	r3, r3
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004972:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	021b      	lsls	r3, r3, #8
 8004978:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	4313      	orrs	r3, r2
 8004980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	621a      	str	r2, [r3, #32]
}
 800498e:	bf00      	nop
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800499a:	b480      	push	{r7}
 800499c:	b087      	sub	sp, #28
 800499e:	af00      	add	r7, sp, #0
 80049a0:	60f8      	str	r0, [r7, #12]
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	607a      	str	r2, [r7, #4]
 80049a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	021b      	lsls	r3, r3, #8
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	031b      	lsls	r3, r3, #12
 80049de:	b29b      	uxth	r3, r3
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80049ec:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	031b      	lsls	r3, r3, #12
 80049f2:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	621a      	str	r2, [r3, #32]
}
 8004a08:	bf00      	nop
 8004a0a:	371c      	adds	r7, #28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f003 031f 	and.w	r3, r3, #31
 8004a26:	2201      	movs	r2, #1
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a1a      	ldr	r2, [r3, #32]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	43db      	mvns	r3, r3
 8004a36:	401a      	ands	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6a1a      	ldr	r2, [r3, #32]
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f003 031f 	and.w	r3, r3, #31
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	621a      	str	r2, [r3, #32]
}
 8004a52:	bf00      	nop
 8004a54:	371c      	adds	r7, #28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
	...

08004a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a74:	2302      	movs	r3, #2
 8004a76:	e05a      	b.n	8004b2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a21      	ldr	r2, [pc, #132]	; (8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d022      	beq.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac4:	d01d      	beq.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a1d      	ldr	r2, [pc, #116]	; (8004b40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d018      	beq.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a1b      	ldr	r2, [pc, #108]	; (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d013      	beq.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a1a      	ldr	r2, [pc, #104]	; (8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00e      	beq.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a18      	ldr	r2, [pc, #96]	; (8004b4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d009      	beq.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a17      	ldr	r2, [pc, #92]	; (8004b50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d004      	beq.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a15      	ldr	r2, [pc, #84]	; (8004b54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d10c      	bne.n	8004b1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	40010000 	.word	0x40010000
 8004b40:	40000400 	.word	0x40000400
 8004b44:	40000800 	.word	0x40000800
 8004b48:	40000c00 	.word	0x40000c00
 8004b4c:	40010400 	.word	0x40010400
 8004b50:	40014000 	.word	0x40014000
 8004b54:	40001800 	.word	0x40001800

08004b58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e042      	b.n	8004c18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7fc fbf4 	bl	8001394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2224      	movs	r2, #36	; 0x24
 8004bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f82b 	bl	8004c20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	691a      	ldr	r2, [r3, #16]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695a      	ldr	r2, [r3, #20]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004be8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c24:	b0c0      	sub	sp, #256	; 0x100
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3c:	68d9      	ldr	r1, [r3, #12]
 8004c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	ea40 0301 	orr.w	r3, r0, r1
 8004c48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c78:	f021 010c 	bic.w	r1, r1, #12
 8004c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c86:	430b      	orrs	r3, r1
 8004c88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9a:	6999      	ldr	r1, [r3, #24]
 8004c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	ea40 0301 	orr.w	r3, r0, r1
 8004ca6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	4b8f      	ldr	r3, [pc, #572]	; (8004eec <UART_SetConfig+0x2cc>)
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d005      	beq.n	8004cc0 <UART_SetConfig+0xa0>
 8004cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	4b8d      	ldr	r3, [pc, #564]	; (8004ef0 <UART_SetConfig+0x2d0>)
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d104      	bne.n	8004cca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cc0:	f7ff f94e 	bl	8003f60 <HAL_RCC_GetPCLK2Freq>
 8004cc4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004cc8:	e003      	b.n	8004cd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cca:	f7ff f935 	bl	8003f38 <HAL_RCC_GetPCLK1Freq>
 8004cce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cdc:	f040 810c 	bne.w	8004ef8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ce0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004cee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004cf2:	4622      	mov	r2, r4
 8004cf4:	462b      	mov	r3, r5
 8004cf6:	1891      	adds	r1, r2, r2
 8004cf8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cfa:	415b      	adcs	r3, r3
 8004cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d02:	4621      	mov	r1, r4
 8004d04:	eb12 0801 	adds.w	r8, r2, r1
 8004d08:	4629      	mov	r1, r5
 8004d0a:	eb43 0901 	adc.w	r9, r3, r1
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d22:	4690      	mov	r8, r2
 8004d24:	4699      	mov	r9, r3
 8004d26:	4623      	mov	r3, r4
 8004d28:	eb18 0303 	adds.w	r3, r8, r3
 8004d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d30:	462b      	mov	r3, r5
 8004d32:	eb49 0303 	adc.w	r3, r9, r3
 8004d36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d4e:	460b      	mov	r3, r1
 8004d50:	18db      	adds	r3, r3, r3
 8004d52:	653b      	str	r3, [r7, #80]	; 0x50
 8004d54:	4613      	mov	r3, r2
 8004d56:	eb42 0303 	adc.w	r3, r2, r3
 8004d5a:	657b      	str	r3, [r7, #84]	; 0x54
 8004d5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d64:	f7fb fe82 	bl	8000a6c <__aeabi_uldivmod>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4b61      	ldr	r3, [pc, #388]	; (8004ef4 <UART_SetConfig+0x2d4>)
 8004d6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	011c      	lsls	r4, r3, #4
 8004d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d88:	4642      	mov	r2, r8
 8004d8a:	464b      	mov	r3, r9
 8004d8c:	1891      	adds	r1, r2, r2
 8004d8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d90:	415b      	adcs	r3, r3
 8004d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d98:	4641      	mov	r1, r8
 8004d9a:	eb12 0a01 	adds.w	sl, r2, r1
 8004d9e:	4649      	mov	r1, r9
 8004da0:	eb43 0b01 	adc.w	fp, r3, r1
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004db0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004db4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004db8:	4692      	mov	sl, r2
 8004dba:	469b      	mov	fp, r3
 8004dbc:	4643      	mov	r3, r8
 8004dbe:	eb1a 0303 	adds.w	r3, sl, r3
 8004dc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dc6:	464b      	mov	r3, r9
 8004dc8:	eb4b 0303 	adc.w	r3, fp, r3
 8004dcc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ddc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004de0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004de4:	460b      	mov	r3, r1
 8004de6:	18db      	adds	r3, r3, r3
 8004de8:	643b      	str	r3, [r7, #64]	; 0x40
 8004dea:	4613      	mov	r3, r2
 8004dec:	eb42 0303 	adc.w	r3, r2, r3
 8004df0:	647b      	str	r3, [r7, #68]	; 0x44
 8004df2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004df6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004dfa:	f7fb fe37 	bl	8000a6c <__aeabi_uldivmod>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	4611      	mov	r1, r2
 8004e04:	4b3b      	ldr	r3, [pc, #236]	; (8004ef4 <UART_SetConfig+0x2d4>)
 8004e06:	fba3 2301 	umull	r2, r3, r3, r1
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	2264      	movs	r2, #100	; 0x64
 8004e0e:	fb02 f303 	mul.w	r3, r2, r3
 8004e12:	1acb      	subs	r3, r1, r3
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e1a:	4b36      	ldr	r3, [pc, #216]	; (8004ef4 <UART_SetConfig+0x2d4>)
 8004e1c:	fba3 2302 	umull	r2, r3, r3, r2
 8004e20:	095b      	lsrs	r3, r3, #5
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e28:	441c      	add	r4, r3
 8004e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e3c:	4642      	mov	r2, r8
 8004e3e:	464b      	mov	r3, r9
 8004e40:	1891      	adds	r1, r2, r2
 8004e42:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e44:	415b      	adcs	r3, r3
 8004e46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e4c:	4641      	mov	r1, r8
 8004e4e:	1851      	adds	r1, r2, r1
 8004e50:	6339      	str	r1, [r7, #48]	; 0x30
 8004e52:	4649      	mov	r1, r9
 8004e54:	414b      	adcs	r3, r1
 8004e56:	637b      	str	r3, [r7, #52]	; 0x34
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e64:	4659      	mov	r1, fp
 8004e66:	00cb      	lsls	r3, r1, #3
 8004e68:	4651      	mov	r1, sl
 8004e6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e6e:	4651      	mov	r1, sl
 8004e70:	00ca      	lsls	r2, r1, #3
 8004e72:	4610      	mov	r0, r2
 8004e74:	4619      	mov	r1, r3
 8004e76:	4603      	mov	r3, r0
 8004e78:	4642      	mov	r2, r8
 8004e7a:	189b      	adds	r3, r3, r2
 8004e7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e80:	464b      	mov	r3, r9
 8004e82:	460a      	mov	r2, r1
 8004e84:	eb42 0303 	adc.w	r3, r2, r3
 8004e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	18db      	adds	r3, r3, r3
 8004ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	eb42 0303 	adc.w	r3, r2, r3
 8004eac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004eb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004eb6:	f7fb fdd9 	bl	8000a6c <__aeabi_uldivmod>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	4b0d      	ldr	r3, [pc, #52]	; (8004ef4 <UART_SetConfig+0x2d4>)
 8004ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ec4:	095b      	lsrs	r3, r3, #5
 8004ec6:	2164      	movs	r1, #100	; 0x64
 8004ec8:	fb01 f303 	mul.w	r3, r1, r3
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	3332      	adds	r3, #50	; 0x32
 8004ed2:	4a08      	ldr	r2, [pc, #32]	; (8004ef4 <UART_SetConfig+0x2d4>)
 8004ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed8:	095b      	lsrs	r3, r3, #5
 8004eda:	f003 0207 	and.w	r2, r3, #7
 8004ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4422      	add	r2, r4
 8004ee6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ee8:	e106      	b.n	80050f8 <UART_SetConfig+0x4d8>
 8004eea:	bf00      	nop
 8004eec:	40011000 	.word	0x40011000
 8004ef0:	40011400 	.word	0x40011400
 8004ef4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004efc:	2200      	movs	r2, #0
 8004efe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f0a:	4642      	mov	r2, r8
 8004f0c:	464b      	mov	r3, r9
 8004f0e:	1891      	adds	r1, r2, r2
 8004f10:	6239      	str	r1, [r7, #32]
 8004f12:	415b      	adcs	r3, r3
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
 8004f16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f1a:	4641      	mov	r1, r8
 8004f1c:	1854      	adds	r4, r2, r1
 8004f1e:	4649      	mov	r1, r9
 8004f20:	eb43 0501 	adc.w	r5, r3, r1
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	00eb      	lsls	r3, r5, #3
 8004f2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f32:	00e2      	lsls	r2, r4, #3
 8004f34:	4614      	mov	r4, r2
 8004f36:	461d      	mov	r5, r3
 8004f38:	4643      	mov	r3, r8
 8004f3a:	18e3      	adds	r3, r4, r3
 8004f3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f40:	464b      	mov	r3, r9
 8004f42:	eb45 0303 	adc.w	r3, r5, r3
 8004f46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f5a:	f04f 0200 	mov.w	r2, #0
 8004f5e:	f04f 0300 	mov.w	r3, #0
 8004f62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f66:	4629      	mov	r1, r5
 8004f68:	008b      	lsls	r3, r1, #2
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f70:	4621      	mov	r1, r4
 8004f72:	008a      	lsls	r2, r1, #2
 8004f74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f78:	f7fb fd78 	bl	8000a6c <__aeabi_uldivmod>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4b60      	ldr	r3, [pc, #384]	; (8005104 <UART_SetConfig+0x4e4>)
 8004f82:	fba3 2302 	umull	r2, r3, r3, r2
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	011c      	lsls	r4, r3, #4
 8004f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f9c:	4642      	mov	r2, r8
 8004f9e:	464b      	mov	r3, r9
 8004fa0:	1891      	adds	r1, r2, r2
 8004fa2:	61b9      	str	r1, [r7, #24]
 8004fa4:	415b      	adcs	r3, r3
 8004fa6:	61fb      	str	r3, [r7, #28]
 8004fa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fac:	4641      	mov	r1, r8
 8004fae:	1851      	adds	r1, r2, r1
 8004fb0:	6139      	str	r1, [r7, #16]
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	414b      	adcs	r3, r1
 8004fb6:	617b      	str	r3, [r7, #20]
 8004fb8:	f04f 0200 	mov.w	r2, #0
 8004fbc:	f04f 0300 	mov.w	r3, #0
 8004fc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fc4:	4659      	mov	r1, fp
 8004fc6:	00cb      	lsls	r3, r1, #3
 8004fc8:	4651      	mov	r1, sl
 8004fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fce:	4651      	mov	r1, sl
 8004fd0:	00ca      	lsls	r2, r1, #3
 8004fd2:	4610      	mov	r0, r2
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	4642      	mov	r2, r8
 8004fda:	189b      	adds	r3, r3, r2
 8004fdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fe0:	464b      	mov	r3, r9
 8004fe2:	460a      	mov	r2, r1
 8004fe4:	eb42 0303 	adc.w	r3, r2, r3
 8004fe8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ff6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005004:	4649      	mov	r1, r9
 8005006:	008b      	lsls	r3, r1, #2
 8005008:	4641      	mov	r1, r8
 800500a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800500e:	4641      	mov	r1, r8
 8005010:	008a      	lsls	r2, r1, #2
 8005012:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005016:	f7fb fd29 	bl	8000a6c <__aeabi_uldivmod>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4611      	mov	r1, r2
 8005020:	4b38      	ldr	r3, [pc, #224]	; (8005104 <UART_SetConfig+0x4e4>)
 8005022:	fba3 2301 	umull	r2, r3, r3, r1
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	2264      	movs	r2, #100	; 0x64
 800502a:	fb02 f303 	mul.w	r3, r2, r3
 800502e:	1acb      	subs	r3, r1, r3
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	3332      	adds	r3, #50	; 0x32
 8005034:	4a33      	ldr	r2, [pc, #204]	; (8005104 <UART_SetConfig+0x4e4>)
 8005036:	fba2 2303 	umull	r2, r3, r2, r3
 800503a:	095b      	lsrs	r3, r3, #5
 800503c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005040:	441c      	add	r4, r3
 8005042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005046:	2200      	movs	r2, #0
 8005048:	673b      	str	r3, [r7, #112]	; 0x70
 800504a:	677a      	str	r2, [r7, #116]	; 0x74
 800504c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005050:	4642      	mov	r2, r8
 8005052:	464b      	mov	r3, r9
 8005054:	1891      	adds	r1, r2, r2
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	415b      	adcs	r3, r3
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005060:	4641      	mov	r1, r8
 8005062:	1851      	adds	r1, r2, r1
 8005064:	6039      	str	r1, [r7, #0]
 8005066:	4649      	mov	r1, r9
 8005068:	414b      	adcs	r3, r1
 800506a:	607b      	str	r3, [r7, #4]
 800506c:	f04f 0200 	mov.w	r2, #0
 8005070:	f04f 0300 	mov.w	r3, #0
 8005074:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005078:	4659      	mov	r1, fp
 800507a:	00cb      	lsls	r3, r1, #3
 800507c:	4651      	mov	r1, sl
 800507e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005082:	4651      	mov	r1, sl
 8005084:	00ca      	lsls	r2, r1, #3
 8005086:	4610      	mov	r0, r2
 8005088:	4619      	mov	r1, r3
 800508a:	4603      	mov	r3, r0
 800508c:	4642      	mov	r2, r8
 800508e:	189b      	adds	r3, r3, r2
 8005090:	66bb      	str	r3, [r7, #104]	; 0x68
 8005092:	464b      	mov	r3, r9
 8005094:	460a      	mov	r2, r1
 8005096:	eb42 0303 	adc.w	r3, r2, r3
 800509a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	663b      	str	r3, [r7, #96]	; 0x60
 80050a6:	667a      	str	r2, [r7, #100]	; 0x64
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	f04f 0300 	mov.w	r3, #0
 80050b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80050b4:	4649      	mov	r1, r9
 80050b6:	008b      	lsls	r3, r1, #2
 80050b8:	4641      	mov	r1, r8
 80050ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050be:	4641      	mov	r1, r8
 80050c0:	008a      	lsls	r2, r1, #2
 80050c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80050c6:	f7fb fcd1 	bl	8000a6c <__aeabi_uldivmod>
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	4b0d      	ldr	r3, [pc, #52]	; (8005104 <UART_SetConfig+0x4e4>)
 80050d0:	fba3 1302 	umull	r1, r3, r3, r2
 80050d4:	095b      	lsrs	r3, r3, #5
 80050d6:	2164      	movs	r1, #100	; 0x64
 80050d8:	fb01 f303 	mul.w	r3, r1, r3
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	3332      	adds	r3, #50	; 0x32
 80050e2:	4a08      	ldr	r2, [pc, #32]	; (8005104 <UART_SetConfig+0x4e4>)
 80050e4:	fba2 2303 	umull	r2, r3, r2, r3
 80050e8:	095b      	lsrs	r3, r3, #5
 80050ea:	f003 020f 	and.w	r2, r3, #15
 80050ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4422      	add	r2, r4
 80050f6:	609a      	str	r2, [r3, #8]
}
 80050f8:	bf00      	nop
 80050fa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050fe:	46bd      	mov	sp, r7
 8005100:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005104:	51eb851f 	.word	0x51eb851f

08005108 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005108:	b084      	sub	sp, #16
 800510a:	b580      	push	{r7, lr}
 800510c:	b084      	sub	sp, #16
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	f107 001c 	add.w	r0, r7, #28
 8005116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800511a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800511e:	2b01      	cmp	r3, #1
 8005120:	d123      	bne.n	800516a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005126:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800514a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800514e:	2b01      	cmp	r3, #1
 8005150:	d105      	bne.n	800515e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 faa0 	bl	80056a4 <USB_CoreReset>
 8005164:	4603      	mov	r3, r0
 8005166:	73fb      	strb	r3, [r7, #15]
 8005168:	e01b      	b.n	80051a2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fa94 	bl	80056a4 <USB_CoreReset>
 800517c:	4603      	mov	r3, r0
 800517e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005180:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005184:	2b00      	cmp	r3, #0
 8005186:	d106      	bne.n	8005196 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	639a      	str	r2, [r3, #56]	; 0x38
 8005194:	e005      	b.n	80051a2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80051a2:	7fbb      	ldrb	r3, [r7, #30]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d10b      	bne.n	80051c0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f043 0206 	orr.w	r2, r3, #6
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f043 0220 	orr.w	r2, r3, #32
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051cc:	b004      	add	sp, #16
 80051ce:	4770      	bx	lr

080051d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f023 0201 	bic.w	r2, r3, #1
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b084      	sub	sp, #16
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	460b      	mov	r3, r1
 80051fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800520e:	78fb      	ldrb	r3, [r7, #3]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d115      	bne.n	8005240 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005220:	200a      	movs	r0, #10
 8005222:	f7fc fe9b 	bl	8001f5c <HAL_Delay>
      ms += 10U;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	330a      	adds	r3, #10
 800522a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fa2b 	bl	8005688 <USB_GetMode>
 8005232:	4603      	mov	r3, r0
 8005234:	2b01      	cmp	r3, #1
 8005236:	d01e      	beq.n	8005276 <USB_SetCurrentMode+0x84>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2bc7      	cmp	r3, #199	; 0xc7
 800523c:	d9f0      	bls.n	8005220 <USB_SetCurrentMode+0x2e>
 800523e:	e01a      	b.n	8005276 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005240:	78fb      	ldrb	r3, [r7, #3]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d115      	bne.n	8005272 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005252:	200a      	movs	r0, #10
 8005254:	f7fc fe82 	bl	8001f5c <HAL_Delay>
      ms += 10U;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	330a      	adds	r3, #10
 800525c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fa12 	bl	8005688 <USB_GetMode>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d005      	beq.n	8005276 <USB_SetCurrentMode+0x84>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2bc7      	cmp	r3, #199	; 0xc7
 800526e:	d9f0      	bls.n	8005252 <USB_SetCurrentMode+0x60>
 8005270:	e001      	b.n	8005276 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e005      	b.n	8005282 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2bc8      	cmp	r3, #200	; 0xc8
 800527a:	d101      	bne.n	8005280 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e000      	b.n	8005282 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800528c:	b084      	sub	sp, #16
 800528e:	b580      	push	{r7, lr}
 8005290:	b086      	sub	sp, #24
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800529a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80052a6:	2300      	movs	r3, #0
 80052a8:	613b      	str	r3, [r7, #16]
 80052aa:	e009      	b.n	80052c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	3340      	adds	r3, #64	; 0x40
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	2200      	movs	r2, #0
 80052b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	3301      	adds	r3, #1
 80052be:	613b      	str	r3, [r7, #16]
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	2b0e      	cmp	r3, #14
 80052c4:	d9f2      	bls.n	80052ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80052c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d11c      	bne.n	8005308 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052dc:	f043 0302 	orr.w	r3, r3, #2
 80052e0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	639a      	str	r2, [r3, #56]	; 0x38
 8005306:	e00b      	b.n	8005320 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005318:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005326:	461a      	mov	r2, r3
 8005328:	2300      	movs	r3, #0
 800532a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800532c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005330:	2b01      	cmp	r3, #1
 8005332:	d10d      	bne.n	8005350 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005338:	2b00      	cmp	r3, #0
 800533a:	d104      	bne.n	8005346 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800533c:	2100      	movs	r1, #0
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f968 	bl	8005614 <USB_SetDevSpeed>
 8005344:	e008      	b.n	8005358 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005346:	2101      	movs	r1, #1
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f963 	bl	8005614 <USB_SetDevSpeed>
 800534e:	e003      	b.n	8005358 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005350:	2103      	movs	r1, #3
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f95e 	bl	8005614 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005358:	2110      	movs	r1, #16
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f8fa 	bl	8005554 <USB_FlushTxFifo>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f924 	bl	80055b8 <USB_FlushRxFifo>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005380:	461a      	mov	r2, r3
 8005382:	2300      	movs	r3, #0
 8005384:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538c:	461a      	mov	r2, r3
 800538e:	2300      	movs	r3, #0
 8005390:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005398:	461a      	mov	r2, r3
 800539a:	2300      	movs	r3, #0
 800539c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800539e:	2300      	movs	r3, #0
 80053a0:	613b      	str	r3, [r7, #16]
 80053a2:	e043      	b.n	800542c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053ba:	d118      	bne.n	80053ee <USB_DevInit+0x162>
    {
      if (i == 0U)
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10a      	bne.n	80053d8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ce:	461a      	mov	r2, r3
 80053d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	e013      	b.n	8005400 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e4:	461a      	mov	r2, r3
 80053e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053ea:	6013      	str	r3, [r2, #0]
 80053ec:	e008      	b.n	8005400 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fa:	461a      	mov	r2, r3
 80053fc:	2300      	movs	r3, #0
 80053fe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540c:	461a      	mov	r2, r3
 800540e:	2300      	movs	r3, #0
 8005410:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541e:	461a      	mov	r2, r3
 8005420:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005424:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	3301      	adds	r3, #1
 800542a:	613b      	str	r3, [r7, #16]
 800542c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005430:	461a      	mov	r2, r3
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	4293      	cmp	r3, r2
 8005436:	d3b5      	bcc.n	80053a4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005438:	2300      	movs	r3, #0
 800543a:	613b      	str	r3, [r7, #16]
 800543c:	e043      	b.n	80054c6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4413      	add	r3, r2
 8005446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005450:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005454:	d118      	bne.n	8005488 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10a      	bne.n	8005472 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005468:	461a      	mov	r2, r3
 800546a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800546e:	6013      	str	r3, [r2, #0]
 8005470:	e013      	b.n	800549a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547e:	461a      	mov	r2, r3
 8005480:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	e008      	b.n	800549a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005494:	461a      	mov	r2, r3
 8005496:	2300      	movs	r3, #0
 8005498:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a6:	461a      	mov	r2, r3
 80054a8:	2300      	movs	r3, #0
 80054aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b8:	461a      	mov	r2, r3
 80054ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	3301      	adds	r3, #1
 80054c4:	613b      	str	r3, [r7, #16]
 80054c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80054ca:	461a      	mov	r2, r3
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d3b5      	bcc.n	800543e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054e4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80054f2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d105      	bne.n	8005508 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	f043 0210 	orr.w	r2, r3, #16
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699a      	ldr	r2, [r3, #24]
 800550c:	4b10      	ldr	r3, [pc, #64]	; (8005550 <USB_DevInit+0x2c4>)
 800550e:	4313      	orrs	r3, r2
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005514:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005518:	2b00      	cmp	r3, #0
 800551a:	d005      	beq.n	8005528 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	f043 0208 	orr.w	r2, r3, #8
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005528:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800552c:	2b01      	cmp	r3, #1
 800552e:	d107      	bne.n	8005540 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005538:	f043 0304 	orr.w	r3, r3, #4
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005540:	7dfb      	ldrb	r3, [r7, #23]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3718      	adds	r7, #24
 8005546:	46bd      	mov	sp, r7
 8005548:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800554c:	b004      	add	sp, #16
 800554e:	4770      	bx	lr
 8005550:	803c3800 	.word	0x803c3800

08005554 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800555e:	2300      	movs	r3, #0
 8005560:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	3301      	adds	r3, #1
 8005566:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800556e:	d901      	bls.n	8005574 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e01b      	b.n	80055ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	daf2      	bge.n	8005562 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800557c:	2300      	movs	r3, #0
 800557e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	019b      	lsls	r3, r3, #6
 8005584:	f043 0220 	orr.w	r2, r3, #32
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	3301      	adds	r3, #1
 8005590:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005598:	d901      	bls.n	800559e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e006      	b.n	80055ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f003 0320 	and.w	r3, r3, #32
 80055a6:	2b20      	cmp	r3, #32
 80055a8:	d0f0      	beq.n	800558c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3301      	adds	r3, #1
 80055c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80055d0:	d901      	bls.n	80055d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e018      	b.n	8005608 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	daf2      	bge.n	80055c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2210      	movs	r2, #16
 80055e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	3301      	adds	r3, #1
 80055ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80055f4:	d901      	bls.n	80055fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e006      	b.n	8005608 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	f003 0310 	and.w	r3, r3, #16
 8005602:	2b10      	cmp	r3, #16
 8005604:	d0f0      	beq.n	80055e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	460b      	mov	r3, r1
 800561e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	78fb      	ldrb	r3, [r7, #3]
 800562e:	68f9      	ldr	r1, [r7, #12]
 8005630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005634:	4313      	orrs	r3, r2
 8005636:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005646:	b480      	push	{r7}
 8005648:	b085      	sub	sp, #20
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005660:	f023 0303 	bic.w	r3, r3, #3
 8005664:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005674:	f043 0302 	orr.w	r3, r3, #2
 8005678:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	f003 0301 	and.w	r3, r3, #1
}
 8005698:	4618      	mov	r0, r3
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056ac:	2300      	movs	r3, #0
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3301      	adds	r3, #1
 80056b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80056bc:	d901      	bls.n	80056c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e01b      	b.n	80056fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	daf2      	bge.n	80056b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f043 0201 	orr.w	r2, r3, #1
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	3301      	adds	r3, #1
 80056de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80056e6:	d901      	bls.n	80056ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e006      	b.n	80056fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d0f0      	beq.n	80056da <USB_CoreReset+0x36>

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
	...

08005708 <siprintf>:
 8005708:	b40e      	push	{r1, r2, r3}
 800570a:	b500      	push	{lr}
 800570c:	b09c      	sub	sp, #112	; 0x70
 800570e:	ab1d      	add	r3, sp, #116	; 0x74
 8005710:	9002      	str	r0, [sp, #8]
 8005712:	9006      	str	r0, [sp, #24]
 8005714:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005718:	4809      	ldr	r0, [pc, #36]	; (8005740 <siprintf+0x38>)
 800571a:	9107      	str	r1, [sp, #28]
 800571c:	9104      	str	r1, [sp, #16]
 800571e:	4909      	ldr	r1, [pc, #36]	; (8005744 <siprintf+0x3c>)
 8005720:	f853 2b04 	ldr.w	r2, [r3], #4
 8005724:	9105      	str	r1, [sp, #20]
 8005726:	6800      	ldr	r0, [r0, #0]
 8005728:	9301      	str	r3, [sp, #4]
 800572a:	a902      	add	r1, sp, #8
 800572c:	f000 f992 	bl	8005a54 <_svfiprintf_r>
 8005730:	9b02      	ldr	r3, [sp, #8]
 8005732:	2200      	movs	r2, #0
 8005734:	701a      	strb	r2, [r3, #0]
 8005736:	b01c      	add	sp, #112	; 0x70
 8005738:	f85d eb04 	ldr.w	lr, [sp], #4
 800573c:	b003      	add	sp, #12
 800573e:	4770      	bx	lr
 8005740:	20000058 	.word	0x20000058
 8005744:	ffff0208 	.word	0xffff0208

08005748 <memset>:
 8005748:	4402      	add	r2, r0
 800574a:	4603      	mov	r3, r0
 800574c:	4293      	cmp	r3, r2
 800574e:	d100      	bne.n	8005752 <memset+0xa>
 8005750:	4770      	bx	lr
 8005752:	f803 1b01 	strb.w	r1, [r3], #1
 8005756:	e7f9      	b.n	800574c <memset+0x4>

08005758 <__errno>:
 8005758:	4b01      	ldr	r3, [pc, #4]	; (8005760 <__errno+0x8>)
 800575a:	6818      	ldr	r0, [r3, #0]
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	20000058 	.word	0x20000058

08005764 <__libc_init_array>:
 8005764:	b570      	push	{r4, r5, r6, lr}
 8005766:	4d0d      	ldr	r5, [pc, #52]	; (800579c <__libc_init_array+0x38>)
 8005768:	4c0d      	ldr	r4, [pc, #52]	; (80057a0 <__libc_init_array+0x3c>)
 800576a:	1b64      	subs	r4, r4, r5
 800576c:	10a4      	asrs	r4, r4, #2
 800576e:	2600      	movs	r6, #0
 8005770:	42a6      	cmp	r6, r4
 8005772:	d109      	bne.n	8005788 <__libc_init_array+0x24>
 8005774:	4d0b      	ldr	r5, [pc, #44]	; (80057a4 <__libc_init_array+0x40>)
 8005776:	4c0c      	ldr	r4, [pc, #48]	; (80057a8 <__libc_init_array+0x44>)
 8005778:	f000 fc6a 	bl	8006050 <_init>
 800577c:	1b64      	subs	r4, r4, r5
 800577e:	10a4      	asrs	r4, r4, #2
 8005780:	2600      	movs	r6, #0
 8005782:	42a6      	cmp	r6, r4
 8005784:	d105      	bne.n	8005792 <__libc_init_array+0x2e>
 8005786:	bd70      	pop	{r4, r5, r6, pc}
 8005788:	f855 3b04 	ldr.w	r3, [r5], #4
 800578c:	4798      	blx	r3
 800578e:	3601      	adds	r6, #1
 8005790:	e7ee      	b.n	8005770 <__libc_init_array+0xc>
 8005792:	f855 3b04 	ldr.w	r3, [r5], #4
 8005796:	4798      	blx	r3
 8005798:	3601      	adds	r6, #1
 800579a:	e7f2      	b.n	8005782 <__libc_init_array+0x1e>
 800579c:	080060d8 	.word	0x080060d8
 80057a0:	080060d8 	.word	0x080060d8
 80057a4:	080060d8 	.word	0x080060d8
 80057a8:	080060dc 	.word	0x080060dc

080057ac <__retarget_lock_acquire_recursive>:
 80057ac:	4770      	bx	lr

080057ae <__retarget_lock_release_recursive>:
 80057ae:	4770      	bx	lr

080057b0 <_free_r>:
 80057b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057b2:	2900      	cmp	r1, #0
 80057b4:	d044      	beq.n	8005840 <_free_r+0x90>
 80057b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057ba:	9001      	str	r0, [sp, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f1a1 0404 	sub.w	r4, r1, #4
 80057c2:	bfb8      	it	lt
 80057c4:	18e4      	addlt	r4, r4, r3
 80057c6:	f000 f8df 	bl	8005988 <__malloc_lock>
 80057ca:	4a1e      	ldr	r2, [pc, #120]	; (8005844 <_free_r+0x94>)
 80057cc:	9801      	ldr	r0, [sp, #4]
 80057ce:	6813      	ldr	r3, [r2, #0]
 80057d0:	b933      	cbnz	r3, 80057e0 <_free_r+0x30>
 80057d2:	6063      	str	r3, [r4, #4]
 80057d4:	6014      	str	r4, [r2, #0]
 80057d6:	b003      	add	sp, #12
 80057d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057dc:	f000 b8da 	b.w	8005994 <__malloc_unlock>
 80057e0:	42a3      	cmp	r3, r4
 80057e2:	d908      	bls.n	80057f6 <_free_r+0x46>
 80057e4:	6825      	ldr	r5, [r4, #0]
 80057e6:	1961      	adds	r1, r4, r5
 80057e8:	428b      	cmp	r3, r1
 80057ea:	bf01      	itttt	eq
 80057ec:	6819      	ldreq	r1, [r3, #0]
 80057ee:	685b      	ldreq	r3, [r3, #4]
 80057f0:	1949      	addeq	r1, r1, r5
 80057f2:	6021      	streq	r1, [r4, #0]
 80057f4:	e7ed      	b.n	80057d2 <_free_r+0x22>
 80057f6:	461a      	mov	r2, r3
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	b10b      	cbz	r3, 8005800 <_free_r+0x50>
 80057fc:	42a3      	cmp	r3, r4
 80057fe:	d9fa      	bls.n	80057f6 <_free_r+0x46>
 8005800:	6811      	ldr	r1, [r2, #0]
 8005802:	1855      	adds	r5, r2, r1
 8005804:	42a5      	cmp	r5, r4
 8005806:	d10b      	bne.n	8005820 <_free_r+0x70>
 8005808:	6824      	ldr	r4, [r4, #0]
 800580a:	4421      	add	r1, r4
 800580c:	1854      	adds	r4, r2, r1
 800580e:	42a3      	cmp	r3, r4
 8005810:	6011      	str	r1, [r2, #0]
 8005812:	d1e0      	bne.n	80057d6 <_free_r+0x26>
 8005814:	681c      	ldr	r4, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	6053      	str	r3, [r2, #4]
 800581a:	440c      	add	r4, r1
 800581c:	6014      	str	r4, [r2, #0]
 800581e:	e7da      	b.n	80057d6 <_free_r+0x26>
 8005820:	d902      	bls.n	8005828 <_free_r+0x78>
 8005822:	230c      	movs	r3, #12
 8005824:	6003      	str	r3, [r0, #0]
 8005826:	e7d6      	b.n	80057d6 <_free_r+0x26>
 8005828:	6825      	ldr	r5, [r4, #0]
 800582a:	1961      	adds	r1, r4, r5
 800582c:	428b      	cmp	r3, r1
 800582e:	bf04      	itt	eq
 8005830:	6819      	ldreq	r1, [r3, #0]
 8005832:	685b      	ldreq	r3, [r3, #4]
 8005834:	6063      	str	r3, [r4, #4]
 8005836:	bf04      	itt	eq
 8005838:	1949      	addeq	r1, r1, r5
 800583a:	6021      	streq	r1, [r4, #0]
 800583c:	6054      	str	r4, [r2, #4]
 800583e:	e7ca      	b.n	80057d6 <_free_r+0x26>
 8005840:	b003      	add	sp, #12
 8005842:	bd30      	pop	{r4, r5, pc}
 8005844:	200009c8 	.word	0x200009c8

08005848 <sbrk_aligned>:
 8005848:	b570      	push	{r4, r5, r6, lr}
 800584a:	4e0e      	ldr	r6, [pc, #56]	; (8005884 <sbrk_aligned+0x3c>)
 800584c:	460c      	mov	r4, r1
 800584e:	6831      	ldr	r1, [r6, #0]
 8005850:	4605      	mov	r5, r0
 8005852:	b911      	cbnz	r1, 800585a <sbrk_aligned+0x12>
 8005854:	f000 fba6 	bl	8005fa4 <_sbrk_r>
 8005858:	6030      	str	r0, [r6, #0]
 800585a:	4621      	mov	r1, r4
 800585c:	4628      	mov	r0, r5
 800585e:	f000 fba1 	bl	8005fa4 <_sbrk_r>
 8005862:	1c43      	adds	r3, r0, #1
 8005864:	d00a      	beq.n	800587c <sbrk_aligned+0x34>
 8005866:	1cc4      	adds	r4, r0, #3
 8005868:	f024 0403 	bic.w	r4, r4, #3
 800586c:	42a0      	cmp	r0, r4
 800586e:	d007      	beq.n	8005880 <sbrk_aligned+0x38>
 8005870:	1a21      	subs	r1, r4, r0
 8005872:	4628      	mov	r0, r5
 8005874:	f000 fb96 	bl	8005fa4 <_sbrk_r>
 8005878:	3001      	adds	r0, #1
 800587a:	d101      	bne.n	8005880 <sbrk_aligned+0x38>
 800587c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005880:	4620      	mov	r0, r4
 8005882:	bd70      	pop	{r4, r5, r6, pc}
 8005884:	200009cc 	.word	0x200009cc

08005888 <_malloc_r>:
 8005888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800588c:	1ccd      	adds	r5, r1, #3
 800588e:	f025 0503 	bic.w	r5, r5, #3
 8005892:	3508      	adds	r5, #8
 8005894:	2d0c      	cmp	r5, #12
 8005896:	bf38      	it	cc
 8005898:	250c      	movcc	r5, #12
 800589a:	2d00      	cmp	r5, #0
 800589c:	4607      	mov	r7, r0
 800589e:	db01      	blt.n	80058a4 <_malloc_r+0x1c>
 80058a0:	42a9      	cmp	r1, r5
 80058a2:	d905      	bls.n	80058b0 <_malloc_r+0x28>
 80058a4:	230c      	movs	r3, #12
 80058a6:	603b      	str	r3, [r7, #0]
 80058a8:	2600      	movs	r6, #0
 80058aa:	4630      	mov	r0, r6
 80058ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005984 <_malloc_r+0xfc>
 80058b4:	f000 f868 	bl	8005988 <__malloc_lock>
 80058b8:	f8d8 3000 	ldr.w	r3, [r8]
 80058bc:	461c      	mov	r4, r3
 80058be:	bb5c      	cbnz	r4, 8005918 <_malloc_r+0x90>
 80058c0:	4629      	mov	r1, r5
 80058c2:	4638      	mov	r0, r7
 80058c4:	f7ff ffc0 	bl	8005848 <sbrk_aligned>
 80058c8:	1c43      	adds	r3, r0, #1
 80058ca:	4604      	mov	r4, r0
 80058cc:	d155      	bne.n	800597a <_malloc_r+0xf2>
 80058ce:	f8d8 4000 	ldr.w	r4, [r8]
 80058d2:	4626      	mov	r6, r4
 80058d4:	2e00      	cmp	r6, #0
 80058d6:	d145      	bne.n	8005964 <_malloc_r+0xdc>
 80058d8:	2c00      	cmp	r4, #0
 80058da:	d048      	beq.n	800596e <_malloc_r+0xe6>
 80058dc:	6823      	ldr	r3, [r4, #0]
 80058de:	4631      	mov	r1, r6
 80058e0:	4638      	mov	r0, r7
 80058e2:	eb04 0903 	add.w	r9, r4, r3
 80058e6:	f000 fb5d 	bl	8005fa4 <_sbrk_r>
 80058ea:	4581      	cmp	r9, r0
 80058ec:	d13f      	bne.n	800596e <_malloc_r+0xe6>
 80058ee:	6821      	ldr	r1, [r4, #0]
 80058f0:	1a6d      	subs	r5, r5, r1
 80058f2:	4629      	mov	r1, r5
 80058f4:	4638      	mov	r0, r7
 80058f6:	f7ff ffa7 	bl	8005848 <sbrk_aligned>
 80058fa:	3001      	adds	r0, #1
 80058fc:	d037      	beq.n	800596e <_malloc_r+0xe6>
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	442b      	add	r3, r5
 8005902:	6023      	str	r3, [r4, #0]
 8005904:	f8d8 3000 	ldr.w	r3, [r8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d038      	beq.n	800597e <_malloc_r+0xf6>
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	42a2      	cmp	r2, r4
 8005910:	d12b      	bne.n	800596a <_malloc_r+0xe2>
 8005912:	2200      	movs	r2, #0
 8005914:	605a      	str	r2, [r3, #4]
 8005916:	e00f      	b.n	8005938 <_malloc_r+0xb0>
 8005918:	6822      	ldr	r2, [r4, #0]
 800591a:	1b52      	subs	r2, r2, r5
 800591c:	d41f      	bmi.n	800595e <_malloc_r+0xd6>
 800591e:	2a0b      	cmp	r2, #11
 8005920:	d917      	bls.n	8005952 <_malloc_r+0xca>
 8005922:	1961      	adds	r1, r4, r5
 8005924:	42a3      	cmp	r3, r4
 8005926:	6025      	str	r5, [r4, #0]
 8005928:	bf18      	it	ne
 800592a:	6059      	strne	r1, [r3, #4]
 800592c:	6863      	ldr	r3, [r4, #4]
 800592e:	bf08      	it	eq
 8005930:	f8c8 1000 	streq.w	r1, [r8]
 8005934:	5162      	str	r2, [r4, r5]
 8005936:	604b      	str	r3, [r1, #4]
 8005938:	4638      	mov	r0, r7
 800593a:	f104 060b 	add.w	r6, r4, #11
 800593e:	f000 f829 	bl	8005994 <__malloc_unlock>
 8005942:	f026 0607 	bic.w	r6, r6, #7
 8005946:	1d23      	adds	r3, r4, #4
 8005948:	1af2      	subs	r2, r6, r3
 800594a:	d0ae      	beq.n	80058aa <_malloc_r+0x22>
 800594c:	1b9b      	subs	r3, r3, r6
 800594e:	50a3      	str	r3, [r4, r2]
 8005950:	e7ab      	b.n	80058aa <_malloc_r+0x22>
 8005952:	42a3      	cmp	r3, r4
 8005954:	6862      	ldr	r2, [r4, #4]
 8005956:	d1dd      	bne.n	8005914 <_malloc_r+0x8c>
 8005958:	f8c8 2000 	str.w	r2, [r8]
 800595c:	e7ec      	b.n	8005938 <_malloc_r+0xb0>
 800595e:	4623      	mov	r3, r4
 8005960:	6864      	ldr	r4, [r4, #4]
 8005962:	e7ac      	b.n	80058be <_malloc_r+0x36>
 8005964:	4634      	mov	r4, r6
 8005966:	6876      	ldr	r6, [r6, #4]
 8005968:	e7b4      	b.n	80058d4 <_malloc_r+0x4c>
 800596a:	4613      	mov	r3, r2
 800596c:	e7cc      	b.n	8005908 <_malloc_r+0x80>
 800596e:	230c      	movs	r3, #12
 8005970:	603b      	str	r3, [r7, #0]
 8005972:	4638      	mov	r0, r7
 8005974:	f000 f80e 	bl	8005994 <__malloc_unlock>
 8005978:	e797      	b.n	80058aa <_malloc_r+0x22>
 800597a:	6025      	str	r5, [r4, #0]
 800597c:	e7dc      	b.n	8005938 <_malloc_r+0xb0>
 800597e:	605b      	str	r3, [r3, #4]
 8005980:	deff      	udf	#255	; 0xff
 8005982:	bf00      	nop
 8005984:	200009c8 	.word	0x200009c8

08005988 <__malloc_lock>:
 8005988:	4801      	ldr	r0, [pc, #4]	; (8005990 <__malloc_lock+0x8>)
 800598a:	f7ff bf0f 	b.w	80057ac <__retarget_lock_acquire_recursive>
 800598e:	bf00      	nop
 8005990:	200009c4 	.word	0x200009c4

08005994 <__malloc_unlock>:
 8005994:	4801      	ldr	r0, [pc, #4]	; (800599c <__malloc_unlock+0x8>)
 8005996:	f7ff bf0a 	b.w	80057ae <__retarget_lock_release_recursive>
 800599a:	bf00      	nop
 800599c:	200009c4 	.word	0x200009c4

080059a0 <__ssputs_r>:
 80059a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059a4:	688e      	ldr	r6, [r1, #8]
 80059a6:	461f      	mov	r7, r3
 80059a8:	42be      	cmp	r6, r7
 80059aa:	680b      	ldr	r3, [r1, #0]
 80059ac:	4682      	mov	sl, r0
 80059ae:	460c      	mov	r4, r1
 80059b0:	4690      	mov	r8, r2
 80059b2:	d82c      	bhi.n	8005a0e <__ssputs_r+0x6e>
 80059b4:	898a      	ldrh	r2, [r1, #12]
 80059b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059ba:	d026      	beq.n	8005a0a <__ssputs_r+0x6a>
 80059bc:	6965      	ldr	r5, [r4, #20]
 80059be:	6909      	ldr	r1, [r1, #16]
 80059c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059c4:	eba3 0901 	sub.w	r9, r3, r1
 80059c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059cc:	1c7b      	adds	r3, r7, #1
 80059ce:	444b      	add	r3, r9
 80059d0:	106d      	asrs	r5, r5, #1
 80059d2:	429d      	cmp	r5, r3
 80059d4:	bf38      	it	cc
 80059d6:	461d      	movcc	r5, r3
 80059d8:	0553      	lsls	r3, r2, #21
 80059da:	d527      	bpl.n	8005a2c <__ssputs_r+0x8c>
 80059dc:	4629      	mov	r1, r5
 80059de:	f7ff ff53 	bl	8005888 <_malloc_r>
 80059e2:	4606      	mov	r6, r0
 80059e4:	b360      	cbz	r0, 8005a40 <__ssputs_r+0xa0>
 80059e6:	6921      	ldr	r1, [r4, #16]
 80059e8:	464a      	mov	r2, r9
 80059ea:	f000 faeb 	bl	8005fc4 <memcpy>
 80059ee:	89a3      	ldrh	r3, [r4, #12]
 80059f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059f8:	81a3      	strh	r3, [r4, #12]
 80059fa:	6126      	str	r6, [r4, #16]
 80059fc:	6165      	str	r5, [r4, #20]
 80059fe:	444e      	add	r6, r9
 8005a00:	eba5 0509 	sub.w	r5, r5, r9
 8005a04:	6026      	str	r6, [r4, #0]
 8005a06:	60a5      	str	r5, [r4, #8]
 8005a08:	463e      	mov	r6, r7
 8005a0a:	42be      	cmp	r6, r7
 8005a0c:	d900      	bls.n	8005a10 <__ssputs_r+0x70>
 8005a0e:	463e      	mov	r6, r7
 8005a10:	6820      	ldr	r0, [r4, #0]
 8005a12:	4632      	mov	r2, r6
 8005a14:	4641      	mov	r1, r8
 8005a16:	f000 faab 	bl	8005f70 <memmove>
 8005a1a:	68a3      	ldr	r3, [r4, #8]
 8005a1c:	1b9b      	subs	r3, r3, r6
 8005a1e:	60a3      	str	r3, [r4, #8]
 8005a20:	6823      	ldr	r3, [r4, #0]
 8005a22:	4433      	add	r3, r6
 8005a24:	6023      	str	r3, [r4, #0]
 8005a26:	2000      	movs	r0, #0
 8005a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a2c:	462a      	mov	r2, r5
 8005a2e:	f000 fad7 	bl	8005fe0 <_realloc_r>
 8005a32:	4606      	mov	r6, r0
 8005a34:	2800      	cmp	r0, #0
 8005a36:	d1e0      	bne.n	80059fa <__ssputs_r+0x5a>
 8005a38:	6921      	ldr	r1, [r4, #16]
 8005a3a:	4650      	mov	r0, sl
 8005a3c:	f7ff feb8 	bl	80057b0 <_free_r>
 8005a40:	230c      	movs	r3, #12
 8005a42:	f8ca 3000 	str.w	r3, [sl]
 8005a46:	89a3      	ldrh	r3, [r4, #12]
 8005a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a4c:	81a3      	strh	r3, [r4, #12]
 8005a4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a52:	e7e9      	b.n	8005a28 <__ssputs_r+0x88>

08005a54 <_svfiprintf_r>:
 8005a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a58:	4698      	mov	r8, r3
 8005a5a:	898b      	ldrh	r3, [r1, #12]
 8005a5c:	061b      	lsls	r3, r3, #24
 8005a5e:	b09d      	sub	sp, #116	; 0x74
 8005a60:	4607      	mov	r7, r0
 8005a62:	460d      	mov	r5, r1
 8005a64:	4614      	mov	r4, r2
 8005a66:	d50e      	bpl.n	8005a86 <_svfiprintf_r+0x32>
 8005a68:	690b      	ldr	r3, [r1, #16]
 8005a6a:	b963      	cbnz	r3, 8005a86 <_svfiprintf_r+0x32>
 8005a6c:	2140      	movs	r1, #64	; 0x40
 8005a6e:	f7ff ff0b 	bl	8005888 <_malloc_r>
 8005a72:	6028      	str	r0, [r5, #0]
 8005a74:	6128      	str	r0, [r5, #16]
 8005a76:	b920      	cbnz	r0, 8005a82 <_svfiprintf_r+0x2e>
 8005a78:	230c      	movs	r3, #12
 8005a7a:	603b      	str	r3, [r7, #0]
 8005a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a80:	e0d0      	b.n	8005c24 <_svfiprintf_r+0x1d0>
 8005a82:	2340      	movs	r3, #64	; 0x40
 8005a84:	616b      	str	r3, [r5, #20]
 8005a86:	2300      	movs	r3, #0
 8005a88:	9309      	str	r3, [sp, #36]	; 0x24
 8005a8a:	2320      	movs	r3, #32
 8005a8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a90:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a94:	2330      	movs	r3, #48	; 0x30
 8005a96:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005c3c <_svfiprintf_r+0x1e8>
 8005a9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a9e:	f04f 0901 	mov.w	r9, #1
 8005aa2:	4623      	mov	r3, r4
 8005aa4:	469a      	mov	sl, r3
 8005aa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005aaa:	b10a      	cbz	r2, 8005ab0 <_svfiprintf_r+0x5c>
 8005aac:	2a25      	cmp	r2, #37	; 0x25
 8005aae:	d1f9      	bne.n	8005aa4 <_svfiprintf_r+0x50>
 8005ab0:	ebba 0b04 	subs.w	fp, sl, r4
 8005ab4:	d00b      	beq.n	8005ace <_svfiprintf_r+0x7a>
 8005ab6:	465b      	mov	r3, fp
 8005ab8:	4622      	mov	r2, r4
 8005aba:	4629      	mov	r1, r5
 8005abc:	4638      	mov	r0, r7
 8005abe:	f7ff ff6f 	bl	80059a0 <__ssputs_r>
 8005ac2:	3001      	adds	r0, #1
 8005ac4:	f000 80a9 	beq.w	8005c1a <_svfiprintf_r+0x1c6>
 8005ac8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005aca:	445a      	add	r2, fp
 8005acc:	9209      	str	r2, [sp, #36]	; 0x24
 8005ace:	f89a 3000 	ldrb.w	r3, [sl]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 80a1 	beq.w	8005c1a <_svfiprintf_r+0x1c6>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ade:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ae2:	f10a 0a01 	add.w	sl, sl, #1
 8005ae6:	9304      	str	r3, [sp, #16]
 8005ae8:	9307      	str	r3, [sp, #28]
 8005aea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005aee:	931a      	str	r3, [sp, #104]	; 0x68
 8005af0:	4654      	mov	r4, sl
 8005af2:	2205      	movs	r2, #5
 8005af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005af8:	4850      	ldr	r0, [pc, #320]	; (8005c3c <_svfiprintf_r+0x1e8>)
 8005afa:	f7fa fb79 	bl	80001f0 <memchr>
 8005afe:	9a04      	ldr	r2, [sp, #16]
 8005b00:	b9d8      	cbnz	r0, 8005b3a <_svfiprintf_r+0xe6>
 8005b02:	06d0      	lsls	r0, r2, #27
 8005b04:	bf44      	itt	mi
 8005b06:	2320      	movmi	r3, #32
 8005b08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b0c:	0711      	lsls	r1, r2, #28
 8005b0e:	bf44      	itt	mi
 8005b10:	232b      	movmi	r3, #43	; 0x2b
 8005b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b16:	f89a 3000 	ldrb.w	r3, [sl]
 8005b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b1c:	d015      	beq.n	8005b4a <_svfiprintf_r+0xf6>
 8005b1e:	9a07      	ldr	r2, [sp, #28]
 8005b20:	4654      	mov	r4, sl
 8005b22:	2000      	movs	r0, #0
 8005b24:	f04f 0c0a 	mov.w	ip, #10
 8005b28:	4621      	mov	r1, r4
 8005b2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b2e:	3b30      	subs	r3, #48	; 0x30
 8005b30:	2b09      	cmp	r3, #9
 8005b32:	d94d      	bls.n	8005bd0 <_svfiprintf_r+0x17c>
 8005b34:	b1b0      	cbz	r0, 8005b64 <_svfiprintf_r+0x110>
 8005b36:	9207      	str	r2, [sp, #28]
 8005b38:	e014      	b.n	8005b64 <_svfiprintf_r+0x110>
 8005b3a:	eba0 0308 	sub.w	r3, r0, r8
 8005b3e:	fa09 f303 	lsl.w	r3, r9, r3
 8005b42:	4313      	orrs	r3, r2
 8005b44:	9304      	str	r3, [sp, #16]
 8005b46:	46a2      	mov	sl, r4
 8005b48:	e7d2      	b.n	8005af0 <_svfiprintf_r+0x9c>
 8005b4a:	9b03      	ldr	r3, [sp, #12]
 8005b4c:	1d19      	adds	r1, r3, #4
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	9103      	str	r1, [sp, #12]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	bfbb      	ittet	lt
 8005b56:	425b      	neglt	r3, r3
 8005b58:	f042 0202 	orrlt.w	r2, r2, #2
 8005b5c:	9307      	strge	r3, [sp, #28]
 8005b5e:	9307      	strlt	r3, [sp, #28]
 8005b60:	bfb8      	it	lt
 8005b62:	9204      	strlt	r2, [sp, #16]
 8005b64:	7823      	ldrb	r3, [r4, #0]
 8005b66:	2b2e      	cmp	r3, #46	; 0x2e
 8005b68:	d10c      	bne.n	8005b84 <_svfiprintf_r+0x130>
 8005b6a:	7863      	ldrb	r3, [r4, #1]
 8005b6c:	2b2a      	cmp	r3, #42	; 0x2a
 8005b6e:	d134      	bne.n	8005bda <_svfiprintf_r+0x186>
 8005b70:	9b03      	ldr	r3, [sp, #12]
 8005b72:	1d1a      	adds	r2, r3, #4
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	9203      	str	r2, [sp, #12]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	bfb8      	it	lt
 8005b7c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005b80:	3402      	adds	r4, #2
 8005b82:	9305      	str	r3, [sp, #20]
 8005b84:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005c4c <_svfiprintf_r+0x1f8>
 8005b88:	7821      	ldrb	r1, [r4, #0]
 8005b8a:	2203      	movs	r2, #3
 8005b8c:	4650      	mov	r0, sl
 8005b8e:	f7fa fb2f 	bl	80001f0 <memchr>
 8005b92:	b138      	cbz	r0, 8005ba4 <_svfiprintf_r+0x150>
 8005b94:	9b04      	ldr	r3, [sp, #16]
 8005b96:	eba0 000a 	sub.w	r0, r0, sl
 8005b9a:	2240      	movs	r2, #64	; 0x40
 8005b9c:	4082      	lsls	r2, r0
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	3401      	adds	r4, #1
 8005ba2:	9304      	str	r3, [sp, #16]
 8005ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ba8:	4825      	ldr	r0, [pc, #148]	; (8005c40 <_svfiprintf_r+0x1ec>)
 8005baa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bae:	2206      	movs	r2, #6
 8005bb0:	f7fa fb1e 	bl	80001f0 <memchr>
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	d038      	beq.n	8005c2a <_svfiprintf_r+0x1d6>
 8005bb8:	4b22      	ldr	r3, [pc, #136]	; (8005c44 <_svfiprintf_r+0x1f0>)
 8005bba:	bb1b      	cbnz	r3, 8005c04 <_svfiprintf_r+0x1b0>
 8005bbc:	9b03      	ldr	r3, [sp, #12]
 8005bbe:	3307      	adds	r3, #7
 8005bc0:	f023 0307 	bic.w	r3, r3, #7
 8005bc4:	3308      	adds	r3, #8
 8005bc6:	9303      	str	r3, [sp, #12]
 8005bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bca:	4433      	add	r3, r6
 8005bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8005bce:	e768      	b.n	8005aa2 <_svfiprintf_r+0x4e>
 8005bd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bd4:	460c      	mov	r4, r1
 8005bd6:	2001      	movs	r0, #1
 8005bd8:	e7a6      	b.n	8005b28 <_svfiprintf_r+0xd4>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	3401      	adds	r4, #1
 8005bde:	9305      	str	r3, [sp, #20]
 8005be0:	4619      	mov	r1, r3
 8005be2:	f04f 0c0a 	mov.w	ip, #10
 8005be6:	4620      	mov	r0, r4
 8005be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bec:	3a30      	subs	r2, #48	; 0x30
 8005bee:	2a09      	cmp	r2, #9
 8005bf0:	d903      	bls.n	8005bfa <_svfiprintf_r+0x1a6>
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d0c6      	beq.n	8005b84 <_svfiprintf_r+0x130>
 8005bf6:	9105      	str	r1, [sp, #20]
 8005bf8:	e7c4      	b.n	8005b84 <_svfiprintf_r+0x130>
 8005bfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bfe:	4604      	mov	r4, r0
 8005c00:	2301      	movs	r3, #1
 8005c02:	e7f0      	b.n	8005be6 <_svfiprintf_r+0x192>
 8005c04:	ab03      	add	r3, sp, #12
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	462a      	mov	r2, r5
 8005c0a:	4b0f      	ldr	r3, [pc, #60]	; (8005c48 <_svfiprintf_r+0x1f4>)
 8005c0c:	a904      	add	r1, sp, #16
 8005c0e:	4638      	mov	r0, r7
 8005c10:	f3af 8000 	nop.w
 8005c14:	1c42      	adds	r2, r0, #1
 8005c16:	4606      	mov	r6, r0
 8005c18:	d1d6      	bne.n	8005bc8 <_svfiprintf_r+0x174>
 8005c1a:	89ab      	ldrh	r3, [r5, #12]
 8005c1c:	065b      	lsls	r3, r3, #25
 8005c1e:	f53f af2d 	bmi.w	8005a7c <_svfiprintf_r+0x28>
 8005c22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c24:	b01d      	add	sp, #116	; 0x74
 8005c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2a:	ab03      	add	r3, sp, #12
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	462a      	mov	r2, r5
 8005c30:	4b05      	ldr	r3, [pc, #20]	; (8005c48 <_svfiprintf_r+0x1f4>)
 8005c32:	a904      	add	r1, sp, #16
 8005c34:	4638      	mov	r0, r7
 8005c36:	f000 f879 	bl	8005d2c <_printf_i>
 8005c3a:	e7eb      	b.n	8005c14 <_svfiprintf_r+0x1c0>
 8005c3c:	0800609c 	.word	0x0800609c
 8005c40:	080060a6 	.word	0x080060a6
 8005c44:	00000000 	.word	0x00000000
 8005c48:	080059a1 	.word	0x080059a1
 8005c4c:	080060a2 	.word	0x080060a2

08005c50 <_printf_common>:
 8005c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c54:	4616      	mov	r6, r2
 8005c56:	4699      	mov	r9, r3
 8005c58:	688a      	ldr	r2, [r1, #8]
 8005c5a:	690b      	ldr	r3, [r1, #16]
 8005c5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c60:	4293      	cmp	r3, r2
 8005c62:	bfb8      	it	lt
 8005c64:	4613      	movlt	r3, r2
 8005c66:	6033      	str	r3, [r6, #0]
 8005c68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c6c:	4607      	mov	r7, r0
 8005c6e:	460c      	mov	r4, r1
 8005c70:	b10a      	cbz	r2, 8005c76 <_printf_common+0x26>
 8005c72:	3301      	adds	r3, #1
 8005c74:	6033      	str	r3, [r6, #0]
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	0699      	lsls	r1, r3, #26
 8005c7a:	bf42      	ittt	mi
 8005c7c:	6833      	ldrmi	r3, [r6, #0]
 8005c7e:	3302      	addmi	r3, #2
 8005c80:	6033      	strmi	r3, [r6, #0]
 8005c82:	6825      	ldr	r5, [r4, #0]
 8005c84:	f015 0506 	ands.w	r5, r5, #6
 8005c88:	d106      	bne.n	8005c98 <_printf_common+0x48>
 8005c8a:	f104 0a19 	add.w	sl, r4, #25
 8005c8e:	68e3      	ldr	r3, [r4, #12]
 8005c90:	6832      	ldr	r2, [r6, #0]
 8005c92:	1a9b      	subs	r3, r3, r2
 8005c94:	42ab      	cmp	r3, r5
 8005c96:	dc26      	bgt.n	8005ce6 <_printf_common+0x96>
 8005c98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c9c:	1e13      	subs	r3, r2, #0
 8005c9e:	6822      	ldr	r2, [r4, #0]
 8005ca0:	bf18      	it	ne
 8005ca2:	2301      	movne	r3, #1
 8005ca4:	0692      	lsls	r2, r2, #26
 8005ca6:	d42b      	bmi.n	8005d00 <_printf_common+0xb0>
 8005ca8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cac:	4649      	mov	r1, r9
 8005cae:	4638      	mov	r0, r7
 8005cb0:	47c0      	blx	r8
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	d01e      	beq.n	8005cf4 <_printf_common+0xa4>
 8005cb6:	6823      	ldr	r3, [r4, #0]
 8005cb8:	6922      	ldr	r2, [r4, #16]
 8005cba:	f003 0306 	and.w	r3, r3, #6
 8005cbe:	2b04      	cmp	r3, #4
 8005cc0:	bf02      	ittt	eq
 8005cc2:	68e5      	ldreq	r5, [r4, #12]
 8005cc4:	6833      	ldreq	r3, [r6, #0]
 8005cc6:	1aed      	subeq	r5, r5, r3
 8005cc8:	68a3      	ldr	r3, [r4, #8]
 8005cca:	bf0c      	ite	eq
 8005ccc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cd0:	2500      	movne	r5, #0
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	bfc4      	itt	gt
 8005cd6:	1a9b      	subgt	r3, r3, r2
 8005cd8:	18ed      	addgt	r5, r5, r3
 8005cda:	2600      	movs	r6, #0
 8005cdc:	341a      	adds	r4, #26
 8005cde:	42b5      	cmp	r5, r6
 8005ce0:	d11a      	bne.n	8005d18 <_printf_common+0xc8>
 8005ce2:	2000      	movs	r0, #0
 8005ce4:	e008      	b.n	8005cf8 <_printf_common+0xa8>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	4652      	mov	r2, sl
 8005cea:	4649      	mov	r1, r9
 8005cec:	4638      	mov	r0, r7
 8005cee:	47c0      	blx	r8
 8005cf0:	3001      	adds	r0, #1
 8005cf2:	d103      	bne.n	8005cfc <_printf_common+0xac>
 8005cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cfc:	3501      	adds	r5, #1
 8005cfe:	e7c6      	b.n	8005c8e <_printf_common+0x3e>
 8005d00:	18e1      	adds	r1, r4, r3
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	2030      	movs	r0, #48	; 0x30
 8005d06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d0a:	4422      	add	r2, r4
 8005d0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d14:	3302      	adds	r3, #2
 8005d16:	e7c7      	b.n	8005ca8 <_printf_common+0x58>
 8005d18:	2301      	movs	r3, #1
 8005d1a:	4622      	mov	r2, r4
 8005d1c:	4649      	mov	r1, r9
 8005d1e:	4638      	mov	r0, r7
 8005d20:	47c0      	blx	r8
 8005d22:	3001      	adds	r0, #1
 8005d24:	d0e6      	beq.n	8005cf4 <_printf_common+0xa4>
 8005d26:	3601      	adds	r6, #1
 8005d28:	e7d9      	b.n	8005cde <_printf_common+0x8e>
	...

08005d2c <_printf_i>:
 8005d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d30:	7e0f      	ldrb	r7, [r1, #24]
 8005d32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d34:	2f78      	cmp	r7, #120	; 0x78
 8005d36:	4691      	mov	r9, r2
 8005d38:	4680      	mov	r8, r0
 8005d3a:	460c      	mov	r4, r1
 8005d3c:	469a      	mov	sl, r3
 8005d3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d42:	d807      	bhi.n	8005d54 <_printf_i+0x28>
 8005d44:	2f62      	cmp	r7, #98	; 0x62
 8005d46:	d80a      	bhi.n	8005d5e <_printf_i+0x32>
 8005d48:	2f00      	cmp	r7, #0
 8005d4a:	f000 80d4 	beq.w	8005ef6 <_printf_i+0x1ca>
 8005d4e:	2f58      	cmp	r7, #88	; 0x58
 8005d50:	f000 80c0 	beq.w	8005ed4 <_printf_i+0x1a8>
 8005d54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d5c:	e03a      	b.n	8005dd4 <_printf_i+0xa8>
 8005d5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d62:	2b15      	cmp	r3, #21
 8005d64:	d8f6      	bhi.n	8005d54 <_printf_i+0x28>
 8005d66:	a101      	add	r1, pc, #4	; (adr r1, 8005d6c <_printf_i+0x40>)
 8005d68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d6c:	08005dc5 	.word	0x08005dc5
 8005d70:	08005dd9 	.word	0x08005dd9
 8005d74:	08005d55 	.word	0x08005d55
 8005d78:	08005d55 	.word	0x08005d55
 8005d7c:	08005d55 	.word	0x08005d55
 8005d80:	08005d55 	.word	0x08005d55
 8005d84:	08005dd9 	.word	0x08005dd9
 8005d88:	08005d55 	.word	0x08005d55
 8005d8c:	08005d55 	.word	0x08005d55
 8005d90:	08005d55 	.word	0x08005d55
 8005d94:	08005d55 	.word	0x08005d55
 8005d98:	08005edd 	.word	0x08005edd
 8005d9c:	08005e05 	.word	0x08005e05
 8005da0:	08005e97 	.word	0x08005e97
 8005da4:	08005d55 	.word	0x08005d55
 8005da8:	08005d55 	.word	0x08005d55
 8005dac:	08005eff 	.word	0x08005eff
 8005db0:	08005d55 	.word	0x08005d55
 8005db4:	08005e05 	.word	0x08005e05
 8005db8:	08005d55 	.word	0x08005d55
 8005dbc:	08005d55 	.word	0x08005d55
 8005dc0:	08005e9f 	.word	0x08005e9f
 8005dc4:	682b      	ldr	r3, [r5, #0]
 8005dc6:	1d1a      	adds	r2, r3, #4
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	602a      	str	r2, [r5, #0]
 8005dcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e09f      	b.n	8005f18 <_printf_i+0x1ec>
 8005dd8:	6820      	ldr	r0, [r4, #0]
 8005dda:	682b      	ldr	r3, [r5, #0]
 8005ddc:	0607      	lsls	r7, r0, #24
 8005dde:	f103 0104 	add.w	r1, r3, #4
 8005de2:	6029      	str	r1, [r5, #0]
 8005de4:	d501      	bpl.n	8005dea <_printf_i+0xbe>
 8005de6:	681e      	ldr	r6, [r3, #0]
 8005de8:	e003      	b.n	8005df2 <_printf_i+0xc6>
 8005dea:	0646      	lsls	r6, r0, #25
 8005dec:	d5fb      	bpl.n	8005de6 <_printf_i+0xba>
 8005dee:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005df2:	2e00      	cmp	r6, #0
 8005df4:	da03      	bge.n	8005dfe <_printf_i+0xd2>
 8005df6:	232d      	movs	r3, #45	; 0x2d
 8005df8:	4276      	negs	r6, r6
 8005dfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dfe:	485a      	ldr	r0, [pc, #360]	; (8005f68 <_printf_i+0x23c>)
 8005e00:	230a      	movs	r3, #10
 8005e02:	e012      	b.n	8005e2a <_printf_i+0xfe>
 8005e04:	682b      	ldr	r3, [r5, #0]
 8005e06:	6820      	ldr	r0, [r4, #0]
 8005e08:	1d19      	adds	r1, r3, #4
 8005e0a:	6029      	str	r1, [r5, #0]
 8005e0c:	0605      	lsls	r5, r0, #24
 8005e0e:	d501      	bpl.n	8005e14 <_printf_i+0xe8>
 8005e10:	681e      	ldr	r6, [r3, #0]
 8005e12:	e002      	b.n	8005e1a <_printf_i+0xee>
 8005e14:	0641      	lsls	r1, r0, #25
 8005e16:	d5fb      	bpl.n	8005e10 <_printf_i+0xe4>
 8005e18:	881e      	ldrh	r6, [r3, #0]
 8005e1a:	4853      	ldr	r0, [pc, #332]	; (8005f68 <_printf_i+0x23c>)
 8005e1c:	2f6f      	cmp	r7, #111	; 0x6f
 8005e1e:	bf0c      	ite	eq
 8005e20:	2308      	moveq	r3, #8
 8005e22:	230a      	movne	r3, #10
 8005e24:	2100      	movs	r1, #0
 8005e26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e2a:	6865      	ldr	r5, [r4, #4]
 8005e2c:	60a5      	str	r5, [r4, #8]
 8005e2e:	2d00      	cmp	r5, #0
 8005e30:	bfa2      	ittt	ge
 8005e32:	6821      	ldrge	r1, [r4, #0]
 8005e34:	f021 0104 	bicge.w	r1, r1, #4
 8005e38:	6021      	strge	r1, [r4, #0]
 8005e3a:	b90e      	cbnz	r6, 8005e40 <_printf_i+0x114>
 8005e3c:	2d00      	cmp	r5, #0
 8005e3e:	d04b      	beq.n	8005ed8 <_printf_i+0x1ac>
 8005e40:	4615      	mov	r5, r2
 8005e42:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e46:	fb03 6711 	mls	r7, r3, r1, r6
 8005e4a:	5dc7      	ldrb	r7, [r0, r7]
 8005e4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e50:	4637      	mov	r7, r6
 8005e52:	42bb      	cmp	r3, r7
 8005e54:	460e      	mov	r6, r1
 8005e56:	d9f4      	bls.n	8005e42 <_printf_i+0x116>
 8005e58:	2b08      	cmp	r3, #8
 8005e5a:	d10b      	bne.n	8005e74 <_printf_i+0x148>
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	07de      	lsls	r6, r3, #31
 8005e60:	d508      	bpl.n	8005e74 <_printf_i+0x148>
 8005e62:	6923      	ldr	r3, [r4, #16]
 8005e64:	6861      	ldr	r1, [r4, #4]
 8005e66:	4299      	cmp	r1, r3
 8005e68:	bfde      	ittt	le
 8005e6a:	2330      	movle	r3, #48	; 0x30
 8005e6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e70:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005e74:	1b52      	subs	r2, r2, r5
 8005e76:	6122      	str	r2, [r4, #16]
 8005e78:	f8cd a000 	str.w	sl, [sp]
 8005e7c:	464b      	mov	r3, r9
 8005e7e:	aa03      	add	r2, sp, #12
 8005e80:	4621      	mov	r1, r4
 8005e82:	4640      	mov	r0, r8
 8005e84:	f7ff fee4 	bl	8005c50 <_printf_common>
 8005e88:	3001      	adds	r0, #1
 8005e8a:	d14a      	bne.n	8005f22 <_printf_i+0x1f6>
 8005e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e90:	b004      	add	sp, #16
 8005e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	f043 0320 	orr.w	r3, r3, #32
 8005e9c:	6023      	str	r3, [r4, #0]
 8005e9e:	4833      	ldr	r0, [pc, #204]	; (8005f6c <_printf_i+0x240>)
 8005ea0:	2778      	movs	r7, #120	; 0x78
 8005ea2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	6829      	ldr	r1, [r5, #0]
 8005eaa:	061f      	lsls	r7, r3, #24
 8005eac:	f851 6b04 	ldr.w	r6, [r1], #4
 8005eb0:	d402      	bmi.n	8005eb8 <_printf_i+0x18c>
 8005eb2:	065f      	lsls	r7, r3, #25
 8005eb4:	bf48      	it	mi
 8005eb6:	b2b6      	uxthmi	r6, r6
 8005eb8:	07df      	lsls	r7, r3, #31
 8005eba:	bf48      	it	mi
 8005ebc:	f043 0320 	orrmi.w	r3, r3, #32
 8005ec0:	6029      	str	r1, [r5, #0]
 8005ec2:	bf48      	it	mi
 8005ec4:	6023      	strmi	r3, [r4, #0]
 8005ec6:	b91e      	cbnz	r6, 8005ed0 <_printf_i+0x1a4>
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	f023 0320 	bic.w	r3, r3, #32
 8005ece:	6023      	str	r3, [r4, #0]
 8005ed0:	2310      	movs	r3, #16
 8005ed2:	e7a7      	b.n	8005e24 <_printf_i+0xf8>
 8005ed4:	4824      	ldr	r0, [pc, #144]	; (8005f68 <_printf_i+0x23c>)
 8005ed6:	e7e4      	b.n	8005ea2 <_printf_i+0x176>
 8005ed8:	4615      	mov	r5, r2
 8005eda:	e7bd      	b.n	8005e58 <_printf_i+0x12c>
 8005edc:	682b      	ldr	r3, [r5, #0]
 8005ede:	6826      	ldr	r6, [r4, #0]
 8005ee0:	6961      	ldr	r1, [r4, #20]
 8005ee2:	1d18      	adds	r0, r3, #4
 8005ee4:	6028      	str	r0, [r5, #0]
 8005ee6:	0635      	lsls	r5, r6, #24
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	d501      	bpl.n	8005ef0 <_printf_i+0x1c4>
 8005eec:	6019      	str	r1, [r3, #0]
 8005eee:	e002      	b.n	8005ef6 <_printf_i+0x1ca>
 8005ef0:	0670      	lsls	r0, r6, #25
 8005ef2:	d5fb      	bpl.n	8005eec <_printf_i+0x1c0>
 8005ef4:	8019      	strh	r1, [r3, #0]
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	6123      	str	r3, [r4, #16]
 8005efa:	4615      	mov	r5, r2
 8005efc:	e7bc      	b.n	8005e78 <_printf_i+0x14c>
 8005efe:	682b      	ldr	r3, [r5, #0]
 8005f00:	1d1a      	adds	r2, r3, #4
 8005f02:	602a      	str	r2, [r5, #0]
 8005f04:	681d      	ldr	r5, [r3, #0]
 8005f06:	6862      	ldr	r2, [r4, #4]
 8005f08:	2100      	movs	r1, #0
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	f7fa f970 	bl	80001f0 <memchr>
 8005f10:	b108      	cbz	r0, 8005f16 <_printf_i+0x1ea>
 8005f12:	1b40      	subs	r0, r0, r5
 8005f14:	6060      	str	r0, [r4, #4]
 8005f16:	6863      	ldr	r3, [r4, #4]
 8005f18:	6123      	str	r3, [r4, #16]
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f20:	e7aa      	b.n	8005e78 <_printf_i+0x14c>
 8005f22:	6923      	ldr	r3, [r4, #16]
 8005f24:	462a      	mov	r2, r5
 8005f26:	4649      	mov	r1, r9
 8005f28:	4640      	mov	r0, r8
 8005f2a:	47d0      	blx	sl
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	d0ad      	beq.n	8005e8c <_printf_i+0x160>
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	079b      	lsls	r3, r3, #30
 8005f34:	d413      	bmi.n	8005f5e <_printf_i+0x232>
 8005f36:	68e0      	ldr	r0, [r4, #12]
 8005f38:	9b03      	ldr	r3, [sp, #12]
 8005f3a:	4298      	cmp	r0, r3
 8005f3c:	bfb8      	it	lt
 8005f3e:	4618      	movlt	r0, r3
 8005f40:	e7a6      	b.n	8005e90 <_printf_i+0x164>
 8005f42:	2301      	movs	r3, #1
 8005f44:	4632      	mov	r2, r6
 8005f46:	4649      	mov	r1, r9
 8005f48:	4640      	mov	r0, r8
 8005f4a:	47d0      	blx	sl
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	d09d      	beq.n	8005e8c <_printf_i+0x160>
 8005f50:	3501      	adds	r5, #1
 8005f52:	68e3      	ldr	r3, [r4, #12]
 8005f54:	9903      	ldr	r1, [sp, #12]
 8005f56:	1a5b      	subs	r3, r3, r1
 8005f58:	42ab      	cmp	r3, r5
 8005f5a:	dcf2      	bgt.n	8005f42 <_printf_i+0x216>
 8005f5c:	e7eb      	b.n	8005f36 <_printf_i+0x20a>
 8005f5e:	2500      	movs	r5, #0
 8005f60:	f104 0619 	add.w	r6, r4, #25
 8005f64:	e7f5      	b.n	8005f52 <_printf_i+0x226>
 8005f66:	bf00      	nop
 8005f68:	080060ad 	.word	0x080060ad
 8005f6c:	080060be 	.word	0x080060be

08005f70 <memmove>:
 8005f70:	4288      	cmp	r0, r1
 8005f72:	b510      	push	{r4, lr}
 8005f74:	eb01 0402 	add.w	r4, r1, r2
 8005f78:	d902      	bls.n	8005f80 <memmove+0x10>
 8005f7a:	4284      	cmp	r4, r0
 8005f7c:	4623      	mov	r3, r4
 8005f7e:	d807      	bhi.n	8005f90 <memmove+0x20>
 8005f80:	1e43      	subs	r3, r0, #1
 8005f82:	42a1      	cmp	r1, r4
 8005f84:	d008      	beq.n	8005f98 <memmove+0x28>
 8005f86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f8e:	e7f8      	b.n	8005f82 <memmove+0x12>
 8005f90:	4402      	add	r2, r0
 8005f92:	4601      	mov	r1, r0
 8005f94:	428a      	cmp	r2, r1
 8005f96:	d100      	bne.n	8005f9a <memmove+0x2a>
 8005f98:	bd10      	pop	{r4, pc}
 8005f9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fa2:	e7f7      	b.n	8005f94 <memmove+0x24>

08005fa4 <_sbrk_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4d06      	ldr	r5, [pc, #24]	; (8005fc0 <_sbrk_r+0x1c>)
 8005fa8:	2300      	movs	r3, #0
 8005faa:	4604      	mov	r4, r0
 8005fac:	4608      	mov	r0, r1
 8005fae:	602b      	str	r3, [r5, #0]
 8005fb0:	f7fb fabc 	bl	800152c <_sbrk>
 8005fb4:	1c43      	adds	r3, r0, #1
 8005fb6:	d102      	bne.n	8005fbe <_sbrk_r+0x1a>
 8005fb8:	682b      	ldr	r3, [r5, #0]
 8005fba:	b103      	cbz	r3, 8005fbe <_sbrk_r+0x1a>
 8005fbc:	6023      	str	r3, [r4, #0]
 8005fbe:	bd38      	pop	{r3, r4, r5, pc}
 8005fc0:	200009c0 	.word	0x200009c0

08005fc4 <memcpy>:
 8005fc4:	440a      	add	r2, r1
 8005fc6:	4291      	cmp	r1, r2
 8005fc8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005fcc:	d100      	bne.n	8005fd0 <memcpy+0xc>
 8005fce:	4770      	bx	lr
 8005fd0:	b510      	push	{r4, lr}
 8005fd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fda:	4291      	cmp	r1, r2
 8005fdc:	d1f9      	bne.n	8005fd2 <memcpy+0xe>
 8005fde:	bd10      	pop	{r4, pc}

08005fe0 <_realloc_r>:
 8005fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe4:	4680      	mov	r8, r0
 8005fe6:	4614      	mov	r4, r2
 8005fe8:	460e      	mov	r6, r1
 8005fea:	b921      	cbnz	r1, 8005ff6 <_realloc_r+0x16>
 8005fec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ff0:	4611      	mov	r1, r2
 8005ff2:	f7ff bc49 	b.w	8005888 <_malloc_r>
 8005ff6:	b92a      	cbnz	r2, 8006004 <_realloc_r+0x24>
 8005ff8:	f7ff fbda 	bl	80057b0 <_free_r>
 8005ffc:	4625      	mov	r5, r4
 8005ffe:	4628      	mov	r0, r5
 8006000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006004:	f000 f81b 	bl	800603e <_malloc_usable_size_r>
 8006008:	4284      	cmp	r4, r0
 800600a:	4607      	mov	r7, r0
 800600c:	d802      	bhi.n	8006014 <_realloc_r+0x34>
 800600e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006012:	d812      	bhi.n	800603a <_realloc_r+0x5a>
 8006014:	4621      	mov	r1, r4
 8006016:	4640      	mov	r0, r8
 8006018:	f7ff fc36 	bl	8005888 <_malloc_r>
 800601c:	4605      	mov	r5, r0
 800601e:	2800      	cmp	r0, #0
 8006020:	d0ed      	beq.n	8005ffe <_realloc_r+0x1e>
 8006022:	42bc      	cmp	r4, r7
 8006024:	4622      	mov	r2, r4
 8006026:	4631      	mov	r1, r6
 8006028:	bf28      	it	cs
 800602a:	463a      	movcs	r2, r7
 800602c:	f7ff ffca 	bl	8005fc4 <memcpy>
 8006030:	4631      	mov	r1, r6
 8006032:	4640      	mov	r0, r8
 8006034:	f7ff fbbc 	bl	80057b0 <_free_r>
 8006038:	e7e1      	b.n	8005ffe <_realloc_r+0x1e>
 800603a:	4635      	mov	r5, r6
 800603c:	e7df      	b.n	8005ffe <_realloc_r+0x1e>

0800603e <_malloc_usable_size_r>:
 800603e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006042:	1f18      	subs	r0, r3, #4
 8006044:	2b00      	cmp	r3, #0
 8006046:	bfbc      	itt	lt
 8006048:	580b      	ldrlt	r3, [r1, r0]
 800604a:	18c0      	addlt	r0, r0, r3
 800604c:	4770      	bx	lr
	...

08006050 <_init>:
 8006050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006052:	bf00      	nop
 8006054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006056:	bc08      	pop	{r3}
 8006058:	469e      	mov	lr, r3
 800605a:	4770      	bx	lr

0800605c <_fini>:
 800605c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800605e:	bf00      	nop
 8006060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006062:	bc08      	pop	{r3}
 8006064:	469e      	mov	lr, r3
 8006066:	4770      	bx	lr
