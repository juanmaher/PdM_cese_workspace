
tp_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003114  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080032c0  080032c0  000132c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032d8  080032d8  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080032d8  080032d8  000132d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032e0  080032e0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032e0  080032e0  000132e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032e4  080032e4  000132e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080032e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          00000098  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000bc  200000bc  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007cbd  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000017df  00000000  00000000  00027d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000800  00000000  00000000  00029538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005fe  00000000  00000000  00029d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002a1a  00000000  00000000  0002a336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ae16  00000000  00000000  0002cd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e479c  00000000  00000000  00037b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001f08  00000000  00000000  0011c304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  0011e20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080032a8 	.word	0x080032a8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	080032a8 	.word	0x080032a8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <nRF24_Reset>:
static uint8_t DYNPD_DFT_VALUE = 0x00; // 0x00
static uint8_t FEATURE_DFT_VALUE = 0x00; // 0x00

/* Private functions ---------------------------------------------------------*/
static nRF24_Status_t nRF24_Reset()
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | CONFIG, &CONFIG_DFT_VALUE));
 80004ec:	2201      	movs	r2, #1
 80004ee:	4980      	ldr	r1, [pc, #512]	; (80006f0 <nRF24_Reset+0x208>)
 80004f0:	2020      	movs	r0, #32
 80004f2:	f000 fa0b 	bl	800090c <nRF24_SendCmd>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d006      	beq.n	800050a <nRF24_Reset+0x22>
 80004fc:	2201      	movs	r2, #1
 80004fe:	497c      	ldr	r1, [pc, #496]	; (80006f0 <nRF24_Reset+0x208>)
 8000500:	2020      	movs	r0, #32
 8000502:	f000 fa03 	bl	800090c <nRF24_SendCmd>
 8000506:	4603      	mov	r3, r0
 8000508:	e0f0      	b.n	80006ec <nRF24_Reset+0x204>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | EN_AA, &EN_AA_DFT_VALUE));
 800050a:	2201      	movs	r2, #1
 800050c:	4979      	ldr	r1, [pc, #484]	; (80006f4 <nRF24_Reset+0x20c>)
 800050e:	2021      	movs	r0, #33	; 0x21
 8000510:	f000 f9fc 	bl	800090c <nRF24_SendCmd>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d006      	beq.n	8000528 <nRF24_Reset+0x40>
 800051a:	2201      	movs	r2, #1
 800051c:	4975      	ldr	r1, [pc, #468]	; (80006f4 <nRF24_Reset+0x20c>)
 800051e:	2021      	movs	r0, #33	; 0x21
 8000520:	f000 f9f4 	bl	800090c <nRF24_SendCmd>
 8000524:	4603      	mov	r3, r0
 8000526:	e0e1      	b.n	80006ec <nRF24_Reset+0x204>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | EN_RXADDR, &EN_RXADDR_DFT_VALUE));
 8000528:	2201      	movs	r2, #1
 800052a:	4973      	ldr	r1, [pc, #460]	; (80006f8 <nRF24_Reset+0x210>)
 800052c:	2022      	movs	r0, #34	; 0x22
 800052e:	f000 f9ed 	bl	800090c <nRF24_SendCmd>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d006      	beq.n	8000546 <nRF24_Reset+0x5e>
 8000538:	2201      	movs	r2, #1
 800053a:	496f      	ldr	r1, [pc, #444]	; (80006f8 <nRF24_Reset+0x210>)
 800053c:	2022      	movs	r0, #34	; 0x22
 800053e:	f000 f9e5 	bl	800090c <nRF24_SendCmd>
 8000542:	4603      	mov	r3, r0
 8000544:	e0d2      	b.n	80006ec <nRF24_Reset+0x204>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | SETUP_AW, &SETUP_AW_DFT_VALUE));
 8000546:	2201      	movs	r2, #1
 8000548:	496c      	ldr	r1, [pc, #432]	; (80006fc <nRF24_Reset+0x214>)
 800054a:	2023      	movs	r0, #35	; 0x23
 800054c:	f000 f9de 	bl	800090c <nRF24_SendCmd>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d006      	beq.n	8000564 <nRF24_Reset+0x7c>
 8000556:	2201      	movs	r2, #1
 8000558:	4968      	ldr	r1, [pc, #416]	; (80006fc <nRF24_Reset+0x214>)
 800055a:	2023      	movs	r0, #35	; 0x23
 800055c:	f000 f9d6 	bl	800090c <nRF24_SendCmd>
 8000560:	4603      	mov	r3, r0
 8000562:	e0c3      	b.n	80006ec <nRF24_Reset+0x204>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | SETUP_RETR, &SETUP_RETR_DFT_VALUE));
 8000564:	2201      	movs	r2, #1
 8000566:	4966      	ldr	r1, [pc, #408]	; (8000700 <nRF24_Reset+0x218>)
 8000568:	2024      	movs	r0, #36	; 0x24
 800056a:	f000 f9cf 	bl	800090c <nRF24_SendCmd>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d006      	beq.n	8000582 <nRF24_Reset+0x9a>
 8000574:	2201      	movs	r2, #1
 8000576:	4962      	ldr	r1, [pc, #392]	; (8000700 <nRF24_Reset+0x218>)
 8000578:	2024      	movs	r0, #36	; 0x24
 800057a:	f000 f9c7 	bl	800090c <nRF24_SendCmd>
 800057e:	4603      	mov	r3, r0
 8000580:	e0b4      	b.n	80006ec <nRF24_Reset+0x204>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RF_CH, &RF_CH_DFT_VALUE));
 8000582:	2201      	movs	r2, #1
 8000584:	495f      	ldr	r1, [pc, #380]	; (8000704 <nRF24_Reset+0x21c>)
 8000586:	2025      	movs	r0, #37	; 0x25
 8000588:	f000 f9c0 	bl	800090c <nRF24_SendCmd>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d006      	beq.n	80005a0 <nRF24_Reset+0xb8>
 8000592:	2201      	movs	r2, #1
 8000594:	495b      	ldr	r1, [pc, #364]	; (8000704 <nRF24_Reset+0x21c>)
 8000596:	2025      	movs	r0, #37	; 0x25
 8000598:	f000 f9b8 	bl	800090c <nRF24_SendCmd>
 800059c:	4603      	mov	r3, r0
 800059e:	e0a5      	b.n	80006ec <nRF24_Reset+0x204>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RF_SETUP, &RF_SETUP_DFT_VALUE));
 80005a0:	2201      	movs	r2, #1
 80005a2:	4959      	ldr	r1, [pc, #356]	; (8000708 <nRF24_Reset+0x220>)
 80005a4:	2026      	movs	r0, #38	; 0x26
 80005a6:	f000 f9b1 	bl	800090c <nRF24_SendCmd>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d006      	beq.n	80005be <nRF24_Reset+0xd6>
 80005b0:	2201      	movs	r2, #1
 80005b2:	4955      	ldr	r1, [pc, #340]	; (8000708 <nRF24_Reset+0x220>)
 80005b4:	2026      	movs	r0, #38	; 0x26
 80005b6:	f000 f9a9 	bl	800090c <nRF24_SendCmd>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e096      	b.n	80006ec <nRF24_Reset+0x204>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | STATUS, &STATUS_DFT_VALUE));
 80005be:	2201      	movs	r2, #1
 80005c0:	4952      	ldr	r1, [pc, #328]	; (800070c <nRF24_Reset+0x224>)
 80005c2:	2027      	movs	r0, #39	; 0x27
 80005c4:	f000 f9a2 	bl	800090c <nRF24_SendCmd>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d006      	beq.n	80005dc <nRF24_Reset+0xf4>
 80005ce:	2201      	movs	r2, #1
 80005d0:	494e      	ldr	r1, [pc, #312]	; (800070c <nRF24_Reset+0x224>)
 80005d2:	2027      	movs	r0, #39	; 0x27
 80005d4:	f000 f99a 	bl	800090c <nRF24_SendCmd>
 80005d8:	4603      	mov	r3, r0
 80005da:	e087      	b.n	80006ec <nRF24_Reset+0x204>
    // CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_ADDR_P2, &RX_ADDR_P2_DFT_VALUE));
    // CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_ADDR_P3, &RX_ADDR_P3_DFT_VALUE));
    // CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_ADDR_P4, &RX_ADDR_P4_DFT_VALUE));
    // CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_ADDR_P5, &RX_ADDR_P5_DFT_VALUE));
    // CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | TX_ADDR, &TX_ADDR_DFT_VALUE));
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_PW_P0, &RX_PW_P0_DFT_VALUE));
 80005dc:	2201      	movs	r2, #1
 80005de:	494c      	ldr	r1, [pc, #304]	; (8000710 <nRF24_Reset+0x228>)
 80005e0:	2031      	movs	r0, #49	; 0x31
 80005e2:	f000 f993 	bl	800090c <nRF24_SendCmd>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d006      	beq.n	80005fa <nRF24_Reset+0x112>
 80005ec:	2201      	movs	r2, #1
 80005ee:	4948      	ldr	r1, [pc, #288]	; (8000710 <nRF24_Reset+0x228>)
 80005f0:	2031      	movs	r0, #49	; 0x31
 80005f2:	f000 f98b 	bl	800090c <nRF24_SendCmd>
 80005f6:	4603      	mov	r3, r0
 80005f8:	e078      	b.n	80006ec <nRF24_Reset+0x204>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_PW_P1, &RX_PW_P1_DFT_VALUE));
 80005fa:	2201      	movs	r2, #1
 80005fc:	4945      	ldr	r1, [pc, #276]	; (8000714 <nRF24_Reset+0x22c>)
 80005fe:	2032      	movs	r0, #50	; 0x32
 8000600:	f000 f984 	bl	800090c <nRF24_SendCmd>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d006      	beq.n	8000618 <nRF24_Reset+0x130>
 800060a:	2201      	movs	r2, #1
 800060c:	4941      	ldr	r1, [pc, #260]	; (8000714 <nRF24_Reset+0x22c>)
 800060e:	2032      	movs	r0, #50	; 0x32
 8000610:	f000 f97c 	bl	800090c <nRF24_SendCmd>
 8000614:	4603      	mov	r3, r0
 8000616:	e069      	b.n	80006ec <nRF24_Reset+0x204>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_PW_P2, &RX_PW_P2_DFT_VALUE));
 8000618:	2201      	movs	r2, #1
 800061a:	493f      	ldr	r1, [pc, #252]	; (8000718 <nRF24_Reset+0x230>)
 800061c:	2033      	movs	r0, #51	; 0x33
 800061e:	f000 f975 	bl	800090c <nRF24_SendCmd>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d006      	beq.n	8000636 <nRF24_Reset+0x14e>
 8000628:	2201      	movs	r2, #1
 800062a:	493b      	ldr	r1, [pc, #236]	; (8000718 <nRF24_Reset+0x230>)
 800062c:	2033      	movs	r0, #51	; 0x33
 800062e:	f000 f96d 	bl	800090c <nRF24_SendCmd>
 8000632:	4603      	mov	r3, r0
 8000634:	e05a      	b.n	80006ec <nRF24_Reset+0x204>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_PW_P3, &RX_PW_P3_DFT_VALUE));
 8000636:	2201      	movs	r2, #1
 8000638:	4938      	ldr	r1, [pc, #224]	; (800071c <nRF24_Reset+0x234>)
 800063a:	2034      	movs	r0, #52	; 0x34
 800063c:	f000 f966 	bl	800090c <nRF24_SendCmd>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d006      	beq.n	8000654 <nRF24_Reset+0x16c>
 8000646:	2201      	movs	r2, #1
 8000648:	4934      	ldr	r1, [pc, #208]	; (800071c <nRF24_Reset+0x234>)
 800064a:	2034      	movs	r0, #52	; 0x34
 800064c:	f000 f95e 	bl	800090c <nRF24_SendCmd>
 8000650:	4603      	mov	r3, r0
 8000652:	e04b      	b.n	80006ec <nRF24_Reset+0x204>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_PW_P4, &RX_PW_P4_DFT_VALUE));
 8000654:	2201      	movs	r2, #1
 8000656:	4932      	ldr	r1, [pc, #200]	; (8000720 <nRF24_Reset+0x238>)
 8000658:	2035      	movs	r0, #53	; 0x35
 800065a:	f000 f957 	bl	800090c <nRF24_SendCmd>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d006      	beq.n	8000672 <nRF24_Reset+0x18a>
 8000664:	2201      	movs	r2, #1
 8000666:	492e      	ldr	r1, [pc, #184]	; (8000720 <nRF24_Reset+0x238>)
 8000668:	2035      	movs	r0, #53	; 0x35
 800066a:	f000 f94f 	bl	800090c <nRF24_SendCmd>
 800066e:	4603      	mov	r3, r0
 8000670:	e03c      	b.n	80006ec <nRF24_Reset+0x204>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_PW_P5, &RX_PW_P5_DFT_VALUE));
 8000672:	2201      	movs	r2, #1
 8000674:	492b      	ldr	r1, [pc, #172]	; (8000724 <nRF24_Reset+0x23c>)
 8000676:	2036      	movs	r0, #54	; 0x36
 8000678:	f000 f948 	bl	800090c <nRF24_SendCmd>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d006      	beq.n	8000690 <nRF24_Reset+0x1a8>
 8000682:	2201      	movs	r2, #1
 8000684:	4927      	ldr	r1, [pc, #156]	; (8000724 <nRF24_Reset+0x23c>)
 8000686:	2036      	movs	r0, #54	; 0x36
 8000688:	f000 f940 	bl	800090c <nRF24_SendCmd>
 800068c:	4603      	mov	r3, r0
 800068e:	e02d      	b.n	80006ec <nRF24_Reset+0x204>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | FIFO_STATUS, &FIFO_STATUS_DFT_VALUE));
 8000690:	2201      	movs	r2, #1
 8000692:	4925      	ldr	r1, [pc, #148]	; (8000728 <nRF24_Reset+0x240>)
 8000694:	2037      	movs	r0, #55	; 0x37
 8000696:	f000 f939 	bl	800090c <nRF24_SendCmd>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d006      	beq.n	80006ae <nRF24_Reset+0x1c6>
 80006a0:	2201      	movs	r2, #1
 80006a2:	4921      	ldr	r1, [pc, #132]	; (8000728 <nRF24_Reset+0x240>)
 80006a4:	2037      	movs	r0, #55	; 0x37
 80006a6:	f000 f931 	bl	800090c <nRF24_SendCmd>
 80006aa:	4603      	mov	r3, r0
 80006ac:	e01e      	b.n	80006ec <nRF24_Reset+0x204>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | DYNPD, &DYNPD_DFT_VALUE));
 80006ae:	2201      	movs	r2, #1
 80006b0:	491e      	ldr	r1, [pc, #120]	; (800072c <nRF24_Reset+0x244>)
 80006b2:	203c      	movs	r0, #60	; 0x3c
 80006b4:	f000 f92a 	bl	800090c <nRF24_SendCmd>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d006      	beq.n	80006cc <nRF24_Reset+0x1e4>
 80006be:	2201      	movs	r2, #1
 80006c0:	491a      	ldr	r1, [pc, #104]	; (800072c <nRF24_Reset+0x244>)
 80006c2:	203c      	movs	r0, #60	; 0x3c
 80006c4:	f000 f922 	bl	800090c <nRF24_SendCmd>
 80006c8:	4603      	mov	r3, r0
 80006ca:	e00f      	b.n	80006ec <nRF24_Reset+0x204>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | FEATURE, &FEATURE_DFT_VALUE));
 80006cc:	2201      	movs	r2, #1
 80006ce:	4918      	ldr	r1, [pc, #96]	; (8000730 <nRF24_Reset+0x248>)
 80006d0:	203d      	movs	r0, #61	; 0x3d
 80006d2:	f000 f91b 	bl	800090c <nRF24_SendCmd>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d006      	beq.n	80006ea <nRF24_Reset+0x202>
 80006dc:	2201      	movs	r2, #1
 80006de:	4914      	ldr	r1, [pc, #80]	; (8000730 <nRF24_Reset+0x248>)
 80006e0:	203d      	movs	r0, #61	; 0x3d
 80006e2:	f000 f913 	bl	800090c <nRF24_SendCmd>
 80006e6:	4603      	mov	r3, r0
 80006e8:	e000      	b.n	80006ec <nRF24_Reset+0x204>

    return NRF24_OK;
 80006ea:	2300      	movs	r3, #0
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000000 	.word	0x20000000
 80006f4:	20000001 	.word	0x20000001
 80006f8:	20000002 	.word	0x20000002
 80006fc:	20000003 	.word	0x20000003
 8000700:	20000004 	.word	0x20000004
 8000704:	20000005 	.word	0x20000005
 8000708:	20000006 	.word	0x20000006
 800070c:	20000007 	.word	0x20000007
 8000710:	200000a0 	.word	0x200000a0
 8000714:	200000a1 	.word	0x200000a1
 8000718:	200000a2 	.word	0x200000a2
 800071c:	200000a3 	.word	0x200000a3
 8000720:	200000a4 	.word	0x200000a4
 8000724:	200000a5 	.word	0x200000a5
 8000728:	20000008 	.word	0x20000008
 800072c:	200000a6 	.word	0x200000a6
 8000730:	200000a7 	.word	0x200000a7

08000734 <nRF24_UpdateMode>:

static nRF24_Status_t nRF24_UpdateMode(const operationModes_t mode)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
    uint8_t register_value = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	73fb      	strb	r3, [r7, #15]

    if (operationCurrentMode == mode) {
 8000742:	4b70      	ldr	r3, [pc, #448]	; (8000904 <nRF24_UpdateMode+0x1d0>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	79fa      	ldrb	r2, [r7, #7]
 8000748:	429a      	cmp	r2, r3
 800074a:	d101      	bne.n	8000750 <nRF24_UpdateMode+0x1c>
        return NRF24_OK;
 800074c:	2300      	movs	r3, #0
 800074e:	e0d4      	b.n	80008fa <nRF24_UpdateMode+0x1c6>
    }

    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | CONFIG, &register_value));
 8000750:	f107 030f 	add.w	r3, r7, #15
 8000754:	2201      	movs	r2, #1
 8000756:	4619      	mov	r1, r3
 8000758:	2000      	movs	r0, #0
 800075a:	f000 f8d7 	bl	800090c <nRF24_SendCmd>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d008      	beq.n	8000776 <nRF24_UpdateMode+0x42>
 8000764:	f107 030f 	add.w	r3, r7, #15
 8000768:	2201      	movs	r2, #1
 800076a:	4619      	mov	r1, r3
 800076c:	2000      	movs	r0, #0
 800076e:	f000 f8cd 	bl	800090c <nRF24_SendCmd>
 8000772:	4603      	mov	r3, r0
 8000774:	e0c1      	b.n	80008fa <nRF24_UpdateMode+0x1c6>

    switch (operationCurrentMode) {
 8000776:	4b63      	ldr	r3, [pc, #396]	; (8000904 <nRF24_UpdateMode+0x1d0>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b04      	cmp	r3, #4
 800077c:	f300 80b4 	bgt.w	80008e8 <nRF24_UpdateMode+0x1b4>
 8000780:	2b03      	cmp	r3, #3
 8000782:	f280 80a7 	bge.w	80008d4 <nRF24_UpdateMode+0x1a0>
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <nRF24_UpdateMode+0x5c>
 800078a:	2b01      	cmp	r3, #1
 800078c:	d020      	beq.n	80007d0 <nRF24_UpdateMode+0x9c>
            if (mode == STANDBYI) {
                nRF24_CE_LOW();
            }
            break;
        default:
            break;
 800078e:	e0ab      	b.n	80008e8 <nRF24_UpdateMode+0x1b4>
            if (mode == STANDBYI) {
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2b01      	cmp	r3, #1
 8000794:	f040 80aa 	bne.w	80008ec <nRF24_UpdateMode+0x1b8>
                register_value |= PWR_UP;
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	f043 0302 	orr.w	r3, r3, #2
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	73fb      	strb	r3, [r7, #15]
                CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | CONFIG, &(register_value)));
 80007a2:	f107 030f 	add.w	r3, r7, #15
 80007a6:	2201      	movs	r2, #1
 80007a8:	4619      	mov	r1, r3
 80007aa:	2020      	movs	r0, #32
 80007ac:	f000 f8ae 	bl	800090c <nRF24_SendCmd>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d008      	beq.n	80007c8 <nRF24_UpdateMode+0x94>
 80007b6:	f107 030f 	add.w	r3, r7, #15
 80007ba:	2201      	movs	r2, #1
 80007bc:	4619      	mov	r1, r3
 80007be:	2020      	movs	r0, #32
 80007c0:	f000 f8a4 	bl	800090c <nRF24_SendCmd>
 80007c4:	4603      	mov	r3, r0
 80007c6:	e098      	b.n	80008fa <nRF24_UpdateMode+0x1c6>
                HAL_Delay(START_UP_DELAY_MS);
 80007c8:	2002      	movs	r0, #2
 80007ca:	f000 fdf5 	bl	80013b8 <HAL_Delay>
            break;
 80007ce:	e08d      	b.n	80008ec <nRF24_UpdateMode+0x1b8>
            switch (mode) {
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	d040      	beq.n	8000858 <nRF24_UpdateMode+0x124>
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	dc60      	bgt.n	800089c <nRF24_UpdateMode+0x168>
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d002      	beq.n	80007e4 <nRF24_UpdateMode+0xb0>
 80007de:	2b03      	cmp	r3, #3
 80007e0:	d018      	beq.n	8000814 <nRF24_UpdateMode+0xe0>
 80007e2:	e05b      	b.n	800089c <nRF24_UpdateMode+0x168>
                    register_value &= ~PWR_UP;
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	f023 0302 	bic.w	r3, r3, #2
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	73fb      	strb	r3, [r7, #15]
                    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | CONFIG, &(register_value)));
 80007ee:	f107 030f 	add.w	r3, r7, #15
 80007f2:	2201      	movs	r2, #1
 80007f4:	4619      	mov	r1, r3
 80007f6:	2020      	movs	r0, #32
 80007f8:	f000 f888 	bl	800090c <nRF24_SendCmd>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d064      	beq.n	80008cc <nRF24_UpdateMode+0x198>
 8000802:	f107 030f 	add.w	r3, r7, #15
 8000806:	2201      	movs	r2, #1
 8000808:	4619      	mov	r1, r3
 800080a:	2020      	movs	r0, #32
 800080c:	f000 f87e 	bl	800090c <nRF24_SendCmd>
 8000810:	4603      	mov	r3, r0
 8000812:	e072      	b.n	80008fa <nRF24_UpdateMode+0x1c6>
                    register_value |= PRIM_RX;
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	b2db      	uxtb	r3, r3
 800081c:	73fb      	strb	r3, [r7, #15]
                    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | CONFIG, &(register_value)));
 800081e:	f107 030f 	add.w	r3, r7, #15
 8000822:	2201      	movs	r2, #1
 8000824:	4619      	mov	r1, r3
 8000826:	2020      	movs	r0, #32
 8000828:	f000 f870 	bl	800090c <nRF24_SendCmd>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d008      	beq.n	8000844 <nRF24_UpdateMode+0x110>
 8000832:	f107 030f 	add.w	r3, r7, #15
 8000836:	2201      	movs	r2, #1
 8000838:	4619      	mov	r1, r3
 800083a:	2020      	movs	r0, #32
 800083c:	f000 f866 	bl	800090c <nRF24_SendCmd>
 8000840:	4603      	mov	r3, r0
 8000842:	e05a      	b.n	80008fa <nRF24_UpdateMode+0x1c6>
                    nRF24_CE_HIGH();
 8000844:	2201      	movs	r2, #1
 8000846:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800084a:	482f      	ldr	r0, [pc, #188]	; (8000908 <nRF24_UpdateMode+0x1d4>)
 800084c:	f001 f896 	bl	800197c <HAL_GPIO_WritePin>
                    HAL_Delay(RX_DELAY_MS);
 8000850:	2001      	movs	r0, #1
 8000852:	f000 fdb1 	bl	80013b8 <HAL_Delay>
                    break;
 8000856:	e03c      	b.n	80008d2 <nRF24_UpdateMode+0x19e>
                    register_value |= PRIM_RX;
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	b2db      	uxtb	r3, r3
 8000860:	73fb      	strb	r3, [r7, #15]
                    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | CONFIG, &(register_value)));
 8000862:	f107 030f 	add.w	r3, r7, #15
 8000866:	2201      	movs	r2, #1
 8000868:	4619      	mov	r1, r3
 800086a:	2020      	movs	r0, #32
 800086c:	f000 f84e 	bl	800090c <nRF24_SendCmd>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d008      	beq.n	8000888 <nRF24_UpdateMode+0x154>
 8000876:	f107 030f 	add.w	r3, r7, #15
 800087a:	2201      	movs	r2, #1
 800087c:	4619      	mov	r1, r3
 800087e:	2020      	movs	r0, #32
 8000880:	f000 f844 	bl	800090c <nRF24_SendCmd>
 8000884:	4603      	mov	r3, r0
 8000886:	e038      	b.n	80008fa <nRF24_UpdateMode+0x1c6>
                    nRF24_CE_HIGH();
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800088e:	481e      	ldr	r0, [pc, #120]	; (8000908 <nRF24_UpdateMode+0x1d4>)
 8000890:	f001 f874 	bl	800197c <HAL_GPIO_WritePin>
                    HAL_Delay(TX_DELAY_MS);
 8000894:	2001      	movs	r0, #1
 8000896:	f000 fd8f 	bl	80013b8 <HAL_Delay>
                    break;
 800089a:	e01a      	b.n	80008d2 <nRF24_UpdateMode+0x19e>
                    register_value &= ~PWR_UP;
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	f023 0302 	bic.w	r3, r3, #2
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	73fb      	strb	r3, [r7, #15]
                    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | CONFIG, &(register_value)));
 80008a6:	f107 030f 	add.w	r3, r7, #15
 80008aa:	2201      	movs	r2, #1
 80008ac:	4619      	mov	r1, r3
 80008ae:	2020      	movs	r0, #32
 80008b0:	f000 f82c 	bl	800090c <nRF24_SendCmd>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d00a      	beq.n	80008d0 <nRF24_UpdateMode+0x19c>
 80008ba:	f107 030f 	add.w	r3, r7, #15
 80008be:	2201      	movs	r2, #1
 80008c0:	4619      	mov	r1, r3
 80008c2:	2020      	movs	r0, #32
 80008c4:	f000 f822 	bl	800090c <nRF24_SendCmd>
 80008c8:	4603      	mov	r3, r0
 80008ca:	e016      	b.n	80008fa <nRF24_UpdateMode+0x1c6>
                    break;
 80008cc:	bf00      	nop
 80008ce:	e010      	b.n	80008f2 <nRF24_UpdateMode+0x1be>
                    break;
 80008d0:	bf00      	nop
            break;
 80008d2:	e00e      	b.n	80008f2 <nRF24_UpdateMode+0x1be>
            if (mode == STANDBYI) {
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d10a      	bne.n	80008f0 <nRF24_UpdateMode+0x1bc>
                nRF24_CE_LOW();
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008e0:	4809      	ldr	r0, [pc, #36]	; (8000908 <nRF24_UpdateMode+0x1d4>)
 80008e2:	f001 f84b 	bl	800197c <HAL_GPIO_WritePin>
            break;
 80008e6:	e003      	b.n	80008f0 <nRF24_UpdateMode+0x1bc>
            break;
 80008e8:	bf00      	nop
 80008ea:	e002      	b.n	80008f2 <nRF24_UpdateMode+0x1be>
            break;
 80008ec:	bf00      	nop
 80008ee:	e000      	b.n	80008f2 <nRF24_UpdateMode+0x1be>
            break;
 80008f0:	bf00      	nop
    }

    operationCurrentMode = mode;
 80008f2:	4a04      	ldr	r2, [pc, #16]	; (8000904 <nRF24_UpdateMode+0x1d0>)
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	7013      	strb	r3, [r2, #0]

    return NRF24_OK;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000040 	.word	0x20000040
 8000908:	40020c00 	.word	0x40020c00

0800090c <nRF24_SendCmd>:

static nRF24_Status_t nRF24_SendCmd(uint8_t cmd, uint8_t * value, const uint8_t length)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af02      	add	r7, sp, #8
 8000912:	4603      	mov	r3, r0
 8000914:	6039      	str	r1, [r7, #0]
 8000916:	71fb      	strb	r3, [r7, #7]
 8000918:	4613      	mov	r3, r2
 800091a:	71bb      	strb	r3, [r7, #6]
    /* Start SPI communication */
    SPIx_CS_LOW();
 800091c:	2200      	movs	r2, #0
 800091e:	2110      	movs	r1, #16
 8000920:	4827      	ldr	r0, [pc, #156]	; (80009c0 <nRF24_SendCmd+0xb4>)
 8000922:	f001 f82b 	bl	800197c <HAL_GPIO_WritePin>

    HAL_Delay(1);
 8000926:	2001      	movs	r0, #1
 8000928:	f000 fd46 	bl	80013b8 <HAL_Delay>

    /* Send command */
    CHECK_SPI(HAL_SPI_TransmitReceive(&hspi1, &cmd, &(hnrf24->StatusRegister), 1, SPIx_TIMEOUT_MAX));
 800092c:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <nRF24_SendCmd+0xb8>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f103 020d 	add.w	r2, r3, #13
 8000934:	1df9      	adds	r1, r7, #7
 8000936:	f242 7310 	movw	r3, #10000	; 0x2710
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2301      	movs	r3, #1
 800093e:	4822      	ldr	r0, [pc, #136]	; (80009c8 <nRF24_SendCmd+0xbc>)
 8000940:	f002 f86a 	bl	8002a18 <HAL_SPI_TransmitReceive>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <nRF24_SendCmd+0x42>
 800094a:	2303      	movs	r3, #3
 800094c:	e033      	b.n	80009b6 <nRF24_SendCmd+0xaa>

    if (cmd & W_REGISTER || cmd == W_TX_PAYLOAD || cmd == W_TX_PAYLOAD_NOACK || cmd == W_ACK_PAYLOAD) {
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	f003 0320 	and.w	r3, r3, #32
 8000954:	2b00      	cmp	r3, #0
 8000956:	d108      	bne.n	800096a <nRF24_SendCmd+0x5e>
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	2ba0      	cmp	r3, #160	; 0xa0
 800095c:	d005      	beq.n	800096a <nRF24_SendCmd+0x5e>
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2bb0      	cmp	r3, #176	; 0xb0
 8000962:	d002      	beq.n	800096a <nRF24_SendCmd+0x5e>
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	2ba8      	cmp	r3, #168	; 0xa8
 8000968:	d10c      	bne.n	8000984 <nRF24_SendCmd+0x78>
        CHECK_SPI(HAL_SPI_Transmit(&hspi1, value, length, SPIx_TIMEOUT_MAX));
 800096a:	79bb      	ldrb	r3, [r7, #6]
 800096c:	b29a      	uxth	r2, r3
 800096e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000972:	6839      	ldr	r1, [r7, #0]
 8000974:	4814      	ldr	r0, [pc, #80]	; (80009c8 <nRF24_SendCmd+0xbc>)
 8000976:	f001 fd66 	bl	8002446 <HAL_SPI_Transmit>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d00e      	beq.n	800099e <nRF24_SendCmd+0x92>
 8000980:	2303      	movs	r3, #3
 8000982:	e018      	b.n	80009b6 <nRF24_SendCmd+0xaa>
    //} else if (cmd == R_REGISTER || cmd & R_REGISTER || cmd == R_RX_PAYLOAD || cmd == R_RX_PL_WID) {
    } else {
        CHECK_SPI(HAL_SPI_Receive(&hspi1, value, length, SPIx_TIMEOUT_MAX));
 8000984:	79bb      	ldrb	r3, [r7, #6]
 8000986:	b29a      	uxth	r2, r3
 8000988:	f242 7310 	movw	r3, #10000	; 0x2710
 800098c:	6839      	ldr	r1, [r7, #0]
 800098e:	480e      	ldr	r0, [pc, #56]	; (80009c8 <nRF24_SendCmd+0xbc>)
 8000990:	f001 feb7 	bl	8002702 <HAL_SPI_Receive>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <nRF24_SendCmd+0x92>
 800099a:	2303      	movs	r3, #3
 800099c:	e00b      	b.n	80009b6 <nRF24_SendCmd+0xaa>
    }

    HAL_Delay(1);
 800099e:	2001      	movs	r0, #1
 80009a0:	f000 fd0a 	bl	80013b8 <HAL_Delay>

    /* Stop SPI communication */
    SPIx_CS_HIGH();
 80009a4:	2201      	movs	r2, #1
 80009a6:	2110      	movs	r1, #16
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <nRF24_SendCmd+0xb4>)
 80009aa:	f000 ffe7 	bl	800197c <HAL_GPIO_WritePin>

    HAL_Delay(1);
 80009ae:	2001      	movs	r0, #1
 80009b0:	f000 fd02 	bl	80013b8 <HAL_Delay>

    return NRF24_OK;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40020000 	.word	0x40020000
 80009c4:	2000009c 	.word	0x2000009c
 80009c8:	20000044 	.word	0x20000044

080009cc <nRF24_SetRegister>:

static nRF24_Status_t nRF24_SetRegister(const uint8_t registerName, const uint8_t bit)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	460a      	mov	r2, r1
 80009d6:	71fb      	strb	r3, [r7, #7]
 80009d8:	4613      	mov	r3, r2
 80009da:	71bb      	strb	r3, [r7, #6]
    uint8_t registerValue = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	73fb      	strb	r3, [r7, #15]

    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | registerName, &registerValue));
 80009e0:	f107 010f 	add.w	r1, r7, #15
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	2201      	movs	r2, #1
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff8f 	bl	800090c <nRF24_SendCmd>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d008      	beq.n	8000a06 <nRF24_SetRegister+0x3a>
 80009f4:	f107 010f 	add.w	r1, r7, #15
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	2201      	movs	r2, #1
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff85 	bl	800090c <nRF24_SendCmd>
 8000a02:	4603      	mov	r3, r0
 8000a04:	e01e      	b.n	8000a44 <nRF24_SetRegister+0x78>
    registerValue |= bit;
 8000a06:	7bfa      	ldrb	r2, [r7, #15]
 8000a08:	79bb      	ldrb	r3, [r7, #6]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | registerName, &(registerValue)));
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	f043 0320 	orr.w	r3, r3, #32
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	f107 010f 	add.w	r1, r7, #15
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ff74 	bl	800090c <nRF24_SendCmd>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d00b      	beq.n	8000a42 <nRF24_SetRegister+0x76>
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	f043 0320 	orr.w	r3, r3, #32
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	f107 010f 	add.w	r1, r7, #15
 8000a36:	2201      	movs	r2, #1
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff67 	bl	800090c <nRF24_SendCmd>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	e000      	b.n	8000a44 <nRF24_SetRegister+0x78>

    return NRF24_OK;
 8000a42:	2300      	movs	r3, #0
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <nRF24_ResetRegister>:

static nRF24_Status_t nRF24_ResetRegister(const uint8_t registerName, const uint8_t bit)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	460a      	mov	r2, r1
 8000a56:	71fb      	strb	r3, [r7, #7]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	71bb      	strb	r3, [r7, #6]
    uint8_t registerValue = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	73fb      	strb	r3, [r7, #15]

    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | registerName, &registerValue));
 8000a60:	f107 010f 	add.w	r1, r7, #15
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	2201      	movs	r2, #1
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff4f 	bl	800090c <nRF24_SendCmd>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d008      	beq.n	8000a86 <nRF24_ResetRegister+0x3a>
 8000a74:	f107 010f 	add.w	r1, r7, #15
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff45 	bl	800090c <nRF24_SendCmd>
 8000a82:	4603      	mov	r3, r0
 8000a84:	e023      	b.n	8000ace <nRF24_ResetRegister+0x82>
    registerValue &= ~(bit);
 8000a86:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	b25a      	sxtb	r2, r3
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	b25b      	sxtb	r3, r3
 8000a92:	4013      	ands	r3, r2
 8000a94:	b25b      	sxtb	r3, r3
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | registerName, &(registerValue)));
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	f043 0320 	orr.w	r3, r3, #32
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	f107 010f 	add.w	r1, r7, #15
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff2f 	bl	800090c <nRF24_SendCmd>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d00b      	beq.n	8000acc <nRF24_ResetRegister+0x80>
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	f043 0320 	orr.w	r3, r3, #32
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	f107 010f 	add.w	r1, r7, #15
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff ff22 	bl	800090c <nRF24_SendCmd>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	e000      	b.n	8000ace <nRF24_ResetRegister+0x82>

    return NRF24_OK;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <HAL_SPI_MspInit>:

/**
  * @brief  Initializes SPI MSP.
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08c      	sub	sp, #48	; 0x30
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef  GPIO_InitStruct;

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    SPIx_SCK_GPIO_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61bb      	str	r3, [r7, #24]
 8000ae4:	4b37      	ldr	r3, [pc, #220]	; (8000bc4 <HAL_SPI_MspInit+0xec>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae8:	4a36      	ldr	r2, [pc, #216]	; (8000bc4 <HAL_SPI_MspInit+0xec>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6313      	str	r3, [r2, #48]	; 0x30
 8000af0:	4b34      	ldr	r3, [pc, #208]	; (8000bc4 <HAL_SPI_MspInit+0xec>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	61bb      	str	r3, [r7, #24]
 8000afa:	69bb      	ldr	r3, [r7, #24]
    SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	4b30      	ldr	r3, [pc, #192]	; (8000bc4 <HAL_SPI_MspInit+0xec>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	4a2f      	ldr	r2, [pc, #188]	; (8000bc4 <HAL_SPI_MspInit+0xec>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0c:	4b2d      	ldr	r3, [pc, #180]	; (8000bc4 <HAL_SPI_MspInit+0xec>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	697b      	ldr	r3, [r7, #20]
    SPIx_CS_GPIO_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <HAL_SPI_MspInit+0xec>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	4a28      	ldr	r2, [pc, #160]	; (8000bc4 <HAL_SPI_MspInit+0xec>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	6313      	str	r3, [r2, #48]	; 0x30
 8000b28:	4b26      	ldr	r3, [pc, #152]	; (8000bc4 <HAL_SPI_MspInit+0xec>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	693b      	ldr	r3, [r7, #16]

    /* Configure SPI SCK */
    GPIO_InitStruct.Pin = SPIx_SCK_PIN;
 8000b34:	2320      	movs	r3, #32
 8000b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 8000b44:	2305      	movs	r3, #5
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	481e      	ldr	r0, [pc, #120]	; (8000bc8 <HAL_SPI_MspInit+0xf0>)
 8000b50:	f000 fd68 	bl	8001624 <HAL_GPIO_Init>

    /* Configure SPI MISO and MOSI */
    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = SPIx_MISO_MOSI_AF;
 8000b60:	2305      	movs	r3, #5
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    //GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
    HAL_GPIO_Init(SPIx_MISO_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4817      	ldr	r0, [pc, #92]	; (8000bc8 <HAL_SPI_MspInit+0xf0>)
 8000b6c:	f000 fd5a 	bl	8001624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8000b70:	2340      	movs	r3, #64	; 0x40
 8000b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 8000b74:	2302      	movs	r3, #2
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPIx_MISO_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4812      	ldr	r0, [pc, #72]	; (8000bc8 <HAL_SPI_MspInit+0xf0>)
 8000b80:	f000 fd50 	bl	8001624 <HAL_GPIO_Init>

    /* Configure SPI CS */
    GPIO_InitStruct.Pin = SPIx_CS_PIN;
 8000b84:	2310      	movs	r3, #16
 8000b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(SPIx_CS_GPIO_PORT, &GPIO_InitStruct);
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <HAL_SPI_MspInit+0xf0>)
 8000b9c:	f000 fd42 	bl	8001624 <HAL_GPIO_Init>

    /*** Configure the SPI peripheral ***/
    /* Enable SPI clock */
    SPIx_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <HAL_SPI_MspInit+0xec>)
 8000ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba8:	4a06      	ldr	r2, [pc, #24]	; (8000bc4 <HAL_SPI_MspInit+0xec>)
 8000baa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bae:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <HAL_SPI_MspInit+0xec>)
 8000bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	3730      	adds	r7, #48	; 0x30
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020000 	.word	0x40020000

08000bcc <mySPIx_Init>:

/**
  * @brief  Initializes SPI.
  */
static void mySPIx_Init()
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
    if(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET) {
 8000bd0:	4818      	ldr	r0, [pc, #96]	; (8000c34 <mySPIx_Init+0x68>)
 8000bd2:	f002 f933 	bl	8002e3c <HAL_SPI_GetState>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d128      	bne.n	8000c2e <mySPIx_Init+0x62>
        /* SPI Config */
        hspi1.Instance = SPIx;
 8000bdc:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <mySPIx_Init+0x68>)
 8000bde:	4a16      	ldr	r2, [pc, #88]	; (8000c38 <mySPIx_Init+0x6c>)
 8000be0:	601a      	str	r2, [r3, #0]
            - SD card SPI interface max baudrate is 25MHz for write/read
        to feat these constraints SPI baudrate is set to:
            - For STM32F412ZG devices: 12,5 MHz maximum (PCLK2/SPI_BAUDRATEPRESCALER_8 = 100 MHz/8 = 12,5 MHz)
            - For STM32F446ZE/STM32F429ZI devices: 11,25 MHz maximum (PCLK2/SPI_BAUDRATEPRESCALER_8 = 90 MHz/8 = 11,25 MHz)
        */
        hspi1.Init.Mode = SPI_MODE_MASTER;
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <mySPIx_Init+0x68>)
 8000be4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000be8:	605a      	str	r2, [r3, #4]
        hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bea:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <mySPIx_Init+0x68>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
        hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bf0:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <mySPIx_Init+0x68>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
        hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <mySPIx_Init+0x68>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
        hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <mySPIx_Init+0x68>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	615a      	str	r2, [r3, #20]
        hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <mySPIx_Init+0x68>)
 8000c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c08:	619a      	str	r2, [r3, #24]
        hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <mySPIx_Init+0x68>)
 8000c0c:	2238      	movs	r2, #56	; 0x38
 8000c0e:	61da      	str	r2, [r3, #28]
        hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <mySPIx_Init+0x68>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	621a      	str	r2, [r3, #32]
        hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <mySPIx_Init+0x68>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	625a      	str	r2, [r3, #36]	; 0x24
        hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <mySPIx_Init+0x68>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	629a      	str	r2, [r3, #40]	; 0x28
        hspi1.Init.CRCPolynomial = 10;
 8000c22:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <mySPIx_Init+0x68>)
 8000c24:	220a      	movs	r2, #10
 8000c26:	62da      	str	r2, [r3, #44]	; 0x2c

        //HAL_SPI_MspInit(&hspi1);
        HAL_SPI_Init(&hspi1);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <mySPIx_Init+0x68>)
 8000c2a:	f001 fb7b 	bl	8002324 <HAL_SPI_Init>
    }
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000044 	.word	0x20000044
 8000c38:	40013000 	.word	0x40013000

08000c3c <myGPIO_Init>:

static void myGPIO_Init()
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStruct;

    /* GPIO Ports Clock Enable */
    nRF24_CE_GPIO_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <myGPIO_Init+0x9c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a23      	ldr	r2, [pc, #140]	; (8000cd8 <myGPIO_Init+0x9c>)
 8000c4c:	f043 0308 	orr.w	r3, r3, #8
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <myGPIO_Init+0x9c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0308 	and.w	r3, r3, #8
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
    nRF24_IRQ_GPIO_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <myGPIO_Init+0x9c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a1c      	ldr	r2, [pc, #112]	; (8000cd8 <myGPIO_Init+0x9c>)
 8000c68:	f043 0308 	orr.w	r3, r3, #8
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <myGPIO_Init+0x9c>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0308 	and.w	r3, r3, #8
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

    HAL_GPIO_WritePin(nRF24_CE_GPIO_PORT, nRF24_CE_PIN, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c80:	4816      	ldr	r0, [pc, #88]	; (8000cdc <myGPIO_Init+0xa0>)
 8000c82:	f000 fe7b 	bl	800197c <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = nRF24_CE_PIN;
 8000c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c94:	2302      	movs	r3, #2
 8000c96:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(nRF24_CE_GPIO_PORT, &GPIO_InitStruct);
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480f      	ldr	r0, [pc, #60]	; (8000cdc <myGPIO_Init+0xa0>)
 8000ca0:	f000 fcc0 	bl	8001624 <HAL_GPIO_Init>

    //HAL_GPIO_WritePin(nRF24_IRQ_GPIO_PORT, nRF24_IRQ_PIN, GPIO_PIN_RESET);

    /* Configure IRQ GPIO pin */
    GPIO_InitStruct.Pin = nRF24_IRQ_PIN;
 8000ca4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000caa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(nRF24_IRQ_GPIO_PORT, &GPIO_InitStruct);
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4808      	ldr	r0, [pc, #32]	; (8000cdc <myGPIO_Init+0xa0>)
 8000cbc:	f000 fcb2 	bl	8001624 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    /* PROBABLEMENTE ESTO ESTE MAL */
    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2008      	movs	r0, #8
 8000cc6:	f000 fc76 	bl	80015b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000cca:	2008      	movs	r0, #8
 8000ccc:	f000 fc8f 	bl	80015ee <HAL_NVIC_EnableIRQ>
}
 8000cd0:	bf00      	nop
 8000cd2:	3720      	adds	r7, #32
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020c00 	.word	0x40020c00

08000ce0 <nRF24_Init>:

/* Public functions ----------------------------------------------------------*/
nRF24_Status_t nRF24_Init(nRF24_HandleTypeDef * pHnrf24)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
    uint8_t register_value = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	73fb      	strb	r3, [r7, #15]

    hnrf24 = pHnrf24;
 8000cec:	4aa8      	ldr	r2, [pc, #672]	; (8000f90 <nRF24_Init+0x2b0>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6013      	str	r3, [r2, #0]

    myGPIO_Init();
 8000cf2:	f7ff ffa3 	bl	8000c3c <myGPIO_Init>
    mySPIx_Init();
 8000cf6:	f7ff ff69 	bl	8000bcc <mySPIx_Init>

    HAL_Delay(10);
 8000cfa:	200a      	movs	r0, #10
 8000cfc:	f000 fb5c 	bl	80013b8 <HAL_Delay>
    CHECK_INTERNAL(nRF24_Reset());
 8000d00:	f7ff fbf2 	bl	80004e8 <nRF24_Reset>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <nRF24_Init+0x32>
 8000d0a:	f7ff fbed 	bl	80004e8 <nRF24_Reset>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	e1e3      	b.n	80010da <nRF24_Init+0x3fa>
    HAL_Delay(10);
 8000d12:	200a      	movs	r0, #10
 8000d14:	f000 fb50 	bl	80013b8 <HAL_Delay>
    CHECK_INTERNAL(nRF24_UpdateMode(POWER_DOWN));
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f7ff fd0b 	bl	8000734 <nRF24_UpdateMode>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d004      	beq.n	8000d2e <nRF24_Init+0x4e>
 8000d24:	2000      	movs	r0, #0
 8000d26:	f7ff fd05 	bl	8000734 <nRF24_UpdateMode>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	e1d5      	b.n	80010da <nRF24_Init+0x3fa>
    HAL_Delay(10);
 8000d2e:	200a      	movs	r0, #10
 8000d30:	f000 fb42 	bl	80013b8 <HAL_Delay>
    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | CONFIG, &register_value));
 8000d34:	f107 030f 	add.w	r3, r7, #15
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f7ff fde5 	bl	800090c <nRF24_SendCmd>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d008      	beq.n	8000d5a <nRF24_Init+0x7a>
 8000d48:	f107 030f 	add.w	r3, r7, #15
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	4619      	mov	r1, r3
 8000d50:	2000      	movs	r0, #0
 8000d52:	f7ff fddb 	bl	800090c <nRF24_SendCmd>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e1bf      	b.n	80010da <nRF24_Init+0x3fa>
    // Responde 0x08
    //register_value |= hnrf24->Init.CrcEnable ? EN_CRC : 0x00;
    //register_value |= hnrf24->Init.CrcEncodingScheme ? CRCO : 0x00;
    //register_value |= hnrf24->Init.PrimRx ? PRIM_RX : ~PRIM_RX;

    register_value &= ~(EN_CRC | CRCO); // Limpiar los bits EN_CRC y CRCO en register_value
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	f023 030c 	bic.w	r3, r3, #12
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	73fb      	strb	r3, [r7, #15]
    if (hnrf24->Init.CrcEnable) {
 8000d64:	4b8a      	ldr	r3, [pc, #552]	; (8000f90 <nRF24_Init+0x2b0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d004      	beq.n	8000d78 <nRF24_Init+0x98>
        register_value |= EN_CRC; // Establecer el bit EN_CRC si CrcEnable es verdadero
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	73fb      	strb	r3, [r7, #15]
    }
    if (hnrf24->Init.CrcEncodingScheme == CRC_ENCODING_2_BYTES) {
 8000d78:	4b85      	ldr	r3, [pc, #532]	; (8000f90 <nRF24_Init+0x2b0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	785b      	ldrb	r3, [r3, #1]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d104      	bne.n	8000d8c <nRF24_Init+0xac>
        register_value |= CRCO; // Establecer el bit CRCO si CrcEncodingScheme es CRC_ENCODING_2_BYTES
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	73fb      	strb	r3, [r7, #15]
    }
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | CONFIG, &register_value));
 8000d8c:	f107 030f 	add.w	r3, r7, #15
 8000d90:	2201      	movs	r2, #1
 8000d92:	4619      	mov	r1, r3
 8000d94:	2020      	movs	r0, #32
 8000d96:	f7ff fdb9 	bl	800090c <nRF24_SendCmd>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d008      	beq.n	8000db2 <nRF24_Init+0xd2>
 8000da0:	f107 030f 	add.w	r3, r7, #15
 8000da4:	2201      	movs	r2, #1
 8000da6:	4619      	mov	r1, r3
 8000da8:	2020      	movs	r0, #32
 8000daa:	f7ff fdaf 	bl	800090c <nRF24_SendCmd>
 8000dae:	4603      	mov	r3, r0
 8000db0:	e193      	b.n	80010da <nRF24_Init+0x3fa>

    nRF24_SetFeature(EN_ACK_PAY, hnrf24->Init.AutoAckEnable);
 8000db2:	4b77      	ldr	r3, [pc, #476]	; (8000f90 <nRF24_Init+0x2b0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	789b      	ldrb	r3, [r3, #2]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	bf14      	ite	ne
 8000dbc:	2301      	movne	r3, #1
 8000dbe:	2300      	moveq	r3, #0
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	2002      	movs	r0, #2
 8000dc6:	f000 f98f 	bl	80010e8 <nRF24_SetFeature>
    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | EN_AA, &register_value));
 8000dca:	f107 030f 	add.w	r3, r7, #15
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f7ff fd9a 	bl	800090c <nRF24_SendCmd>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d008      	beq.n	8000df0 <nRF24_Init+0x110>
 8000dde:	f107 030f 	add.w	r3, r7, #15
 8000de2:	2201      	movs	r2, #1
 8000de4:	4619      	mov	r1, r3
 8000de6:	2001      	movs	r0, #1
 8000de8:	f7ff fd90 	bl	800090c <nRF24_SendCmd>
 8000dec:	4603      	mov	r3, r0
 8000dee:	e174      	b.n	80010da <nRF24_Init+0x3fa>
    // Protection for AutoAckDataPipes
    hnrf24->Init.AutoAckDataPipes &= ~(0b11000000);
 8000df0:	4b67      	ldr	r3, [pc, #412]	; (8000f90 <nRF24_Init+0x2b0>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	78da      	ldrb	r2, [r3, #3]
 8000df6:	4b66      	ldr	r3, [pc, #408]	; (8000f90 <nRF24_Init+0x2b0>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	70da      	strb	r2, [r3, #3]
    register_value |= hnrf24->Init.AutoAckDataPipes;
 8000e02:	4b63      	ldr	r3, [pc, #396]	; (8000f90 <nRF24_Init+0x2b0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	78da      	ldrb	r2, [r3, #3]
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | EN_AA, &register_value));
 8000e10:	f107 030f 	add.w	r3, r7, #15
 8000e14:	2201      	movs	r2, #1
 8000e16:	4619      	mov	r1, r3
 8000e18:	2021      	movs	r0, #33	; 0x21
 8000e1a:	f7ff fd77 	bl	800090c <nRF24_SendCmd>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d008      	beq.n	8000e36 <nRF24_Init+0x156>
 8000e24:	f107 030f 	add.w	r3, r7, #15
 8000e28:	2201      	movs	r2, #1
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	2021      	movs	r0, #33	; 0x21
 8000e2e:	f7ff fd6d 	bl	800090c <nRF24_SendCmd>
 8000e32:	4603      	mov	r3, r0
 8000e34:	e151      	b.n	80010da <nRF24_Init+0x3fa>

    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | EN_RXADDR, &register_value));
 8000e36:	f107 030f 	add.w	r3, r7, #15
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	2002      	movs	r0, #2
 8000e40:	f7ff fd64 	bl	800090c <nRF24_SendCmd>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d008      	beq.n	8000e5c <nRF24_Init+0x17c>
 8000e4a:	f107 030f 	add.w	r3, r7, #15
 8000e4e:	2201      	movs	r2, #1
 8000e50:	4619      	mov	r1, r3
 8000e52:	2002      	movs	r0, #2
 8000e54:	f7ff fd5a 	bl	800090c <nRF24_SendCmd>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	e13e      	b.n	80010da <nRF24_Init+0x3fa>
    // Protection for RxDataPipes
    hnrf24->Init.RxDataPipes &= ~(0b11000000);
 8000e5c:	4b4c      	ldr	r3, [pc, #304]	; (8000f90 <nRF24_Init+0x2b0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	791a      	ldrb	r2, [r3, #4]
 8000e62:	4b4b      	ldr	r3, [pc, #300]	; (8000f90 <nRF24_Init+0x2b0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	711a      	strb	r2, [r3, #4]
    register_value |= hnrf24->Init.RxDataPipes;
 8000e6e:	4b48      	ldr	r3, [pc, #288]	; (8000f90 <nRF24_Init+0x2b0>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	791a      	ldrb	r2, [r3, #4]
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | EN_RXADDR, &register_value));
 8000e7c:	f107 030f 	add.w	r3, r7, #15
 8000e80:	2201      	movs	r2, #1
 8000e82:	4619      	mov	r1, r3
 8000e84:	2022      	movs	r0, #34	; 0x22
 8000e86:	f7ff fd41 	bl	800090c <nRF24_SendCmd>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d008      	beq.n	8000ea2 <nRF24_Init+0x1c2>
 8000e90:	f107 030f 	add.w	r3, r7, #15
 8000e94:	2201      	movs	r2, #1
 8000e96:	4619      	mov	r1, r3
 8000e98:	2022      	movs	r0, #34	; 0x22
 8000e9a:	f7ff fd37 	bl	800090c <nRF24_SendCmd>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	e11b      	b.n	80010da <nRF24_Init+0x3fa>

    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | SETUP_AW, &register_value));
 8000ea2:	f107 030f 	add.w	r3, r7, #15
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	2003      	movs	r0, #3
 8000eac:	f7ff fd2e 	bl	800090c <nRF24_SendCmd>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d008      	beq.n	8000ec8 <nRF24_Init+0x1e8>
 8000eb6:	f107 030f 	add.w	r3, r7, #15
 8000eba:	2201      	movs	r2, #1
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	2003      	movs	r0, #3
 8000ec0:	f7ff fd24 	bl	800090c <nRF24_SendCmd>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	e108      	b.n	80010da <nRF24_Init+0x3fa>
    register_value |= hnrf24->Init.Aw;
 8000ec8:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <nRF24_Init+0x2b0>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	795a      	ldrb	r2, [r3, #5]
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | SETUP_AW, &register_value));
 8000ed6:	f107 030f 	add.w	r3, r7, #15
 8000eda:	2201      	movs	r2, #1
 8000edc:	4619      	mov	r1, r3
 8000ede:	2023      	movs	r0, #35	; 0x23
 8000ee0:	f7ff fd14 	bl	800090c <nRF24_SendCmd>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d008      	beq.n	8000efc <nRF24_Init+0x21c>
 8000eea:	f107 030f 	add.w	r3, r7, #15
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	2023      	movs	r0, #35	; 0x23
 8000ef4:	f7ff fd0a 	bl	800090c <nRF24_SendCmd>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	e0ee      	b.n	80010da <nRF24_Init+0x3fa>

    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | RF_CH, &register_value));
 8000efc:	f107 030f 	add.w	r3, r7, #15
 8000f00:	2201      	movs	r2, #1
 8000f02:	4619      	mov	r1, r3
 8000f04:	2005      	movs	r0, #5
 8000f06:	f7ff fd01 	bl	800090c <nRF24_SendCmd>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d008      	beq.n	8000f22 <nRF24_Init+0x242>
 8000f10:	f107 030f 	add.w	r3, r7, #15
 8000f14:	2201      	movs	r2, #1
 8000f16:	4619      	mov	r1, r3
 8000f18:	2005      	movs	r0, #5
 8000f1a:	f7ff fcf7 	bl	800090c <nRF24_SendCmd>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	e0db      	b.n	80010da <nRF24_Init+0x3fa>
    hnrf24->Init.RfChannel &= ~(0b10000000);
 8000f22:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <nRF24_Init+0x2b0>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	799a      	ldrb	r2, [r3, #6]
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <nRF24_Init+0x2b0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	719a      	strb	r2, [r3, #6]
    register_value |= hnrf24->Init.RfChannel;
 8000f34:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <nRF24_Init+0x2b0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	799a      	ldrb	r2, [r3, #6]
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RF_CH, &register_value));
 8000f42:	f107 030f 	add.w	r3, r7, #15
 8000f46:	2201      	movs	r2, #1
 8000f48:	4619      	mov	r1, r3
 8000f4a:	2025      	movs	r0, #37	; 0x25
 8000f4c:	f7ff fcde 	bl	800090c <nRF24_SendCmd>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d008      	beq.n	8000f68 <nRF24_Init+0x288>
 8000f56:	f107 030f 	add.w	r3, r7, #15
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	2025      	movs	r0, #37	; 0x25
 8000f60:	f7ff fcd4 	bl	800090c <nRF24_SendCmd>
 8000f64:	4603      	mov	r3, r0
 8000f66:	e0b8      	b.n	80010da <nRF24_Init+0x3fa>

    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | RF_SETUP, &register_value));
 8000f68:	f107 030f 	add.w	r3, r7, #15
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4619      	mov	r1, r3
 8000f70:	2006      	movs	r0, #6
 8000f72:	f7ff fccb 	bl	800090c <nRF24_SendCmd>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00b      	beq.n	8000f94 <nRF24_Init+0x2b4>
 8000f7c:	f107 030f 	add.w	r3, r7, #15
 8000f80:	2201      	movs	r2, #1
 8000f82:	4619      	mov	r1, r3
 8000f84:	2006      	movs	r0, #6
 8000f86:	f7ff fcc1 	bl	800090c <nRF24_SendCmd>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	e0a5      	b.n	80010da <nRF24_Init+0x3fa>
 8000f8e:	bf00      	nop
 8000f90:	2000009c 	.word	0x2000009c
    register_value &= ~(CONT_WAVE); // Limpiar los bits CONT_WAVE en register_value
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	73fb      	strb	r3, [r7, #15]
    if (hnrf24->Init.ContWave) {
 8000f9e:	4b51      	ldr	r3, [pc, #324]	; (80010e4 <nRF24_Init+0x404>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	79db      	ldrb	r3, [r3, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d004      	beq.n	8000fb2 <nRF24_Init+0x2d2>
        register_value |= CONT_WAVE; // Establecer el bit CONT_WAVE si ContWave es verdadero
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	73fb      	strb	r3, [r7, #15]
    }
    //register_value |= hnrf24->Init.ContWave ? CONT_WAVE : ~CONT_WAVE;
    register_value &= ~(RF_DR_LOW | RF_DR_HIGH);
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	73fb      	strb	r3, [r7, #15]
    register_value |= hnrf24->Init.RfDataRate;
 8000fbc:	4b49      	ldr	r3, [pc, #292]	; (80010e4 <nRF24_Init+0x404>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	7a5a      	ldrb	r2, [r3, #9]
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	73fb      	strb	r3, [r7, #15]
    register_value &= ~(RF_PWR_2 | RF_PWR_1);
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	f023 0306 	bic.w	r3, r3, #6
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	73fb      	strb	r3, [r7, #15]
    register_value |= hnrf24->Init.RfPower;
 8000fd4:	4b43      	ldr	r3, [pc, #268]	; (80010e4 <nRF24_Init+0x404>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	7a1a      	ldrb	r2, [r3, #8]
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RF_SETUP, &register_value));
 8000fe2:	f107 030f 	add.w	r3, r7, #15
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4619      	mov	r1, r3
 8000fea:	2026      	movs	r0, #38	; 0x26
 8000fec:	f7ff fc8e 	bl	800090c <nRF24_SendCmd>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d008      	beq.n	8001008 <nRF24_Init+0x328>
 8000ff6:	f107 030f 	add.w	r3, r7, #15
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	2026      	movs	r0, #38	; 0x26
 8001000:	f7ff fc84 	bl	800090c <nRF24_SendCmd>
 8001004:	4603      	mov	r3, r0
 8001006:	e068      	b.n	80010da <nRF24_Init+0x3fa>

    nRF24_SetFeature(EN_DPL, hnrf24->Init.DplEnable);
 8001008:	4b36      	ldr	r3, [pc, #216]	; (80010e4 <nRF24_Init+0x404>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	7a9b      	ldrb	r3, [r3, #10]
 800100e:	2b00      	cmp	r3, #0
 8001010:	bf14      	ite	ne
 8001012:	2301      	movne	r3, #1
 8001014:	2300      	moveq	r3, #0
 8001016:	b2db      	uxtb	r3, r3
 8001018:	4619      	mov	r1, r3
 800101a:	2004      	movs	r0, #4
 800101c:	f000 f864 	bl	80010e8 <nRF24_SetFeature>
    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | DYNPD, &register_value));
 8001020:	f107 030f 	add.w	r3, r7, #15
 8001024:	2201      	movs	r2, #1
 8001026:	4619      	mov	r1, r3
 8001028:	201c      	movs	r0, #28
 800102a:	f7ff fc6f 	bl	800090c <nRF24_SendCmd>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d008      	beq.n	8001046 <nRF24_Init+0x366>
 8001034:	f107 030f 	add.w	r3, r7, #15
 8001038:	2201      	movs	r2, #1
 800103a:	4619      	mov	r1, r3
 800103c:	201c      	movs	r0, #28
 800103e:	f7ff fc65 	bl	800090c <nRF24_SendCmd>
 8001042:	4603      	mov	r3, r0
 8001044:	e049      	b.n	80010da <nRF24_Init+0x3fa>
    //Protection for DplEnableDataPipes
    hnrf24->Init.DplEnableDataPipes &= ~(0b11000000);
 8001046:	4b27      	ldr	r3, [pc, #156]	; (80010e4 <nRF24_Init+0x404>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	7ada      	ldrb	r2, [r3, #11]
 800104c:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <nRF24_Init+0x404>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	72da      	strb	r2, [r3, #11]
    register_value |= hnrf24->Init.DplEnableDataPipes;
 8001058:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <nRF24_Init+0x404>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	7ada      	ldrb	r2, [r3, #11]
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	4313      	orrs	r3, r2
 8001062:	b2db      	uxtb	r3, r3
 8001064:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | DYNPD, &register_value));
 8001066:	f107 030f 	add.w	r3, r7, #15
 800106a:	2201      	movs	r2, #1
 800106c:	4619      	mov	r1, r3
 800106e:	203c      	movs	r0, #60	; 0x3c
 8001070:	f7ff fc4c 	bl	800090c <nRF24_SendCmd>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d008      	beq.n	800108c <nRF24_Init+0x3ac>
 800107a:	f107 030f 	add.w	r3, r7, #15
 800107e:	2201      	movs	r2, #1
 8001080:	4619      	mov	r1, r3
 8001082:	203c      	movs	r0, #60	; 0x3c
 8001084:	f7ff fc42 	bl	800090c <nRF24_SendCmd>
 8001088:	4603      	mov	r3, r0
 800108a:	e026      	b.n	80010da <nRF24_Init+0x3fa>

    nRF24_SetFeature(EN_DYN_ACK, hnrf24->Init.DynAckEnable);
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <nRF24_Init+0x404>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	7b1b      	ldrb	r3, [r3, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	bf14      	ite	ne
 8001096:	2301      	movne	r3, #1
 8001098:	2300      	moveq	r3, #0
 800109a:	b2db      	uxtb	r3, r3
 800109c:	4619      	mov	r1, r3
 800109e:	2001      	movs	r0, #1
 80010a0:	f000 f822 	bl	80010e8 <nRF24_SetFeature>
    HAL_Delay(10);
 80010a4:	200a      	movs	r0, #10
 80010a6:	f000 f987 	bl	80013b8 <HAL_Delay>
    nRF24_UpdateMode(STANDBYI);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f7ff fb42 	bl	8000734 <nRF24_UpdateMode>
    HAL_Delay(10);
 80010b0:	200a      	movs	r0, #10
 80010b2:	f000 f981 	bl	80013b8 <HAL_Delay>
    if (hnrf24->DeviceMode == TRANSMITTER_MODE) {
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <nRF24_Init+0x404>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	7b9b      	ldrb	r3, [r3, #14]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d103      	bne.n	80010c8 <nRF24_Init+0x3e8>
        nRF24_UpdateMode(PTX);
 80010c0:	2004      	movs	r0, #4
 80010c2:	f7ff fb37 	bl	8000734 <nRF24_UpdateMode>
 80010c6:	e007      	b.n	80010d8 <nRF24_Init+0x3f8>
    } else if (hnrf24->DeviceMode == RECEIVER_MODE) {
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <nRF24_Init+0x404>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	7b9b      	ldrb	r3, [r3, #14]
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d102      	bne.n	80010d8 <nRF24_Init+0x3f8>
        nRF24_UpdateMode(PRX);
 80010d2:	2003      	movs	r0, #3
 80010d4:	f7ff fb2e 	bl	8000734 <nRF24_UpdateMode>
    }

    return NRF24_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	2000009c 	.word	0x2000009c

080010e8 <nRF24_SetFeature>:

    return NRF24_OK;
}

nRF24_Status_t nRF24_SetFeature(const uint8_t bit, const bool_t enable)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	460a      	mov	r2, r1
 80010f2:	71fb      	strb	r3, [r7, #7]
 80010f4:	4613      	mov	r3, r2
 80010f6:	71bb      	strb	r3, [r7, #6]
    if (enable) {
 80010f8:	79bb      	ldrb	r3, [r7, #6]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00e      	beq.n	800111c <nRF24_SetFeature+0x34>
        CHECK_INTERNAL(nRF24_SetRegister(FEATURE, bit));
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	4619      	mov	r1, r3
 8001102:	201d      	movs	r0, #29
 8001104:	f7ff fc62 	bl	80009cc <nRF24_SetRegister>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d015      	beq.n	800113a <nRF24_SetFeature+0x52>
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	4619      	mov	r1, r3
 8001112:	201d      	movs	r0, #29
 8001114:	f7ff fc5a 	bl	80009cc <nRF24_SetRegister>
 8001118:	4603      	mov	r3, r0
 800111a:	e00f      	b.n	800113c <nRF24_SetFeature+0x54>
    } else {
        CHECK_INTERNAL(nRF24_ResetRegister(FEATURE, bit));
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	4619      	mov	r1, r3
 8001120:	201d      	movs	r0, #29
 8001122:	f7ff fc93 	bl	8000a4c <nRF24_ResetRegister>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d006      	beq.n	800113a <nRF24_SetFeature+0x52>
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	4619      	mov	r1, r3
 8001130:	201d      	movs	r0, #29
 8001132:	f7ff fc8b 	bl	8000a4c <nRF24_ResetRegister>
 8001136:	4603      	mov	r3, r0
 8001138:	e000      	b.n	800113c <nRF24_SetFeature+0x54>
    }

    return NRF24_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d10e      	bne.n	8001172 <BSP_LED_Init+0x2e>
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <BSP_LED_Init+0x94>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	4a1e      	ldr	r2, [pc, #120]	; (80011d8 <BSP_LED_Init+0x94>)
 800115e:	f043 0302 	orr.w	r3, r3, #2
 8001162:	6313      	str	r3, [r2, #48]	; 0x30
 8001164:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <BSP_LED_Init+0x94>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	e00d      	b.n	800118e <BSP_LED_Init+0x4a>
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <BSP_LED_Init+0x94>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <BSP_LED_Init+0x94>)
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <BSP_LED_Init+0x94>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	4a12      	ldr	r2, [pc, #72]	; (80011dc <BSP_LED_Init+0x98>)
 8001192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	2301      	movs	r3, #1
 800119a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80011a0:	2302      	movs	r3, #2
 80011a2:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <BSP_LED_Init+0x9c>)
 80011a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ac:	f107 0214 	add.w	r2, r7, #20
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 fa36 	bl	8001624 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <BSP_LED_Init+0x9c>)
 80011bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	4a06      	ldr	r2, [pc, #24]	; (80011dc <BSP_LED_Init+0x98>)
 80011c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011c8:	2200      	movs	r2, #0
 80011ca:	4619      	mov	r1, r3
 80011cc:	f000 fbd6 	bl	800197c <HAL_GPIO_WritePin>
}
 80011d0:	bf00      	nop
 80011d2:	3728      	adds	r7, #40	; 0x28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40023800 	.word	0x40023800
 80011dc:	080032c0 	.word	0x080032c0
 80011e0:	2000000c 	.word	0x2000000c

080011e4 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	4a07      	ldr	r2, [pc, #28]	; (8001210 <BSP_LED_On+0x2c>)
 80011f2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <BSP_LED_On+0x30>)
 80011fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011fe:	2201      	movs	r2, #1
 8001200:	4619      	mov	r1, r3
 8001202:	f000 fbbb 	bl	800197c <HAL_GPIO_WritePin>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000000c 	.word	0x2000000c
 8001214:	080032c0 	.word	0x080032c0

08001218 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800121c:	4b16      	ldr	r3, [pc, #88]	; (8001278 <SystemInit+0x60>)
 800121e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001222:	4a15      	ldr	r2, [pc, #84]	; (8001278 <SystemInit+0x60>)
 8001224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <SystemInit+0x64>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a12      	ldr	r2, [pc, #72]	; (800127c <SystemInit+0x64>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <SystemInit+0x64>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <SystemInit+0x64>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a0e      	ldr	r2, [pc, #56]	; (800127c <SystemInit+0x64>)
 8001244:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800124c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <SystemInit+0x64>)
 8001250:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <SystemInit+0x68>)
 8001252:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <SystemInit+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a08      	ldr	r2, [pc, #32]	; (800127c <SystemInit+0x64>)
 800125a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <SystemInit+0x64>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <SystemInit+0x60>)
 8001268:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800126c:	609a      	str	r2, [r3, #8]
#endif
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00
 800127c:	40023800 	.word	0x40023800
 8001280:	24003010 	.word	0x24003010

08001284 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001296:	e7fe      	b.n	8001296 <HardFault_Handler+0x4>

08001298 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800129c:	e7fe      	b.n	800129c <MemManage_Handler+0x4>

0800129e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80012a2:	e7fe      	b.n	80012a2 <BusFault_Handler+0x4>

080012a4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <UsageFault_Handler+0x4>

080012aa <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80012d8:	f000 f84e 	bl	8001378 <HAL_IncTick>
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_Init+0x34>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <HAL_Init+0x34>)
 80012ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ee:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_Init+0x34>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a07      	ldr	r2, [pc, #28]	; (8001314 <HAL_Init+0x34>)
 80012f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012fc:	2003      	movs	r0, #3
 80012fe:	f000 f94f 	bl	80015a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001302:	200f      	movs	r0, #15
 8001304:	f000 f808 	bl	8001318 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001308:	f000 fb51 	bl	80019ae <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023c00 	.word	0x40023c00

08001318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_InitTick+0x54>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_InitTick+0x58>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001332:	fbb2 f3f3 	udiv	r3, r2, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f967 	bl	800160a <HAL_SYSTICK_Config>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e00e      	b.n	8001364 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	d80a      	bhi.n	8001362 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800134c:	2200      	movs	r2, #0
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001354:	f000 f92f 	bl	80015b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <HAL_InitTick+0x5c>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	e000      	b.n	8001364 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000018 	.word	0x20000018
 8001370:	20000020 	.word	0x20000020
 8001374:	2000001c 	.word	0x2000001c

08001378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_IncTick+0x20>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_IncTick+0x24>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4413      	add	r3, r2
 8001388:	4a04      	ldr	r2, [pc, #16]	; (800139c <HAL_IncTick+0x24>)
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000020 	.word	0x20000020
 800139c:	200000a8 	.word	0x200000a8

080013a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return uwTick;
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <HAL_GetTick+0x14>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	200000a8 	.word	0x200000a8

080013b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c0:	f7ff ffee 	bl	80013a0 <HAL_GetTick>
 80013c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013d0:	d005      	beq.n	80013de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_Delay+0x44>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4413      	add	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013de:	bf00      	nop
 80013e0:	f7ff ffde 	bl	80013a0 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d8f7      	bhi.n	80013e0 <HAL_Delay+0x28>
  {
  }
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000020 	.word	0x20000020

08001400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800141c:	4013      	ands	r3, r2
 800141e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800142c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001432:	4a04      	ldr	r2, [pc, #16]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	60d3      	str	r3, [r2, #12]
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <__NVIC_GetPriorityGrouping+0x18>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	f003 0307 	and.w	r3, r3, #7
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	db0b      	blt.n	800148e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	f003 021f 	and.w	r2, r3, #31
 800147c:	4907      	ldr	r1, [pc, #28]	; (800149c <__NVIC_EnableIRQ+0x38>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	2001      	movs	r0, #1
 8001486:	fa00 f202 	lsl.w	r2, r0, r2
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000e100 	.word	0xe000e100

080014a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	6039      	str	r1, [r7, #0]
 80014aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	db0a      	blt.n	80014ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	490c      	ldr	r1, [pc, #48]	; (80014ec <__NVIC_SetPriority+0x4c>)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	0112      	lsls	r2, r2, #4
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	440b      	add	r3, r1
 80014c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c8:	e00a      	b.n	80014e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4908      	ldr	r1, [pc, #32]	; (80014f0 <__NVIC_SetPriority+0x50>)
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	3b04      	subs	r3, #4
 80014d8:	0112      	lsls	r2, r2, #4
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	440b      	add	r3, r1
 80014de:	761a      	strb	r2, [r3, #24]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000e100 	.word	0xe000e100
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b089      	sub	sp, #36	; 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f1c3 0307 	rsb	r3, r3, #7
 800150e:	2b04      	cmp	r3, #4
 8001510:	bf28      	it	cs
 8001512:	2304      	movcs	r3, #4
 8001514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3304      	adds	r3, #4
 800151a:	2b06      	cmp	r3, #6
 800151c:	d902      	bls.n	8001524 <NVIC_EncodePriority+0x30>
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3b03      	subs	r3, #3
 8001522:	e000      	b.n	8001526 <NVIC_EncodePriority+0x32>
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	401a      	ands	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800153c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	43d9      	mvns	r1, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	4313      	orrs	r3, r2
         );
}
 800154e:	4618      	mov	r0, r3
 8001550:	3724      	adds	r7, #36	; 0x24
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3b01      	subs	r3, #1
 8001568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800156c:	d301      	bcc.n	8001572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800156e:	2301      	movs	r3, #1
 8001570:	e00f      	b.n	8001592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001572:	4a0a      	ldr	r2, [pc, #40]	; (800159c <SysTick_Config+0x40>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3b01      	subs	r3, #1
 8001578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157a:	210f      	movs	r1, #15
 800157c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001580:	f7ff ff8e 	bl	80014a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <SysTick_Config+0x40>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158a:	4b04      	ldr	r3, [pc, #16]	; (800159c <SysTick_Config+0x40>)
 800158c:	2207      	movs	r2, #7
 800158e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	e000e010 	.word	0xe000e010

080015a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff ff29 	bl	8001400 <__NVIC_SetPriorityGrouping>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b086      	sub	sp, #24
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	60b9      	str	r1, [r7, #8]
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c8:	f7ff ff3e 	bl	8001448 <__NVIC_GetPriorityGrouping>
 80015cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	68b9      	ldr	r1, [r7, #8]
 80015d2:	6978      	ldr	r0, [r7, #20]
 80015d4:	f7ff ff8e 	bl	80014f4 <NVIC_EncodePriority>
 80015d8:	4602      	mov	r2, r0
 80015da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015de:	4611      	mov	r1, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff5d 	bl	80014a0 <__NVIC_SetPriority>
}
 80015e6:	bf00      	nop
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff31 	bl	8001464 <__NVIC_EnableIRQ>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ffa2 	bl	800155c <SysTick_Config>
 8001618:	4603      	mov	r3, r0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	; 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	e177      	b.n	8001930 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001640:	2201      	movs	r2, #1
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	429a      	cmp	r2, r3
 800165a:	f040 8166 	bne.w	800192a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	2b01      	cmp	r3, #1
 8001668:	d005      	beq.n	8001676 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001672:	2b02      	cmp	r3, #2
 8001674:	d130      	bne.n	80016d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	2203      	movs	r2, #3
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ac:	2201      	movs	r2, #1
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	f003 0201 	and.w	r2, r3, #1
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d017      	beq.n	8001714 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2203      	movs	r2, #3
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d123      	bne.n	8001768 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	08da      	lsrs	r2, r3, #3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3208      	adds	r2, #8
 8001728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	220f      	movs	r2, #15
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	691a      	ldr	r2, [r3, #16]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	08da      	lsrs	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3208      	adds	r2, #8
 8001762:	69b9      	ldr	r1, [r7, #24]
 8001764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	2203      	movs	r2, #3
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0203 	and.w	r2, r3, #3
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 80c0 	beq.w	800192a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b66      	ldr	r3, [pc, #408]	; (8001948 <HAL_GPIO_Init+0x324>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	4a65      	ldr	r2, [pc, #404]	; (8001948 <HAL_GPIO_Init+0x324>)
 80017b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	4b63      	ldr	r3, [pc, #396]	; (8001948 <HAL_GPIO_Init+0x324>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017c6:	4a61      	ldr	r2, [pc, #388]	; (800194c <HAL_GPIO_Init+0x328>)
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	089b      	lsrs	r3, r3, #2
 80017cc:	3302      	adds	r3, #2
 80017ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	220f      	movs	r2, #15
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a58      	ldr	r2, [pc, #352]	; (8001950 <HAL_GPIO_Init+0x32c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d037      	beq.n	8001862 <HAL_GPIO_Init+0x23e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a57      	ldr	r2, [pc, #348]	; (8001954 <HAL_GPIO_Init+0x330>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d031      	beq.n	800185e <HAL_GPIO_Init+0x23a>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a56      	ldr	r2, [pc, #344]	; (8001958 <HAL_GPIO_Init+0x334>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d02b      	beq.n	800185a <HAL_GPIO_Init+0x236>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a55      	ldr	r2, [pc, #340]	; (800195c <HAL_GPIO_Init+0x338>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d025      	beq.n	8001856 <HAL_GPIO_Init+0x232>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a54      	ldr	r2, [pc, #336]	; (8001960 <HAL_GPIO_Init+0x33c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d01f      	beq.n	8001852 <HAL_GPIO_Init+0x22e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a53      	ldr	r2, [pc, #332]	; (8001964 <HAL_GPIO_Init+0x340>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d019      	beq.n	800184e <HAL_GPIO_Init+0x22a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a52      	ldr	r2, [pc, #328]	; (8001968 <HAL_GPIO_Init+0x344>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d013      	beq.n	800184a <HAL_GPIO_Init+0x226>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a51      	ldr	r2, [pc, #324]	; (800196c <HAL_GPIO_Init+0x348>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d00d      	beq.n	8001846 <HAL_GPIO_Init+0x222>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a50      	ldr	r2, [pc, #320]	; (8001970 <HAL_GPIO_Init+0x34c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d007      	beq.n	8001842 <HAL_GPIO_Init+0x21e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a4f      	ldr	r2, [pc, #316]	; (8001974 <HAL_GPIO_Init+0x350>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d101      	bne.n	800183e <HAL_GPIO_Init+0x21a>
 800183a:	2309      	movs	r3, #9
 800183c:	e012      	b.n	8001864 <HAL_GPIO_Init+0x240>
 800183e:	230a      	movs	r3, #10
 8001840:	e010      	b.n	8001864 <HAL_GPIO_Init+0x240>
 8001842:	2308      	movs	r3, #8
 8001844:	e00e      	b.n	8001864 <HAL_GPIO_Init+0x240>
 8001846:	2307      	movs	r3, #7
 8001848:	e00c      	b.n	8001864 <HAL_GPIO_Init+0x240>
 800184a:	2306      	movs	r3, #6
 800184c:	e00a      	b.n	8001864 <HAL_GPIO_Init+0x240>
 800184e:	2305      	movs	r3, #5
 8001850:	e008      	b.n	8001864 <HAL_GPIO_Init+0x240>
 8001852:	2304      	movs	r3, #4
 8001854:	e006      	b.n	8001864 <HAL_GPIO_Init+0x240>
 8001856:	2303      	movs	r3, #3
 8001858:	e004      	b.n	8001864 <HAL_GPIO_Init+0x240>
 800185a:	2302      	movs	r3, #2
 800185c:	e002      	b.n	8001864 <HAL_GPIO_Init+0x240>
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <HAL_GPIO_Init+0x240>
 8001862:	2300      	movs	r3, #0
 8001864:	69fa      	ldr	r2, [r7, #28]
 8001866:	f002 0203 	and.w	r2, r2, #3
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	4093      	lsls	r3, r2
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001874:	4935      	ldr	r1, [pc, #212]	; (800194c <HAL_GPIO_Init+0x328>)
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	089b      	lsrs	r3, r3, #2
 800187a:	3302      	adds	r3, #2
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001882:	4b3d      	ldr	r3, [pc, #244]	; (8001978 <HAL_GPIO_Init+0x354>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018a6:	4a34      	ldr	r2, [pc, #208]	; (8001978 <HAL_GPIO_Init+0x354>)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018ac:	4b32      	ldr	r3, [pc, #200]	; (8001978 <HAL_GPIO_Init+0x354>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018d0:	4a29      	ldr	r2, [pc, #164]	; (8001978 <HAL_GPIO_Init+0x354>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018d6:	4b28      	ldr	r3, [pc, #160]	; (8001978 <HAL_GPIO_Init+0x354>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018fa:	4a1f      	ldr	r2, [pc, #124]	; (8001978 <HAL_GPIO_Init+0x354>)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001900:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <HAL_GPIO_Init+0x354>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <HAL_GPIO_Init+0x354>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3301      	adds	r3, #1
 800192e:	61fb      	str	r3, [r7, #28]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	2b0f      	cmp	r3, #15
 8001934:	f67f ae84 	bls.w	8001640 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	40013800 	.word	0x40013800
 8001950:	40020000 	.word	0x40020000
 8001954:	40020400 	.word	0x40020400
 8001958:	40020800 	.word	0x40020800
 800195c:	40020c00 	.word	0x40020c00
 8001960:	40021000 	.word	0x40021000
 8001964:	40021400 	.word	0x40021400
 8001968:	40021800 	.word	0x40021800
 800196c:	40021c00 	.word	0x40021c00
 8001970:	40022000 	.word	0x40022000
 8001974:	40022400 	.word	0x40022400
 8001978:	40013c00 	.word	0x40013c00

0800197c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
 8001988:	4613      	mov	r3, r2
 800198a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800198c:	787b      	ldrb	r3, [r7, #1]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001998:	e003      	b.n	80019a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800199a:	887b      	ldrh	r3, [r7, #2]
 800199c:	041a      	lsls	r2, r3, #16
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	619a      	str	r2, [r3, #24]
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	603b      	str	r3, [r7, #0]
 80019ca:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <HAL_PWREx_EnableOverDrive+0x90>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	4a1f      	ldr	r2, [pc, #124]	; (8001a4c <HAL_PWREx_EnableOverDrive+0x90>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d4:	6413      	str	r3, [r2, #64]	; 0x40
 80019d6:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <HAL_PWREx_EnableOverDrive+0x90>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80019e2:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <HAL_PWREx_EnableOverDrive+0x94>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019e8:	f7ff fcda 	bl	80013a0 <HAL_GetTick>
 80019ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019ee:	e009      	b.n	8001a04 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019f0:	f7ff fcd6 	bl	80013a0 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019fe:	d901      	bls.n	8001a04 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e01f      	b.n	8001a44 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a10:	d1ee      	bne.n	80019f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a18:	f7ff fcc2 	bl	80013a0 <HAL_GetTick>
 8001a1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a1e:	e009      	b.n	8001a34 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a20:	f7ff fcbe 	bl	80013a0 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a2e:	d901      	bls.n	8001a34 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e007      	b.n	8001a44 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a40:	d1ee      	bne.n	8001a20 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	420e0040 	.word	0x420e0040
 8001a54:	40007000 	.word	0x40007000
 8001a58:	420e0044 	.word	0x420e0044

08001a5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e267      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d075      	beq.n	8001b66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a7a:	4b88      	ldr	r3, [pc, #544]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d00c      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a86:	4b85      	ldr	r3, [pc, #532]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d112      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a92:	4b82      	ldr	r3, [pc, #520]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a9e:	d10b      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa0:	4b7e      	ldr	r3, [pc, #504]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d05b      	beq.n	8001b64 <HAL_RCC_OscConfig+0x108>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d157      	bne.n	8001b64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e242      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac0:	d106      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x74>
 8001ac2:	4b76      	ldr	r3, [pc, #472]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a75      	ldr	r2, [pc, #468]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e01d      	b.n	8001b0c <HAL_RCC_OscConfig+0xb0>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad8:	d10c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x98>
 8001ada:	4b70      	ldr	r3, [pc, #448]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a6f      	ldr	r2, [pc, #444]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	4b6d      	ldr	r3, [pc, #436]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a6c      	ldr	r2, [pc, #432]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e00b      	b.n	8001b0c <HAL_RCC_OscConfig+0xb0>
 8001af4:	4b69      	ldr	r3, [pc, #420]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a68      	ldr	r2, [pc, #416]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	4b66      	ldr	r3, [pc, #408]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a65      	ldr	r2, [pc, #404]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d013      	beq.n	8001b3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7ff fc44 	bl	80013a0 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b1c:	f7ff fc40 	bl	80013a0 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b64      	cmp	r3, #100	; 0x64
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e207      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2e:	4b5b      	ldr	r3, [pc, #364]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0xc0>
 8001b3a:	e014      	b.n	8001b66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fc30 	bl	80013a0 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff fc2c 	bl	80013a0 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	; 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e1f3      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b56:	4b51      	ldr	r3, [pc, #324]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0xe8>
 8001b62:	e000      	b.n	8001b66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d063      	beq.n	8001c3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b72:	4b4a      	ldr	r3, [pc, #296]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00b      	beq.n	8001b96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b7e:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d11c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b8a:	4b44      	ldr	r3, [pc, #272]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d116      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b96:	4b41      	ldr	r3, [pc, #260]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d005      	beq.n	8001bae <HAL_RCC_OscConfig+0x152>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d001      	beq.n	8001bae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e1c7      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bae:	4b3b      	ldr	r3, [pc, #236]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4937      	ldr	r1, [pc, #220]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc2:	e03a      	b.n	8001c3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d020      	beq.n	8001c0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bcc:	4b34      	ldr	r3, [pc, #208]	; (8001ca0 <HAL_RCC_OscConfig+0x244>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd2:	f7ff fbe5 	bl	80013a0 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bda:	f7ff fbe1 	bl	80013a0 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e1a8      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bec:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf8:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4925      	ldr	r1, [pc, #148]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	600b      	str	r3, [r1, #0]
 8001c0c:	e015      	b.n	8001c3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c0e:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <HAL_RCC_OscConfig+0x244>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff fbc4 	bl	80013a0 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c1c:	f7ff fbc0 	bl	80013a0 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e187      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d036      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d016      	beq.n	8001c7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <HAL_RCC_OscConfig+0x248>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c54:	f7ff fba4 	bl	80013a0 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c5c:	f7ff fba0 	bl	80013a0 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e167      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0x200>
 8001c7a:	e01b      	b.n	8001cb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_RCC_OscConfig+0x248>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c82:	f7ff fb8d 	bl	80013a0 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c88:	e00e      	b.n	8001ca8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c8a:	f7ff fb89 	bl	80013a0 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d907      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e150      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	42470000 	.word	0x42470000
 8001ca4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca8:	4b88      	ldr	r3, [pc, #544]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1ea      	bne.n	8001c8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 8097 	beq.w	8001df0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc6:	4b81      	ldr	r3, [pc, #516]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10f      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	4b7d      	ldr	r3, [pc, #500]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	4a7c      	ldr	r2, [pc, #496]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce2:	4b7a      	ldr	r3, [pc, #488]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf2:	4b77      	ldr	r3, [pc, #476]	; (8001ed0 <HAL_RCC_OscConfig+0x474>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d118      	bne.n	8001d30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cfe:	4b74      	ldr	r3, [pc, #464]	; (8001ed0 <HAL_RCC_OscConfig+0x474>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a73      	ldr	r2, [pc, #460]	; (8001ed0 <HAL_RCC_OscConfig+0x474>)
 8001d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d0a:	f7ff fb49 	bl	80013a0 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d12:	f7ff fb45 	bl	80013a0 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e10c      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d24:	4b6a      	ldr	r3, [pc, #424]	; (8001ed0 <HAL_RCC_OscConfig+0x474>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0f0      	beq.n	8001d12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d106      	bne.n	8001d46 <HAL_RCC_OscConfig+0x2ea>
 8001d38:	4b64      	ldr	r3, [pc, #400]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3c:	4a63      	ldr	r2, [pc, #396]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6713      	str	r3, [r2, #112]	; 0x70
 8001d44:	e01c      	b.n	8001d80 <HAL_RCC_OscConfig+0x324>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b05      	cmp	r3, #5
 8001d4c:	d10c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x30c>
 8001d4e:	4b5f      	ldr	r3, [pc, #380]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d52:	4a5e      	ldr	r2, [pc, #376]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d54:	f043 0304 	orr.w	r3, r3, #4
 8001d58:	6713      	str	r3, [r2, #112]	; 0x70
 8001d5a:	4b5c      	ldr	r3, [pc, #368]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5e:	4a5b      	ldr	r2, [pc, #364]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6713      	str	r3, [r2, #112]	; 0x70
 8001d66:	e00b      	b.n	8001d80 <HAL_RCC_OscConfig+0x324>
 8001d68:	4b58      	ldr	r3, [pc, #352]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6c:	4a57      	ldr	r2, [pc, #348]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d6e:	f023 0301 	bic.w	r3, r3, #1
 8001d72:	6713      	str	r3, [r2, #112]	; 0x70
 8001d74:	4b55      	ldr	r3, [pc, #340]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d78:	4a54      	ldr	r2, [pc, #336]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d7a:	f023 0304 	bic.w	r3, r3, #4
 8001d7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d015      	beq.n	8001db4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d88:	f7ff fb0a 	bl	80013a0 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8e:	e00a      	b.n	8001da6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d90:	f7ff fb06 	bl	80013a0 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e0cb      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da6:	4b49      	ldr	r3, [pc, #292]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0ee      	beq.n	8001d90 <HAL_RCC_OscConfig+0x334>
 8001db2:	e014      	b.n	8001dde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db4:	f7ff faf4 	bl	80013a0 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dba:	e00a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dbc:	f7ff faf0 	bl	80013a0 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e0b5      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1ee      	bne.n	8001dbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dde:	7dfb      	ldrb	r3, [r7, #23]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d105      	bne.n	8001df0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de4:	4b39      	ldr	r3, [pc, #228]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	4a38      	ldr	r2, [pc, #224]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001dea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80a1 	beq.w	8001f3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dfa:	4b34      	ldr	r3, [pc, #208]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d05c      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d141      	bne.n	8001e92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0e:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <HAL_RCC_OscConfig+0x478>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e14:	f7ff fac4 	bl	80013a0 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1c:	f7ff fac0 	bl	80013a0 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e087      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2e:	4b27      	ldr	r3, [pc, #156]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69da      	ldr	r2, [r3, #28]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	019b      	lsls	r3, r3, #6
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	085b      	lsrs	r3, r3, #1
 8001e52:	3b01      	subs	r3, #1
 8001e54:	041b      	lsls	r3, r3, #16
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	491b      	ldr	r1, [pc, #108]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e64:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <HAL_RCC_OscConfig+0x478>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6a:	f7ff fa99 	bl	80013a0 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e72:	f7ff fa95 	bl	80013a0 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e05c      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x416>
 8001e90:	e054      	b.n	8001f3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <HAL_RCC_OscConfig+0x478>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7ff fa82 	bl	80013a0 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea0:	f7ff fa7e 	bl	80013a0 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e045      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x444>
 8001ebe:	e03d      	b.n	8001f3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d107      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e038      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40007000 	.word	0x40007000
 8001ed4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <HAL_RCC_OscConfig+0x4ec>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d028      	beq.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d121      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d11a      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f08:	4013      	ands	r3, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d111      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1e:	085b      	lsrs	r3, r3, #1
 8001f20:	3b01      	subs	r3, #1
 8001f22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d107      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e000      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800

08001f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e0cc      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f60:	4b68      	ldr	r3, [pc, #416]	; (8002104 <HAL_RCC_ClockConfig+0x1b8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d90c      	bls.n	8001f88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6e:	4b65      	ldr	r3, [pc, #404]	; (8002104 <HAL_RCC_ClockConfig+0x1b8>)
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f76:	4b63      	ldr	r3, [pc, #396]	; (8002104 <HAL_RCC_ClockConfig+0x1b8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0b8      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d020      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fa0:	4b59      	ldr	r3, [pc, #356]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	4a58      	ldr	r2, [pc, #352]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001faa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fb8:	4b53      	ldr	r3, [pc, #332]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4a52      	ldr	r2, [pc, #328]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc4:	4b50      	ldr	r3, [pc, #320]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	494d      	ldr	r1, [pc, #308]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d044      	beq.n	800206c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d107      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fea:	4b47      	ldr	r3, [pc, #284]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d119      	bne.n	800202a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e07f      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d003      	beq.n	800200a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002006:	2b03      	cmp	r3, #3
 8002008:	d107      	bne.n	800201a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200a:	4b3f      	ldr	r3, [pc, #252]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d109      	bne.n	800202a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e06f      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201a:	4b3b      	ldr	r3, [pc, #236]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e067      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800202a:	4b37      	ldr	r3, [pc, #220]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f023 0203 	bic.w	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4934      	ldr	r1, [pc, #208]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	4313      	orrs	r3, r2
 800203a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800203c:	f7ff f9b0 	bl	80013a0 <HAL_GetTick>
 8002040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002042:	e00a      	b.n	800205a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002044:	f7ff f9ac 	bl	80013a0 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002052:	4293      	cmp	r3, r2
 8002054:	d901      	bls.n	800205a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e04f      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	4b2b      	ldr	r3, [pc, #172]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 020c 	and.w	r2, r3, #12
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	429a      	cmp	r2, r3
 800206a:	d1eb      	bne.n	8002044 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800206c:	4b25      	ldr	r3, [pc, #148]	; (8002104 <HAL_RCC_ClockConfig+0x1b8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 030f 	and.w	r3, r3, #15
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d20c      	bcs.n	8002094 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b22      	ldr	r3, [pc, #136]	; (8002104 <HAL_RCC_ClockConfig+0x1b8>)
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b20      	ldr	r3, [pc, #128]	; (8002104 <HAL_RCC_ClockConfig+0x1b8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e032      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d008      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a0:	4b19      	ldr	r3, [pc, #100]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4916      	ldr	r1, [pc, #88]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d009      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	490e      	ldr	r1, [pc, #56]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020d2:	f000 f821 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 80020d6:	4602      	mov	r2, r0
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	490a      	ldr	r1, [pc, #40]	; (800210c <HAL_RCC_ClockConfig+0x1c0>)
 80020e4:	5ccb      	ldrb	r3, [r1, r3]
 80020e6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ea:	4a09      	ldr	r2, [pc, #36]	; (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_RCC_ClockConfig+0x1c8>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff f910 	bl	8001318 <HAL_InitTick>

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40023c00 	.word	0x40023c00
 8002108:	40023800 	.word	0x40023800
 800210c:	080032c8 	.word	0x080032c8
 8002110:	20000018 	.word	0x20000018
 8002114:	2000001c 	.word	0x2000001c

08002118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800211c:	b094      	sub	sp, #80	; 0x50
 800211e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	647b      	str	r3, [r7, #68]	; 0x44
 8002124:	2300      	movs	r3, #0
 8002126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002128:	2300      	movs	r3, #0
 800212a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002130:	4b79      	ldr	r3, [pc, #484]	; (8002318 <HAL_RCC_GetSysClockFreq+0x200>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 030c 	and.w	r3, r3, #12
 8002138:	2b08      	cmp	r3, #8
 800213a:	d00d      	beq.n	8002158 <HAL_RCC_GetSysClockFreq+0x40>
 800213c:	2b08      	cmp	r3, #8
 800213e:	f200 80e1 	bhi.w	8002304 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002142:	2b00      	cmp	r3, #0
 8002144:	d002      	beq.n	800214c <HAL_RCC_GetSysClockFreq+0x34>
 8002146:	2b04      	cmp	r3, #4
 8002148:	d003      	beq.n	8002152 <HAL_RCC_GetSysClockFreq+0x3a>
 800214a:	e0db      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800214c:	4b73      	ldr	r3, [pc, #460]	; (800231c <HAL_RCC_GetSysClockFreq+0x204>)
 800214e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002150:	e0db      	b.n	800230a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002152:	4b73      	ldr	r3, [pc, #460]	; (8002320 <HAL_RCC_GetSysClockFreq+0x208>)
 8002154:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002156:	e0d8      	b.n	800230a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002158:	4b6f      	ldr	r3, [pc, #444]	; (8002318 <HAL_RCC_GetSysClockFreq+0x200>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002160:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002162:	4b6d      	ldr	r3, [pc, #436]	; (8002318 <HAL_RCC_GetSysClockFreq+0x200>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d063      	beq.n	8002236 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800216e:	4b6a      	ldr	r3, [pc, #424]	; (8002318 <HAL_RCC_GetSysClockFreq+0x200>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	099b      	lsrs	r3, r3, #6
 8002174:	2200      	movs	r2, #0
 8002176:	63bb      	str	r3, [r7, #56]	; 0x38
 8002178:	63fa      	str	r2, [r7, #60]	; 0x3c
 800217a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800217c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002180:	633b      	str	r3, [r7, #48]	; 0x30
 8002182:	2300      	movs	r3, #0
 8002184:	637b      	str	r3, [r7, #52]	; 0x34
 8002186:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800218a:	4622      	mov	r2, r4
 800218c:	462b      	mov	r3, r5
 800218e:	f04f 0000 	mov.w	r0, #0
 8002192:	f04f 0100 	mov.w	r1, #0
 8002196:	0159      	lsls	r1, r3, #5
 8002198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800219c:	0150      	lsls	r0, r2, #5
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4621      	mov	r1, r4
 80021a4:	1a51      	subs	r1, r2, r1
 80021a6:	6139      	str	r1, [r7, #16]
 80021a8:	4629      	mov	r1, r5
 80021aa:	eb63 0301 	sbc.w	r3, r3, r1
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021bc:	4659      	mov	r1, fp
 80021be:	018b      	lsls	r3, r1, #6
 80021c0:	4651      	mov	r1, sl
 80021c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021c6:	4651      	mov	r1, sl
 80021c8:	018a      	lsls	r2, r1, #6
 80021ca:	4651      	mov	r1, sl
 80021cc:	ebb2 0801 	subs.w	r8, r2, r1
 80021d0:	4659      	mov	r1, fp
 80021d2:	eb63 0901 	sbc.w	r9, r3, r1
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021ea:	4690      	mov	r8, r2
 80021ec:	4699      	mov	r9, r3
 80021ee:	4623      	mov	r3, r4
 80021f0:	eb18 0303 	adds.w	r3, r8, r3
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	462b      	mov	r3, r5
 80021f8:	eb49 0303 	adc.w	r3, r9, r3
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800220a:	4629      	mov	r1, r5
 800220c:	024b      	lsls	r3, r1, #9
 800220e:	4621      	mov	r1, r4
 8002210:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002214:	4621      	mov	r1, r4
 8002216:	024a      	lsls	r2, r1, #9
 8002218:	4610      	mov	r0, r2
 800221a:	4619      	mov	r1, r3
 800221c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800221e:	2200      	movs	r2, #0
 8002220:	62bb      	str	r3, [r7, #40]	; 0x28
 8002222:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002224:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002228:	f7fd ffe0 	bl	80001ec <__aeabi_uldivmod>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4613      	mov	r3, r2
 8002232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002234:	e058      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002236:	4b38      	ldr	r3, [pc, #224]	; (8002318 <HAL_RCC_GetSysClockFreq+0x200>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	099b      	lsrs	r3, r3, #6
 800223c:	2200      	movs	r2, #0
 800223e:	4618      	mov	r0, r3
 8002240:	4611      	mov	r1, r2
 8002242:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002246:	623b      	str	r3, [r7, #32]
 8002248:	2300      	movs	r3, #0
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
 800224c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002250:	4642      	mov	r2, r8
 8002252:	464b      	mov	r3, r9
 8002254:	f04f 0000 	mov.w	r0, #0
 8002258:	f04f 0100 	mov.w	r1, #0
 800225c:	0159      	lsls	r1, r3, #5
 800225e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002262:	0150      	lsls	r0, r2, #5
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4641      	mov	r1, r8
 800226a:	ebb2 0a01 	subs.w	sl, r2, r1
 800226e:	4649      	mov	r1, r9
 8002270:	eb63 0b01 	sbc.w	fp, r3, r1
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002280:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002284:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002288:	ebb2 040a 	subs.w	r4, r2, sl
 800228c:	eb63 050b 	sbc.w	r5, r3, fp
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	00eb      	lsls	r3, r5, #3
 800229a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800229e:	00e2      	lsls	r2, r4, #3
 80022a0:	4614      	mov	r4, r2
 80022a2:	461d      	mov	r5, r3
 80022a4:	4643      	mov	r3, r8
 80022a6:	18e3      	adds	r3, r4, r3
 80022a8:	603b      	str	r3, [r7, #0]
 80022aa:	464b      	mov	r3, r9
 80022ac:	eb45 0303 	adc.w	r3, r5, r3
 80022b0:	607b      	str	r3, [r7, #4]
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	f04f 0300 	mov.w	r3, #0
 80022ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022be:	4629      	mov	r1, r5
 80022c0:	028b      	lsls	r3, r1, #10
 80022c2:	4621      	mov	r1, r4
 80022c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022c8:	4621      	mov	r1, r4
 80022ca:	028a      	lsls	r2, r1, #10
 80022cc:	4610      	mov	r0, r2
 80022ce:	4619      	mov	r1, r3
 80022d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022d2:	2200      	movs	r2, #0
 80022d4:	61bb      	str	r3, [r7, #24]
 80022d6:	61fa      	str	r2, [r7, #28]
 80022d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022dc:	f7fd ff86 	bl	80001ec <__aeabi_uldivmod>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4613      	mov	r3, r2
 80022e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <HAL_RCC_GetSysClockFreq+0x200>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	0c1b      	lsrs	r3, r3, #16
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	3301      	adds	r3, #1
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80022f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002300:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002302:	e002      	b.n	800230a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002304:	4b05      	ldr	r3, [pc, #20]	; (800231c <HAL_RCC_GetSysClockFreq+0x204>)
 8002306:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002308:	bf00      	nop
    }
  }
  return sysclockfreq;
 800230a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800230c:	4618      	mov	r0, r3
 800230e:	3750      	adds	r7, #80	; 0x50
 8002310:	46bd      	mov	sp, r7
 8002312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002316:	bf00      	nop
 8002318:	40023800 	.word	0x40023800
 800231c:	00f42400 	.word	0x00f42400
 8002320:	007a1200 	.word	0x007a1200

08002324 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e083      	b.n	800243e <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	2b00      	cmp	r3, #0
 800233c:	d108      	bne.n	8002350 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002346:	d009      	beq.n	800235c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	61da      	str	r2, [r3, #28]
 800234e:	e005      	b.n	800235c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d106      	bne.n	8002376 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7fe fbb1 	bl	8000ad8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2202      	movs	r2, #2
 800237a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800238c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023a8:	431a      	orrs	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023da:	ea42 0103 	orr.w	r1, r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	0c1b      	lsrs	r3, r3, #16
 80023f4:	f003 0104 	and.w	r1, r3, #4
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	f003 0210 	and.w	r2, r3, #16
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002410:	d105      	bne.n	800241e <HAL_SPI_Init+0xfa>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	b292      	uxth	r2, r2
 800241c:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	69da      	ldr	r2, [r3, #28]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800242c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b088      	sub	sp, #32
 800244a:	af00      	add	r7, sp, #0
 800244c:	60f8      	str	r0, [r7, #12]
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	4613      	mov	r3, r2
 8002454:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002460:	2b01      	cmp	r3, #1
 8002462:	d101      	bne.n	8002468 <HAL_SPI_Transmit+0x22>
 8002464:	2302      	movs	r3, #2
 8002466:	e148      	b.n	80026fa <HAL_SPI_Transmit+0x2b4>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002470:	f7fe ff96 	bl	80013a0 <HAL_GetTick>
 8002474:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002476:	88fb      	ldrh	r3, [r7, #6]
 8002478:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b01      	cmp	r3, #1
 8002484:	d002      	beq.n	800248c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002486:	2302      	movs	r3, #2
 8002488:	77fb      	strb	r3, [r7, #31]
    goto error;
 800248a:	e12d      	b.n	80026e8 <HAL_SPI_Transmit+0x2a2>
  }

  if ((pData == NULL) || (Size == 0U))
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <HAL_SPI_Transmit+0x52>
 8002492:	88fb      	ldrh	r3, [r7, #6]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d102      	bne.n	800249e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800249c:	e124      	b.n	80026e8 <HAL_SPI_Transmit+0x2a2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2203      	movs	r2, #3
 80024a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	88fa      	ldrh	r2, [r7, #6]
 80024b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	88fa      	ldrh	r2, [r7, #6]
 80024bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024e4:	d10f      	bne.n	8002506 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002504:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800250e:	d10f      	bne.n	8002530 <HAL_SPI_Transmit+0xea>
  {
    SPI_RESET_CRC(hspi);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800252e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253a:	2b40      	cmp	r3, #64	; 0x40
 800253c:	d007      	beq.n	800254e <HAL_SPI_Transmit+0x108>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800254c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002556:	d14b      	bne.n	80025f0 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d002      	beq.n	8002566 <HAL_SPI_Transmit+0x120>
 8002560:	8afb      	ldrh	r3, [r7, #22]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d13e      	bne.n	80025e4 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	881a      	ldrh	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	1c9a      	adds	r2, r3, #2
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002580:	b29b      	uxth	r3, r3
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800258a:	e02b      	b.n	80025e4 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b02      	cmp	r3, #2
 8002598:	d112      	bne.n	80025c0 <HAL_SPI_Transmit+0x17a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	881a      	ldrh	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	1c9a      	adds	r2, r3, #2
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80025be:	e011      	b.n	80025e4 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025c0:	f7fe feee 	bl	80013a0 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d803      	bhi.n	80025d8 <HAL_SPI_Transmit+0x192>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025d6:	d102      	bne.n	80025de <HAL_SPI_Transmit+0x198>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d102      	bne.n	80025e4 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80025e2:	e081      	b.n	80026e8 <HAL_SPI_Transmit+0x2a2>
    while (hspi->TxXferCount > 0U)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1ce      	bne.n	800258c <HAL_SPI_Transmit+0x146>
 80025ee:	e04c      	b.n	800268a <HAL_SPI_Transmit+0x244>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d002      	beq.n	80025fe <HAL_SPI_Transmit+0x1b8>
 80025f8:	8afb      	ldrh	r3, [r7, #22]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d140      	bne.n	8002680 <HAL_SPI_Transmit+0x23a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	330c      	adds	r3, #12
 8002608:	7812      	ldrb	r2, [r2, #0]
 800260a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800261a:	b29b      	uxth	r3, r3
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002624:	e02c      	b.n	8002680 <HAL_SPI_Transmit+0x23a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b02      	cmp	r3, #2
 8002632:	d113      	bne.n	800265c <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	330c      	adds	r3, #12
 800263e:	7812      	ldrb	r2, [r2, #0]
 8002640:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002650:	b29b      	uxth	r3, r3
 8002652:	3b01      	subs	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	86da      	strh	r2, [r3, #54]	; 0x36
 800265a:	e011      	b.n	8002680 <HAL_SPI_Transmit+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800265c:	f7fe fea0 	bl	80013a0 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d803      	bhi.n	8002674 <HAL_SPI_Transmit+0x22e>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002672:	d102      	bne.n	800267a <HAL_SPI_Transmit+0x234>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d102      	bne.n	8002680 <HAL_SPI_Transmit+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800267e:	e033      	b.n	80026e8 <HAL_SPI_Transmit+0x2a2>
    while (hspi->TxXferCount > 0U)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1cd      	bne.n	8002626 <HAL_SPI_Transmit+0x1e0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002692:	d107      	bne.n	80026a4 <HAL_SPI_Transmit+0x25e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80026a2:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	6839      	ldr	r1, [r7, #0]
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 fcc3 	bl	8003034 <SPI_EndRxTxTransaction>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d002      	beq.n	80026ba <HAL_SPI_Transmit+0x274>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2220      	movs	r2, #32
 80026b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10a      	bne.n	80026d8 <HAL_SPI_Transmit+0x292>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	77fb      	strb	r3, [r7, #31]
 80026e4:	e000      	b.n	80026e8 <HAL_SPI_Transmit+0x2a2>
  }

error:
 80026e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3720      	adds	r7, #32
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b08a      	sub	sp, #40	; 0x28
 8002706:	af02      	add	r7, sp, #8
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	4613      	mov	r3, r2
 8002710:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	77fb      	strb	r3, [r7, #31]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002722:	d112      	bne.n	800274a <HAL_SPI_Receive+0x48>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10e      	bne.n	800274a <HAL_SPI_Receive+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2204      	movs	r2, #4
 8002730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002734:	88fa      	ldrh	r2, [r7, #6]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	4613      	mov	r3, r2
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	68b9      	ldr	r1, [r7, #8]
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 f969 	bl	8002a18 <HAL_SPI_TransmitReceive>
 8002746:	4603      	mov	r3, r0
 8002748:	e162      	b.n	8002a10 <HAL_SPI_Receive+0x30e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_SPI_Receive+0x56>
 8002754:	2302      	movs	r3, #2
 8002756:	e15b      	b.n	8002a10 <HAL_SPI_Receive+0x30e>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002760:	f7fe fe1e 	bl	80013a0 <HAL_GetTick>
 8002764:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b01      	cmp	r3, #1
 8002770:	d002      	beq.n	8002778 <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 8002772:	2302      	movs	r3, #2
 8002774:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002776:	e142      	b.n	80029fe <HAL_SPI_Receive+0x2fc>
  }

  if ((pData == NULL) || (Size == 0U))
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <HAL_SPI_Receive+0x82>
 800277e:	88fb      	ldrh	r3, [r7, #6]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d102      	bne.n	800278a <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002788:	e139      	b.n	80029fe <HAL_SPI_Receive+0x2fc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2204      	movs	r2, #4
 800278e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	88fa      	ldrh	r2, [r7, #6]
 80027a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	88fa      	ldrh	r2, [r7, #6]
 80027a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d0:	d116      	bne.n	8002800 <HAL_SPI_Receive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027f0:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002808:	d10f      	bne.n	800282a <HAL_SPI_Receive+0x128>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002818:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002828:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002834:	2b40      	cmp	r3, #64	; 0x40
 8002836:	d007      	beq.n	8002848 <HAL_SPI_Receive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002846:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d162      	bne.n	8002916 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002850:	e02e      	b.n	80028b0 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b01      	cmp	r3, #1
 800285e:	d115      	bne.n	800288c <HAL_SPI_Receive+0x18a>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f103 020c 	add.w	r2, r3, #12
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	7812      	ldrb	r2, [r2, #0]
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002876:	1c5a      	adds	r2, r3, #1
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002880:	b29b      	uxth	r3, r3
 8002882:	3b01      	subs	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	87da      	strh	r2, [r3, #62]	; 0x3e
 800288a:	e011      	b.n	80028b0 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800288c:	f7fe fd88 	bl	80013a0 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d803      	bhi.n	80028a4 <HAL_SPI_Receive+0x1a2>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028a2:	d102      	bne.n	80028aa <HAL_SPI_Receive+0x1a8>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d102      	bne.n	80028b0 <HAL_SPI_Receive+0x1ae>
        {
          errorcode = HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028ae:	e0a6      	b.n	80029fe <HAL_SPI_Receive+0x2fc>
    while (hspi->RxXferCount > 0U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1cb      	bne.n	8002852 <HAL_SPI_Receive+0x150>
 80028ba:	e031      	b.n	8002920 <HAL_SPI_Receive+0x21e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d113      	bne.n	80028f2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d4:	b292      	uxth	r2, r2
 80028d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028dc:	1c9a      	adds	r2, r3, #2
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028f0:	e011      	b.n	8002916 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028f2:	f7fe fd55 	bl	80013a0 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d803      	bhi.n	800290a <HAL_SPI_Receive+0x208>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002908:	d102      	bne.n	8002910 <HAL_SPI_Receive+0x20e>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d102      	bne.n	8002916 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002914:	e073      	b.n	80029fe <HAL_SPI_Receive+0x2fc>
    while (hspi->RxXferCount > 0U)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800291a:	b29b      	uxth	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1cd      	bne.n	80028bc <HAL_SPI_Receive+0x1ba>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002928:	d144      	bne.n	80029b4 <HAL_SPI_Receive+0x2b2>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002938:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2201      	movs	r2, #1
 8002942:	2101      	movs	r1, #1
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 fa87 	bl	8002e58 <SPI_WaitFlagStateUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <HAL_SPI_Receive+0x254>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	77fb      	strb	r3, [r7, #31]
      goto error;
 8002954:	e053      	b.n	80029fe <HAL_SPI_Receive+0x2fc>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800295e:	d107      	bne.n	8002970 <HAL_SPI_Receive+0x26e>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296a:	b292      	uxth	r2, r2
 800296c:	801a      	strh	r2, [r3, #0]
 800296e:	e008      	b.n	8002982 <HAL_SPI_Receive+0x280>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f103 020c 	add.w	r2, r3, #12
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297c:	7812      	ldrb	r2, [r2, #0]
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2201      	movs	r2, #1
 800298a:	2101      	movs	r1, #1
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 fa63 	bl	8002e58 <SPI_WaitFlagStateUntilTimeout>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <HAL_SPI_Receive+0x2a8>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299c:	f043 0202 	orr.w	r2, r3, #2
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	77fb      	strb	r3, [r7, #31]
      goto error;
 80029a8:	e029      	b.n	80029fe <HAL_SPI_Receive+0x2fc>
    }

    /* Read CRC to Flush DR and RXNE flag */
    tmpreg = READ_REG(hspi->Instance->DR);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 80029b2:	697b      	ldr	r3, [r7, #20]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	6839      	ldr	r1, [r7, #0]
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 fad5 	bl	8002f68 <SPI_EndRxTransaction>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_SPI_Receive+0x2c8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2220      	movs	r2, #32
 80029c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 0310 	and.w	r3, r3, #16
 80029d4:	2b10      	cmp	r3, #16
 80029d6:	d10a      	bne.n	80029ee <HAL_SPI_Receive+0x2ec>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029dc:	f043 0202 	orr.w	r2, r3, #2
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80029ec:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d002      	beq.n	80029fc <HAL_SPI_Receive+0x2fa>
  {
    errorcode = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	77fb      	strb	r3, [r7, #31]
 80029fa:	e000      	b.n	80029fe <HAL_SPI_Receive+0x2fc>
  }

error :
 80029fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3720      	adds	r7, #32
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08e      	sub	sp, #56	; 0x38
 8002a1c:	af02      	add	r7, sp, #8
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_TxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_SPI_TransmitReceive+0x2a>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e1f8      	b.n	8002e34 <HAL_SPI_TransmitReceive+0x41c>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a4a:	f7fe fca9 	bl	80013a0 <HAL_GetTick>
 8002a4e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a60:	887b      	ldrh	r3, [r7, #2]
 8002a62:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d00f      	beq.n	8002a8c <HAL_SPI_TransmitReceive+0x74>
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a72:	d107      	bne.n	8002a84 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d103      	bne.n	8002a84 <HAL_SPI_TransmitReceive+0x6c>
 8002a7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d003      	beq.n	8002a8c <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8002a84:	2302      	movs	r3, #2
 8002a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a8a:	e1c9      	b.n	8002e20 <HAL_SPI_TransmitReceive+0x408>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d005      	beq.n	8002a9e <HAL_SPI_TransmitReceive+0x86>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <HAL_SPI_TransmitReceive+0x86>
 8002a98:	887b      	ldrh	r3, [r7, #2]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d103      	bne.n	8002aa6 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002aa4:	e1bc      	b.n	8002e20 <HAL_SPI_TransmitReceive+0x408>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d003      	beq.n	8002aba <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2205      	movs	r2, #5
 8002ab6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	887a      	ldrh	r2, [r7, #2]
 8002aca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	887a      	ldrh	r2, [r7, #2]
 8002ad0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	887a      	ldrh	r2, [r7, #2]
 8002adc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	887a      	ldrh	r2, [r7, #2]
 8002ae2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af8:	d10f      	bne.n	8002b1a <HAL_SPI_TransmitReceive+0x102>
  {
    SPI_RESET_CRC(hspi);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b18:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b24:	2b40      	cmp	r3, #64	; 0x40
 8002b26:	d007      	beq.n	8002b38 <HAL_SPI_TransmitReceive+0x120>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b40:	f040 808b 	bne.w	8002c5a <HAL_SPI_TransmitReceive+0x242>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <HAL_SPI_TransmitReceive+0x13a>
 8002b4c:	8b7b      	ldrh	r3, [r7, #26]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d178      	bne.n	8002c44 <HAL_SPI_TransmitReceive+0x22c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	881a      	ldrh	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	1c9a      	adds	r2, r3, #2
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b76:	e065      	b.n	8002c44 <HAL_SPI_TransmitReceive+0x22c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d12d      	bne.n	8002be2 <HAL_SPI_TransmitReceive+0x1ca>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d028      	beq.n	8002be2 <HAL_SPI_TransmitReceive+0x1ca>
 8002b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d125      	bne.n	8002be2 <HAL_SPI_TransmitReceive+0x1ca>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	881a      	ldrh	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	1c9a      	adds	r2, r3, #2
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10c      	bne.n	8002be2 <HAL_SPI_TransmitReceive+0x1ca>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd0:	d107      	bne.n	8002be2 <HAL_SPI_TransmitReceive+0x1ca>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002be0:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d119      	bne.n	8002c24 <HAL_SPI_TransmitReceive+0x20c>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d014      	beq.n	8002c24 <HAL_SPI_TransmitReceive+0x20c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c04:	b292      	uxth	r2, r2
 8002c06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0c:	1c9a      	adds	r2, r3, #2
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c20:	2301      	movs	r3, #1
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c24:	f7fe fbbc 	bl	80013a0 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d807      	bhi.n	8002c44 <HAL_SPI_TransmitReceive+0x22c>
 8002c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c3a:	d003      	beq.n	8002c44 <HAL_SPI_TransmitReceive+0x22c>
      {
        errorcode = HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002c42:	e0ed      	b.n	8002e20 <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d194      	bne.n	8002b78 <HAL_SPI_TransmitReceive+0x160>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d18f      	bne.n	8002b78 <HAL_SPI_TransmitReceive+0x160>
 8002c58:	e08e      	b.n	8002d78 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <HAL_SPI_TransmitReceive+0x250>
 8002c62:	8b7b      	ldrh	r3, [r7, #26]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d17d      	bne.n	8002d64 <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	330c      	adds	r3, #12
 8002c72:	7812      	ldrb	r2, [r2, #0]
 8002c74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c8e:	e069      	b.n	8002d64 <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d12e      	bne.n	8002cfc <HAL_SPI_TransmitReceive+0x2e4>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d029      	beq.n	8002cfc <HAL_SPI_TransmitReceive+0x2e4>
 8002ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d126      	bne.n	8002cfc <HAL_SPI_TransmitReceive+0x2e4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	330c      	adds	r3, #12
 8002cb8:	7812      	ldrb	r2, [r2, #0]
 8002cba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10c      	bne.n	8002cfc <HAL_SPI_TransmitReceive+0x2e4>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cea:	d107      	bne.n	8002cfc <HAL_SPI_TransmitReceive+0x2e4>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cfa:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d119      	bne.n	8002d3e <HAL_SPI_TransmitReceive+0x326>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d014      	beq.n	8002d3e <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d3e:	f7fe fb2f 	bl	80013a0 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d803      	bhi.n	8002d56 <HAL_SPI_TransmitReceive+0x33e>
 8002d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d54:	d102      	bne.n	8002d5c <HAL_SPI_TransmitReceive+0x344>
 8002d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d103      	bne.n	8002d64 <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d62:	e05d      	b.n	8002e20 <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d190      	bne.n	8002c90 <HAL_SPI_TransmitReceive+0x278>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d18b      	bne.n	8002c90 <HAL_SPI_TransmitReceive+0x278>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d80:	d119      	bne.n	8002db6 <HAL_SPI_TransmitReceive+0x39e>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d88:	2201      	movs	r2, #1
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 f863 	bl	8002e58 <SPI_WaitFlagStateUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d009      	beq.n	8002dac <HAL_SPI_TransmitReceive+0x394>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9c:	f043 0202 	orr.w	r2, r3, #2
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8002daa:	e039      	b.n	8002e20 <HAL_SPI_TransmitReceive+0x408>
    }
    /* Read CRC */
    tmpreg = READ_REG(hspi->Instance->DR);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 8002db4:	697b      	ldr	r3, [r7, #20]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b10      	cmp	r3, #16
 8002dc2:	d10d      	bne.n	8002de0 <HAL_SPI_TransmitReceive+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc8:	f043 0202 	orr.w	r2, r3, #2
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002dd8:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 f925 	bl	8003034 <SPI_EndRxTxTransaction>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d006      	beq.n	8002dfe <HAL_SPI_TransmitReceive+0x3e6>
  {
    errorcode = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002dfc:	e010      	b.n	8002e20 <HAL_SPI_TransmitReceive+0x408>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10b      	bne.n	8002e1e <HAL_SPI_TransmitReceive+0x406>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	e000      	b.n	8002e20 <HAL_SPI_TransmitReceive+0x408>
  }

error :
 8002e1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3730      	adds	r7, #48	; 0x30
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e4a:	b2db      	uxtb	r3, r3
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	603b      	str	r3, [r7, #0]
 8002e64:	4613      	mov	r3, r2
 8002e66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e68:	f7fe fa9a 	bl	80013a0 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	1a9b      	subs	r3, r3, r2
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	4413      	add	r3, r2
 8002e76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e78:	f7fe fa92 	bl	80013a0 <HAL_GetTick>
 8002e7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e7e:	4b39      	ldr	r3, [pc, #228]	; (8002f64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	015b      	lsls	r3, r3, #5
 8002e84:	0d1b      	lsrs	r3, r3, #20
 8002e86:	69fa      	ldr	r2, [r7, #28]
 8002e88:	fb02 f303 	mul.w	r3, r2, r3
 8002e8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e8e:	e054      	b.n	8002f3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e96:	d050      	beq.n	8002f3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e98:	f7fe fa82 	bl	80013a0 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	69fa      	ldr	r2, [r7, #28]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d902      	bls.n	8002eae <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d13d      	bne.n	8002f2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ebc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ec6:	d111      	bne.n	8002eec <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ed0:	d004      	beq.n	8002edc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eda:	d107      	bne.n	8002eec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ef4:	d10f      	bne.n	8002f16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e017      	b.n	8002f5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4013      	ands	r3, r2
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	bf0c      	ite	eq
 8002f4a:	2301      	moveq	r3, #1
 8002f4c:	2300      	movne	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	461a      	mov	r2, r3
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d19b      	bne.n	8002e90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3720      	adds	r7, #32
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000018 	.word	0x20000018

08002f68 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af02      	add	r7, sp, #8
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f7c:	d111      	bne.n	8002fa2 <SPI_EndRxTransaction+0x3a>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f86:	d004      	beq.n	8002f92 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f90:	d107      	bne.n	8002fa2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fa0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002faa:	d12a      	bne.n	8003002 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb4:	d012      	beq.n	8002fdc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2180      	movs	r1, #128	; 0x80
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f7ff ff49 	bl	8002e58 <SPI_WaitFlagStateUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d02d      	beq.n	8003028 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e026      	b.n	800302a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f7ff ff36 	bl	8002e58 <SPI_WaitFlagStateUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d01a      	beq.n	8003028 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff6:	f043 0220 	orr.w	r2, r3, #32
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e013      	b.n	800302a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2200      	movs	r2, #0
 800300a:	2101      	movs	r1, #1
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f7ff ff23 	bl	8002e58 <SPI_WaitFlagStateUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d007      	beq.n	8003028 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301c:	f043 0220 	orr.w	r2, r3, #32
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e000      	b.n	800302a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af02      	add	r7, sp, #8
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003040:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <SPI_EndRxTxTransaction+0x7c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1b      	ldr	r2, [pc, #108]	; (80030b4 <SPI_EndRxTxTransaction+0x80>)
 8003046:	fba2 2303 	umull	r2, r3, r2, r3
 800304a:	0d5b      	lsrs	r3, r3, #21
 800304c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003050:	fb02 f303 	mul.w	r3, r2, r3
 8003054:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800305e:	d112      	bne.n	8003086 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2200      	movs	r2, #0
 8003068:	2180      	movs	r1, #128	; 0x80
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f7ff fef4 	bl	8002e58 <SPI_WaitFlagStateUntilTimeout>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d016      	beq.n	80030a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307a:	f043 0220 	orr.w	r2, r3, #32
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e00f      	b.n	80030a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00a      	beq.n	80030a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	3b01      	subs	r3, #1
 8003090:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309c:	2b80      	cmp	r3, #128	; 0x80
 800309e:	d0f2      	beq.n	8003086 <SPI_EndRxTxTransaction+0x52>
 80030a0:	e000      	b.n	80030a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80030a2:	bf00      	nop
  }

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000018 	.word	0x20000018
 80030b4:	165e9f81 	.word	0x165e9f81

080030b8 <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
	/* STM32F4xx HAL library initialization */
	HAL_Init();
 80030bc:	f7fe f910 	bl	80012e0 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 80030c0:	f000 f83c 	bl	800313c <SystemClock_Config>

	/* Initialize BSP LED1 */
	BSP_LED_Init(LED1);
 80030c4:	2000      	movs	r0, #0
 80030c6:	f7fe f83d 	bl	8001144 <BSP_LED_Init>

	/* CONFIG */
	hnrf24.Init.CrcEnable = 1;
 80030ca:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <main+0x80>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	701a      	strb	r2, [r3, #0]
	hnrf24.Init.CrcEncodingScheme = CRC_ENCODING_1_BYTE;
 80030d0:	4b19      	ldr	r3, [pc, #100]	; (8003138 <main+0x80>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	705a      	strb	r2, [r3, #1]
	/* EN_AA */
	hnrf24.Init.AutoAckEnable = 1;
 80030d6:	4b18      	ldr	r3, [pc, #96]	; (8003138 <main+0x80>)
 80030d8:	2201      	movs	r2, #1
 80030da:	709a      	strb	r2, [r3, #2]
	hnrf24.Init.AutoAckDataPipes = 0b00000011;
 80030dc:	4b16      	ldr	r3, [pc, #88]	; (8003138 <main+0x80>)
 80030de:	2203      	movs	r2, #3
 80030e0:	70da      	strb	r2, [r3, #3]
	/* EN_RXADDR */
	hnrf24.Init.RxDataPipes = 0b00000001;
 80030e2:	4b15      	ldr	r3, [pc, #84]	; (8003138 <main+0x80>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	711a      	strb	r2, [r3, #4]
	/* SETUP_AW */
	hnrf24.Init.Aw = AW_3_BYTES;
 80030e8:	4b13      	ldr	r3, [pc, #76]	; (8003138 <main+0x80>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	715a      	strb	r2, [r3, #5]
	/* RF_CH */
	hnrf24.Init.RfChannel = 0b00000010;
 80030ee:	4b12      	ldr	r3, [pc, #72]	; (8003138 <main+0x80>)
 80030f0:	2202      	movs	r2, #2
 80030f2:	719a      	strb	r2, [r3, #6]
	/* RF_SETUP */
	hnrf24.Init.ContWave = 0;
 80030f4:	4b10      	ldr	r3, [pc, #64]	; (8003138 <main+0x80>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	71da      	strb	r2, [r3, #7]
	hnrf24.Init.RfPower = RF_POWER_0DBM;
 80030fa:	4b0f      	ldr	r3, [pc, #60]	; (8003138 <main+0x80>)
 80030fc:	2206      	movs	r2, #6
 80030fe:	721a      	strb	r2, [r3, #8]
	hnrf24.Init.RfDataRate = RF_DR_2MBPS;
 8003100:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <main+0x80>)
 8003102:	2208      	movs	r2, #8
 8003104:	725a      	strb	r2, [r3, #9]
	/* DPL */
	hnrf24.Init.DplEnable = 1;
 8003106:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <main+0x80>)
 8003108:	2201      	movs	r2, #1
 800310a:	729a      	strb	r2, [r3, #10]
	hnrf24.Init.DplEnableDataPipes = 0b00000011;
 800310c:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <main+0x80>)
 800310e:	2203      	movs	r2, #3
 8003110:	72da      	strb	r2, [r3, #11]
	/* EN_DYN_ACK */
	hnrf24.Init.DynAckEnable = 0;
 8003112:	4b09      	ldr	r3, [pc, #36]	; (8003138 <main+0x80>)
 8003114:	2200      	movs	r2, #0
 8003116:	731a      	strb	r2, [r3, #12]

	hnrf24.StatusRegister = 0;
 8003118:	4b07      	ldr	r3, [pc, #28]	; (8003138 <main+0x80>)
 800311a:	2200      	movs	r2, #0
 800311c:	735a      	strb	r2, [r3, #13]
	hnrf24.DeviceMode = STANDBYI_MODE;
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <main+0x80>)
 8003120:	2200      	movs	r2, #0
 8003122:	739a      	strb	r2, [r3, #14]

	if (nRF24_Init(&hnrf24) != NRF24_OK) {
 8003124:	4804      	ldr	r0, [pc, #16]	; (8003138 <main+0x80>)
 8003126:	f7fd fddb 	bl	8000ce0 <nRF24_Init>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <main+0x7c>
		Error_Handler();
 8003130:	f000 f866 	bl	8003200 <Error_Handler>
	}

	/* Infinite loop */
	while (1)
 8003134:	e7fe      	b.n	8003134 <main+0x7c>
 8003136:	bf00      	nop
 8003138:	200000ac 	.word	0x200000ac

0800313c <SystemClock_Config>:

	}
}

static void SystemClock_Config(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b094      	sub	sp, #80	; 0x50
 8003140:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	4b2c      	ldr	r3, [pc, #176]	; (80031f8 <SystemClock_Config+0xbc>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	4a2b      	ldr	r2, [pc, #172]	; (80031f8 <SystemClock_Config+0xbc>)
 800314c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003150:	6413      	str	r3, [r2, #64]	; 0x40
 8003152:	4b29      	ldr	r3, [pc, #164]	; (80031f8 <SystemClock_Config+0xbc>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315a:	60bb      	str	r3, [r7, #8]
 800315c:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800315e:	2300      	movs	r3, #0
 8003160:	607b      	str	r3, [r7, #4]
 8003162:	4b26      	ldr	r3, [pc, #152]	; (80031fc <SystemClock_Config+0xc0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a25      	ldr	r2, [pc, #148]	; (80031fc <SystemClock_Config+0xc0>)
 8003168:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	4b23      	ldr	r3, [pc, #140]	; (80031fc <SystemClock_Config+0xc0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003176:	607b      	str	r3, [r7, #4]
 8003178:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800317a:	2301      	movs	r3, #1
 800317c:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800317e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003182:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003184:	2302      	movs	r3, #2
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003188:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800318c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 800318e:	2308      	movs	r3, #8
 8003190:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8003192:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003196:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003198:	2302      	movs	r3, #2
 800319a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800319c:	2307      	movs	r3, #7
 800319e:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031a0:	f107 030c 	add.w	r3, r7, #12
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fe fc59 	bl	8001a5c <HAL_RCC_OscConfig>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 80031b0:	f000 f826 	bl	8003200 <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 80031b4:	f7fe fc02 	bl	80019bc <HAL_PWREx_EnableOverDrive>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 80031be:	f000 f81f 	bl	8003200 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80031c2:	230f      	movs	r3, #15
 80031c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031c6:	2302      	movs	r3, #2
 80031c8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031ca:	2300      	movs	r3, #0
 80031cc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80031ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80031d2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80031d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031d8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80031da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80031de:	2105      	movs	r1, #5
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fe feb3 	bl	8001f4c <HAL_RCC_ClockConfig>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 80031ec:	f000 f808 	bl	8003200 <Error_Handler>
	}
}
 80031f0:	bf00      	nop
 80031f2:	3750      	adds	r7, #80	; 0x50
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40023800 	.word	0x40023800
 80031fc:	40007000 	.word	0x40007000

08003200 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8003204:	2001      	movs	r0, #1
 8003206:	f7fd ffed 	bl	80011e4 <BSP_LED_On>
	while (1)
 800320a:	e7fe      	b.n	800320a <Error_Handler+0xa>

0800320c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800320c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003244 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003210:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003212:	e003      	b.n	800321c <LoopCopyDataInit>

08003214 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003216:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003218:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800321a:	3104      	adds	r1, #4

0800321c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800321c:	480b      	ldr	r0, [pc, #44]	; (800324c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800321e:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003220:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003222:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003224:	d3f6      	bcc.n	8003214 <CopyDataInit>
  ldr  r2, =_sbss
 8003226:	4a0b      	ldr	r2, [pc, #44]	; (8003254 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003228:	e002      	b.n	8003230 <LoopFillZerobss>

0800322a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800322a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800322c:	f842 3b04 	str.w	r3, [r2], #4

08003230 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003230:	4b09      	ldr	r3, [pc, #36]	; (8003258 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003232:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003234:	d3f9      	bcc.n	800322a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003236:	f7fd ffef 	bl	8001218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800323a:	f000 f811 	bl	8003260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800323e:	f7ff ff3b 	bl	80030b8 <main>
  bx  lr    
 8003242:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003244:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003248:	080032e8 	.word	0x080032e8
  ldr  r0, =_sdata
 800324c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003250:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 8003254:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 8003258:	200000bc 	.word	0x200000bc

0800325c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800325c:	e7fe      	b.n	800325c <ADC_IRQHandler>
	...

08003260 <__libc_init_array>:
 8003260:	b570      	push	{r4, r5, r6, lr}
 8003262:	4d0d      	ldr	r5, [pc, #52]	; (8003298 <__libc_init_array+0x38>)
 8003264:	4c0d      	ldr	r4, [pc, #52]	; (800329c <__libc_init_array+0x3c>)
 8003266:	1b64      	subs	r4, r4, r5
 8003268:	10a4      	asrs	r4, r4, #2
 800326a:	2600      	movs	r6, #0
 800326c:	42a6      	cmp	r6, r4
 800326e:	d109      	bne.n	8003284 <__libc_init_array+0x24>
 8003270:	4d0b      	ldr	r5, [pc, #44]	; (80032a0 <__libc_init_array+0x40>)
 8003272:	4c0c      	ldr	r4, [pc, #48]	; (80032a4 <__libc_init_array+0x44>)
 8003274:	f000 f818 	bl	80032a8 <_init>
 8003278:	1b64      	subs	r4, r4, r5
 800327a:	10a4      	asrs	r4, r4, #2
 800327c:	2600      	movs	r6, #0
 800327e:	42a6      	cmp	r6, r4
 8003280:	d105      	bne.n	800328e <__libc_init_array+0x2e>
 8003282:	bd70      	pop	{r4, r5, r6, pc}
 8003284:	f855 3b04 	ldr.w	r3, [r5], #4
 8003288:	4798      	blx	r3
 800328a:	3601      	adds	r6, #1
 800328c:	e7ee      	b.n	800326c <__libc_init_array+0xc>
 800328e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003292:	4798      	blx	r3
 8003294:	3601      	adds	r6, #1
 8003296:	e7f2      	b.n	800327e <__libc_init_array+0x1e>
 8003298:	080032e0 	.word	0x080032e0
 800329c:	080032e0 	.word	0x080032e0
 80032a0:	080032e0 	.word	0x080032e0
 80032a4:	080032e4 	.word	0x080032e4

080032a8 <_init>:
 80032a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032aa:	bf00      	nop
 80032ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ae:	bc08      	pop	{r3}
 80032b0:	469e      	mov	lr, r3
 80032b2:	4770      	bx	lr

080032b4 <_fini>:
 80032b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032b6:	bf00      	nop
 80032b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ba:	bc08      	pop	{r3}
 80032bc:	469e      	mov	lr, r3
 80032be:	4770      	bx	lr
