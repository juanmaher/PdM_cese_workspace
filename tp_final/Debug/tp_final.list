
tp_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ed8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003084  08003084  00013084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800309c  0800309c  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800309c  0800309c  0001309c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030a4  080030a4  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030a4  080030a4  000130a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030a8  080030a8  000130a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080030ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          00000090  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000b4  200000b4  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007a12  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000017bc  00000000  00000000  00027aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000800  00000000  00000000  00029268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005fe  00000000  00000000  00029a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002a1a  00000000  00000000  0002a066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ae3a  00000000  00000000  0002ca80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e46f8  00000000  00000000  000378ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001f08  00000000  00000000  0011bfb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  0011debc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800306c 	.word	0x0800306c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	0800306c 	.word	0x0800306c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <nRF24_Reset>:
static uint8_t DYNPD_DFT_VALUE = 0x00;
static uint8_t FEATURE_DFT_VALUE = 0x00;

/* Private functions ---------------------------------------------------------*/
static nRF24_Status_t nRF24_Reset()
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
    nRF24_SendWriteCmd(CONFIG, &CONFIG_DFT_VALUE);
 80004ec:	2201      	movs	r2, #1
 80004ee:	492b      	ldr	r1, [pc, #172]	; (800059c <nRF24_Reset+0xb4>)
 80004f0:	2020      	movs	r0, #32
 80004f2:	f000 f961 	bl	80007b8 <nRF24_SendCmd>
    nRF24_SendWriteCmd(EN_AA, &EN_AA_DFT_VALUE);
 80004f6:	2201      	movs	r2, #1
 80004f8:	4929      	ldr	r1, [pc, #164]	; (80005a0 <nRF24_Reset+0xb8>)
 80004fa:	2021      	movs	r0, #33	; 0x21
 80004fc:	f000 f95c 	bl	80007b8 <nRF24_SendCmd>
    nRF24_SendWriteCmd(EN_RXADDR, &EN_RXADDR_DFT_VALUE);
 8000500:	2201      	movs	r2, #1
 8000502:	4928      	ldr	r1, [pc, #160]	; (80005a4 <nRF24_Reset+0xbc>)
 8000504:	2022      	movs	r0, #34	; 0x22
 8000506:	f000 f957 	bl	80007b8 <nRF24_SendCmd>
    nRF24_SendWriteCmd(SETUP_AW, &SETUP_AW_DFT_VALUE);
 800050a:	2201      	movs	r2, #1
 800050c:	4926      	ldr	r1, [pc, #152]	; (80005a8 <nRF24_Reset+0xc0>)
 800050e:	2023      	movs	r0, #35	; 0x23
 8000510:	f000 f952 	bl	80007b8 <nRF24_SendCmd>
    nRF24_SendWriteCmd(SETUP_RETR, &SETUP_RETR_DFT_VALUE);
 8000514:	2201      	movs	r2, #1
 8000516:	4925      	ldr	r1, [pc, #148]	; (80005ac <nRF24_Reset+0xc4>)
 8000518:	2024      	movs	r0, #36	; 0x24
 800051a:	f000 f94d 	bl	80007b8 <nRF24_SendCmd>
    nRF24_SendWriteCmd(RF_CH, &RF_CH_DFT_VALUE);
 800051e:	2201      	movs	r2, #1
 8000520:	4923      	ldr	r1, [pc, #140]	; (80005b0 <nRF24_Reset+0xc8>)
 8000522:	2025      	movs	r0, #37	; 0x25
 8000524:	f000 f948 	bl	80007b8 <nRF24_SendCmd>
    nRF24_SendWriteCmd(RF_SETUP, &RF_SETUP_DFT_VALUE);
 8000528:	2201      	movs	r2, #1
 800052a:	4922      	ldr	r1, [pc, #136]	; (80005b4 <nRF24_Reset+0xcc>)
 800052c:	2026      	movs	r0, #38	; 0x26
 800052e:	f000 f943 	bl	80007b8 <nRF24_SendCmd>
    nRF24_SendWriteCmd(STATUS, &STATUS_DFT_VALUE);
 8000532:	2201      	movs	r2, #1
 8000534:	4920      	ldr	r1, [pc, #128]	; (80005b8 <nRF24_Reset+0xd0>)
 8000536:	2027      	movs	r0, #39	; 0x27
 8000538:	f000 f93e 	bl	80007b8 <nRF24_SendCmd>
    // nRF24_SendWriteCmd(RX_ADDR_P2, &RX_ADDR_P2_DFT_VALUE);
    // nRF24_SendWriteCmd(RX_ADDR_P3, &RX_ADDR_P3_DFT_VALUE);
    // nRF24_SendWriteCmd(RX_ADDR_P4, &RX_ADDR_P4_DFT_VALUE);
    // nRF24_SendWriteCmd(RX_ADDR_P5, &RX_ADDR_P5_DFT_VALUE);
    // nRF24_SendWriteCmd(TX_ADDR, &TX_ADDR_DFT_VALUE);
    nRF24_SendWriteCmd(RX_PW_P0, &RX_PW_P0_DFT_VALUE);
 800053c:	2201      	movs	r2, #1
 800053e:	491f      	ldr	r1, [pc, #124]	; (80005bc <nRF24_Reset+0xd4>)
 8000540:	2031      	movs	r0, #49	; 0x31
 8000542:	f000 f939 	bl	80007b8 <nRF24_SendCmd>
    nRF24_SendWriteCmd(RX_PW_P1, &RX_PW_P1_DFT_VALUE);
 8000546:	2201      	movs	r2, #1
 8000548:	491d      	ldr	r1, [pc, #116]	; (80005c0 <nRF24_Reset+0xd8>)
 800054a:	2032      	movs	r0, #50	; 0x32
 800054c:	f000 f934 	bl	80007b8 <nRF24_SendCmd>
    nRF24_SendWriteCmd(RX_PW_P2, &RX_PW_P2_DFT_VALUE);
 8000550:	2201      	movs	r2, #1
 8000552:	491c      	ldr	r1, [pc, #112]	; (80005c4 <nRF24_Reset+0xdc>)
 8000554:	2033      	movs	r0, #51	; 0x33
 8000556:	f000 f92f 	bl	80007b8 <nRF24_SendCmd>
    nRF24_SendWriteCmd(RX_PW_P3, &RX_PW_P3_DFT_VALUE);
 800055a:	2201      	movs	r2, #1
 800055c:	491a      	ldr	r1, [pc, #104]	; (80005c8 <nRF24_Reset+0xe0>)
 800055e:	2034      	movs	r0, #52	; 0x34
 8000560:	f000 f92a 	bl	80007b8 <nRF24_SendCmd>
    nRF24_SendWriteCmd(RX_PW_P4, &RX_PW_P4_DFT_VALUE);
 8000564:	2201      	movs	r2, #1
 8000566:	4919      	ldr	r1, [pc, #100]	; (80005cc <nRF24_Reset+0xe4>)
 8000568:	2035      	movs	r0, #53	; 0x35
 800056a:	f000 f925 	bl	80007b8 <nRF24_SendCmd>
    nRF24_SendWriteCmd(RX_PW_P5, &RX_PW_P5_DFT_VALUE);
 800056e:	2201      	movs	r2, #1
 8000570:	4917      	ldr	r1, [pc, #92]	; (80005d0 <nRF24_Reset+0xe8>)
 8000572:	2036      	movs	r0, #54	; 0x36
 8000574:	f000 f920 	bl	80007b8 <nRF24_SendCmd>
    nRF24_SendWriteCmd(FIFO_STATUS, &FIFO_STATUS_DFT_VALUE);
 8000578:	2201      	movs	r2, #1
 800057a:	4916      	ldr	r1, [pc, #88]	; (80005d4 <nRF24_Reset+0xec>)
 800057c:	2037      	movs	r0, #55	; 0x37
 800057e:	f000 f91b 	bl	80007b8 <nRF24_SendCmd>
    nRF24_SendWriteCmd(DYNPD, &DYNPD_DFT_VALUE);
 8000582:	2201      	movs	r2, #1
 8000584:	4914      	ldr	r1, [pc, #80]	; (80005d8 <nRF24_Reset+0xf0>)
 8000586:	203c      	movs	r0, #60	; 0x3c
 8000588:	f000 f916 	bl	80007b8 <nRF24_SendCmd>
    nRF24_SendWriteCmd(FEATURE, &FEATURE_DFT_VALUE);
 800058c:	2201      	movs	r2, #1
 800058e:	4913      	ldr	r1, [pc, #76]	; (80005dc <nRF24_Reset+0xf4>)
 8000590:	203d      	movs	r0, #61	; 0x3d
 8000592:	f000 f911 	bl	80007b8 <nRF24_SendCmd>

    return NRF24_OK;
 8000596:	2300      	movs	r3, #0
}
 8000598:	4618      	mov	r0, r3
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000000 	.word	0x20000000
 80005a0:	20000001 	.word	0x20000001
 80005a4:	20000002 	.word	0x20000002
 80005a8:	20000003 	.word	0x20000003
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000005 	.word	0x20000005
 80005b4:	20000006 	.word	0x20000006
 80005b8:	20000007 	.word	0x20000007
 80005bc:	200000a0 	.word	0x200000a0
 80005c0:	200000a1 	.word	0x200000a1
 80005c4:	200000a2 	.word	0x200000a2
 80005c8:	200000a3 	.word	0x200000a3
 80005cc:	200000a4 	.word	0x200000a4
 80005d0:	200000a5 	.word	0x200000a5
 80005d4:	20000008 	.word	0x20000008
 80005d8:	200000a6 	.word	0x200000a6
 80005dc:	200000a7 	.word	0x200000a7

080005e0 <nRF24_UpdateMode>:

static nRF24_Status_t nRF24_UpdateMode(const operationModes_t mode)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
    uint8_t register_value = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	73fb      	strb	r3, [r7, #15]

    if (operationCurrentMode == mode) {
 80005ee:	4b70      	ldr	r3, [pc, #448]	; (80007b0 <nRF24_UpdateMode+0x1d0>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	79fa      	ldrb	r2, [r7, #7]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d101      	bne.n	80005fc <nRF24_UpdateMode+0x1c>
        return NRF24_OK;
 80005f8:	2300      	movs	r3, #0
 80005fa:	e0d4      	b.n	80007a6 <nRF24_UpdateMode+0x1c6>
    }

    CHECK_INTERNAL(nRF24_SendReadCmd(CONFIG, &register_value));
 80005fc:	f107 030f 	add.w	r3, r7, #15
 8000600:	2201      	movs	r2, #1
 8000602:	4619      	mov	r1, r3
 8000604:	2000      	movs	r0, #0
 8000606:	f000 f8d7 	bl	80007b8 <nRF24_SendCmd>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d008      	beq.n	8000622 <nRF24_UpdateMode+0x42>
 8000610:	f107 030f 	add.w	r3, r7, #15
 8000614:	2201      	movs	r2, #1
 8000616:	4619      	mov	r1, r3
 8000618:	2000      	movs	r0, #0
 800061a:	f000 f8cd 	bl	80007b8 <nRF24_SendCmd>
 800061e:	4603      	mov	r3, r0
 8000620:	e0c1      	b.n	80007a6 <nRF24_UpdateMode+0x1c6>

    switch (operationCurrentMode) {
 8000622:	4b63      	ldr	r3, [pc, #396]	; (80007b0 <nRF24_UpdateMode+0x1d0>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b04      	cmp	r3, #4
 8000628:	f300 80b4 	bgt.w	8000794 <nRF24_UpdateMode+0x1b4>
 800062c:	2b03      	cmp	r3, #3
 800062e:	f280 80a7 	bge.w	8000780 <nRF24_UpdateMode+0x1a0>
 8000632:	2b00      	cmp	r3, #0
 8000634:	d002      	beq.n	800063c <nRF24_UpdateMode+0x5c>
 8000636:	2b01      	cmp	r3, #1
 8000638:	d020      	beq.n	800067c <nRF24_UpdateMode+0x9c>
            if (mode == STANDBYI) {
                nRF24_CE_LOW();
            }
            break;
        default:
            break;
 800063a:	e0ab      	b.n	8000794 <nRF24_UpdateMode+0x1b4>
            if (mode == STANDBYI) {
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2b01      	cmp	r3, #1
 8000640:	f040 80aa 	bne.w	8000798 <nRF24_UpdateMode+0x1b8>
                register_value |= PWR_UP;
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	f043 0302 	orr.w	r3, r3, #2
 800064a:	b2db      	uxtb	r3, r3
 800064c:	73fb      	strb	r3, [r7, #15]
                CHECK_INTERNAL(nRF24_SendWriteCmd(CONFIG, &(register_value)));
 800064e:	f107 030f 	add.w	r3, r7, #15
 8000652:	2201      	movs	r2, #1
 8000654:	4619      	mov	r1, r3
 8000656:	2020      	movs	r0, #32
 8000658:	f000 f8ae 	bl	80007b8 <nRF24_SendCmd>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d008      	beq.n	8000674 <nRF24_UpdateMode+0x94>
 8000662:	f107 030f 	add.w	r3, r7, #15
 8000666:	2201      	movs	r2, #1
 8000668:	4619      	mov	r1, r3
 800066a:	2020      	movs	r0, #32
 800066c:	f000 f8a4 	bl	80007b8 <nRF24_SendCmd>
 8000670:	4603      	mov	r3, r0
 8000672:	e098      	b.n	80007a6 <nRF24_UpdateMode+0x1c6>
                HAL_Delay(START_UP_DELAY_MS);
 8000674:	2002      	movs	r0, #2
 8000676:	f000 fd99 	bl	80011ac <HAL_Delay>
            break;
 800067a:	e08d      	b.n	8000798 <nRF24_UpdateMode+0x1b8>
            switch (mode) {
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	2b04      	cmp	r3, #4
 8000680:	d040      	beq.n	8000704 <nRF24_UpdateMode+0x124>
 8000682:	2b04      	cmp	r3, #4
 8000684:	dc60      	bgt.n	8000748 <nRF24_UpdateMode+0x168>
 8000686:	2b00      	cmp	r3, #0
 8000688:	d002      	beq.n	8000690 <nRF24_UpdateMode+0xb0>
 800068a:	2b03      	cmp	r3, #3
 800068c:	d018      	beq.n	80006c0 <nRF24_UpdateMode+0xe0>
 800068e:	e05b      	b.n	8000748 <nRF24_UpdateMode+0x168>
                    register_value &= ~PWR_UP;
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	f023 0302 	bic.w	r3, r3, #2
 8000696:	b2db      	uxtb	r3, r3
 8000698:	73fb      	strb	r3, [r7, #15]
                    CHECK_INTERNAL(nRF24_SendWriteCmd(CONFIG, &(register_value)));
 800069a:	f107 030f 	add.w	r3, r7, #15
 800069e:	2201      	movs	r2, #1
 80006a0:	4619      	mov	r1, r3
 80006a2:	2020      	movs	r0, #32
 80006a4:	f000 f888 	bl	80007b8 <nRF24_SendCmd>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d064      	beq.n	8000778 <nRF24_UpdateMode+0x198>
 80006ae:	f107 030f 	add.w	r3, r7, #15
 80006b2:	2201      	movs	r2, #1
 80006b4:	4619      	mov	r1, r3
 80006b6:	2020      	movs	r0, #32
 80006b8:	f000 f87e 	bl	80007b8 <nRF24_SendCmd>
 80006bc:	4603      	mov	r3, r0
 80006be:	e072      	b.n	80007a6 <nRF24_UpdateMode+0x1c6>
                    register_value |= PRIM_RX;
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	73fb      	strb	r3, [r7, #15]
                    CHECK_INTERNAL(nRF24_SendWriteCmd(CONFIG, &(register_value)));
 80006ca:	f107 030f 	add.w	r3, r7, #15
 80006ce:	2201      	movs	r2, #1
 80006d0:	4619      	mov	r1, r3
 80006d2:	2020      	movs	r0, #32
 80006d4:	f000 f870 	bl	80007b8 <nRF24_SendCmd>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d008      	beq.n	80006f0 <nRF24_UpdateMode+0x110>
 80006de:	f107 030f 	add.w	r3, r7, #15
 80006e2:	2201      	movs	r2, #1
 80006e4:	4619      	mov	r1, r3
 80006e6:	2020      	movs	r0, #32
 80006e8:	f000 f866 	bl	80007b8 <nRF24_SendCmd>
 80006ec:	4603      	mov	r3, r0
 80006ee:	e05a      	b.n	80007a6 <nRF24_UpdateMode+0x1c6>
                    nRF24_CE_HIGH();
 80006f0:	2201      	movs	r2, #1
 80006f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f6:	482f      	ldr	r0, [pc, #188]	; (80007b4 <nRF24_UpdateMode+0x1d4>)
 80006f8:	f001 f80e 	bl	8001718 <HAL_GPIO_WritePin>
                    HAL_Delay(RX_DELAY_MS);
 80006fc:	2001      	movs	r0, #1
 80006fe:	f000 fd55 	bl	80011ac <HAL_Delay>
                    break;
 8000702:	e03c      	b.n	800077e <nRF24_UpdateMode+0x19e>
                    register_value |= PRIM_RX;
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	f043 0301 	orr.w	r3, r3, #1
 800070a:	b2db      	uxtb	r3, r3
 800070c:	73fb      	strb	r3, [r7, #15]
                    CHECK_INTERNAL(nRF24_SendWriteCmd(CONFIG, &(register_value)));
 800070e:	f107 030f 	add.w	r3, r7, #15
 8000712:	2201      	movs	r2, #1
 8000714:	4619      	mov	r1, r3
 8000716:	2020      	movs	r0, #32
 8000718:	f000 f84e 	bl	80007b8 <nRF24_SendCmd>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d008      	beq.n	8000734 <nRF24_UpdateMode+0x154>
 8000722:	f107 030f 	add.w	r3, r7, #15
 8000726:	2201      	movs	r2, #1
 8000728:	4619      	mov	r1, r3
 800072a:	2020      	movs	r0, #32
 800072c:	f000 f844 	bl	80007b8 <nRF24_SendCmd>
 8000730:	4603      	mov	r3, r0
 8000732:	e038      	b.n	80007a6 <nRF24_UpdateMode+0x1c6>
                    nRF24_CE_HIGH();
 8000734:	2201      	movs	r2, #1
 8000736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800073a:	481e      	ldr	r0, [pc, #120]	; (80007b4 <nRF24_UpdateMode+0x1d4>)
 800073c:	f000 ffec 	bl	8001718 <HAL_GPIO_WritePin>
                    HAL_Delay(TX_DELAY_MS);
 8000740:	2001      	movs	r0, #1
 8000742:	f000 fd33 	bl	80011ac <HAL_Delay>
                    break;
 8000746:	e01a      	b.n	800077e <nRF24_UpdateMode+0x19e>
                    register_value &= ~PWR_UP;
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	f023 0302 	bic.w	r3, r3, #2
 800074e:	b2db      	uxtb	r3, r3
 8000750:	73fb      	strb	r3, [r7, #15]
                    CHECK_INTERNAL(nRF24_SendWriteCmd(CONFIG, &(register_value)));
 8000752:	f107 030f 	add.w	r3, r7, #15
 8000756:	2201      	movs	r2, #1
 8000758:	4619      	mov	r1, r3
 800075a:	2020      	movs	r0, #32
 800075c:	f000 f82c 	bl	80007b8 <nRF24_SendCmd>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d00a      	beq.n	800077c <nRF24_UpdateMode+0x19c>
 8000766:	f107 030f 	add.w	r3, r7, #15
 800076a:	2201      	movs	r2, #1
 800076c:	4619      	mov	r1, r3
 800076e:	2020      	movs	r0, #32
 8000770:	f000 f822 	bl	80007b8 <nRF24_SendCmd>
 8000774:	4603      	mov	r3, r0
 8000776:	e016      	b.n	80007a6 <nRF24_UpdateMode+0x1c6>
                    break;
 8000778:	bf00      	nop
 800077a:	e010      	b.n	800079e <nRF24_UpdateMode+0x1be>
                    break;
 800077c:	bf00      	nop
            break;
 800077e:	e00e      	b.n	800079e <nRF24_UpdateMode+0x1be>
            if (mode == STANDBYI) {
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d10a      	bne.n	800079c <nRF24_UpdateMode+0x1bc>
                nRF24_CE_LOW();
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800078c:	4809      	ldr	r0, [pc, #36]	; (80007b4 <nRF24_UpdateMode+0x1d4>)
 800078e:	f000 ffc3 	bl	8001718 <HAL_GPIO_WritePin>
            break;
 8000792:	e003      	b.n	800079c <nRF24_UpdateMode+0x1bc>
            break;
 8000794:	bf00      	nop
 8000796:	e002      	b.n	800079e <nRF24_UpdateMode+0x1be>
            break;
 8000798:	bf00      	nop
 800079a:	e000      	b.n	800079e <nRF24_UpdateMode+0x1be>
            break;
 800079c:	bf00      	nop
    }

    operationCurrentMode = mode;
 800079e:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <nRF24_UpdateMode+0x1d0>)
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	7013      	strb	r3, [r2, #0]

    return NRF24_OK;
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000040 	.word	0x20000040
 80007b4:	40020c00 	.word	0x40020c00

080007b8 <nRF24_SendCmd>:

static nRF24_Status_t nRF24_SendCmd(uint8_t cmd, uint8_t * value, const uint8_t length)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af02      	add	r7, sp, #8
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
 80007c4:	4613      	mov	r3, r2
 80007c6:	71bb      	strb	r3, [r7, #6]
    /* Start SPI communication */
    SPIx_CS_HIGH();
 80007c8:	2201      	movs	r2, #1
 80007ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ce:	4829      	ldr	r0, [pc, #164]	; (8000874 <nRF24_SendCmd+0xbc>)
 80007d0:	f000 ffa2 	bl	8001718 <HAL_GPIO_WritePin>

    HAL_Delay(1);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f000 fce9 	bl	80011ac <HAL_Delay>

    /* Send command */
    CHECK_SPI(HAL_SPI_TransmitReceive(&hspi1, &cmd, &(hnrf24->StatusRegister), 1, SPIx_TIMEOUT_MAX));
 80007da:	4b27      	ldr	r3, [pc, #156]	; (8000878 <nRF24_SendCmd+0xc0>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	1d1a      	adds	r2, r3, #4
 80007e0:	1df9      	adds	r1, r7, #7
 80007e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	2301      	movs	r3, #1
 80007ea:	4824      	ldr	r0, [pc, #144]	; (800087c <nRF24_SendCmd+0xc4>)
 80007ec:	f001 ffec 	bl	80027c8 <HAL_SPI_TransmitReceive>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <nRF24_SendCmd+0x42>
 80007f6:	2303      	movs	r3, #3
 80007f8:	e037      	b.n	800086a <nRF24_SendCmd+0xb2>

    if (cmd & W_REGISTER || cmd == W_TX_PAYLOAD || cmd == W_TX_PAYLOAD_NOACK || cmd == W_ACK_PAYLOAD) {
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	f003 0320 	and.w	r3, r3, #32
 8000800:	2b00      	cmp	r3, #0
 8000802:	d108      	bne.n	8000816 <nRF24_SendCmd+0x5e>
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2ba0      	cmp	r3, #160	; 0xa0
 8000808:	d005      	beq.n	8000816 <nRF24_SendCmd+0x5e>
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2bb0      	cmp	r3, #176	; 0xb0
 800080e:	d002      	beq.n	8000816 <nRF24_SendCmd+0x5e>
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	2ba8      	cmp	r3, #168	; 0xa8
 8000814:	d10c      	bne.n	8000830 <nRF24_SendCmd+0x78>
        CHECK_SPI(HAL_SPI_Transmit(&hspi1, value, length, SPIx_TIMEOUT_MAX));
 8000816:	79bb      	ldrb	r3, [r7, #6]
 8000818:	b29a      	uxth	r2, r3
 800081a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081e:	6839      	ldr	r1, [r7, #0]
 8000820:	4816      	ldr	r0, [pc, #88]	; (800087c <nRF24_SendCmd+0xc4>)
 8000822:	f001 fce8 	bl	80021f6 <HAL_SPI_Transmit>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d014      	beq.n	8000856 <nRF24_SendCmd+0x9e>
 800082c:	2303      	movs	r3, #3
 800082e:	e01c      	b.n	800086a <nRF24_SendCmd+0xb2>
    } else if (cmd & R_REGISTER || cmd == R_RX_PAYLOAD || cmd == R_RX_PL_WID) {
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	2b61      	cmp	r3, #97	; 0x61
 8000834:	d002      	beq.n	800083c <nRF24_SendCmd+0x84>
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b60      	cmp	r3, #96	; 0x60
 800083a:	d10c      	bne.n	8000856 <nRF24_SendCmd+0x9e>
        CHECK_SPI(HAL_SPI_Receive(&hspi1, value, length, SPIx_TIMEOUT_MAX));
 800083c:	79bb      	ldrb	r3, [r7, #6]
 800083e:	b29a      	uxth	r2, r3
 8000840:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000844:	6839      	ldr	r1, [r7, #0]
 8000846:	480d      	ldr	r0, [pc, #52]	; (800087c <nRF24_SendCmd+0xc4>)
 8000848:	f001 fe33 	bl	80024b2 <HAL_SPI_Receive>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <nRF24_SendCmd+0x9e>
 8000852:	2303      	movs	r3, #3
 8000854:	e009      	b.n	800086a <nRF24_SendCmd+0xb2>
    }

    /* Stop SPI communication */
    SPIx_CS_LOW();
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <nRF24_SendCmd+0xbc>)
 800085e:	f000 ff5b 	bl	8001718 <HAL_GPIO_WritePin>

    HAL_Delay(1);
 8000862:	2001      	movs	r0, #1
 8000864:	f000 fca2 	bl	80011ac <HAL_Delay>

    return NRF24_OK;
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40020c00 	.word	0x40020c00
 8000878:	2000009c 	.word	0x2000009c
 800087c:	20000044 	.word	0x20000044

08000880 <nRF24_SetRegister>:

static nRF24_Status_t nRF24_SetRegister(const uint8_t registerName, const uint8_t bit)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	460a      	mov	r2, r1
 800088a:	71fb      	strb	r3, [r7, #7]
 800088c:	4613      	mov	r3, r2
 800088e:	71bb      	strb	r3, [r7, #6]
    uint8_t registerValue = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	73fb      	strb	r3, [r7, #15]

    CHECK_INTERNAL(nRF24_SendReadCmd(registerName, &registerValue));
 8000894:	f107 010f 	add.w	r1, r7, #15
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2201      	movs	r2, #1
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff8b 	bl	80007b8 <nRF24_SendCmd>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d008      	beq.n	80008ba <nRF24_SetRegister+0x3a>
 80008a8:	f107 010f 	add.w	r1, r7, #15
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	2201      	movs	r2, #1
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff81 	bl	80007b8 <nRF24_SendCmd>
 80008b6:	4603      	mov	r3, r0
 80008b8:	e01e      	b.n	80008f8 <nRF24_SetRegister+0x78>
    registerValue |= bit;
 80008ba:	7bfa      	ldrb	r2, [r7, #15]
 80008bc:	79bb      	ldrb	r3, [r7, #6]
 80008be:	4313      	orrs	r3, r2
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(registerName, &(registerValue)));
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	f043 0320 	orr.w	r3, r3, #32
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	f107 010f 	add.w	r1, r7, #15
 80008d0:	2201      	movs	r2, #1
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff ff70 	bl	80007b8 <nRF24_SendCmd>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d00b      	beq.n	80008f6 <nRF24_SetRegister+0x76>
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	f043 0320 	orr.w	r3, r3, #32
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	f107 010f 	add.w	r1, r7, #15
 80008ea:	2201      	movs	r2, #1
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ff63 	bl	80007b8 <nRF24_SendCmd>
 80008f2:	4603      	mov	r3, r0
 80008f4:	e000      	b.n	80008f8 <nRF24_SetRegister+0x78>

    return NRF24_OK;
 80008f6:	2300      	movs	r3, #0
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <nRF24_ResetRegister>:

static nRF24_Status_t nRF24_ResetRegister(const uint8_t registerName, const uint8_t bit)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	460a      	mov	r2, r1
 800090a:	71fb      	strb	r3, [r7, #7]
 800090c:	4613      	mov	r3, r2
 800090e:	71bb      	strb	r3, [r7, #6]
    uint8_t registerValue = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	73fb      	strb	r3, [r7, #15]

    CHECK_INTERNAL(nRF24_SendReadCmd(registerName, &registerValue));
 8000914:	f107 010f 	add.w	r1, r7, #15
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	2201      	movs	r2, #1
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ff4b 	bl	80007b8 <nRF24_SendCmd>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d008      	beq.n	800093a <nRF24_ResetRegister+0x3a>
 8000928:	f107 010f 	add.w	r1, r7, #15
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	2201      	movs	r2, #1
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff41 	bl	80007b8 <nRF24_SendCmd>
 8000936:	4603      	mov	r3, r0
 8000938:	e023      	b.n	8000982 <nRF24_ResetRegister+0x82>
    registerValue &= ~(bit);
 800093a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800093e:	43db      	mvns	r3, r3
 8000940:	b25a      	sxtb	r2, r3
 8000942:	7bfb      	ldrb	r3, [r7, #15]
 8000944:	b25b      	sxtb	r3, r3
 8000946:	4013      	ands	r3, r2
 8000948:	b25b      	sxtb	r3, r3
 800094a:	b2db      	uxtb	r3, r3
 800094c:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(registerName, &(registerValue)));
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	f043 0320 	orr.w	r3, r3, #32
 8000954:	b2db      	uxtb	r3, r3
 8000956:	f107 010f 	add.w	r1, r7, #15
 800095a:	2201      	movs	r2, #1
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff ff2b 	bl	80007b8 <nRF24_SendCmd>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d00b      	beq.n	8000980 <nRF24_ResetRegister+0x80>
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	f043 0320 	orr.w	r3, r3, #32
 800096e:	b2db      	uxtb	r3, r3
 8000970:	f107 010f 	add.w	r1, r7, #15
 8000974:	2201      	movs	r2, #1
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff ff1e 	bl	80007b8 <nRF24_SendCmd>
 800097c:	4603      	mov	r3, r0
 800097e:	e000      	b.n	8000982 <nRF24_ResetRegister+0x82>

    return NRF24_OK;
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <mySPIx_MspInit>:

/**
  * @brief  Initializes SPI MSP.
  */
static void mySPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08c      	sub	sp, #48	; 0x30
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef  GPIO_InitStruct;

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    SPIx_SCK_GPIO_CLK_ENABLE();
 8000994:	2300      	movs	r3, #0
 8000996:	61bb      	str	r3, [r7, #24]
 8000998:	4b37      	ldr	r3, [pc, #220]	; (8000a78 <mySPIx_MspInit+0xec>)
 800099a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099c:	4a36      	ldr	r2, [pc, #216]	; (8000a78 <mySPIx_MspInit+0xec>)
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	6313      	str	r3, [r2, #48]	; 0x30
 80009a4:	4b34      	ldr	r3, [pc, #208]	; (8000a78 <mySPIx_MspInit+0xec>)
 80009a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a8:	f003 0301 	and.w	r3, r3, #1
 80009ac:	61bb      	str	r3, [r7, #24]
 80009ae:	69bb      	ldr	r3, [r7, #24]
    SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	4b30      	ldr	r3, [pc, #192]	; (8000a78 <mySPIx_MspInit+0xec>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b8:	4a2f      	ldr	r2, [pc, #188]	; (8000a78 <mySPIx_MspInit+0xec>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	6313      	str	r3, [r2, #48]	; 0x30
 80009c0:	4b2d      	ldr	r3, [pc, #180]	; (8000a78 <mySPIx_MspInit+0xec>)
 80009c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	697b      	ldr	r3, [r7, #20]
    SPIx_CS_GPIO_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	4b29      	ldr	r3, [pc, #164]	; (8000a78 <mySPIx_MspInit+0xec>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	4a28      	ldr	r2, [pc, #160]	; (8000a78 <mySPIx_MspInit+0xec>)
 80009d6:	f043 0308 	orr.w	r3, r3, #8
 80009da:	6313      	str	r3, [r2, #48]	; 0x30
 80009dc:	4b26      	ldr	r3, [pc, #152]	; (8000a78 <mySPIx_MspInit+0xec>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e0:	f003 0308 	and.w	r3, r3, #8
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	693b      	ldr	r3, [r7, #16]

    /* Configure SPI SCK */
    GPIO_InitStruct.Pin = SPIx_SCK_PIN;
 80009e8:	2320      	movs	r3, #32
 80009ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80009f4:	2303      	movs	r3, #3
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 80009f8:	2305      	movs	r3, #5
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	481e      	ldr	r0, [pc, #120]	; (8000a7c <mySPIx_MspInit+0xf0>)
 8000a04:	f000 fcdc 	bl	80013c0 <HAL_GPIO_Init>

    /* Configure SPI MISO and MOSI */
    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = SPIx_MISO_MOSI_AF;
 8000a0c:	2305      	movs	r3, #5
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 8000a10:	2302      	movs	r3, #2
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPIx_MISO_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4818      	ldr	r0, [pc, #96]	; (8000a7c <mySPIx_MspInit+0xf0>)
 8000a1c:	f000 fcd0 	bl	80013c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8000a20:	2340      	movs	r3, #64	; 0x40
 8000a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 8000a24:	2302      	movs	r3, #2
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPIx_MISO_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4813      	ldr	r0, [pc, #76]	; (8000a7c <mySPIx_MspInit+0xf0>)
 8000a30:	f000 fcc6 	bl	80013c0 <HAL_GPIO_Init>

    /* Configure SPI CS */
    GPIO_InitStruct.Pin = SPIx_CS_PIN;
 8000a34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a42:	2302      	movs	r3, #2
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(SPIx_CS_GPIO_PORT, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480c      	ldr	r0, [pc, #48]	; (8000a80 <mySPIx_MspInit+0xf4>)
 8000a4e:	f000 fcb7 	bl	80013c0 <HAL_GPIO_Init>

    /*** Configure the SPI peripheral ***/
    /* Enable SPI clock */
    SPIx_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <mySPIx_MspInit+0xec>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <mySPIx_MspInit+0xec>)
 8000a5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a60:	6453      	str	r3, [r2, #68]	; 0x44
 8000a62:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <mySPIx_MspInit+0xec>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
}
 8000a6e:	bf00      	nop
 8000a70:	3730      	adds	r7, #48	; 0x30
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020000 	.word	0x40020000
 8000a80:	40020c00 	.word	0x40020c00

08000a84 <mySPIx_Init>:

/**
  * @brief  Initializes SPI.
  */
static void mySPIx_Init()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
    if(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET) {
 8000a88:	4819      	ldr	r0, [pc, #100]	; (8000af0 <mySPIx_Init+0x6c>)
 8000a8a:	f002 f8af 	bl	8002bec <HAL_SPI_GetState>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d12b      	bne.n	8000aec <mySPIx_Init+0x68>
        /* SPI Config */
        hspi1.Instance = SPI1;
 8000a94:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <mySPIx_Init+0x6c>)
 8000a96:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <mySPIx_Init+0x70>)
 8000a98:	601a      	str	r2, [r3, #0]
            - SD card SPI interface max baudrate is 25MHz for write/read
        to feat these constraints SPI baudrate is set to:
            - For STM32F412ZG devices: 12,5 MHz maximum (PCLK2/SPI_BAUDRATEPRESCALER_8 = 100 MHz/8 = 12,5 MHz)
            - For STM32F446ZE/STM32F429ZI devices: 11,25 MHz maximum (PCLK2/SPI_BAUDRATEPRESCALER_8 = 90 MHz/8 = 11,25 MHz)
        */
        hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <mySPIx_Init+0x6c>)
 8000a9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000aa0:	605a      	str	r2, [r3, #4]
        hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <mySPIx_Init+0x6c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
        hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <mySPIx_Init+0x6c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
        hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <mySPIx_Init+0x6c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
        hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <mySPIx_Init+0x6c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	615a      	str	r2, [r3, #20]
        hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <mySPIx_Init+0x6c>)
 8000abc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac0:	619a      	str	r2, [r3, #24]
        hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <mySPIx_Init+0x6c>)
 8000ac4:	2210      	movs	r2, #16
 8000ac6:	61da      	str	r2, [r3, #28]
        hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <mySPIx_Init+0x6c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
        hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <mySPIx_Init+0x6c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	625a      	str	r2, [r3, #36]	; 0x24
        hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <mySPIx_Init+0x6c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	629a      	str	r2, [r3, #40]	; 0x28
        hspi1.Init.CRCPolynomial = 10;
 8000ada:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <mySPIx_Init+0x6c>)
 8000adc:	220a      	movs	r2, #10
 8000ade:	62da      	str	r2, [r3, #44]	; 0x2c

        mySPIx_MspInit(&hspi1);
 8000ae0:	4803      	ldr	r0, [pc, #12]	; (8000af0 <mySPIx_Init+0x6c>)
 8000ae2:	f7ff ff53 	bl	800098c <mySPIx_MspInit>
        HAL_SPI_Init(&hspi1);
 8000ae6:	4802      	ldr	r0, [pc, #8]	; (8000af0 <mySPIx_Init+0x6c>)
 8000ae8:	f001 faea 	bl	80020c0 <HAL_SPI_Init>
    }
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000044 	.word	0x20000044
 8000af4:	40013000 	.word	0x40013000

08000af8 <myGPIO_Init>:

static void myGPIO_Init()
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStruct;

    /* GPIO Ports Clock Enable */
    nRF24_CE_GPIO_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <myGPIO_Init+0x80>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a1c      	ldr	r2, [pc, #112]	; (8000b78 <myGPIO_Init+0x80>)
 8000b08:	f043 0308 	orr.w	r3, r3, #8
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <myGPIO_Init+0x80>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0308 	and.w	r3, r3, #8
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
    nRF24_IRQ_GPIO_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <myGPIO_Init+0x80>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a15      	ldr	r2, [pc, #84]	; (8000b78 <myGPIO_Init+0x80>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <myGPIO_Init+0x80>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Pin = nRF24_CE_PIN;
 8000b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b44:	2302      	movs	r3, #2
 8000b46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(nRF24_CE_GPIO_PORT, &GPIO_InitStruct);
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480b      	ldr	r0, [pc, #44]	; (8000b7c <myGPIO_Init+0x84>)
 8000b50:	f000 fc36 	bl	80013c0 <HAL_GPIO_Init>

    /* Configure IRQ GPIO pin */
    GPIO_InitStruct.Pin = nRF24_IRQ_PIN;
 8000b54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b5a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(nRF24_IRQ_GPIO_PORT, &GPIO_InitStruct);
 8000b64:	f107 030c 	add.w	r3, r7, #12
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4804      	ldr	r0, [pc, #16]	; (8000b7c <myGPIO_Init+0x84>)
 8000b6c:	f000 fc28 	bl	80013c0 <HAL_GPIO_Init>
}
 8000b70:	bf00      	nop
 8000b72:	3720      	adds	r7, #32
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020c00 	.word	0x40020c00

08000b80 <nRF24_Init>:

/* Public functions ----------------------------------------------------------*/
nRF24_Status_t nRF24_Init(nRF24_HandleTypeDef * pHnrf24)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
    uint8_t register_value = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	73fb      	strb	r3, [r7, #15]

    hnrf24 = pHnrf24;
 8000b8c:	4aa9      	ldr	r2, [pc, #676]	; (8000e34 <nRF24_Init+0x2b4>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]

    myGPIO_Init();
 8000b92:	f7ff ffb1 	bl	8000af8 <myGPIO_Init>
    mySPIx_Init();
 8000b96:	f7ff ff75 	bl	8000a84 <mySPIx_Init>

    nRF24_Reset();
 8000b9a:	f7ff fca5 	bl	80004e8 <nRF24_Reset>

    nRF24_UpdateMode(POWER_DOWN);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f7ff fd1e 	bl	80005e0 <nRF24_UpdateMode>

    CHECK_INTERNAL(nRF24_SendReadCmd(CONFIG, &register_value));
 8000ba4:	f107 030f 	add.w	r3, r7, #15
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4619      	mov	r1, r3
 8000bac:	2000      	movs	r0, #0
 8000bae:	f7ff fe03 	bl	80007b8 <nRF24_SendCmd>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d008      	beq.n	8000bca <nRF24_Init+0x4a>
 8000bb8:	f107 030f 	add.w	r3, r7, #15
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f7ff fdf9 	bl	80007b8 <nRF24_SendCmd>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	e1d2      	b.n	8000f70 <nRF24_Init+0x3f0>
    register_value |= hnrf24->Init->CrcEnable ? EN_CRC : ~EN_CRC;
 8000bca:	4b9a      	ldr	r3, [pc, #616]	; (8000e34 <nRF24_Init+0x2b4>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <nRF24_Init+0x5a>
 8000bd6:	2208      	movs	r2, #8
 8000bd8:	e001      	b.n	8000bde <nRF24_Init+0x5e>
 8000bda:	f06f 0208 	mvn.w	r2, #8
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	b25b      	sxtb	r3, r3
 8000be2:	4313      	orrs	r3, r2
 8000be4:	b25b      	sxtb	r3, r3
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	73fb      	strb	r3, [r7, #15]
    register_value |= hnrf24->Init->CrcEncodingScheme ? CRCO : ~CRCO;
 8000bea:	4b92      	ldr	r3, [pc, #584]	; (8000e34 <nRF24_Init+0x2b4>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	785b      	ldrb	r3, [r3, #1]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <nRF24_Init+0x7a>
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	e001      	b.n	8000bfe <nRF24_Init+0x7e>
 8000bfa:	f06f 0204 	mvn.w	r2, #4
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
 8000c00:	b25b      	sxtb	r3, r3
 8000c02:	4313      	orrs	r3, r2
 8000c04:	b25b      	sxtb	r3, r3
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	73fb      	strb	r3, [r7, #15]
    //register_value |= hnrf24->Init->PrimRx ? PRIM_RX : ~PRIM_RX;
    CHECK_INTERNAL(nRF24_SendWriteCmd(CONFIG, &register_value));
 8000c0a:	f107 030f 	add.w	r3, r7, #15
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4619      	mov	r1, r3
 8000c12:	2020      	movs	r0, #32
 8000c14:	f7ff fdd0 	bl	80007b8 <nRF24_SendCmd>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d008      	beq.n	8000c30 <nRF24_Init+0xb0>
 8000c1e:	f107 030f 	add.w	r3, r7, #15
 8000c22:	2201      	movs	r2, #1
 8000c24:	4619      	mov	r1, r3
 8000c26:	2020      	movs	r0, #32
 8000c28:	f7ff fdc6 	bl	80007b8 <nRF24_SendCmd>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	e19f      	b.n	8000f70 <nRF24_Init+0x3f0>

    nRF24_SetFeature(EN_ACK_PAY, hnrf24->Init->AutoAckEnable);
 8000c30:	4b80      	ldr	r3, [pc, #512]	; (8000e34 <nRF24_Init+0x2b4>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	789b      	ldrb	r3, [r3, #2]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	bf14      	ite	ne
 8000c3c:	2301      	movne	r3, #1
 8000c3e:	2300      	moveq	r3, #0
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	4619      	mov	r1, r3
 8000c44:	2002      	movs	r0, #2
 8000c46:	f000 f999 	bl	8000f7c <nRF24_SetFeature>
    CHECK_INTERNAL(nRF24_SendReadCmd(EN_AA, &register_value));
 8000c4a:	f107 030f 	add.w	r3, r7, #15
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4619      	mov	r1, r3
 8000c52:	2001      	movs	r0, #1
 8000c54:	f7ff fdb0 	bl	80007b8 <nRF24_SendCmd>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d008      	beq.n	8000c70 <nRF24_Init+0xf0>
 8000c5e:	f107 030f 	add.w	r3, r7, #15
 8000c62:	2201      	movs	r2, #1
 8000c64:	4619      	mov	r1, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	f7ff fda6 	bl	80007b8 <nRF24_SendCmd>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	e17f      	b.n	8000f70 <nRF24_Init+0x3f0>
    /* Protection for AutoAckDataPipes */
    hnrf24->Init->AutoAckDataPipes &= ~(0b11000000);
 8000c70:	4b70      	ldr	r3, [pc, #448]	; (8000e34 <nRF24_Init+0x2b4>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	78da      	ldrb	r2, [r3, #3]
 8000c78:	4b6e      	ldr	r3, [pc, #440]	; (8000e34 <nRF24_Init+0x2b4>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	70da      	strb	r2, [r3, #3]
    register_value &= hnrf24->Init->AutoAckDataPipes;
 8000c86:	4b6b      	ldr	r3, [pc, #428]	; (8000e34 <nRF24_Init+0x2b4>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	78da      	ldrb	r2, [r3, #3]
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	4013      	ands	r3, r2
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(EN_AA, &register_value));
 8000c96:	f107 030f 	add.w	r3, r7, #15
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	2021      	movs	r0, #33	; 0x21
 8000ca0:	f7ff fd8a 	bl	80007b8 <nRF24_SendCmd>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d008      	beq.n	8000cbc <nRF24_Init+0x13c>
 8000caa:	f107 030f 	add.w	r3, r7, #15
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	2021      	movs	r0, #33	; 0x21
 8000cb4:	f7ff fd80 	bl	80007b8 <nRF24_SendCmd>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	e159      	b.n	8000f70 <nRF24_Init+0x3f0>

    CHECK_INTERNAL(nRF24_SendReadCmd(EN_RXADDR, &register_value));
 8000cbc:	f107 030f 	add.w	r3, r7, #15
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	2002      	movs	r0, #2
 8000cc6:	f7ff fd77 	bl	80007b8 <nRF24_SendCmd>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d008      	beq.n	8000ce2 <nRF24_Init+0x162>
 8000cd0:	f107 030f 	add.w	r3, r7, #15
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	2002      	movs	r0, #2
 8000cda:	f7ff fd6d 	bl	80007b8 <nRF24_SendCmd>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	e146      	b.n	8000f70 <nRF24_Init+0x3f0>
    /* Protection for RxDataPipes */
    hnrf24->Init->RxDataPipes &= ~(0b11000000);
 8000ce2:	4b54      	ldr	r3, [pc, #336]	; (8000e34 <nRF24_Init+0x2b4>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	791a      	ldrb	r2, [r3, #4]
 8000cea:	4b52      	ldr	r3, [pc, #328]	; (8000e34 <nRF24_Init+0x2b4>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	711a      	strb	r2, [r3, #4]
    register_value &= hnrf24->Init->RxDataPipes;
 8000cf8:	4b4e      	ldr	r3, [pc, #312]	; (8000e34 <nRF24_Init+0x2b4>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	791a      	ldrb	r2, [r3, #4]
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	4013      	ands	r3, r2
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(EN_RXADDR, &register_value));
 8000d08:	f107 030f 	add.w	r3, r7, #15
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	4619      	mov	r1, r3
 8000d10:	2022      	movs	r0, #34	; 0x22
 8000d12:	f7ff fd51 	bl	80007b8 <nRF24_SendCmd>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d008      	beq.n	8000d2e <nRF24_Init+0x1ae>
 8000d1c:	f107 030f 	add.w	r3, r7, #15
 8000d20:	2201      	movs	r2, #1
 8000d22:	4619      	mov	r1, r3
 8000d24:	2022      	movs	r0, #34	; 0x22
 8000d26:	f7ff fd47 	bl	80007b8 <nRF24_SendCmd>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	e120      	b.n	8000f70 <nRF24_Init+0x3f0>

    CHECK_INTERNAL(nRF24_SendReadCmd(SETUP_AW, &register_value));
 8000d2e:	f107 030f 	add.w	r3, r7, #15
 8000d32:	2201      	movs	r2, #1
 8000d34:	4619      	mov	r1, r3
 8000d36:	2003      	movs	r0, #3
 8000d38:	f7ff fd3e 	bl	80007b8 <nRF24_SendCmd>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d008      	beq.n	8000d54 <nRF24_Init+0x1d4>
 8000d42:	f107 030f 	add.w	r3, r7, #15
 8000d46:	2201      	movs	r2, #1
 8000d48:	4619      	mov	r1, r3
 8000d4a:	2003      	movs	r0, #3
 8000d4c:	f7ff fd34 	bl	80007b8 <nRF24_SendCmd>
 8000d50:	4603      	mov	r3, r0
 8000d52:	e10d      	b.n	8000f70 <nRF24_Init+0x3f0>
    register_value &= hnrf24->Init->Aw;
 8000d54:	4b37      	ldr	r3, [pc, #220]	; (8000e34 <nRF24_Init+0x2b4>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	795a      	ldrb	r2, [r3, #5]
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(SETUP_AW, &register_value));
 8000d64:	f107 030f 	add.w	r3, r7, #15
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	2023      	movs	r0, #35	; 0x23
 8000d6e:	f7ff fd23 	bl	80007b8 <nRF24_SendCmd>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d008      	beq.n	8000d8a <nRF24_Init+0x20a>
 8000d78:	f107 030f 	add.w	r3, r7, #15
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	4619      	mov	r1, r3
 8000d80:	2023      	movs	r0, #35	; 0x23
 8000d82:	f7ff fd19 	bl	80007b8 <nRF24_SendCmd>
 8000d86:	4603      	mov	r3, r0
 8000d88:	e0f2      	b.n	8000f70 <nRF24_Init+0x3f0>

    CHECK_INTERNAL(nRF24_SendReadCmd(RF_CH, &register_value));
 8000d8a:	f107 030f 	add.w	r3, r7, #15
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4619      	mov	r1, r3
 8000d92:	2005      	movs	r0, #5
 8000d94:	f7ff fd10 	bl	80007b8 <nRF24_SendCmd>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d008      	beq.n	8000db0 <nRF24_Init+0x230>
 8000d9e:	f107 030f 	add.w	r3, r7, #15
 8000da2:	2201      	movs	r2, #1
 8000da4:	4619      	mov	r1, r3
 8000da6:	2005      	movs	r0, #5
 8000da8:	f7ff fd06 	bl	80007b8 <nRF24_SendCmd>
 8000dac:	4603      	mov	r3, r0
 8000dae:	e0df      	b.n	8000f70 <nRF24_Init+0x3f0>
    hnrf24->Init->RfChannel &= ~(0b10000000);
 8000db0:	4b20      	ldr	r3, [pc, #128]	; (8000e34 <nRF24_Init+0x2b4>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	799a      	ldrb	r2, [r3, #6]
 8000db8:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <nRF24_Init+0x2b4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	719a      	strb	r2, [r3, #6]
    register_value &= hnrf24->Init->RfChannel;
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <nRF24_Init+0x2b4>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	799a      	ldrb	r2, [r3, #6]
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(RF_CH, &register_value));
 8000dd6:	f107 030f 	add.w	r3, r7, #15
 8000dda:	2201      	movs	r2, #1
 8000ddc:	4619      	mov	r1, r3
 8000dde:	2025      	movs	r0, #37	; 0x25
 8000de0:	f7ff fcea 	bl	80007b8 <nRF24_SendCmd>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d008      	beq.n	8000dfc <nRF24_Init+0x27c>
 8000dea:	f107 030f 	add.w	r3, r7, #15
 8000dee:	2201      	movs	r2, #1
 8000df0:	4619      	mov	r1, r3
 8000df2:	2025      	movs	r0, #37	; 0x25
 8000df4:	f7ff fce0 	bl	80007b8 <nRF24_SendCmd>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	e0b9      	b.n	8000f70 <nRF24_Init+0x3f0>

    CHECK_INTERNAL(nRF24_SendReadCmd(RF_SETUP, &register_value));
 8000dfc:	f107 030f 	add.w	r3, r7, #15
 8000e00:	2201      	movs	r2, #1
 8000e02:	4619      	mov	r1, r3
 8000e04:	2006      	movs	r0, #6
 8000e06:	f7ff fcd7 	bl	80007b8 <nRF24_SendCmd>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d008      	beq.n	8000e22 <nRF24_Init+0x2a2>
 8000e10:	f107 030f 	add.w	r3, r7, #15
 8000e14:	2201      	movs	r2, #1
 8000e16:	4619      	mov	r1, r3
 8000e18:	2006      	movs	r0, #6
 8000e1a:	f7ff fccd 	bl	80007b8 <nRF24_SendCmd>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	e0a6      	b.n	8000f70 <nRF24_Init+0x3f0>
    register_value |= hnrf24->Init->ContWave ? CONT_WAVE : ~CONT_WAVE;
 8000e22:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <nRF24_Init+0x2b4>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	79db      	ldrb	r3, [r3, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d004      	beq.n	8000e38 <nRF24_Init+0x2b8>
 8000e2e:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8000e32:	e002      	b.n	8000e3a <nRF24_Init+0x2ba>
 8000e34:	2000009c 	.word	0x2000009c
 8000e38:	227f      	movs	r2, #127	; 0x7f
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	b25b      	sxtb	r3, r3
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	b25b      	sxtb	r3, r3
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	73fb      	strb	r3, [r7, #15]
    register_value &= ~(RF_DR_LOW | RF_DR_HIGH);
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	73fb      	strb	r3, [r7, #15]
    register_value |= hnrf24->Init->RfDataRate;
 8000e50:	4b49      	ldr	r3, [pc, #292]	; (8000f78 <nRF24_Init+0x3f8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	7a5a      	ldrb	r2, [r3, #9]
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	73fb      	strb	r3, [r7, #15]
    register_value &= ~(RF_PWR_2 | RF_PWR_1);
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	f023 0306 	bic.w	r3, r3, #6
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	73fb      	strb	r3, [r7, #15]
    register_value |= hnrf24->Init->RfPower;
 8000e6a:	4b43      	ldr	r3, [pc, #268]	; (8000f78 <nRF24_Init+0x3f8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	7a1a      	ldrb	r2, [r3, #8]
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(RF_SETUP, &register_value));
 8000e7a:	f107 030f 	add.w	r3, r7, #15
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4619      	mov	r1, r3
 8000e82:	2026      	movs	r0, #38	; 0x26
 8000e84:	f7ff fc98 	bl	80007b8 <nRF24_SendCmd>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d008      	beq.n	8000ea0 <nRF24_Init+0x320>
 8000e8e:	f107 030f 	add.w	r3, r7, #15
 8000e92:	2201      	movs	r2, #1
 8000e94:	4619      	mov	r1, r3
 8000e96:	2026      	movs	r0, #38	; 0x26
 8000e98:	f7ff fc8e 	bl	80007b8 <nRF24_SendCmd>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	e067      	b.n	8000f70 <nRF24_Init+0x3f0>

    nRF24_SetFeature(EN_DPL, hnrf24->Init->DplEnable);
 8000ea0:	4b35      	ldr	r3, [pc, #212]	; (8000f78 <nRF24_Init+0x3f8>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	7a9b      	ldrb	r3, [r3, #10]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	bf14      	ite	ne
 8000eac:	2301      	movne	r3, #1
 8000eae:	2300      	moveq	r3, #0
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	2004      	movs	r0, #4
 8000eb6:	f000 f861 	bl	8000f7c <nRF24_SetFeature>
    CHECK_INTERNAL(nRF24_SendReadCmd(DYNPD, &register_value));
 8000eba:	f107 030f 	add.w	r3, r7, #15
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	201c      	movs	r0, #28
 8000ec4:	f7ff fc78 	bl	80007b8 <nRF24_SendCmd>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d008      	beq.n	8000ee0 <nRF24_Init+0x360>
 8000ece:	f107 030f 	add.w	r3, r7, #15
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	201c      	movs	r0, #28
 8000ed8:	f7ff fc6e 	bl	80007b8 <nRF24_SendCmd>
 8000edc:	4603      	mov	r3, r0
 8000ede:	e047      	b.n	8000f70 <nRF24_Init+0x3f0>
    /* Protection for DplEnableDataPipes */
    hnrf24->Init->DplEnableDataPipes &= ~(0b11000000);
 8000ee0:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <nRF24_Init+0x3f8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	7ada      	ldrb	r2, [r3, #11]
 8000ee8:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <nRF24_Init+0x3f8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	72da      	strb	r2, [r3, #11]
    register_value &= hnrf24->Init->DplEnableDataPipes;
 8000ef6:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <nRF24_Init+0x3f8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	7ada      	ldrb	r2, [r3, #11]
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	4013      	ands	r3, r2
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(DYNPD, &register_value));
 8000f06:	f107 030f 	add.w	r3, r7, #15
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	203c      	movs	r0, #60	; 0x3c
 8000f10:	f7ff fc52 	bl	80007b8 <nRF24_SendCmd>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d008      	beq.n	8000f2c <nRF24_Init+0x3ac>
 8000f1a:	f107 030f 	add.w	r3, r7, #15
 8000f1e:	2201      	movs	r2, #1
 8000f20:	4619      	mov	r1, r3
 8000f22:	203c      	movs	r0, #60	; 0x3c
 8000f24:	f7ff fc48 	bl	80007b8 <nRF24_SendCmd>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	e021      	b.n	8000f70 <nRF24_Init+0x3f0>

    nRF24_SetFeature(EN_DYN_ACK, hnrf24->Init->DynAckEnable);
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <nRF24_Init+0x3f8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	7b1b      	ldrb	r3, [r3, #12]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	bf14      	ite	ne
 8000f38:	2301      	movne	r3, #1
 8000f3a:	2300      	moveq	r3, #0
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	4619      	mov	r1, r3
 8000f40:	2001      	movs	r0, #1
 8000f42:	f000 f81b 	bl	8000f7c <nRF24_SetFeature>

    nRF24_UpdateMode(STANDBYI);
 8000f46:	2001      	movs	r0, #1
 8000f48:	f7ff fb4a 	bl	80005e0 <nRF24_UpdateMode>

    if (hnrf24->DeviceMode == TRANSMITTER_MODE) {
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <nRF24_Init+0x3f8>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	795b      	ldrb	r3, [r3, #5]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d103      	bne.n	8000f5e <nRF24_Init+0x3de>
        nRF24_UpdateMode(PTX);
 8000f56:	2004      	movs	r0, #4
 8000f58:	f7ff fb42 	bl	80005e0 <nRF24_UpdateMode>
 8000f5c:	e007      	b.n	8000f6e <nRF24_Init+0x3ee>
    } else if (hnrf24->DeviceMode == RECEIVER_MODE) {
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <nRF24_Init+0x3f8>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	795b      	ldrb	r3, [r3, #5]
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d102      	bne.n	8000f6e <nRF24_Init+0x3ee>
        nRF24_UpdateMode(PRX);
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f7ff fb39 	bl	80005e0 <nRF24_UpdateMode>
    }

    return NRF24_OK;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	2000009c 	.word	0x2000009c

08000f7c <nRF24_SetFeature>:

    return NRF24_OK;
}

nRF24_Status_t nRF24_SetFeature(const uint8_t bit, const bool_t enable)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	460a      	mov	r2, r1
 8000f86:	71fb      	strb	r3, [r7, #7]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	71bb      	strb	r3, [r7, #6]
    if (enable) {
 8000f8c:	79bb      	ldrb	r3, [r7, #6]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00e      	beq.n	8000fb0 <nRF24_SetFeature+0x34>
        CHECK_INTERNAL(nRF24_SetRegister(FEATURE, bit));
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	4619      	mov	r1, r3
 8000f96:	201d      	movs	r0, #29
 8000f98:	f7ff fc72 	bl	8000880 <nRF24_SetRegister>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d015      	beq.n	8000fce <nRF24_SetFeature+0x52>
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	201d      	movs	r0, #29
 8000fa8:	f7ff fc6a 	bl	8000880 <nRF24_SetRegister>
 8000fac:	4603      	mov	r3, r0
 8000fae:	e00f      	b.n	8000fd0 <nRF24_SetFeature+0x54>
    } else {
        CHECK_INTERNAL(nRF24_ResetRegister(FEATURE, bit));
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	201d      	movs	r0, #29
 8000fb6:	f7ff fca3 	bl	8000900 <nRF24_ResetRegister>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d006      	beq.n	8000fce <nRF24_SetFeature+0x52>
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	201d      	movs	r0, #29
 8000fc6:	f7ff fc9b 	bl	8000900 <nRF24_ResetRegister>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	e000      	b.n	8000fd0 <nRF24_SetFeature+0x54>
    }

    return NRF24_OK;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <BSP_LED_On+0x2c>)
 8000fe6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	4a06      	ldr	r2, [pc, #24]	; (8001008 <BSP_LED_On+0x30>)
 8000fee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f000 fb8f 	bl	8001718 <HAL_GPIO_WritePin>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000000c 	.word	0x2000000c
 8001008:	08003084 	.word	0x08003084

0800100c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <SystemInit+0x60>)
 8001012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001016:	4a15      	ldr	r2, [pc, #84]	; (800106c <SystemInit+0x60>)
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <SystemInit+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a12      	ldr	r2, [pc, #72]	; (8001070 <SystemInit+0x64>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800102c:	4b10      	ldr	r3, [pc, #64]	; (8001070 <SystemInit+0x64>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <SystemInit+0x64>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <SystemInit+0x64>)
 8001038:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800103c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001040:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <SystemInit+0x64>)
 8001044:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <SystemInit+0x68>)
 8001046:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <SystemInit+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a08      	ldr	r2, [pc, #32]	; (8001070 <SystemInit+0x64>)
 800104e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001052:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <SystemInit+0x64>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800105a:	4b04      	ldr	r3, [pc, #16]	; (800106c <SystemInit+0x60>)
 800105c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001060:	609a      	str	r2, [r3, #8]
#endif
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00
 8001070:	40023800 	.word	0x40023800
 8001074:	24003010 	.word	0x24003010

08001078 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800108a:	e7fe      	b.n	800108a <HardFault_Handler+0x4>

0800108c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001090:	e7fe      	b.n	8001090 <MemManage_Handler+0x4>

08001092 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001096:	e7fe      	b.n	8001096 <BusFault_Handler+0x4>

08001098 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800109c:	e7fe      	b.n	800109c <UsageFault_Handler+0x4>

0800109e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80010cc:	f000 f84e 	bl	800116c <HAL_IncTick>
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_Init+0x34>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <HAL_Init+0x34>)
 80010de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e2:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HAL_Init+0x34>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a07      	ldr	r2, [pc, #28]	; (8001108 <HAL_Init+0x34>)
 80010ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f000 f931 	bl	8001358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f6:	200f      	movs	r0, #15
 80010f8:	f000 f808 	bl	800110c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010fc:	f000 fb25 	bl	800174a <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023c00 	.word	0x40023c00

0800110c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_InitTick+0x54>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_InitTick+0x58>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	fbb3 f3f1 	udiv	r3, r3, r1
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f93b 	bl	80013a6 <HAL_SYSTICK_Config>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e00e      	b.n	8001158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d80a      	bhi.n	8001156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001148:	f000 f911 	bl	800136e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800114c:	4a06      	ldr	r2, [pc, #24]	; (8001168 <HAL_InitTick+0x5c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	e000      	b.n	8001158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000018 	.word	0x20000018
 8001164:	20000020 	.word	0x20000020
 8001168:	2000001c 	.word	0x2000001c

0800116c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_IncTick+0x20>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x24>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <HAL_IncTick+0x24>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000020 	.word	0x20000020
 8001190:	200000a8 	.word	0x200000a8

08001194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return uwTick;
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <HAL_GetTick+0x14>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	200000a8 	.word	0x200000a8

080011ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b4:	f7ff ffee 	bl	8001194 <HAL_GetTick>
 80011b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011c4:	d005      	beq.n	80011d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <HAL_Delay+0x44>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4413      	add	r3, r2
 80011d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011d2:	bf00      	nop
 80011d4:	f7ff ffde 	bl	8001194 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d8f7      	bhi.n	80011d4 <HAL_Delay+0x28>
  {
  }
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000020 	.word	0x20000020

080011f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001210:	4013      	ands	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800121c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001226:	4a04      	ldr	r2, [pc, #16]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	60d3      	str	r3, [r2, #12]
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <__NVIC_GetPriorityGrouping+0x18>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	f003 0307 	and.w	r3, r3, #7
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	2b00      	cmp	r3, #0
 800126a:	db0a      	blt.n	8001282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	b2da      	uxtb	r2, r3
 8001270:	490c      	ldr	r1, [pc, #48]	; (80012a4 <__NVIC_SetPriority+0x4c>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	0112      	lsls	r2, r2, #4
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	440b      	add	r3, r1
 800127c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001280:	e00a      	b.n	8001298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4908      	ldr	r1, [pc, #32]	; (80012a8 <__NVIC_SetPriority+0x50>)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	3b04      	subs	r3, #4
 8001290:	0112      	lsls	r2, r2, #4
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	440b      	add	r3, r1
 8001296:	761a      	strb	r2, [r3, #24]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000e100 	.word	0xe000e100
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b089      	sub	sp, #36	; 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f1c3 0307 	rsb	r3, r3, #7
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	bf28      	it	cs
 80012ca:	2304      	movcs	r3, #4
 80012cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3304      	adds	r3, #4
 80012d2:	2b06      	cmp	r3, #6
 80012d4:	d902      	bls.n	80012dc <NVIC_EncodePriority+0x30>
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3b03      	subs	r3, #3
 80012da:	e000      	b.n	80012de <NVIC_EncodePriority+0x32>
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43da      	mvns	r2, r3
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	401a      	ands	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa01 f303 	lsl.w	r3, r1, r3
 80012fe:	43d9      	mvns	r1, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	4313      	orrs	r3, r2
         );
}
 8001306:	4618      	mov	r0, r3
 8001308:	3724      	adds	r7, #36	; 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001324:	d301      	bcc.n	800132a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001326:	2301      	movs	r3, #1
 8001328:	e00f      	b.n	800134a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <SysTick_Config+0x40>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001332:	210f      	movs	r1, #15
 8001334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001338:	f7ff ff8e 	bl	8001258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <SysTick_Config+0x40>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <SysTick_Config+0x40>)
 8001344:	2207      	movs	r2, #7
 8001346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	e000e010 	.word	0xe000e010

08001358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff47 	bl	80011f4 <__NVIC_SetPriorityGrouping>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001380:	f7ff ff5c 	bl	800123c <__NVIC_GetPriorityGrouping>
 8001384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	6978      	ldr	r0, [r7, #20]
 800138c:	f7ff ff8e 	bl	80012ac <NVIC_EncodePriority>
 8001390:	4602      	mov	r2, r0
 8001392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff5d 	bl	8001258 <__NVIC_SetPriority>
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ffb0 	bl	8001314 <SysTick_Config>
 80013b4:	4603      	mov	r3, r0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b089      	sub	sp, #36	; 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
 80013da:	e177      	b.n	80016cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013dc:	2201      	movs	r2, #1
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	f040 8166 	bne.w	80016c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	2b01      	cmp	r3, #1
 8001404:	d005      	beq.n	8001412 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800140e:	2b02      	cmp	r3, #2
 8001410:	d130      	bne.n	8001474 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	2203      	movs	r2, #3
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	68da      	ldr	r2, [r3, #12]
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001448:	2201      	movs	r2, #1
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	091b      	lsrs	r3, r3, #4
 800145e:	f003 0201 	and.w	r2, r3, #1
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	2b03      	cmp	r3, #3
 800147e:	d017      	beq.n	80014b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	2203      	movs	r2, #3
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d123      	bne.n	8001504 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	08da      	lsrs	r2, r3, #3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3208      	adds	r2, #8
 80014c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	220f      	movs	r2, #15
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	691a      	ldr	r2, [r3, #16]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	08da      	lsrs	r2, r3, #3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3208      	adds	r2, #8
 80014fe:	69b9      	ldr	r1, [r7, #24]
 8001500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	2203      	movs	r2, #3
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 0203 	and.w	r2, r3, #3
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 80c0 	beq.w	80016c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b66      	ldr	r3, [pc, #408]	; (80016e4 <HAL_GPIO_Init+0x324>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	4a65      	ldr	r2, [pc, #404]	; (80016e4 <HAL_GPIO_Init+0x324>)
 8001550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001554:	6453      	str	r3, [r2, #68]	; 0x44
 8001556:	4b63      	ldr	r3, [pc, #396]	; (80016e4 <HAL_GPIO_Init+0x324>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001562:	4a61      	ldr	r2, [pc, #388]	; (80016e8 <HAL_GPIO_Init+0x328>)
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	089b      	lsrs	r3, r3, #2
 8001568:	3302      	adds	r3, #2
 800156a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	220f      	movs	r2, #15
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a58      	ldr	r2, [pc, #352]	; (80016ec <HAL_GPIO_Init+0x32c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d037      	beq.n	80015fe <HAL_GPIO_Init+0x23e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a57      	ldr	r2, [pc, #348]	; (80016f0 <HAL_GPIO_Init+0x330>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d031      	beq.n	80015fa <HAL_GPIO_Init+0x23a>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a56      	ldr	r2, [pc, #344]	; (80016f4 <HAL_GPIO_Init+0x334>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d02b      	beq.n	80015f6 <HAL_GPIO_Init+0x236>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a55      	ldr	r2, [pc, #340]	; (80016f8 <HAL_GPIO_Init+0x338>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d025      	beq.n	80015f2 <HAL_GPIO_Init+0x232>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a54      	ldr	r2, [pc, #336]	; (80016fc <HAL_GPIO_Init+0x33c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d01f      	beq.n	80015ee <HAL_GPIO_Init+0x22e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a53      	ldr	r2, [pc, #332]	; (8001700 <HAL_GPIO_Init+0x340>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d019      	beq.n	80015ea <HAL_GPIO_Init+0x22a>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a52      	ldr	r2, [pc, #328]	; (8001704 <HAL_GPIO_Init+0x344>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d013      	beq.n	80015e6 <HAL_GPIO_Init+0x226>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a51      	ldr	r2, [pc, #324]	; (8001708 <HAL_GPIO_Init+0x348>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d00d      	beq.n	80015e2 <HAL_GPIO_Init+0x222>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a50      	ldr	r2, [pc, #320]	; (800170c <HAL_GPIO_Init+0x34c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d007      	beq.n	80015de <HAL_GPIO_Init+0x21e>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a4f      	ldr	r2, [pc, #316]	; (8001710 <HAL_GPIO_Init+0x350>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d101      	bne.n	80015da <HAL_GPIO_Init+0x21a>
 80015d6:	2309      	movs	r3, #9
 80015d8:	e012      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015da:	230a      	movs	r3, #10
 80015dc:	e010      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015de:	2308      	movs	r3, #8
 80015e0:	e00e      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015e2:	2307      	movs	r3, #7
 80015e4:	e00c      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015e6:	2306      	movs	r3, #6
 80015e8:	e00a      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015ea:	2305      	movs	r3, #5
 80015ec:	e008      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015ee:	2304      	movs	r3, #4
 80015f0:	e006      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015f2:	2303      	movs	r3, #3
 80015f4:	e004      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e002      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015fe:	2300      	movs	r3, #0
 8001600:	69fa      	ldr	r2, [r7, #28]
 8001602:	f002 0203 	and.w	r2, r2, #3
 8001606:	0092      	lsls	r2, r2, #2
 8001608:	4093      	lsls	r3, r2
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001610:	4935      	ldr	r1, [pc, #212]	; (80016e8 <HAL_GPIO_Init+0x328>)
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	089b      	lsrs	r3, r3, #2
 8001616:	3302      	adds	r3, #2
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800161e:	4b3d      	ldr	r3, [pc, #244]	; (8001714 <HAL_GPIO_Init+0x354>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001642:	4a34      	ldr	r2, [pc, #208]	; (8001714 <HAL_GPIO_Init+0x354>)
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001648:	4b32      	ldr	r3, [pc, #200]	; (8001714 <HAL_GPIO_Init+0x354>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800166c:	4a29      	ldr	r2, [pc, #164]	; (8001714 <HAL_GPIO_Init+0x354>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001672:	4b28      	ldr	r3, [pc, #160]	; (8001714 <HAL_GPIO_Init+0x354>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001696:	4a1f      	ldr	r2, [pc, #124]	; (8001714 <HAL_GPIO_Init+0x354>)
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800169c:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <HAL_GPIO_Init+0x354>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016c0:	4a14      	ldr	r2, [pc, #80]	; (8001714 <HAL_GPIO_Init+0x354>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3301      	adds	r3, #1
 80016ca:	61fb      	str	r3, [r7, #28]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	2b0f      	cmp	r3, #15
 80016d0:	f67f ae84 	bls.w	80013dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3724      	adds	r7, #36	; 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40013800 	.word	0x40013800
 80016ec:	40020000 	.word	0x40020000
 80016f0:	40020400 	.word	0x40020400
 80016f4:	40020800 	.word	0x40020800
 80016f8:	40020c00 	.word	0x40020c00
 80016fc:	40021000 	.word	0x40021000
 8001700:	40021400 	.word	0x40021400
 8001704:	40021800 	.word	0x40021800
 8001708:	40021c00 	.word	0x40021c00
 800170c:	40022000 	.word	0x40022000
 8001710:	40022400 	.word	0x40022400
 8001714:	40013c00 	.word	0x40013c00

08001718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	807b      	strh	r3, [r7, #2]
 8001724:	4613      	mov	r3, r2
 8001726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001728:	787b      	ldrb	r3, [r7, #1]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001734:	e003      	b.n	800173e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001736:	887b      	ldrh	r3, [r7, #2]
 8001738:	041a      	lsls	r2, r3, #16
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	619a      	str	r2, [r3, #24]
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	603b      	str	r3, [r7, #0]
 8001766:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	4a1f      	ldr	r2, [pc, #124]	; (80017e8 <HAL_PWREx_EnableOverDrive+0x90>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001770:	6413      	str	r3, [r2, #64]	; 0x40
 8001772:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800177e:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <HAL_PWREx_EnableOverDrive+0x94>)
 8001780:	2201      	movs	r2, #1
 8001782:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001784:	f7ff fd06 	bl	8001194 <HAL_GetTick>
 8001788:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800178a:	e009      	b.n	80017a0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800178c:	f7ff fd02 	bl	8001194 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800179a:	d901      	bls.n	80017a0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e01f      	b.n	80017e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017a0:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ac:	d1ee      	bne.n	800178c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017b4:	f7ff fcee 	bl	8001194 <HAL_GetTick>
 80017b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017ba:	e009      	b.n	80017d0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017bc:	f7ff fcea 	bl	8001194 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017ca:	d901      	bls.n	80017d0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e007      	b.n	80017e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017d0:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80017dc:	d1ee      	bne.n	80017bc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40023800 	.word	0x40023800
 80017ec:	420e0040 	.word	0x420e0040
 80017f0:	40007000 	.word	0x40007000
 80017f4:	420e0044 	.word	0x420e0044

080017f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e267      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d075      	beq.n	8001902 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001816:	4b88      	ldr	r3, [pc, #544]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	2b04      	cmp	r3, #4
 8001820:	d00c      	beq.n	800183c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001822:	4b85      	ldr	r3, [pc, #532]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800182a:	2b08      	cmp	r3, #8
 800182c:	d112      	bne.n	8001854 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800182e:	4b82      	ldr	r3, [pc, #520]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800183a:	d10b      	bne.n	8001854 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183c:	4b7e      	ldr	r3, [pc, #504]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d05b      	beq.n	8001900 <HAL_RCC_OscConfig+0x108>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d157      	bne.n	8001900 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e242      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185c:	d106      	bne.n	800186c <HAL_RCC_OscConfig+0x74>
 800185e:	4b76      	ldr	r3, [pc, #472]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a75      	ldr	r2, [pc, #468]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	e01d      	b.n	80018a8 <HAL_RCC_OscConfig+0xb0>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001874:	d10c      	bne.n	8001890 <HAL_RCC_OscConfig+0x98>
 8001876:	4b70      	ldr	r3, [pc, #448]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a6f      	ldr	r2, [pc, #444]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 800187c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	4b6d      	ldr	r3, [pc, #436]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a6c      	ldr	r2, [pc, #432]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e00b      	b.n	80018a8 <HAL_RCC_OscConfig+0xb0>
 8001890:	4b69      	ldr	r3, [pc, #420]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a68      	ldr	r2, [pc, #416]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b66      	ldr	r3, [pc, #408]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a65      	ldr	r2, [pc, #404]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 80018a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d013      	beq.n	80018d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff fc70 	bl	8001194 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018b8:	f7ff fc6c 	bl	8001194 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b64      	cmp	r3, #100	; 0x64
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e207      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	4b5b      	ldr	r3, [pc, #364]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0xc0>
 80018d6:	e014      	b.n	8001902 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7ff fc5c 	bl	8001194 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e0:	f7ff fc58 	bl	8001194 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	; 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e1f3      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f2:	4b51      	ldr	r3, [pc, #324]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0xe8>
 80018fe:	e000      	b.n	8001902 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d063      	beq.n	80019d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800190e:	4b4a      	ldr	r3, [pc, #296]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 030c 	and.w	r3, r3, #12
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00b      	beq.n	8001932 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800191a:	4b47      	ldr	r3, [pc, #284]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001922:	2b08      	cmp	r3, #8
 8001924:	d11c      	bne.n	8001960 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001926:	4b44      	ldr	r3, [pc, #272]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d116      	bne.n	8001960 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001932:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d005      	beq.n	800194a <HAL_RCC_OscConfig+0x152>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d001      	beq.n	800194a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e1c7      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194a:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4937      	ldr	r1, [pc, #220]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195e:	e03a      	b.n	80019d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d020      	beq.n	80019aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001968:	4b34      	ldr	r3, [pc, #208]	; (8001a3c <HAL_RCC_OscConfig+0x244>)
 800196a:	2201      	movs	r2, #1
 800196c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196e:	f7ff fc11 	bl	8001194 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001976:	f7ff fc0d 	bl	8001194 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e1a8      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001988:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0f0      	beq.n	8001976 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001994:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	4925      	ldr	r1, [pc, #148]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	600b      	str	r3, [r1, #0]
 80019a8:	e015      	b.n	80019d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019aa:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <HAL_RCC_OscConfig+0x244>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b0:	f7ff fbf0 	bl	8001194 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b8:	f7ff fbec 	bl	8001194 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e187      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ca:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d036      	beq.n	8001a50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d016      	beq.n	8001a18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <HAL_RCC_OscConfig+0x248>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f0:	f7ff fbd0 	bl	8001194 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019f8:	f7ff fbcc 	bl	8001194 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e167      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_RCC_OscConfig+0x240>)
 8001a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0x200>
 8001a16:	e01b      	b.n	8001a50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_RCC_OscConfig+0x248>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1e:	f7ff fbb9 	bl	8001194 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a24:	e00e      	b.n	8001a44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a26:	f7ff fbb5 	bl	8001194 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d907      	bls.n	8001a44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e150      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	42470000 	.word	0x42470000
 8001a40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a44:	4b88      	ldr	r3, [pc, #544]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1ea      	bne.n	8001a26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 8097 	beq.w	8001b8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a62:	4b81      	ldr	r3, [pc, #516]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10f      	bne.n	8001a8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	4b7d      	ldr	r3, [pc, #500]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	4a7c      	ldr	r2, [pc, #496]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7e:	4b7a      	ldr	r3, [pc, #488]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8e:	4b77      	ldr	r3, [pc, #476]	; (8001c6c <HAL_RCC_OscConfig+0x474>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d118      	bne.n	8001acc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a9a:	4b74      	ldr	r3, [pc, #464]	; (8001c6c <HAL_RCC_OscConfig+0x474>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a73      	ldr	r2, [pc, #460]	; (8001c6c <HAL_RCC_OscConfig+0x474>)
 8001aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aa6:	f7ff fb75 	bl	8001194 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aae:	f7ff fb71 	bl	8001194 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e10c      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac0:	4b6a      	ldr	r3, [pc, #424]	; (8001c6c <HAL_RCC_OscConfig+0x474>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d106      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x2ea>
 8001ad4:	4b64      	ldr	r3, [pc, #400]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad8:	4a63      	ldr	r2, [pc, #396]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae0:	e01c      	b.n	8001b1c <HAL_RCC_OscConfig+0x324>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2b05      	cmp	r3, #5
 8001ae8:	d10c      	bne.n	8001b04 <HAL_RCC_OscConfig+0x30c>
 8001aea:	4b5f      	ldr	r3, [pc, #380]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aee:	4a5e      	ldr	r2, [pc, #376]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001af0:	f043 0304 	orr.w	r3, r3, #4
 8001af4:	6713      	str	r3, [r2, #112]	; 0x70
 8001af6:	4b5c      	ldr	r3, [pc, #368]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afa:	4a5b      	ldr	r2, [pc, #364]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6713      	str	r3, [r2, #112]	; 0x70
 8001b02:	e00b      	b.n	8001b1c <HAL_RCC_OscConfig+0x324>
 8001b04:	4b58      	ldr	r3, [pc, #352]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b08:	4a57      	ldr	r2, [pc, #348]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001b0a:	f023 0301 	bic.w	r3, r3, #1
 8001b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b10:	4b55      	ldr	r3, [pc, #340]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b14:	4a54      	ldr	r2, [pc, #336]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001b16:	f023 0304 	bic.w	r3, r3, #4
 8001b1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d015      	beq.n	8001b50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b24:	f7ff fb36 	bl	8001194 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2a:	e00a      	b.n	8001b42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b2c:	f7ff fb32 	bl	8001194 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e0cb      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b42:	4b49      	ldr	r3, [pc, #292]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0ee      	beq.n	8001b2c <HAL_RCC_OscConfig+0x334>
 8001b4e:	e014      	b.n	8001b7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b50:	f7ff fb20 	bl	8001194 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b56:	e00a      	b.n	8001b6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b58:	f7ff fb1c 	bl	8001194 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e0b5      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6e:	4b3e      	ldr	r3, [pc, #248]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1ee      	bne.n	8001b58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b7a:	7dfb      	ldrb	r3, [r7, #23]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d105      	bne.n	8001b8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b80:	4b39      	ldr	r3, [pc, #228]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	4a38      	ldr	r2, [pc, #224]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80a1 	beq.w	8001cd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b96:	4b34      	ldr	r3, [pc, #208]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d05c      	beq.n	8001c5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d141      	bne.n	8001c2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001baa:	4b31      	ldr	r3, [pc, #196]	; (8001c70 <HAL_RCC_OscConfig+0x478>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7ff faf0 	bl	8001194 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb8:	f7ff faec 	bl	8001194 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e087      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bca:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69da      	ldr	r2, [r3, #28]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	019b      	lsls	r3, r3, #6
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	085b      	lsrs	r3, r3, #1
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	041b      	lsls	r3, r3, #16
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf8:	061b      	lsls	r3, r3, #24
 8001bfa:	491b      	ldr	r1, [pc, #108]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c00:	4b1b      	ldr	r3, [pc, #108]	; (8001c70 <HAL_RCC_OscConfig+0x478>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c06:	f7ff fac5 	bl	8001194 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c0e:	f7ff fac1 	bl	8001194 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e05c      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x416>
 8001c2c:	e054      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <HAL_RCC_OscConfig+0x478>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7ff faae 	bl	8001194 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7ff faaa 	bl	8001194 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e045      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_RCC_OscConfig+0x470>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x444>
 8001c5a:	e03d      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d107      	bne.n	8001c74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e038      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40007000 	.word	0x40007000
 8001c70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c74:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <HAL_RCC_OscConfig+0x4ec>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d028      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d121      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d11a      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001caa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d111      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cba:	085b      	lsrs	r3, r3, #1
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d107      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e000      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800

08001ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0cc      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cfc:	4b68      	ldr	r3, [pc, #416]	; (8001ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 030f 	and.w	r3, r3, #15
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d90c      	bls.n	8001d24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0a:	4b65      	ldr	r3, [pc, #404]	; (8001ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d12:	4b63      	ldr	r3, [pc, #396]	; (8001ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0b8      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d020      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d3c:	4b59      	ldr	r3, [pc, #356]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	4a58      	ldr	r2, [pc, #352]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0308 	and.w	r3, r3, #8
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d54:	4b53      	ldr	r3, [pc, #332]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	4a52      	ldr	r2, [pc, #328]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d60:	4b50      	ldr	r3, [pc, #320]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	494d      	ldr	r1, [pc, #308]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d044      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d107      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d86:	4b47      	ldr	r3, [pc, #284]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d119      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e07f      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d003      	beq.n	8001da6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d107      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da6:	4b3f      	ldr	r3, [pc, #252]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d109      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e06f      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db6:	4b3b      	ldr	r3, [pc, #236]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e067      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dc6:	4b37      	ldr	r3, [pc, #220]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f023 0203 	bic.w	r2, r3, #3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	4934      	ldr	r1, [pc, #208]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dd8:	f7ff f9dc 	bl	8001194 <HAL_GetTick>
 8001ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dde:	e00a      	b.n	8001df6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de0:	f7ff f9d8 	bl	8001194 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e04f      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	4b2b      	ldr	r3, [pc, #172]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 020c 	and.w	r2, r3, #12
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d1eb      	bne.n	8001de0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e08:	4b25      	ldr	r3, [pc, #148]	; (8001ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d20c      	bcs.n	8001e30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e16:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e032      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d008      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e3c:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	4916      	ldr	r1, [pc, #88]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d009      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e5a:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	490e      	ldr	r1, [pc, #56]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e6e:	f000 f821 	bl	8001eb4 <HAL_RCC_GetSysClockFreq>
 8001e72:	4602      	mov	r2, r0
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	091b      	lsrs	r3, r3, #4
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	490a      	ldr	r1, [pc, #40]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e80:	5ccb      	ldrb	r3, [r1, r3]
 8001e82:	fa22 f303 	lsr.w	r3, r2, r3
 8001e86:	4a09      	ldr	r2, [pc, #36]	; (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff f93c 	bl	800110c <HAL_InitTick>

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023c00 	.word	0x40023c00
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	0800308c 	.word	0x0800308c
 8001eac:	20000018 	.word	0x20000018
 8001eb0:	2000001c 	.word	0x2000001c

08001eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eb8:	b094      	sub	sp, #80	; 0x50
 8001eba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	647b      	str	r3, [r7, #68]	; 0x44
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ecc:	4b79      	ldr	r3, [pc, #484]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 030c 	and.w	r3, r3, #12
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d00d      	beq.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	f200 80e1 	bhi.w	80020a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d003      	beq.n	8001eee <HAL_RCC_GetSysClockFreq+0x3a>
 8001ee6:	e0db      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ee8:	4b73      	ldr	r3, [pc, #460]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001eea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001eec:	e0db      	b.n	80020a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eee:	4b73      	ldr	r3, [pc, #460]	; (80020bc <HAL_RCC_GetSysClockFreq+0x208>)
 8001ef0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ef2:	e0d8      	b.n	80020a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ef4:	4b6f      	ldr	r3, [pc, #444]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001efc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001efe:	4b6d      	ldr	r3, [pc, #436]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d063      	beq.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f0a:	4b6a      	ldr	r3, [pc, #424]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	099b      	lsrs	r3, r3, #6
 8001f10:	2200      	movs	r2, #0
 8001f12:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f1c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f1e:	2300      	movs	r3, #0
 8001f20:	637b      	str	r3, [r7, #52]	; 0x34
 8001f22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f26:	4622      	mov	r2, r4
 8001f28:	462b      	mov	r3, r5
 8001f2a:	f04f 0000 	mov.w	r0, #0
 8001f2e:	f04f 0100 	mov.w	r1, #0
 8001f32:	0159      	lsls	r1, r3, #5
 8001f34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f38:	0150      	lsls	r0, r2, #5
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4621      	mov	r1, r4
 8001f40:	1a51      	subs	r1, r2, r1
 8001f42:	6139      	str	r1, [r7, #16]
 8001f44:	4629      	mov	r1, r5
 8001f46:	eb63 0301 	sbc.w	r3, r3, r1
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	f04f 0300 	mov.w	r3, #0
 8001f54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f58:	4659      	mov	r1, fp
 8001f5a:	018b      	lsls	r3, r1, #6
 8001f5c:	4651      	mov	r1, sl
 8001f5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f62:	4651      	mov	r1, sl
 8001f64:	018a      	lsls	r2, r1, #6
 8001f66:	4651      	mov	r1, sl
 8001f68:	ebb2 0801 	subs.w	r8, r2, r1
 8001f6c:	4659      	mov	r1, fp
 8001f6e:	eb63 0901 	sbc.w	r9, r3, r1
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f86:	4690      	mov	r8, r2
 8001f88:	4699      	mov	r9, r3
 8001f8a:	4623      	mov	r3, r4
 8001f8c:	eb18 0303 	adds.w	r3, r8, r3
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	462b      	mov	r3, r5
 8001f94:	eb49 0303 	adc.w	r3, r9, r3
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	f04f 0300 	mov.w	r3, #0
 8001fa2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fa6:	4629      	mov	r1, r5
 8001fa8:	024b      	lsls	r3, r1, #9
 8001faa:	4621      	mov	r1, r4
 8001fac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fb0:	4621      	mov	r1, r4
 8001fb2:	024a      	lsls	r2, r1, #9
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fba:	2200      	movs	r2, #0
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fc4:	f7fe f912 	bl	80001ec <__aeabi_uldivmod>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4613      	mov	r3, r2
 8001fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fd0:	e058      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fd2:	4b38      	ldr	r3, [pc, #224]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	099b      	lsrs	r3, r3, #6
 8001fd8:	2200      	movs	r2, #0
 8001fda:	4618      	mov	r0, r3
 8001fdc:	4611      	mov	r1, r2
 8001fde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fe2:	623b      	str	r3, [r7, #32]
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001fec:	4642      	mov	r2, r8
 8001fee:	464b      	mov	r3, r9
 8001ff0:	f04f 0000 	mov.w	r0, #0
 8001ff4:	f04f 0100 	mov.w	r1, #0
 8001ff8:	0159      	lsls	r1, r3, #5
 8001ffa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ffe:	0150      	lsls	r0, r2, #5
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	4641      	mov	r1, r8
 8002006:	ebb2 0a01 	subs.w	sl, r2, r1
 800200a:	4649      	mov	r1, r9
 800200c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800201c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002020:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002024:	ebb2 040a 	subs.w	r4, r2, sl
 8002028:	eb63 050b 	sbc.w	r5, r3, fp
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	00eb      	lsls	r3, r5, #3
 8002036:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800203a:	00e2      	lsls	r2, r4, #3
 800203c:	4614      	mov	r4, r2
 800203e:	461d      	mov	r5, r3
 8002040:	4643      	mov	r3, r8
 8002042:	18e3      	adds	r3, r4, r3
 8002044:	603b      	str	r3, [r7, #0]
 8002046:	464b      	mov	r3, r9
 8002048:	eb45 0303 	adc.w	r3, r5, r3
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	f04f 0300 	mov.w	r3, #0
 8002056:	e9d7 4500 	ldrd	r4, r5, [r7]
 800205a:	4629      	mov	r1, r5
 800205c:	028b      	lsls	r3, r1, #10
 800205e:	4621      	mov	r1, r4
 8002060:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002064:	4621      	mov	r1, r4
 8002066:	028a      	lsls	r2, r1, #10
 8002068:	4610      	mov	r0, r2
 800206a:	4619      	mov	r1, r3
 800206c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800206e:	2200      	movs	r2, #0
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	61fa      	str	r2, [r7, #28]
 8002074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002078:	f7fe f8b8 	bl	80001ec <__aeabi_uldivmod>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4613      	mov	r3, r2
 8002082:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	0c1b      	lsrs	r3, r3, #16
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	3301      	adds	r3, #1
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002094:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002098:	fbb2 f3f3 	udiv	r3, r2, r3
 800209c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800209e:	e002      	b.n	80020a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80020a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3750      	adds	r7, #80	; 0x50
 80020ac:	46bd      	mov	sp, r7
 80020ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800
 80020b8:	00f42400 	.word	0x00f42400
 80020bc:	007a1200 	.word	0x007a1200

080020c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e083      	b.n	80021da <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d108      	bne.n	80020ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020e2:	d009      	beq.n	80020f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	61da      	str	r2, [r3, #28]
 80020ea:	e005      	b.n	80020f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d106      	bne.n	8002112 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f868 	bl	80021e2 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2202      	movs	r2, #2
 8002116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002128:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800216c:	431a      	orrs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002176:	ea42 0103 	orr.w	r1, r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	0c1b      	lsrs	r3, r3, #16
 8002190:	f003 0104 	and.w	r1, r3, #4
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	f003 0210 	and.w	r2, r3, #16
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ac:	d105      	bne.n	80021ba <HAL_SPI_Init+0xfa>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	b292      	uxth	r2, r2
 80021b8:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	69da      	ldr	r2, [r3, #28]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b088      	sub	sp, #32
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	603b      	str	r3, [r7, #0]
 8002202:	4613      	mov	r3, r2
 8002204:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <HAL_SPI_Transmit+0x22>
 8002214:	2302      	movs	r3, #2
 8002216:	e148      	b.n	80024aa <HAL_SPI_Transmit+0x2b4>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002220:	f7fe ffb8 	bl	8001194 <HAL_GetTick>
 8002224:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b01      	cmp	r3, #1
 8002234:	d002      	beq.n	800223c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002236:	2302      	movs	r3, #2
 8002238:	77fb      	strb	r3, [r7, #31]
    goto error;
 800223a:	e12d      	b.n	8002498 <HAL_SPI_Transmit+0x2a2>
  }

  if ((pData == NULL) || (Size == 0U))
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <HAL_SPI_Transmit+0x52>
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d102      	bne.n	800224e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800224c:	e124      	b.n	8002498 <HAL_SPI_Transmit+0x2a2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2203      	movs	r2, #3
 8002252:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	88fa      	ldrh	r2, [r7, #6]
 8002266:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	88fa      	ldrh	r2, [r7, #6]
 800226c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002294:	d10f      	bne.n	80022b6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022b4:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022be:	d10f      	bne.n	80022e0 <HAL_SPI_Transmit+0xea>
  {
    SPI_RESET_CRC(hspi);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022de:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ea:	2b40      	cmp	r3, #64	; 0x40
 80022ec:	d007      	beq.n	80022fe <HAL_SPI_Transmit+0x108>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002306:	d14b      	bne.n	80023a0 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <HAL_SPI_Transmit+0x120>
 8002310:	8afb      	ldrh	r3, [r7, #22]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d13e      	bne.n	8002394 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	881a      	ldrh	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	1c9a      	adds	r2, r3, #2
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002330:	b29b      	uxth	r3, r3
 8002332:	3b01      	subs	r3, #1
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800233a:	e02b      	b.n	8002394 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b02      	cmp	r3, #2
 8002348:	d112      	bne.n	8002370 <HAL_SPI_Transmit+0x17a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	881a      	ldrh	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	1c9a      	adds	r2, r3, #2
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002364:	b29b      	uxth	r3, r3
 8002366:	3b01      	subs	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	86da      	strh	r2, [r3, #54]	; 0x36
 800236e:	e011      	b.n	8002394 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002370:	f7fe ff10 	bl	8001194 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d803      	bhi.n	8002388 <HAL_SPI_Transmit+0x192>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002386:	d102      	bne.n	800238e <HAL_SPI_Transmit+0x198>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d102      	bne.n	8002394 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002392:	e081      	b.n	8002498 <HAL_SPI_Transmit+0x2a2>
    while (hspi->TxXferCount > 0U)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002398:	b29b      	uxth	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1ce      	bne.n	800233c <HAL_SPI_Transmit+0x146>
 800239e:	e04c      	b.n	800243a <HAL_SPI_Transmit+0x244>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <HAL_SPI_Transmit+0x1b8>
 80023a8:	8afb      	ldrh	r3, [r7, #22]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d140      	bne.n	8002430 <HAL_SPI_Transmit+0x23a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	330c      	adds	r3, #12
 80023b8:	7812      	ldrb	r2, [r2, #0]
 80023ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80023d4:	e02c      	b.n	8002430 <HAL_SPI_Transmit+0x23a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d113      	bne.n	800240c <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	330c      	adds	r3, #12
 80023ee:	7812      	ldrb	r2, [r2, #0]
 80023f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	1c5a      	adds	r2, r3, #1
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002400:	b29b      	uxth	r3, r3
 8002402:	3b01      	subs	r3, #1
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	86da      	strh	r2, [r3, #54]	; 0x36
 800240a:	e011      	b.n	8002430 <HAL_SPI_Transmit+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800240c:	f7fe fec2 	bl	8001194 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d803      	bhi.n	8002424 <HAL_SPI_Transmit+0x22e>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002422:	d102      	bne.n	800242a <HAL_SPI_Transmit+0x234>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d102      	bne.n	8002430 <HAL_SPI_Transmit+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800242e:	e033      	b.n	8002498 <HAL_SPI_Transmit+0x2a2>
    while (hspi->TxXferCount > 0U)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002434:	b29b      	uxth	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1cd      	bne.n	80023d6 <HAL_SPI_Transmit+0x1e0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002442:	d107      	bne.n	8002454 <HAL_SPI_Transmit+0x25e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002452:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	6839      	ldr	r1, [r7, #0]
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 fcc3 	bl	8002de4 <SPI_EndRxTxTransaction>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d002      	beq.n	800246a <HAL_SPI_Transmit+0x274>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2220      	movs	r2, #32
 8002468:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10a      	bne.n	8002488 <HAL_SPI_Transmit+0x292>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	77fb      	strb	r3, [r7, #31]
 8002494:	e000      	b.n	8002498 <HAL_SPI_Transmit+0x2a2>
  }

error:
 8002496:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3720      	adds	r7, #32
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b08a      	sub	sp, #40	; 0x28
 80024b6:	af02      	add	r7, sp, #8
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	603b      	str	r3, [r7, #0]
 80024be:	4613      	mov	r3, r2
 80024c0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	77fb      	strb	r3, [r7, #31]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024d2:	d112      	bne.n	80024fa <HAL_SPI_Receive+0x48>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10e      	bne.n	80024fa <HAL_SPI_Receive+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2204      	movs	r2, #4
 80024e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80024e4:	88fa      	ldrh	r2, [r7, #6]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	4613      	mov	r3, r2
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	68b9      	ldr	r1, [r7, #8]
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 f969 	bl	80027c8 <HAL_SPI_TransmitReceive>
 80024f6:	4603      	mov	r3, r0
 80024f8:	e162      	b.n	80027c0 <HAL_SPI_Receive+0x30e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_SPI_Receive+0x56>
 8002504:	2302      	movs	r3, #2
 8002506:	e15b      	b.n	80027c0 <HAL_SPI_Receive+0x30e>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002510:	f7fe fe40 	bl	8001194 <HAL_GetTick>
 8002514:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d002      	beq.n	8002528 <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 8002522:	2302      	movs	r3, #2
 8002524:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002526:	e142      	b.n	80027ae <HAL_SPI_Receive+0x2fc>
  }

  if ((pData == NULL) || (Size == 0U))
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <HAL_SPI_Receive+0x82>
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d102      	bne.n	800253a <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002538:	e139      	b.n	80027ae <HAL_SPI_Receive+0x2fc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2204      	movs	r2, #4
 800253e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	88fa      	ldrh	r2, [r7, #6]
 8002552:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	88fa      	ldrh	r2, [r7, #6]
 8002558:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002580:	d116      	bne.n	80025b0 <HAL_SPI_Receive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025a0:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025b8:	d10f      	bne.n	80025da <HAL_SPI_Receive+0x128>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80025d8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e4:	2b40      	cmp	r3, #64	; 0x40
 80025e6:	d007      	beq.n	80025f8 <HAL_SPI_Receive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d162      	bne.n	80026c6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002600:	e02e      	b.n	8002660 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b01      	cmp	r3, #1
 800260e:	d115      	bne.n	800263c <HAL_SPI_Receive+0x18a>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f103 020c 	add.w	r2, r3, #12
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261c:	7812      	ldrb	r2, [r2, #0]
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002630:	b29b      	uxth	r3, r3
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	87da      	strh	r2, [r3, #62]	; 0x3e
 800263a:	e011      	b.n	8002660 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800263c:	f7fe fdaa 	bl	8001194 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d803      	bhi.n	8002654 <HAL_SPI_Receive+0x1a2>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002652:	d102      	bne.n	800265a <HAL_SPI_Receive+0x1a8>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d102      	bne.n	8002660 <HAL_SPI_Receive+0x1ae>
        {
          errorcode = HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800265e:	e0a6      	b.n	80027ae <HAL_SPI_Receive+0x2fc>
    while (hspi->RxXferCount > 0U)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002664:	b29b      	uxth	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1cb      	bne.n	8002602 <HAL_SPI_Receive+0x150>
 800266a:	e031      	b.n	80026d0 <HAL_SPI_Receive+0x21e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b01      	cmp	r3, #1
 8002678:	d113      	bne.n	80026a2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002684:	b292      	uxth	r2, r2
 8002686:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268c:	1c9a      	adds	r2, r3, #2
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002696:	b29b      	uxth	r3, r3
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026a0:	e011      	b.n	80026c6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026a2:	f7fe fd77 	bl	8001194 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d803      	bhi.n	80026ba <HAL_SPI_Receive+0x208>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026b8:	d102      	bne.n	80026c0 <HAL_SPI_Receive+0x20e>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d102      	bne.n	80026c6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026c4:	e073      	b.n	80027ae <HAL_SPI_Receive+0x2fc>
    while (hspi->RxXferCount > 0U)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1cd      	bne.n	800266c <HAL_SPI_Receive+0x1ba>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026d8:	d144      	bne.n	8002764 <HAL_SPI_Receive+0x2b2>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80026e8:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2201      	movs	r2, #1
 80026f2:	2101      	movs	r1, #1
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 fa87 	bl	8002c08 <SPI_WaitFlagStateUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <HAL_SPI_Receive+0x254>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	77fb      	strb	r3, [r7, #31]
      goto error;
 8002704:	e053      	b.n	80027ae <HAL_SPI_Receive+0x2fc>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800270e:	d107      	bne.n	8002720 <HAL_SPI_Receive+0x26e>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271a:	b292      	uxth	r2, r2
 800271c:	801a      	strh	r2, [r3, #0]
 800271e:	e008      	b.n	8002732 <HAL_SPI_Receive+0x280>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f103 020c 	add.w	r2, r3, #12
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272c:	7812      	ldrb	r2, [r2, #0]
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2201      	movs	r2, #1
 800273a:	2101      	movs	r1, #1
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 fa63 	bl	8002c08 <SPI_WaitFlagStateUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_SPI_Receive+0x2a8>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274c:	f043 0202 	orr.w	r2, r3, #2
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	77fb      	strb	r3, [r7, #31]
      goto error;
 8002758:	e029      	b.n	80027ae <HAL_SPI_Receive+0x2fc>
    }

    /* Read CRC to Flush DR and RXNE flag */
    tmpreg = READ_REG(hspi->Instance->DR);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 8002762:	697b      	ldr	r3, [r7, #20]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	6839      	ldr	r1, [r7, #0]
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 fad5 	bl	8002d18 <SPI_EndRxTransaction>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <HAL_SPI_Receive+0x2c8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2220      	movs	r2, #32
 8002778:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b10      	cmp	r3, #16
 8002786:	d10a      	bne.n	800279e <HAL_SPI_Receive+0x2ec>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278c:	f043 0202 	orr.w	r2, r3, #2
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800279c:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <HAL_SPI_Receive+0x2fa>
  {
    errorcode = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	77fb      	strb	r3, [r7, #31]
 80027aa:	e000      	b.n	80027ae <HAL_SPI_Receive+0x2fc>
  }

error :
 80027ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027be:	7ffb      	ldrb	r3, [r7, #31]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3720      	adds	r7, #32
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08e      	sub	sp, #56	; 0x38
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_TxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027da:	2301      	movs	r3, #1
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_SPI_TransmitReceive+0x2a>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e1f8      	b.n	8002be4 <HAL_SPI_TransmitReceive+0x41c>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027fa:	f7fe fccb 	bl	8001194 <HAL_GetTick>
 80027fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002810:	887b      	ldrh	r3, [r7, #2]
 8002812:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002814:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002818:	2b01      	cmp	r3, #1
 800281a:	d00f      	beq.n	800283c <HAL_SPI_TransmitReceive+0x74>
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002822:	d107      	bne.n	8002834 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d103      	bne.n	8002834 <HAL_SPI_TransmitReceive+0x6c>
 800282c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002830:	2b04      	cmp	r3, #4
 8002832:	d003      	beq.n	800283c <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8002834:	2302      	movs	r3, #2
 8002836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800283a:	e1c9      	b.n	8002bd0 <HAL_SPI_TransmitReceive+0x408>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d005      	beq.n	800284e <HAL_SPI_TransmitReceive+0x86>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <HAL_SPI_TransmitReceive+0x86>
 8002848:	887b      	ldrh	r3, [r7, #2]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d103      	bne.n	8002856 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002854:	e1bc      	b.n	8002bd0 <HAL_SPI_TransmitReceive+0x408>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b04      	cmp	r3, #4
 8002860:	d003      	beq.n	800286a <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2205      	movs	r2, #5
 8002866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	887a      	ldrh	r2, [r7, #2]
 800287a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	887a      	ldrh	r2, [r7, #2]
 8002880:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	887a      	ldrh	r2, [r7, #2]
 800288c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	887a      	ldrh	r2, [r7, #2]
 8002892:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028a8:	d10f      	bne.n	80028ca <HAL_SPI_TransmitReceive+0x102>
  {
    SPI_RESET_CRC(hspi);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028c8:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d4:	2b40      	cmp	r3, #64	; 0x40
 80028d6:	d007      	beq.n	80028e8 <HAL_SPI_TransmitReceive+0x120>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028f0:	f040 808b 	bne.w	8002a0a <HAL_SPI_TransmitReceive+0x242>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <HAL_SPI_TransmitReceive+0x13a>
 80028fc:	8b7b      	ldrh	r3, [r7, #26]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d178      	bne.n	80029f4 <HAL_SPI_TransmitReceive+0x22c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	881a      	ldrh	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	1c9a      	adds	r2, r3, #2
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800291c:	b29b      	uxth	r3, r3
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002926:	e065      	b.n	80029f4 <HAL_SPI_TransmitReceive+0x22c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b02      	cmp	r3, #2
 8002934:	d12d      	bne.n	8002992 <HAL_SPI_TransmitReceive+0x1ca>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d028      	beq.n	8002992 <HAL_SPI_TransmitReceive+0x1ca>
 8002940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002942:	2b01      	cmp	r3, #1
 8002944:	d125      	bne.n	8002992 <HAL_SPI_TransmitReceive+0x1ca>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	881a      	ldrh	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	1c9a      	adds	r2, r3, #2
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002960:	b29b      	uxth	r3, r3
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002972:	b29b      	uxth	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10c      	bne.n	8002992 <HAL_SPI_TransmitReceive+0x1ca>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002980:	d107      	bne.n	8002992 <HAL_SPI_TransmitReceive+0x1ca>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002990:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b01      	cmp	r3, #1
 800299e:	d119      	bne.n	80029d4 <HAL_SPI_TransmitReceive+0x20c>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d014      	beq.n	80029d4 <HAL_SPI_TransmitReceive+0x20c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b4:	b292      	uxth	r2, r2
 80029b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029bc:	1c9a      	adds	r2, r3, #2
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029d0:	2301      	movs	r3, #1
 80029d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029d4:	f7fe fbde 	bl	8001194 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d807      	bhi.n	80029f4 <HAL_SPI_TransmitReceive+0x22c>
 80029e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029ea:	d003      	beq.n	80029f4 <HAL_SPI_TransmitReceive+0x22c>
      {
        errorcode = HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80029f2:	e0ed      	b.n	8002bd0 <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d194      	bne.n	8002928 <HAL_SPI_TransmitReceive+0x160>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d18f      	bne.n	8002928 <HAL_SPI_TransmitReceive+0x160>
 8002a08:	e08e      	b.n	8002b28 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d002      	beq.n	8002a18 <HAL_SPI_TransmitReceive+0x250>
 8002a12:	8b7b      	ldrh	r3, [r7, #26]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d17d      	bne.n	8002b14 <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	330c      	adds	r3, #12
 8002a22:	7812      	ldrb	r2, [r2, #0]
 8002a24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a3e:	e069      	b.n	8002b14 <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d12e      	bne.n	8002aac <HAL_SPI_TransmitReceive+0x2e4>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d029      	beq.n	8002aac <HAL_SPI_TransmitReceive+0x2e4>
 8002a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d126      	bne.n	8002aac <HAL_SPI_TransmitReceive+0x2e4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	330c      	adds	r3, #12
 8002a68:	7812      	ldrb	r2, [r2, #0]
 8002a6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10c      	bne.n	8002aac <HAL_SPI_TransmitReceive+0x2e4>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a9a:	d107      	bne.n	8002aac <HAL_SPI_TransmitReceive+0x2e4>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002aaa:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d119      	bne.n	8002aee <HAL_SPI_TransmitReceive+0x326>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d014      	beq.n	8002aee <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002aea:	2301      	movs	r3, #1
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002aee:	f7fe fb51 	bl	8001194 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d803      	bhi.n	8002b06 <HAL_SPI_TransmitReceive+0x33e>
 8002afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b04:	d102      	bne.n	8002b0c <HAL_SPI_TransmitReceive+0x344>
 8002b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d103      	bne.n	8002b14 <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002b12:	e05d      	b.n	8002bd0 <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d190      	bne.n	8002a40 <HAL_SPI_TransmitReceive+0x278>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d18b      	bne.n	8002a40 <HAL_SPI_TransmitReceive+0x278>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b30:	d119      	bne.n	8002b66 <HAL_SPI_TransmitReceive+0x39e>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b38:	2201      	movs	r2, #1
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 f863 	bl	8002c08 <SPI_WaitFlagStateUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d009      	beq.n	8002b5c <HAL_SPI_TransmitReceive+0x394>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4c:	f043 0202 	orr.w	r2, r3, #2
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8002b5a:	e039      	b.n	8002bd0 <HAL_SPI_TransmitReceive+0x408>
    }
    /* Read CRC */
    tmpreg = READ_REG(hspi->Instance->DR);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 8002b64:	697b      	ldr	r3, [r7, #20]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 0310 	and.w	r3, r3, #16
 8002b70:	2b10      	cmp	r3, #16
 8002b72:	d10d      	bne.n	8002b90 <HAL_SPI_TransmitReceive+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b78:	f043 0202 	orr.w	r2, r3, #2
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002b88:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 f925 	bl	8002de4 <SPI_EndRxTxTransaction>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d006      	beq.n	8002bae <HAL_SPI_TransmitReceive+0x3e6>
  {
    errorcode = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002bac:	e010      	b.n	8002bd0 <HAL_SPI_TransmitReceive+0x408>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10b      	bne.n	8002bce <HAL_SPI_TransmitReceive+0x406>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	e000      	b.n	8002bd0 <HAL_SPI_TransmitReceive+0x408>
  }

error :
 8002bce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002be0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3730      	adds	r7, #48	; 0x30
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bfa:	b2db      	uxtb	r3, r3
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b088      	sub	sp, #32
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	4613      	mov	r3, r2
 8002c16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c18:	f7fe fabc 	bl	8001194 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c20:	1a9b      	subs	r3, r3, r2
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	4413      	add	r3, r2
 8002c26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c28:	f7fe fab4 	bl	8001194 <HAL_GetTick>
 8002c2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c2e:	4b39      	ldr	r3, [pc, #228]	; (8002d14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	015b      	lsls	r3, r3, #5
 8002c34:	0d1b      	lsrs	r3, r3, #20
 8002c36:	69fa      	ldr	r2, [r7, #28]
 8002c38:	fb02 f303 	mul.w	r3, r2, r3
 8002c3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c3e:	e054      	b.n	8002cea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c46:	d050      	beq.n	8002cea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c48:	f7fe faa4 	bl	8001194 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d902      	bls.n	8002c5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d13d      	bne.n	8002cda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c76:	d111      	bne.n	8002c9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c80:	d004      	beq.n	8002c8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c8a:	d107      	bne.n	8002c9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ca4:	d10f      	bne.n	8002cc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e017      	b.n	8002d0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	bf0c      	ite	eq
 8002cfa:	2301      	moveq	r3, #1
 8002cfc:	2300      	movne	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d19b      	bne.n	8002c40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3720      	adds	r7, #32
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000018 	.word	0x20000018

08002d18 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d2c:	d111      	bne.n	8002d52 <SPI_EndRxTransaction+0x3a>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d36:	d004      	beq.n	8002d42 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d40:	d107      	bne.n	8002d52 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d50:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d5a:	d12a      	bne.n	8002db2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d64:	d012      	beq.n	8002d8c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2180      	movs	r1, #128	; 0x80
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f7ff ff49 	bl	8002c08 <SPI_WaitFlagStateUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d02d      	beq.n	8002dd8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d80:	f043 0220 	orr.w	r2, r3, #32
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e026      	b.n	8002dda <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2200      	movs	r2, #0
 8002d94:	2101      	movs	r1, #1
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f7ff ff36 	bl	8002c08 <SPI_WaitFlagStateUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d01a      	beq.n	8002dd8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da6:	f043 0220 	orr.w	r2, r3, #32
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e013      	b.n	8002dda <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2200      	movs	r2, #0
 8002dba:	2101      	movs	r1, #1
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f7ff ff23 	bl	8002c08 <SPI_WaitFlagStateUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d007      	beq.n	8002dd8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dcc:	f043 0220 	orr.w	r2, r3, #32
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e000      	b.n	8002dda <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002df0:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <SPI_EndRxTxTransaction+0x7c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1b      	ldr	r2, [pc, #108]	; (8002e64 <SPI_EndRxTxTransaction+0x80>)
 8002df6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfa:	0d5b      	lsrs	r3, r3, #21
 8002dfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e00:	fb02 f303 	mul.w	r3, r2, r3
 8002e04:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e0e:	d112      	bne.n	8002e36 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2200      	movs	r2, #0
 8002e18:	2180      	movs	r1, #128	; 0x80
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f7ff fef4 	bl	8002c08 <SPI_WaitFlagStateUntilTimeout>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d016      	beq.n	8002e54 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2a:	f043 0220 	orr.w	r2, r3, #32
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e00f      	b.n	8002e56 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00a      	beq.n	8002e52 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4c:	2b80      	cmp	r3, #128	; 0x80
 8002e4e:	d0f2      	beq.n	8002e36 <SPI_EndRxTxTransaction+0x52>
 8002e50:	e000      	b.n	8002e54 <SPI_EndRxTxTransaction+0x70>
        break;
 8002e52:	bf00      	nop
  }

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000018 	.word	0x20000018
 8002e64:	165e9f81 	.word	0x165e9f81

08002e68 <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
	/* STM32F4xx HAL library initialization */
	HAL_Init();
 8002e6c:	f7fe f932 	bl	80010d4 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8002e70:	f000 f846 	bl	8002f00 <SystemClock_Config>

	/* CONFIG */
	hnrf24.Init->CrcEnable = 0;
 8002e74:	4b21      	ldr	r3, [pc, #132]	; (8002efc <main+0x94>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
	hnrf24.Init->CrcEncodingScheme = CRC_ENCODING_1_BYTE;
 8002e7c:	4b1f      	ldr	r3, [pc, #124]	; (8002efc <main+0x94>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2200      	movs	r2, #0
 8002e82:	705a      	strb	r2, [r3, #1]
	/* EN_AA */
	hnrf24.Init->AutoAckEnable = 1;
 8002e84:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <main+0x94>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	709a      	strb	r2, [r3, #2]
	hnrf24.Init->AutoAckDataPipes = 0b00000011;
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <main+0x94>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2203      	movs	r2, #3
 8002e92:	70da      	strb	r2, [r3, #3]
	/* EN_RXADDR */
	hnrf24.Init->RxDataPipes = 0b00000001;
 8002e94:	4b19      	ldr	r3, [pc, #100]	; (8002efc <main+0x94>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	711a      	strb	r2, [r3, #4]
	/* SETUP_AW */
	hnrf24.Init->Aw = AW_3_BYTES;
 8002e9c:	4b17      	ldr	r3, [pc, #92]	; (8002efc <main+0x94>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	715a      	strb	r2, [r3, #5]
	/* RF_CH */
	hnrf24.Init->RfChannel = 0b00000010;
 8002ea4:	4b15      	ldr	r3, [pc, #84]	; (8002efc <main+0x94>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	719a      	strb	r2, [r3, #6]
	/* RF_SETUP */
	hnrf24.Init->ContWave = 0;
 8002eac:	4b13      	ldr	r3, [pc, #76]	; (8002efc <main+0x94>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	71da      	strb	r2, [r3, #7]
	hnrf24.Init->RfPower = RF_POWER_0DBM;
 8002eb4:	4b11      	ldr	r3, [pc, #68]	; (8002efc <main+0x94>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2206      	movs	r2, #6
 8002eba:	721a      	strb	r2, [r3, #8]
	hnrf24.Init->RfDataRate = RF_DR_2MBPS;
 8002ebc:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <main+0x94>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2208      	movs	r2, #8
 8002ec2:	725a      	strb	r2, [r3, #9]
	/* DPL */
	hnrf24.Init->DplEnable = 1;
 8002ec4:	4b0d      	ldr	r3, [pc, #52]	; (8002efc <main+0x94>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	729a      	strb	r2, [r3, #10]
	hnrf24.Init->DplEnableDataPipes = 0b00000011;
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <main+0x94>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	72da      	strb	r2, [r3, #11]
	/* EN_DYN_ACK */
	hnrf24.Init->DynAckEnable = 0;
 8002ed4:	4b09      	ldr	r3, [pc, #36]	; (8002efc <main+0x94>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	731a      	strb	r2, [r3, #12]

	hnrf24.StatusRegister = 0;
 8002edc:	4b07      	ldr	r3, [pc, #28]	; (8002efc <main+0x94>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	711a      	strb	r2, [r3, #4]
	hnrf24.DeviceMode = STANDBYI_MODE;
 8002ee2:	4b06      	ldr	r3, [pc, #24]	; (8002efc <main+0x94>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	715a      	strb	r2, [r3, #5]

	if (nRF24_Init(&hnrf24) != NRF24_OK) {
 8002ee8:	4804      	ldr	r0, [pc, #16]	; (8002efc <main+0x94>)
 8002eea:	f7fd fe49 	bl	8000b80 <nRF24_Init>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <main+0x90>
		Error_Handler();
 8002ef4:	f000 f866 	bl	8002fc4 <Error_Handler>
	}

	/* Infinite loop */
	while (1)
 8002ef8:	e7fe      	b.n	8002ef8 <main+0x90>
 8002efa:	bf00      	nop
 8002efc:	200000ac 	.word	0x200000ac

08002f00 <SystemClock_Config>:

	}
}

static void SystemClock_Config(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b094      	sub	sp, #80	; 0x50
 8002f04:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002f06:	2300      	movs	r3, #0
 8002f08:	60bb      	str	r3, [r7, #8]
 8002f0a:	4b2c      	ldr	r3, [pc, #176]	; (8002fbc <SystemClock_Config+0xbc>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	4a2b      	ldr	r2, [pc, #172]	; (8002fbc <SystemClock_Config+0xbc>)
 8002f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f14:	6413      	str	r3, [r2, #64]	; 0x40
 8002f16:	4b29      	ldr	r3, [pc, #164]	; (8002fbc <SystemClock_Config+0xbc>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1e:	60bb      	str	r3, [r7, #8]
 8002f20:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f22:	2300      	movs	r3, #0
 8002f24:	607b      	str	r3, [r7, #4]
 8002f26:	4b26      	ldr	r3, [pc, #152]	; (8002fc0 <SystemClock_Config+0xc0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a25      	ldr	r2, [pc, #148]	; (8002fc0 <SystemClock_Config+0xc0>)
 8002f2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b23      	ldr	r3, [pc, #140]	; (8002fc0 <SystemClock_Config+0xc0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f3a:	607b      	str	r3, [r7, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002f42:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002f46:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f50:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002f52:	2308      	movs	r3, #8
 8002f54:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8002f56:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002f5a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8002f60:	2307      	movs	r3, #7
 8002f62:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f64:	f107 030c 	add.w	r3, r7, #12
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fe fc45 	bl	80017f8 <HAL_RCC_OscConfig>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 8002f74:	f000 f826 	bl	8002fc4 <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002f78:	f7fe fbee 	bl	8001758 <HAL_PWREx_EnableOverDrive>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 8002f82:	f000 f81f 	bl	8002fc4 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002f86:	230f      	movs	r3, #15
 8002f88:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f92:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f96:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002fa2:	2105      	movs	r1, #5
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fe fe9f 	bl	8001ce8 <HAL_RCC_ClockConfig>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 8002fb0:	f000 f808 	bl	8002fc4 <Error_Handler>
	}
}
 8002fb4:	bf00      	nop
 8002fb6:	3750      	adds	r7, #80	; 0x50
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	40007000 	.word	0x40007000

08002fc4 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8002fc8:	2001      	movs	r0, #1
 8002fca:	f7fe f805 	bl	8000fd8 <BSP_LED_On>
	while (1)
 8002fce:	e7fe      	b.n	8002fce <Error_Handler+0xa>

08002fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003008 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002fd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002fd6:	e003      	b.n	8002fe0 <LoopCopyDataInit>

08002fd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	; (800300c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002fda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002fdc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002fde:	3104      	adds	r1, #4

08002fe0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002fe0:	480b      	ldr	r0, [pc, #44]	; (8003010 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002fe2:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002fe4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002fe6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002fe8:	d3f6      	bcc.n	8002fd8 <CopyDataInit>
  ldr  r2, =_sbss
 8002fea:	4a0b      	ldr	r2, [pc, #44]	; (8003018 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002fec:	e002      	b.n	8002ff4 <LoopFillZerobss>

08002fee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002fee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ff0:	f842 3b04 	str.w	r3, [r2], #4

08002ff4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ff4:	4b09      	ldr	r3, [pc, #36]	; (800301c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002ff6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ff8:	d3f9      	bcc.n	8002fee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ffa:	f7fe f807 	bl	800100c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ffe:	f000 f811 	bl	8003024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003002:	f7ff ff31 	bl	8002e68 <main>
  bx  lr    
 8003006:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003008:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800300c:	080030ac 	.word	0x080030ac
  ldr  r0, =_sdata
 8003010:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003014:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 8003018:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 800301c:	200000b4 	.word	0x200000b4

08003020 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003020:	e7fe      	b.n	8003020 <ADC_IRQHandler>
	...

08003024 <__libc_init_array>:
 8003024:	b570      	push	{r4, r5, r6, lr}
 8003026:	4d0d      	ldr	r5, [pc, #52]	; (800305c <__libc_init_array+0x38>)
 8003028:	4c0d      	ldr	r4, [pc, #52]	; (8003060 <__libc_init_array+0x3c>)
 800302a:	1b64      	subs	r4, r4, r5
 800302c:	10a4      	asrs	r4, r4, #2
 800302e:	2600      	movs	r6, #0
 8003030:	42a6      	cmp	r6, r4
 8003032:	d109      	bne.n	8003048 <__libc_init_array+0x24>
 8003034:	4d0b      	ldr	r5, [pc, #44]	; (8003064 <__libc_init_array+0x40>)
 8003036:	4c0c      	ldr	r4, [pc, #48]	; (8003068 <__libc_init_array+0x44>)
 8003038:	f000 f818 	bl	800306c <_init>
 800303c:	1b64      	subs	r4, r4, r5
 800303e:	10a4      	asrs	r4, r4, #2
 8003040:	2600      	movs	r6, #0
 8003042:	42a6      	cmp	r6, r4
 8003044:	d105      	bne.n	8003052 <__libc_init_array+0x2e>
 8003046:	bd70      	pop	{r4, r5, r6, pc}
 8003048:	f855 3b04 	ldr.w	r3, [r5], #4
 800304c:	4798      	blx	r3
 800304e:	3601      	adds	r6, #1
 8003050:	e7ee      	b.n	8003030 <__libc_init_array+0xc>
 8003052:	f855 3b04 	ldr.w	r3, [r5], #4
 8003056:	4798      	blx	r3
 8003058:	3601      	adds	r6, #1
 800305a:	e7f2      	b.n	8003042 <__libc_init_array+0x1e>
 800305c:	080030a4 	.word	0x080030a4
 8003060:	080030a4 	.word	0x080030a4
 8003064:	080030a4 	.word	0x080030a4
 8003068:	080030a8 	.word	0x080030a8

0800306c <_init>:
 800306c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306e:	bf00      	nop
 8003070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003072:	bc08      	pop	{r3}
 8003074:	469e      	mov	lr, r3
 8003076:	4770      	bx	lr

08003078 <_fini>:
 8003078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307a:	bf00      	nop
 800307c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800307e:	bc08      	pop	{r3}
 8003080:	469e      	mov	lr, r3
 8003082:	4770      	bx	lr
