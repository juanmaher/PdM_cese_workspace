
parking_sensor_NucleoF429ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000368c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003838  08003838  00013838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003850  08003850  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08003850  08003850  00013850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003858  08003858  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003858  08003858  00013858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800385c  0800385c  0001385c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08003860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020034  2**0
                  CONTENTS
 10 .bss          00000098  20000034  20000034  00020034  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000cc  200000cc  00020034  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007dcf  00000000  00000000  000200a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001826  00000000  00000000  00027e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000810  00000000  00000000  000296a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000060b  00000000  00000000  00029eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002c95  00000000  00000000  0002a4bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b51f  00000000  00000000  0002d150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ec2dd  00000000  00000000  0003866f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001f64  00000000  00000000  0012494c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008a  00000000  00000000  001268b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000034 	.word	0x20000034
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003820 	.word	0x08003820

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000038 	.word	0x20000038
 80001e8:	08003820 	.word	0x08003820

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <nRF24_Reset>:
static uint8_t DYNPD_DFT_VALUE = 0x00; // 0x00
static uint8_t FEATURE_DFT_VALUE = 0x00; // 0x00

/* Private functions ---------------------------------------------------------*/
static nRF24_Status_t nRF24_Reset()
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | CONFIG, &CONFIG_DFT_VALUE));
 80004ec:	2201      	movs	r2, #1
 80004ee:	49ba      	ldr	r1, [pc, #744]	; (80007d8 <nRF24_Reset+0x2f0>)
 80004f0:	2020      	movs	r0, #32
 80004f2:	f000 fad3 	bl	8000a9c <nRF24_SendCmd>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d006      	beq.n	800050a <nRF24_Reset+0x22>
 80004fc:	2201      	movs	r2, #1
 80004fe:	49b6      	ldr	r1, [pc, #728]	; (80007d8 <nRF24_Reset+0x2f0>)
 8000500:	2020      	movs	r0, #32
 8000502:	f000 facb 	bl	8000a9c <nRF24_SendCmd>
 8000506:	4603      	mov	r3, r0
 8000508:	e1d9      	b.n	80008be <nRF24_Reset+0x3d6>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | EN_AA, &EN_AA_DFT_VALUE));
 800050a:	2201      	movs	r2, #1
 800050c:	49b3      	ldr	r1, [pc, #716]	; (80007dc <nRF24_Reset+0x2f4>)
 800050e:	2021      	movs	r0, #33	; 0x21
 8000510:	f000 fac4 	bl	8000a9c <nRF24_SendCmd>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d006      	beq.n	8000528 <nRF24_Reset+0x40>
 800051a:	2201      	movs	r2, #1
 800051c:	49af      	ldr	r1, [pc, #700]	; (80007dc <nRF24_Reset+0x2f4>)
 800051e:	2021      	movs	r0, #33	; 0x21
 8000520:	f000 fabc 	bl	8000a9c <nRF24_SendCmd>
 8000524:	4603      	mov	r3, r0
 8000526:	e1ca      	b.n	80008be <nRF24_Reset+0x3d6>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | EN_RXADDR, &EN_RXADDR_DFT_VALUE));
 8000528:	2201      	movs	r2, #1
 800052a:	49ad      	ldr	r1, [pc, #692]	; (80007e0 <nRF24_Reset+0x2f8>)
 800052c:	2022      	movs	r0, #34	; 0x22
 800052e:	f000 fab5 	bl	8000a9c <nRF24_SendCmd>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d006      	beq.n	8000546 <nRF24_Reset+0x5e>
 8000538:	2201      	movs	r2, #1
 800053a:	49a9      	ldr	r1, [pc, #676]	; (80007e0 <nRF24_Reset+0x2f8>)
 800053c:	2022      	movs	r0, #34	; 0x22
 800053e:	f000 faad 	bl	8000a9c <nRF24_SendCmd>
 8000542:	4603      	mov	r3, r0
 8000544:	e1bb      	b.n	80008be <nRF24_Reset+0x3d6>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | SETUP_AW, &SETUP_AW_DFT_VALUE));
 8000546:	2201      	movs	r2, #1
 8000548:	49a6      	ldr	r1, [pc, #664]	; (80007e4 <nRF24_Reset+0x2fc>)
 800054a:	2023      	movs	r0, #35	; 0x23
 800054c:	f000 faa6 	bl	8000a9c <nRF24_SendCmd>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d006      	beq.n	8000564 <nRF24_Reset+0x7c>
 8000556:	2201      	movs	r2, #1
 8000558:	49a2      	ldr	r1, [pc, #648]	; (80007e4 <nRF24_Reset+0x2fc>)
 800055a:	2023      	movs	r0, #35	; 0x23
 800055c:	f000 fa9e 	bl	8000a9c <nRF24_SendCmd>
 8000560:	4603      	mov	r3, r0
 8000562:	e1ac      	b.n	80008be <nRF24_Reset+0x3d6>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | SETUP_RETR, &SETUP_RETR_DFT_VALUE));
 8000564:	2201      	movs	r2, #1
 8000566:	49a0      	ldr	r1, [pc, #640]	; (80007e8 <nRF24_Reset+0x300>)
 8000568:	2024      	movs	r0, #36	; 0x24
 800056a:	f000 fa97 	bl	8000a9c <nRF24_SendCmd>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d006      	beq.n	8000582 <nRF24_Reset+0x9a>
 8000574:	2201      	movs	r2, #1
 8000576:	499c      	ldr	r1, [pc, #624]	; (80007e8 <nRF24_Reset+0x300>)
 8000578:	2024      	movs	r0, #36	; 0x24
 800057a:	f000 fa8f 	bl	8000a9c <nRF24_SendCmd>
 800057e:	4603      	mov	r3, r0
 8000580:	e19d      	b.n	80008be <nRF24_Reset+0x3d6>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RF_CH, &RF_CH_DFT_VALUE));
 8000582:	2201      	movs	r2, #1
 8000584:	4999      	ldr	r1, [pc, #612]	; (80007ec <nRF24_Reset+0x304>)
 8000586:	2025      	movs	r0, #37	; 0x25
 8000588:	f000 fa88 	bl	8000a9c <nRF24_SendCmd>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d006      	beq.n	80005a0 <nRF24_Reset+0xb8>
 8000592:	2201      	movs	r2, #1
 8000594:	4995      	ldr	r1, [pc, #596]	; (80007ec <nRF24_Reset+0x304>)
 8000596:	2025      	movs	r0, #37	; 0x25
 8000598:	f000 fa80 	bl	8000a9c <nRF24_SendCmd>
 800059c:	4603      	mov	r3, r0
 800059e:	e18e      	b.n	80008be <nRF24_Reset+0x3d6>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RF_SETUP, &RF_SETUP_DFT_VALUE));
 80005a0:	2201      	movs	r2, #1
 80005a2:	4993      	ldr	r1, [pc, #588]	; (80007f0 <nRF24_Reset+0x308>)
 80005a4:	2026      	movs	r0, #38	; 0x26
 80005a6:	f000 fa79 	bl	8000a9c <nRF24_SendCmd>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d006      	beq.n	80005be <nRF24_Reset+0xd6>
 80005b0:	2201      	movs	r2, #1
 80005b2:	498f      	ldr	r1, [pc, #572]	; (80007f0 <nRF24_Reset+0x308>)
 80005b4:	2026      	movs	r0, #38	; 0x26
 80005b6:	f000 fa71 	bl	8000a9c <nRF24_SendCmd>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e17f      	b.n	80008be <nRF24_Reset+0x3d6>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | STATUS, &STATUS_DFT_VALUE));
 80005be:	2201      	movs	r2, #1
 80005c0:	498c      	ldr	r1, [pc, #560]	; (80007f4 <nRF24_Reset+0x30c>)
 80005c2:	2027      	movs	r0, #39	; 0x27
 80005c4:	f000 fa6a 	bl	8000a9c <nRF24_SendCmd>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d006      	beq.n	80005dc <nRF24_Reset+0xf4>
 80005ce:	2201      	movs	r2, #1
 80005d0:	4988      	ldr	r1, [pc, #544]	; (80007f4 <nRF24_Reset+0x30c>)
 80005d2:	2027      	movs	r0, #39	; 0x27
 80005d4:	f000 fa62 	bl	8000a9c <nRF24_SendCmd>
 80005d8:	4603      	mov	r3, r0
 80005da:	e170      	b.n	80008be <nRF24_Reset+0x3d6>
    CHECK_INTERNAL(nRF24_SendWriteLenCmd(W_REGISTER | RX_ADDR_P0, RX_ADDR_PO_DFT_VALUE,4));
 80005dc:	2204      	movs	r2, #4
 80005de:	4986      	ldr	r1, [pc, #536]	; (80007f8 <nRF24_Reset+0x310>)
 80005e0:	202a      	movs	r0, #42	; 0x2a
 80005e2:	f000 fa5b 	bl	8000a9c <nRF24_SendCmd>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d006      	beq.n	80005fa <nRF24_Reset+0x112>
 80005ec:	2204      	movs	r2, #4
 80005ee:	4982      	ldr	r1, [pc, #520]	; (80007f8 <nRF24_Reset+0x310>)
 80005f0:	202a      	movs	r0, #42	; 0x2a
 80005f2:	f000 fa53 	bl	8000a9c <nRF24_SendCmd>
 80005f6:	4603      	mov	r3, r0
 80005f8:	e161      	b.n	80008be <nRF24_Reset+0x3d6>
    CHECK_INTERNAL(nRF24_SendWriteLenCmd(W_REGISTER | RX_ADDR_P1, RX_ADDR_P1_DFT_VALUE,4));
 80005fa:	2204      	movs	r2, #4
 80005fc:	497f      	ldr	r1, [pc, #508]	; (80007fc <nRF24_Reset+0x314>)
 80005fe:	202b      	movs	r0, #43	; 0x2b
 8000600:	f000 fa4c 	bl	8000a9c <nRF24_SendCmd>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d006      	beq.n	8000618 <nRF24_Reset+0x130>
 800060a:	2204      	movs	r2, #4
 800060c:	497b      	ldr	r1, [pc, #492]	; (80007fc <nRF24_Reset+0x314>)
 800060e:	202b      	movs	r0, #43	; 0x2b
 8000610:	f000 fa44 	bl	8000a9c <nRF24_SendCmd>
 8000614:	4603      	mov	r3, r0
 8000616:	e152      	b.n	80008be <nRF24_Reset+0x3d6>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_ADDR_P2, &RX_ADDR_P2_DFT_VALUE));
 8000618:	2201      	movs	r2, #1
 800061a:	4979      	ldr	r1, [pc, #484]	; (8000800 <nRF24_Reset+0x318>)
 800061c:	202c      	movs	r0, #44	; 0x2c
 800061e:	f000 fa3d 	bl	8000a9c <nRF24_SendCmd>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d006      	beq.n	8000636 <nRF24_Reset+0x14e>
 8000628:	2201      	movs	r2, #1
 800062a:	4975      	ldr	r1, [pc, #468]	; (8000800 <nRF24_Reset+0x318>)
 800062c:	202c      	movs	r0, #44	; 0x2c
 800062e:	f000 fa35 	bl	8000a9c <nRF24_SendCmd>
 8000632:	4603      	mov	r3, r0
 8000634:	e143      	b.n	80008be <nRF24_Reset+0x3d6>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_ADDR_P3, &RX_ADDR_P3_DFT_VALUE));
 8000636:	2201      	movs	r2, #1
 8000638:	4972      	ldr	r1, [pc, #456]	; (8000804 <nRF24_Reset+0x31c>)
 800063a:	202d      	movs	r0, #45	; 0x2d
 800063c:	f000 fa2e 	bl	8000a9c <nRF24_SendCmd>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d006      	beq.n	8000654 <nRF24_Reset+0x16c>
 8000646:	2201      	movs	r2, #1
 8000648:	496e      	ldr	r1, [pc, #440]	; (8000804 <nRF24_Reset+0x31c>)
 800064a:	202d      	movs	r0, #45	; 0x2d
 800064c:	f000 fa26 	bl	8000a9c <nRF24_SendCmd>
 8000650:	4603      	mov	r3, r0
 8000652:	e134      	b.n	80008be <nRF24_Reset+0x3d6>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_ADDR_P4, &RX_ADDR_P4_DFT_VALUE));
 8000654:	2201      	movs	r2, #1
 8000656:	496c      	ldr	r1, [pc, #432]	; (8000808 <nRF24_Reset+0x320>)
 8000658:	202e      	movs	r0, #46	; 0x2e
 800065a:	f000 fa1f 	bl	8000a9c <nRF24_SendCmd>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d006      	beq.n	8000672 <nRF24_Reset+0x18a>
 8000664:	2201      	movs	r2, #1
 8000666:	4968      	ldr	r1, [pc, #416]	; (8000808 <nRF24_Reset+0x320>)
 8000668:	202e      	movs	r0, #46	; 0x2e
 800066a:	f000 fa17 	bl	8000a9c <nRF24_SendCmd>
 800066e:	4603      	mov	r3, r0
 8000670:	e125      	b.n	80008be <nRF24_Reset+0x3d6>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_ADDR_P5, &RX_ADDR_P5_DFT_VALUE));
 8000672:	2201      	movs	r2, #1
 8000674:	4965      	ldr	r1, [pc, #404]	; (800080c <nRF24_Reset+0x324>)
 8000676:	202f      	movs	r0, #47	; 0x2f
 8000678:	f000 fa10 	bl	8000a9c <nRF24_SendCmd>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d006      	beq.n	8000690 <nRF24_Reset+0x1a8>
 8000682:	2201      	movs	r2, #1
 8000684:	4961      	ldr	r1, [pc, #388]	; (800080c <nRF24_Reset+0x324>)
 8000686:	202f      	movs	r0, #47	; 0x2f
 8000688:	f000 fa08 	bl	8000a9c <nRF24_SendCmd>
 800068c:	4603      	mov	r3, r0
 800068e:	e116      	b.n	80008be <nRF24_Reset+0x3d6>
    CHECK_INTERNAL(nRF24_SendWriteLenCmd(W_REGISTER | TX_ADDR, TX_ADDR_DFT_VALUE,4));
 8000690:	2204      	movs	r2, #4
 8000692:	495f      	ldr	r1, [pc, #380]	; (8000810 <nRF24_Reset+0x328>)
 8000694:	2030      	movs	r0, #48	; 0x30
 8000696:	f000 fa01 	bl	8000a9c <nRF24_SendCmd>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d006      	beq.n	80006ae <nRF24_Reset+0x1c6>
 80006a0:	2204      	movs	r2, #4
 80006a2:	495b      	ldr	r1, [pc, #364]	; (8000810 <nRF24_Reset+0x328>)
 80006a4:	2030      	movs	r0, #48	; 0x30
 80006a6:	f000 f9f9 	bl	8000a9c <nRF24_SendCmd>
 80006aa:	4603      	mov	r3, r0
 80006ac:	e107      	b.n	80008be <nRF24_Reset+0x3d6>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_PW_P0, &RX_PW_P0_DFT_VALUE));
 80006ae:	2201      	movs	r2, #1
 80006b0:	4958      	ldr	r1, [pc, #352]	; (8000814 <nRF24_Reset+0x32c>)
 80006b2:	2031      	movs	r0, #49	; 0x31
 80006b4:	f000 f9f2 	bl	8000a9c <nRF24_SendCmd>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d006      	beq.n	80006cc <nRF24_Reset+0x1e4>
 80006be:	2201      	movs	r2, #1
 80006c0:	4954      	ldr	r1, [pc, #336]	; (8000814 <nRF24_Reset+0x32c>)
 80006c2:	2031      	movs	r0, #49	; 0x31
 80006c4:	f000 f9ea 	bl	8000a9c <nRF24_SendCmd>
 80006c8:	4603      	mov	r3, r0
 80006ca:	e0f8      	b.n	80008be <nRF24_Reset+0x3d6>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_PW_P1, &RX_PW_P1_DFT_VALUE));
 80006cc:	2201      	movs	r2, #1
 80006ce:	4952      	ldr	r1, [pc, #328]	; (8000818 <nRF24_Reset+0x330>)
 80006d0:	2032      	movs	r0, #50	; 0x32
 80006d2:	f000 f9e3 	bl	8000a9c <nRF24_SendCmd>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d006      	beq.n	80006ea <nRF24_Reset+0x202>
 80006dc:	2201      	movs	r2, #1
 80006de:	494e      	ldr	r1, [pc, #312]	; (8000818 <nRF24_Reset+0x330>)
 80006e0:	2032      	movs	r0, #50	; 0x32
 80006e2:	f000 f9db 	bl	8000a9c <nRF24_SendCmd>
 80006e6:	4603      	mov	r3, r0
 80006e8:	e0e9      	b.n	80008be <nRF24_Reset+0x3d6>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_PW_P2, &RX_PW_P2_DFT_VALUE));
 80006ea:	2201      	movs	r2, #1
 80006ec:	494b      	ldr	r1, [pc, #300]	; (800081c <nRF24_Reset+0x334>)
 80006ee:	2033      	movs	r0, #51	; 0x33
 80006f0:	f000 f9d4 	bl	8000a9c <nRF24_SendCmd>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d006      	beq.n	8000708 <nRF24_Reset+0x220>
 80006fa:	2201      	movs	r2, #1
 80006fc:	4947      	ldr	r1, [pc, #284]	; (800081c <nRF24_Reset+0x334>)
 80006fe:	2033      	movs	r0, #51	; 0x33
 8000700:	f000 f9cc 	bl	8000a9c <nRF24_SendCmd>
 8000704:	4603      	mov	r3, r0
 8000706:	e0da      	b.n	80008be <nRF24_Reset+0x3d6>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_PW_P3, &RX_PW_P3_DFT_VALUE));
 8000708:	2201      	movs	r2, #1
 800070a:	4945      	ldr	r1, [pc, #276]	; (8000820 <nRF24_Reset+0x338>)
 800070c:	2034      	movs	r0, #52	; 0x34
 800070e:	f000 f9c5 	bl	8000a9c <nRF24_SendCmd>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d006      	beq.n	8000726 <nRF24_Reset+0x23e>
 8000718:	2201      	movs	r2, #1
 800071a:	4941      	ldr	r1, [pc, #260]	; (8000820 <nRF24_Reset+0x338>)
 800071c:	2034      	movs	r0, #52	; 0x34
 800071e:	f000 f9bd 	bl	8000a9c <nRF24_SendCmd>
 8000722:	4603      	mov	r3, r0
 8000724:	e0cb      	b.n	80008be <nRF24_Reset+0x3d6>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_PW_P4, &RX_PW_P4_DFT_VALUE));
 8000726:	2201      	movs	r2, #1
 8000728:	493e      	ldr	r1, [pc, #248]	; (8000824 <nRF24_Reset+0x33c>)
 800072a:	2035      	movs	r0, #53	; 0x35
 800072c:	f000 f9b6 	bl	8000a9c <nRF24_SendCmd>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d006      	beq.n	8000744 <nRF24_Reset+0x25c>
 8000736:	2201      	movs	r2, #1
 8000738:	493a      	ldr	r1, [pc, #232]	; (8000824 <nRF24_Reset+0x33c>)
 800073a:	2035      	movs	r0, #53	; 0x35
 800073c:	f000 f9ae 	bl	8000a9c <nRF24_SendCmd>
 8000740:	4603      	mov	r3, r0
 8000742:	e0bc      	b.n	80008be <nRF24_Reset+0x3d6>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RX_PW_P5, &RX_PW_P5_DFT_VALUE));
 8000744:	2201      	movs	r2, #1
 8000746:	4938      	ldr	r1, [pc, #224]	; (8000828 <nRF24_Reset+0x340>)
 8000748:	2036      	movs	r0, #54	; 0x36
 800074a:	f000 f9a7 	bl	8000a9c <nRF24_SendCmd>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d006      	beq.n	8000762 <nRF24_Reset+0x27a>
 8000754:	2201      	movs	r2, #1
 8000756:	4934      	ldr	r1, [pc, #208]	; (8000828 <nRF24_Reset+0x340>)
 8000758:	2036      	movs	r0, #54	; 0x36
 800075a:	f000 f99f 	bl	8000a9c <nRF24_SendCmd>
 800075e:	4603      	mov	r3, r0
 8000760:	e0ad      	b.n	80008be <nRF24_Reset+0x3d6>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | FIFO_STATUS, &FIFO_STATUS_DFT_VALUE));
 8000762:	2201      	movs	r2, #1
 8000764:	4931      	ldr	r1, [pc, #196]	; (800082c <nRF24_Reset+0x344>)
 8000766:	2037      	movs	r0, #55	; 0x37
 8000768:	f000 f998 	bl	8000a9c <nRF24_SendCmd>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d006      	beq.n	8000780 <nRF24_Reset+0x298>
 8000772:	2201      	movs	r2, #1
 8000774:	492d      	ldr	r1, [pc, #180]	; (800082c <nRF24_Reset+0x344>)
 8000776:	2037      	movs	r0, #55	; 0x37
 8000778:	f000 f990 	bl	8000a9c <nRF24_SendCmd>
 800077c:	4603      	mov	r3, r0
 800077e:	e09e      	b.n	80008be <nRF24_Reset+0x3d6>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | DYNPD, &DYNPD_DFT_VALUE));
 8000780:	2201      	movs	r2, #1
 8000782:	492b      	ldr	r1, [pc, #172]	; (8000830 <nRF24_Reset+0x348>)
 8000784:	203c      	movs	r0, #60	; 0x3c
 8000786:	f000 f989 	bl	8000a9c <nRF24_SendCmd>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d006      	beq.n	800079e <nRF24_Reset+0x2b6>
 8000790:	2201      	movs	r2, #1
 8000792:	4927      	ldr	r1, [pc, #156]	; (8000830 <nRF24_Reset+0x348>)
 8000794:	203c      	movs	r0, #60	; 0x3c
 8000796:	f000 f981 	bl	8000a9c <nRF24_SendCmd>
 800079a:	4603      	mov	r3, r0
 800079c:	e08f      	b.n	80008be <nRF24_Reset+0x3d6>
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | FEATURE, &FEATURE_DFT_VALUE));
 800079e:	2201      	movs	r2, #1
 80007a0:	4924      	ldr	r1, [pc, #144]	; (8000834 <nRF24_Reset+0x34c>)
 80007a2:	203d      	movs	r0, #61	; 0x3d
 80007a4:	f000 f97a 	bl	8000a9c <nRF24_SendCmd>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d006      	beq.n	80007bc <nRF24_Reset+0x2d4>
 80007ae:	2201      	movs	r2, #1
 80007b0:	4920      	ldr	r1, [pc, #128]	; (8000834 <nRF24_Reset+0x34c>)
 80007b2:	203d      	movs	r0, #61	; 0x3d
 80007b4:	f000 f972 	bl	8000a9c <nRF24_SendCmd>
 80007b8:	4603      	mov	r3, r0
 80007ba:	e080      	b.n	80008be <nRF24_Reset+0x3d6>

    // Clean IRQ registers
    CHECK_INTERNAL(nRF24_SetRegister(STATUS, RX_DR));
 80007bc:	2140      	movs	r1, #64	; 0x40
 80007be:	2007      	movs	r0, #7
 80007c0:	f000 f9d6 	bl	8000b70 <nRF24_SetRegister>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d036      	beq.n	8000838 <nRF24_Reset+0x350>
 80007ca:	2140      	movs	r1, #64	; 0x40
 80007cc:	2007      	movs	r0, #7
 80007ce:	f000 f9cf 	bl	8000b70 <nRF24_SetRegister>
 80007d2:	4603      	mov	r3, r0
 80007d4:	e073      	b.n	80008be <nRF24_Reset+0x3d6>
 80007d6:	bf00      	nop
 80007d8:	20000000 	.word	0x20000000
 80007dc:	20000001 	.word	0x20000001
 80007e0:	20000002 	.word	0x20000002
 80007e4:	20000003 	.word	0x20000003
 80007e8:	20000004 	.word	0x20000004
 80007ec:	20000005 	.word	0x20000005
 80007f0:	20000006 	.word	0x20000006
 80007f4:	20000007 	.word	0x20000007
 80007f8:	20000008 	.word	0x20000008
 80007fc:	2000000c 	.word	0x2000000c
 8000800:	20000010 	.word	0x20000010
 8000804:	20000011 	.word	0x20000011
 8000808:	20000012 	.word	0x20000012
 800080c:	20000013 	.word	0x20000013
 8000810:	20000014 	.word	0x20000014
 8000814:	200000b0 	.word	0x200000b0
 8000818:	200000b1 	.word	0x200000b1
 800081c:	200000b2 	.word	0x200000b2
 8000820:	200000b3 	.word	0x200000b3
 8000824:	200000b4 	.word	0x200000b4
 8000828:	200000b5 	.word	0x200000b5
 800082c:	20000018 	.word	0x20000018
 8000830:	200000b6 	.word	0x200000b6
 8000834:	200000b7 	.word	0x200000b7
    CHECK_INTERNAL(nRF24_SetRegister(STATUS, TX_DS));
 8000838:	2120      	movs	r1, #32
 800083a:	2007      	movs	r0, #7
 800083c:	f000 f998 	bl	8000b70 <nRF24_SetRegister>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d005      	beq.n	8000852 <nRF24_Reset+0x36a>
 8000846:	2120      	movs	r1, #32
 8000848:	2007      	movs	r0, #7
 800084a:	f000 f991 	bl	8000b70 <nRF24_SetRegister>
 800084e:	4603      	mov	r3, r0
 8000850:	e035      	b.n	80008be <nRF24_Reset+0x3d6>
    CHECK_INTERNAL(nRF24_SetRegister(STATUS, MAX_RT));
 8000852:	2110      	movs	r1, #16
 8000854:	2007      	movs	r0, #7
 8000856:	f000 f98b 	bl	8000b70 <nRF24_SetRegister>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d005      	beq.n	800086c <nRF24_Reset+0x384>
 8000860:	2110      	movs	r1, #16
 8000862:	2007      	movs	r0, #7
 8000864:	f000 f984 	bl	8000b70 <nRF24_SetRegister>
 8000868:	4603      	mov	r3, r0
 800086a:	e028      	b.n	80008be <nRF24_Reset+0x3d6>

    if (nRF24_IsRxFull()) {
 800086c:	f000 fdae 	bl	80013cc <nRF24_IsRxFull>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d00e      	beq.n	8000894 <nRF24_Reset+0x3ac>
        CHECK_INTERNAL(nRF24_SendFlushRx());
 8000876:	2201      	movs	r2, #1
 8000878:	2100      	movs	r1, #0
 800087a:	20e2      	movs	r0, #226	; 0xe2
 800087c:	f000 f90e 	bl	8000a9c <nRF24_SendCmd>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d006      	beq.n	8000894 <nRF24_Reset+0x3ac>
 8000886:	2201      	movs	r2, #1
 8000888:	2100      	movs	r1, #0
 800088a:	20e2      	movs	r0, #226	; 0xe2
 800088c:	f000 f906 	bl	8000a9c <nRF24_SendCmd>
 8000890:	4603      	mov	r3, r0
 8000892:	e014      	b.n	80008be <nRF24_Reset+0x3d6>
    }

    if (nRF24_IsTxFull()) {
 8000894:	f000 fd7e 	bl	8001394 <nRF24_IsTxFull>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d00e      	beq.n	80008bc <nRF24_Reset+0x3d4>
        CHECK_INTERNAL(nRF24_SendFlushTx());
 800089e:	2201      	movs	r2, #1
 80008a0:	2100      	movs	r1, #0
 80008a2:	20e1      	movs	r0, #225	; 0xe1
 80008a4:	f000 f8fa 	bl	8000a9c <nRF24_SendCmd>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d006      	beq.n	80008bc <nRF24_Reset+0x3d4>
 80008ae:	2201      	movs	r2, #1
 80008b0:	2100      	movs	r1, #0
 80008b2:	20e1      	movs	r0, #225	; 0xe1
 80008b4:	f000 f8f2 	bl	8000a9c <nRF24_SendCmd>
 80008b8:	4603      	mov	r3, r0
 80008ba:	e000      	b.n	80008be <nRF24_Reset+0x3d6>
    }

    return NRF24_OK;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop

080008c4 <nRF24_UpdateMode>:

static nRF24_Status_t nRF24_UpdateMode(const operationModes_t mode)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
    uint8_t register_value = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	73fb      	strb	r3, [r7, #15]

    if (operationCurrentMode == mode) {
 80008d2:	4b70      	ldr	r3, [pc, #448]	; (8000a94 <nRF24_UpdateMode+0x1d0>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	79fa      	ldrb	r2, [r7, #7]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d101      	bne.n	80008e0 <nRF24_UpdateMode+0x1c>
        return NRF24_OK;
 80008dc:	2300      	movs	r3, #0
 80008de:	e0d4      	b.n	8000a8a <nRF24_UpdateMode+0x1c6>
    }

    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | CONFIG, &register_value));
 80008e0:	f107 030f 	add.w	r3, r7, #15
 80008e4:	2201      	movs	r2, #1
 80008e6:	4619      	mov	r1, r3
 80008e8:	2000      	movs	r0, #0
 80008ea:	f000 f8d7 	bl	8000a9c <nRF24_SendCmd>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d008      	beq.n	8000906 <nRF24_UpdateMode+0x42>
 80008f4:	f107 030f 	add.w	r3, r7, #15
 80008f8:	2201      	movs	r2, #1
 80008fa:	4619      	mov	r1, r3
 80008fc:	2000      	movs	r0, #0
 80008fe:	f000 f8cd 	bl	8000a9c <nRF24_SendCmd>
 8000902:	4603      	mov	r3, r0
 8000904:	e0c1      	b.n	8000a8a <nRF24_UpdateMode+0x1c6>

    switch (operationCurrentMode) {
 8000906:	4b63      	ldr	r3, [pc, #396]	; (8000a94 <nRF24_UpdateMode+0x1d0>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b04      	cmp	r3, #4
 800090c:	f300 80b4 	bgt.w	8000a78 <nRF24_UpdateMode+0x1b4>
 8000910:	2b03      	cmp	r3, #3
 8000912:	f280 80a7 	bge.w	8000a64 <nRF24_UpdateMode+0x1a0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d002      	beq.n	8000920 <nRF24_UpdateMode+0x5c>
 800091a:	2b01      	cmp	r3, #1
 800091c:	d020      	beq.n	8000960 <nRF24_UpdateMode+0x9c>
            if (mode == STANDBYI) {
                nRF24_CE_LOW();
            }
            break;
        default:
            break;
 800091e:	e0ab      	b.n	8000a78 <nRF24_UpdateMode+0x1b4>
            if (mode == STANDBYI) {
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	2b01      	cmp	r3, #1
 8000924:	f040 80aa 	bne.w	8000a7c <nRF24_UpdateMode+0x1b8>
                register_value |= PWR_UP;
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	f043 0302 	orr.w	r3, r3, #2
 800092e:	b2db      	uxtb	r3, r3
 8000930:	73fb      	strb	r3, [r7, #15]
                CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | CONFIG, &(register_value)));
 8000932:	f107 030f 	add.w	r3, r7, #15
 8000936:	2201      	movs	r2, #1
 8000938:	4619      	mov	r1, r3
 800093a:	2020      	movs	r0, #32
 800093c:	f000 f8ae 	bl	8000a9c <nRF24_SendCmd>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d008      	beq.n	8000958 <nRF24_UpdateMode+0x94>
 8000946:	f107 030f 	add.w	r3, r7, #15
 800094a:	2201      	movs	r2, #1
 800094c:	4619      	mov	r1, r3
 800094e:	2020      	movs	r0, #32
 8000950:	f000 f8a4 	bl	8000a9c <nRF24_SendCmd>
 8000954:	4603      	mov	r3, r0
 8000956:	e098      	b.n	8000a8a <nRF24_UpdateMode+0x1c6>
                HAL_Delay(START_UP_DELAY_MS);
 8000958:	2002      	movs	r0, #2
 800095a:	f000 ff7f 	bl	800185c <HAL_Delay>
            break;
 800095e:	e08d      	b.n	8000a7c <nRF24_UpdateMode+0x1b8>
            switch (mode) {
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	2b04      	cmp	r3, #4
 8000964:	d040      	beq.n	80009e8 <nRF24_UpdateMode+0x124>
 8000966:	2b04      	cmp	r3, #4
 8000968:	dc60      	bgt.n	8000a2c <nRF24_UpdateMode+0x168>
 800096a:	2b00      	cmp	r3, #0
 800096c:	d002      	beq.n	8000974 <nRF24_UpdateMode+0xb0>
 800096e:	2b03      	cmp	r3, #3
 8000970:	d018      	beq.n	80009a4 <nRF24_UpdateMode+0xe0>
 8000972:	e05b      	b.n	8000a2c <nRF24_UpdateMode+0x168>
                    register_value &= ~PWR_UP;
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	f023 0302 	bic.w	r3, r3, #2
 800097a:	b2db      	uxtb	r3, r3
 800097c:	73fb      	strb	r3, [r7, #15]
                    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | CONFIG, &(register_value)));
 800097e:	f107 030f 	add.w	r3, r7, #15
 8000982:	2201      	movs	r2, #1
 8000984:	4619      	mov	r1, r3
 8000986:	2020      	movs	r0, #32
 8000988:	f000 f888 	bl	8000a9c <nRF24_SendCmd>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d064      	beq.n	8000a5c <nRF24_UpdateMode+0x198>
 8000992:	f107 030f 	add.w	r3, r7, #15
 8000996:	2201      	movs	r2, #1
 8000998:	4619      	mov	r1, r3
 800099a:	2020      	movs	r0, #32
 800099c:	f000 f87e 	bl	8000a9c <nRF24_SendCmd>
 80009a0:	4603      	mov	r3, r0
 80009a2:	e072      	b.n	8000a8a <nRF24_UpdateMode+0x1c6>
                    register_value |= PRIM_RX;
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	73fb      	strb	r3, [r7, #15]
                    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | CONFIG, &(register_value)));
 80009ae:	f107 030f 	add.w	r3, r7, #15
 80009b2:	2201      	movs	r2, #1
 80009b4:	4619      	mov	r1, r3
 80009b6:	2020      	movs	r0, #32
 80009b8:	f000 f870 	bl	8000a9c <nRF24_SendCmd>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d008      	beq.n	80009d4 <nRF24_UpdateMode+0x110>
 80009c2:	f107 030f 	add.w	r3, r7, #15
 80009c6:	2201      	movs	r2, #1
 80009c8:	4619      	mov	r1, r3
 80009ca:	2020      	movs	r0, #32
 80009cc:	f000 f866 	bl	8000a9c <nRF24_SendCmd>
 80009d0:	4603      	mov	r3, r0
 80009d2:	e05a      	b.n	8000a8a <nRF24_UpdateMode+0x1c6>
                    nRF24_CE_HIGH();
 80009d4:	2201      	movs	r2, #1
 80009d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009da:	482f      	ldr	r0, [pc, #188]	; (8000a98 <nRF24_UpdateMode+0x1d4>)
 80009dc:	f001 fa20 	bl	8001e20 <HAL_GPIO_WritePin>
                    HAL_Delay(RX_DELAY_MS);
 80009e0:	2001      	movs	r0, #1
 80009e2:	f000 ff3b 	bl	800185c <HAL_Delay>
                    break;
 80009e6:	e03c      	b.n	8000a62 <nRF24_UpdateMode+0x19e>
                    register_value &= ~PRIM_RX;
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	f023 0301 	bic.w	r3, r3, #1
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	73fb      	strb	r3, [r7, #15]
                    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | CONFIG, &(register_value)));
 80009f2:	f107 030f 	add.w	r3, r7, #15
 80009f6:	2201      	movs	r2, #1
 80009f8:	4619      	mov	r1, r3
 80009fa:	2020      	movs	r0, #32
 80009fc:	f000 f84e 	bl	8000a9c <nRF24_SendCmd>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d008      	beq.n	8000a18 <nRF24_UpdateMode+0x154>
 8000a06:	f107 030f 	add.w	r3, r7, #15
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	2020      	movs	r0, #32
 8000a10:	f000 f844 	bl	8000a9c <nRF24_SendCmd>
 8000a14:	4603      	mov	r3, r0
 8000a16:	e038      	b.n	8000a8a <nRF24_UpdateMode+0x1c6>
                    nRF24_CE_HIGH();
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a1e:	481e      	ldr	r0, [pc, #120]	; (8000a98 <nRF24_UpdateMode+0x1d4>)
 8000a20:	f001 f9fe 	bl	8001e20 <HAL_GPIO_WritePin>
                    HAL_Delay(TX_DELAY_MS);
 8000a24:	2001      	movs	r0, #1
 8000a26:	f000 ff19 	bl	800185c <HAL_Delay>
                    break;
 8000a2a:	e01a      	b.n	8000a62 <nRF24_UpdateMode+0x19e>
                    register_value &= ~PWR_UP;
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	f023 0302 	bic.w	r3, r3, #2
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	73fb      	strb	r3, [r7, #15]
                    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | CONFIG, &(register_value)));
 8000a36:	f107 030f 	add.w	r3, r7, #15
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	2020      	movs	r0, #32
 8000a40:	f000 f82c 	bl	8000a9c <nRF24_SendCmd>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d00a      	beq.n	8000a60 <nRF24_UpdateMode+0x19c>
 8000a4a:	f107 030f 	add.w	r3, r7, #15
 8000a4e:	2201      	movs	r2, #1
 8000a50:	4619      	mov	r1, r3
 8000a52:	2020      	movs	r0, #32
 8000a54:	f000 f822 	bl	8000a9c <nRF24_SendCmd>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	e016      	b.n	8000a8a <nRF24_UpdateMode+0x1c6>
                    break;
 8000a5c:	bf00      	nop
 8000a5e:	e010      	b.n	8000a82 <nRF24_UpdateMode+0x1be>
                    break;
 8000a60:	bf00      	nop
            break;
 8000a62:	e00e      	b.n	8000a82 <nRF24_UpdateMode+0x1be>
            if (mode == STANDBYI) {
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d10a      	bne.n	8000a80 <nRF24_UpdateMode+0x1bc>
                nRF24_CE_LOW();
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a70:	4809      	ldr	r0, [pc, #36]	; (8000a98 <nRF24_UpdateMode+0x1d4>)
 8000a72:	f001 f9d5 	bl	8001e20 <HAL_GPIO_WritePin>
            break;
 8000a76:	e003      	b.n	8000a80 <nRF24_UpdateMode+0x1bc>
            break;
 8000a78:	bf00      	nop
 8000a7a:	e002      	b.n	8000a82 <nRF24_UpdateMode+0x1be>
            break;
 8000a7c:	bf00      	nop
 8000a7e:	e000      	b.n	8000a82 <nRF24_UpdateMode+0x1be>
            break;
 8000a80:	bf00      	nop
    }

    operationCurrentMode = mode;
 8000a82:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <nRF24_UpdateMode+0x1d0>)
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	7013      	strb	r3, [r2, #0]

    return NRF24_OK;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000050 	.word	0x20000050
 8000a98:	40020c00 	.word	0x40020c00

08000a9c <nRF24_SendCmd>:

static nRF24_Status_t nRF24_SendCmd(uint8_t cmd, uint8_t * value, const uint8_t length)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af02      	add	r7, sp, #8
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	71fb      	strb	r3, [r7, #7]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	71bb      	strb	r3, [r7, #6]
    /* Start SPI communication */
    SPIx_CS_LOW();
 8000aac:	2200      	movs	r2, #0
 8000aae:	2110      	movs	r1, #16
 8000ab0:	482c      	ldr	r0, [pc, #176]	; (8000b64 <nRF24_SendCmd+0xc8>)
 8000ab2:	f001 f9b5 	bl	8001e20 <HAL_GPIO_WritePin>

    //HAL_Delay(1);

    /* Send command */
    CHECK_SPI(HAL_SPI_TransmitReceive(&hspi1, &cmd, &(hnrf24->StatusRegister), 1, SPIx_TIMEOUT_MAX));
 8000ab6:	4b2c      	ldr	r3, [pc, #176]	; (8000b68 <nRF24_SendCmd+0xcc>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f103 020d 	add.w	r2, r3, #13
 8000abe:	1df9      	adds	r1, r7, #7
 8000ac0:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	4828      	ldr	r0, [pc, #160]	; (8000b6c <nRF24_SendCmd+0xd0>)
 8000aca:	f002 fa2b 	bl	8002f24 <HAL_SPI_TransmitReceive>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <nRF24_SendCmd+0x3c>
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	e041      	b.n	8000b5c <nRF24_SendCmd+0xc0>

    if (cmd == FLUSH_TX || cmd == FLUSH_RX || cmd == REUSE_TX_PL) {
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	2be1      	cmp	r3, #225	; 0xe1
 8000adc:	d038      	beq.n	8000b50 <nRF24_SendCmd+0xb4>
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	2be2      	cmp	r3, #226	; 0xe2
 8000ae2:	d035      	beq.n	8000b50 <nRF24_SendCmd+0xb4>
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	2be3      	cmp	r3, #227	; 0xe3
 8000ae8:	d032      	beq.n	8000b50 <nRF24_SendCmd+0xb4>
    } else if (((cmd & W_REGISTER_MASK) == W_REGISTER) || cmd == W_TX_PAYLOAD || cmd == W_TX_PAYLOAD_NOACK || cmd == W_ACK_PAYLOAD) {
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8000af0:	2b20      	cmp	r3, #32
 8000af2:	d008      	beq.n	8000b06 <nRF24_SendCmd+0x6a>
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	2ba0      	cmp	r3, #160	; 0xa0
 8000af8:	d005      	beq.n	8000b06 <nRF24_SendCmd+0x6a>
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	2bb0      	cmp	r3, #176	; 0xb0
 8000afe:	d002      	beq.n	8000b06 <nRF24_SendCmd+0x6a>
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	2ba8      	cmp	r3, #168	; 0xa8
 8000b04:	d10c      	bne.n	8000b20 <nRF24_SendCmd+0x84>
        CHECK_SPI(HAL_SPI_Transmit(&hspi1, value, length, SPIx_TIMEOUT_MAX));
 8000b06:	79bb      	ldrb	r3, [r7, #6]
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b0e:	6839      	ldr	r1, [r7, #0]
 8000b10:	4816      	ldr	r0, [pc, #88]	; (8000b6c <nRF24_SendCmd+0xd0>)
 8000b12:	f001 ff1e 	bl	8002952 <HAL_SPI_Transmit>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d019      	beq.n	8000b50 <nRF24_SendCmd+0xb4>
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	e01d      	b.n	8000b5c <nRF24_SendCmd+0xc0>
    } else if (((cmd & R_REGISTER_MASK) == R_REGISTER) || cmd == R_RX_PAYLOAD || cmd == R_RX_PL_WID) {
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d005      	beq.n	8000b36 <nRF24_SendCmd+0x9a>
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b61      	cmp	r3, #97	; 0x61
 8000b2e:	d002      	beq.n	8000b36 <nRF24_SendCmd+0x9a>
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	2b60      	cmp	r3, #96	; 0x60
 8000b34:	d10c      	bne.n	8000b50 <nRF24_SendCmd+0xb4>
        CHECK_SPI(HAL_SPI_Receive(&hspi1, value, length, SPIx_TIMEOUT_MAX));
 8000b36:	79bb      	ldrb	r3, [r7, #6]
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b3e:	6839      	ldr	r1, [r7, #0]
 8000b40:	480a      	ldr	r0, [pc, #40]	; (8000b6c <nRF24_SendCmd+0xd0>)
 8000b42:	f002 f864 	bl	8002c0e <HAL_SPI_Receive>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <nRF24_SendCmd+0xb4>
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	e005      	b.n	8000b5c <nRF24_SendCmd+0xc0>
    }

    //HAL_Delay(1);

    /* Stop SPI communication */
    SPIx_CS_HIGH();
 8000b50:	2201      	movs	r2, #1
 8000b52:	2110      	movs	r1, #16
 8000b54:	4803      	ldr	r0, [pc, #12]	; (8000b64 <nRF24_SendCmd+0xc8>)
 8000b56:	f001 f963 	bl	8001e20 <HAL_GPIO_WritePin>

    //HAL_Delay(1);

    return NRF24_OK;
 8000b5a:	2300      	movs	r3, #0
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40020000 	.word	0x40020000
 8000b68:	200000ac 	.word	0x200000ac
 8000b6c:	20000054 	.word	0x20000054

08000b70 <nRF24_SetRegister>:

static nRF24_Status_t nRF24_SetRegister(const uint8_t registerName, const uint8_t bit)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	460a      	mov	r2, r1
 8000b7a:	71fb      	strb	r3, [r7, #7]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	71bb      	strb	r3, [r7, #6]
    uint8_t registerValue = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	73fb      	strb	r3, [r7, #15]

    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | registerName, &registerValue));
 8000b84:	f107 010f 	add.w	r1, r7, #15
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff85 	bl	8000a9c <nRF24_SendCmd>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d008      	beq.n	8000baa <nRF24_SetRegister+0x3a>
 8000b98:	f107 010f 	add.w	r1, r7, #15
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff7b 	bl	8000a9c <nRF24_SendCmd>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	e01e      	b.n	8000be8 <nRF24_SetRegister+0x78>
    registerValue |= bit;
 8000baa:	7bfa      	ldrb	r2, [r7, #15]
 8000bac:	79bb      	ldrb	r3, [r7, #6]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | registerName, &(registerValue)));
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	f043 0320 	orr.w	r3, r3, #32
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	f107 010f 	add.w	r1, r7, #15
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ff6a 	bl	8000a9c <nRF24_SendCmd>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d00b      	beq.n	8000be6 <nRF24_SetRegister+0x76>
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f043 0320 	orr.w	r3, r3, #32
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	f107 010f 	add.w	r1, r7, #15
 8000bda:	2201      	movs	r2, #1
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff5d 	bl	8000a9c <nRF24_SendCmd>
 8000be2:	4603      	mov	r3, r0
 8000be4:	e000      	b.n	8000be8 <nRF24_SetRegister+0x78>

    return NRF24_OK;
 8000be6:	2300      	movs	r3, #0
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <nRF24_ResetRegister>:

static nRF24_Status_t nRF24_ResetRegister(const uint8_t registerName, const uint8_t bit)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	460a      	mov	r2, r1
 8000bfa:	71fb      	strb	r3, [r7, #7]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	71bb      	strb	r3, [r7, #6]
    uint8_t registerValue = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	73fb      	strb	r3, [r7, #15]

    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | registerName, &registerValue));
 8000c04:	f107 010f 	add.w	r1, r7, #15
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff45 	bl	8000a9c <nRF24_SendCmd>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d008      	beq.n	8000c2a <nRF24_ResetRegister+0x3a>
 8000c18:	f107 010f 	add.w	r1, r7, #15
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	2201      	movs	r2, #1
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff3b 	bl	8000a9c <nRF24_SendCmd>
 8000c26:	4603      	mov	r3, r0
 8000c28:	e023      	b.n	8000c72 <nRF24_ResetRegister+0x82>
    registerValue &= ~(bit);
 8000c2a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	b25a      	sxtb	r2, r3
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	b25b      	sxtb	r3, r3
 8000c36:	4013      	ands	r3, r2
 8000c38:	b25b      	sxtb	r3, r3
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | registerName, &(registerValue)));
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	f043 0320 	orr.w	r3, r3, #32
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	f107 010f 	add.w	r1, r7, #15
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff25 	bl	8000a9c <nRF24_SendCmd>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d00b      	beq.n	8000c70 <nRF24_ResetRegister+0x80>
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	f043 0320 	orr.w	r3, r3, #32
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	f107 010f 	add.w	r1, r7, #15
 8000c64:	2201      	movs	r2, #1
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff ff18 	bl	8000a9c <nRF24_SendCmd>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	e000      	b.n	8000c72 <nRF24_ResetRegister+0x82>

    return NRF24_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <HAL_SPI_MspInit>:

/**
  * @brief  Initializes SPI MSP.
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08c      	sub	sp, #48	; 0x30
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef  GPIO_InitStruct;

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    SPIx_SCK_GPIO_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	61bb      	str	r3, [r7, #24]
 8000c88:	4b37      	ldr	r3, [pc, #220]	; (8000d68 <HAL_SPI_MspInit+0xec>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	4a36      	ldr	r2, [pc, #216]	; (8000d68 <HAL_SPI_MspInit+0xec>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6313      	str	r3, [r2, #48]	; 0x30
 8000c94:	4b34      	ldr	r3, [pc, #208]	; (8000d68 <HAL_SPI_MspInit+0xec>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	61bb      	str	r3, [r7, #24]
 8000c9e:	69bb      	ldr	r3, [r7, #24]
    SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	4b30      	ldr	r3, [pc, #192]	; (8000d68 <HAL_SPI_MspInit+0xec>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	4a2f      	ldr	r2, [pc, #188]	; (8000d68 <HAL_SPI_MspInit+0xec>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb0:	4b2d      	ldr	r3, [pc, #180]	; (8000d68 <HAL_SPI_MspInit+0xec>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	697b      	ldr	r3, [r7, #20]
    SPIx_CS_GPIO_CLK_ENABLE();
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	4b29      	ldr	r3, [pc, #164]	; (8000d68 <HAL_SPI_MspInit+0xec>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc4:	4a28      	ldr	r2, [pc, #160]	; (8000d68 <HAL_SPI_MspInit+0xec>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	6313      	str	r3, [r2, #48]	; 0x30
 8000ccc:	4b26      	ldr	r3, [pc, #152]	; (8000d68 <HAL_SPI_MspInit+0xec>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	693b      	ldr	r3, [r7, #16]

    /* Configure SPI SCK */
    GPIO_InitStruct.Pin = SPIx_SCK_PIN;
 8000cd8:	2320      	movs	r3, #32
 8000cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 8000ce8:	2305      	movs	r3, #5
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	481e      	ldr	r0, [pc, #120]	; (8000d6c <HAL_SPI_MspInit+0xf0>)
 8000cf4:	f000 fee8 	bl	8001ac8 <HAL_GPIO_Init>

    /* Configure SPI MISO and MOSI */
    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = SPIx_MISO_MOSI_AF;
 8000d04:	2305      	movs	r3, #5
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    //GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
    HAL_GPIO_Init(SPIx_MISO_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000d08:	f107 031c 	add.w	r3, r7, #28
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4817      	ldr	r0, [pc, #92]	; (8000d6c <HAL_SPI_MspInit+0xf0>)
 8000d10:	f000 feda 	bl	8001ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8000d14:	2340      	movs	r3, #64	; 0x40
 8000d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPIx_MISO_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000d1c:	f107 031c 	add.w	r3, r7, #28
 8000d20:	4619      	mov	r1, r3
 8000d22:	4812      	ldr	r0, [pc, #72]	; (8000d6c <HAL_SPI_MspInit+0xf0>)
 8000d24:	f000 fed0 	bl	8001ac8 <HAL_GPIO_Init>

    /* Configure SPI CS */
    GPIO_InitStruct.Pin = SPIx_CS_PIN;
 8000d28:	2310      	movs	r3, #16
 8000d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d30:	2301      	movs	r3, #1
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(SPIx_CS_GPIO_PORT, &GPIO_InitStruct);
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480b      	ldr	r0, [pc, #44]	; (8000d6c <HAL_SPI_MspInit+0xf0>)
 8000d40:	f000 fec2 	bl	8001ac8 <HAL_GPIO_Init>

    /*** Configure the SPI peripheral ***/
    /* Enable SPI clock */
    SPIx_CLK_ENABLE();
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <HAL_SPI_MspInit+0xec>)
 8000d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4c:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <HAL_SPI_MspInit+0xec>)
 8000d4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d52:	6453      	str	r3, [r2, #68]	; 0x44
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <HAL_SPI_MspInit+0xec>)
 8000d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
}
 8000d60:	bf00      	nop
 8000d62:	3730      	adds	r7, #48	; 0x30
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020000 	.word	0x40020000

08000d70 <mySPIx_Init>:

/**
  * @brief  Initializes SPI.
  */
static void mySPIx_Init()
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
    if(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET) {
 8000d74:	4818      	ldr	r0, [pc, #96]	; (8000dd8 <mySPIx_Init+0x68>)
 8000d76:	f002 fae7 	bl	8003348 <HAL_SPI_GetState>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d128      	bne.n	8000dd2 <mySPIx_Init+0x62>
        /* SPI Config */
        hspi1.Instance = SPIx;
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <mySPIx_Init+0x68>)
 8000d82:	4a16      	ldr	r2, [pc, #88]	; (8000ddc <mySPIx_Init+0x6c>)
 8000d84:	601a      	str	r2, [r3, #0]
            - SD card SPI interface max baudrate is 25MHz for write/read
        to feat these constraints SPI baudrate is set to:
            - For STM32F412ZG devices: 12,5 MHz maximum (PCLK2/SPI_BAUDRATEPRESCALER_8 = 100 MHz/8 = 12,5 MHz)
            - For STM32F446ZE/STM32F429ZI devices: 11,25 MHz maximum (PCLK2/SPI_BAUDRATEPRESCALER_8 = 90 MHz/8 = 11,25 MHz)
        */
        hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d86:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <mySPIx_Init+0x68>)
 8000d88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d8c:	605a      	str	r2, [r3, #4]
        hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d8e:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <mySPIx_Init+0x68>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
        hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d94:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <mySPIx_Init+0x68>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
        hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <mySPIx_Init+0x68>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
        hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000da0:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <mySPIx_Init+0x68>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	615a      	str	r2, [r3, #20]
        hspi1.Init.NSS = SPI_NSS_SOFT;
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <mySPIx_Init+0x68>)
 8000da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dac:	619a      	str	r2, [r3, #24]
        hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <mySPIx_Init+0x68>)
 8000db0:	2238      	movs	r2, #56	; 0x38
 8000db2:	61da      	str	r2, [r3, #28]
        hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <mySPIx_Init+0x68>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	621a      	str	r2, [r3, #32]
        hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <mySPIx_Init+0x68>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	625a      	str	r2, [r3, #36]	; 0x24
        hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <mySPIx_Init+0x68>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	629a      	str	r2, [r3, #40]	; 0x28
        hspi1.Init.CRCPolynomial = 10;
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <mySPIx_Init+0x68>)
 8000dc8:	220a      	movs	r2, #10
 8000dca:	62da      	str	r2, [r3, #44]	; 0x2c

        //HAL_SPI_MspInit(&hspi1);
        HAL_SPI_Init(&hspi1);
 8000dcc:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <mySPIx_Init+0x68>)
 8000dce:	f001 fd2f 	bl	8002830 <HAL_SPI_Init>
    }
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000054 	.word	0x20000054
 8000ddc:	40013000 	.word	0x40013000

08000de0 <myGPIO_Init>:

static void myGPIO_Init()
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStruct;

    /* GPIO Ports Clock Enable */
    nRF24_CE_GPIO_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <myGPIO_Init+0x9c>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a23      	ldr	r2, [pc, #140]	; (8000e7c <myGPIO_Init+0x9c>)
 8000df0:	f043 0308 	orr.w	r3, r3, #8
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <myGPIO_Init+0x9c>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0308 	and.w	r3, r3, #8
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
    nRF24_IRQ_GPIO_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <myGPIO_Init+0x9c>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a1c      	ldr	r2, [pc, #112]	; (8000e7c <myGPIO_Init+0x9c>)
 8000e0c:	f043 0308 	orr.w	r3, r3, #8
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <myGPIO_Init+0x9c>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0308 	and.w	r3, r3, #8
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]

    HAL_GPIO_WritePin(nRF24_CE_GPIO_PORT, nRF24_CE_PIN, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e24:	4816      	ldr	r0, [pc, #88]	; (8000e80 <myGPIO_Init+0xa0>)
 8000e26:	f000 fffb 	bl	8001e20 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = nRF24_CE_PIN;
 8000e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e30:	2301      	movs	r3, #1
 8000e32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(nRF24_CE_GPIO_PORT, &GPIO_InitStruct);
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	4619      	mov	r1, r3
 8000e42:	480f      	ldr	r0, [pc, #60]	; (8000e80 <myGPIO_Init+0xa0>)
 8000e44:	f000 fe40 	bl	8001ac8 <HAL_GPIO_Init>

    /* Configure IRQ GPIO pin */
    GPIO_InitStruct.Pin = nRF24_IRQ_PIN;
 8000e48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e4e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(nRF24_IRQ_GPIO_PORT, &GPIO_InitStruct);
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4808      	ldr	r0, [pc, #32]	; (8000e80 <myGPIO_Init+0xa0>)
 8000e60:	f000 fe32 	bl	8001ac8 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    /* PROBABLEMENTE ESTO ESTE MAL */
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 15);
 8000e64:	220f      	movs	r2, #15
 8000e66:	210f      	movs	r1, #15
 8000e68:	2028      	movs	r0, #40	; 0x28
 8000e6a:	f000 fdf6 	bl	8001a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e6e:	2028      	movs	r0, #40	; 0x28
 8000e70:	f000 fe0f 	bl	8001a92 <HAL_NVIC_EnableIRQ>
}
 8000e74:	bf00      	nop
 8000e76:	3720      	adds	r7, #32
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020c00 	.word	0x40020c00

08000e84 <nRF24_CheckPacketLostCount>:

static nRF24_Status_t nRF24_CheckPacketLostCount()
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
    uint8_t observe = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	71fb      	strb	r3, [r7, #7]
    uint8_t register_value = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	71bb      	strb	r3, [r7, #6]

    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | OBSERVE_TX, &observe));
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	2201      	movs	r2, #1
 8000e96:	4619      	mov	r1, r3
 8000e98:	2008      	movs	r0, #8
 8000e9a:	f7ff fdff 	bl	8000a9c <nRF24_SendCmd>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d007      	beq.n	8000eb4 <nRF24_CheckPacketLostCount+0x30>
 8000ea4:	1dfb      	adds	r3, r7, #7
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	2008      	movs	r0, #8
 8000eac:	f7ff fdf6 	bl	8000a9c <nRF24_SendCmd>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	e037      	b.n	8000f24 <nRF24_CheckPacketLostCount+0xa0>

    // PLOS_COUNT has reached its limit (0xF0)
    if ((observe & 0xF0) == 0xF0) {
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000eba:	2bf0      	cmp	r3, #240	; 0xf0
 8000ebc:	d131      	bne.n	8000f22 <nRF24_CheckPacketLostCount+0x9e>
        // Clear PLOS_CNT starting a transmission session
        CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | RF_CH, &register_value));
 8000ebe:	1dbb      	adds	r3, r7, #6
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	2005      	movs	r0, #5
 8000ec6:	f7ff fde9 	bl	8000a9c <nRF24_SendCmd>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d007      	beq.n	8000ee0 <nRF24_CheckPacketLostCount+0x5c>
 8000ed0:	1dbb      	adds	r3, r7, #6
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	2005      	movs	r0, #5
 8000ed8:	f7ff fde0 	bl	8000a9c <nRF24_SendCmd>
 8000edc:	4603      	mov	r3, r0
 8000ede:	e021      	b.n	8000f24 <nRF24_CheckPacketLostCount+0xa0>
        hnrf24->Init.RfChannel &= ~(0b10000000);
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <nRF24_CheckPacketLostCount+0xa8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	799a      	ldrb	r2, [r3, #6]
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <nRF24_CheckPacketLostCount+0xa8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	719a      	strb	r2, [r3, #6]
        register_value |= hnrf24->Init.RfChannel;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <nRF24_CheckPacketLostCount+0xa8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	799a      	ldrb	r2, [r3, #6]
 8000ef8:	79bb      	ldrb	r3, [r7, #6]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	71bb      	strb	r3, [r7, #6]
        CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RF_CH, &register_value));
 8000f00:	1dbb      	adds	r3, r7, #6
 8000f02:	2201      	movs	r2, #1
 8000f04:	4619      	mov	r1, r3
 8000f06:	2025      	movs	r0, #37	; 0x25
 8000f08:	f7ff fdc8 	bl	8000a9c <nRF24_SendCmd>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d007      	beq.n	8000f22 <nRF24_CheckPacketLostCount+0x9e>
 8000f12:	1dbb      	adds	r3, r7, #6
 8000f14:	2201      	movs	r2, #1
 8000f16:	4619      	mov	r1, r3
 8000f18:	2025      	movs	r0, #37	; 0x25
 8000f1a:	f7ff fdbf 	bl	8000a9c <nRF24_SendCmd>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	e000      	b.n	8000f24 <nRF24_CheckPacketLostCount+0xa0>
    }

    return NRF24_OK;
 8000f22:	2300      	movs	r3, #0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200000ac 	.word	0x200000ac

08000f30 <nRF24_Init>:

/* Public functions ----------------------------------------------------------*/
nRF24_Status_t nRF24_Init(nRF24_HandleTypeDef * pHnrf24)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
    uint8_t register_value = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	73fb      	strb	r3, [r7, #15]

    hnrf24 = pHnrf24;
 8000f3c:	4aa8      	ldr	r2, [pc, #672]	; (80011e0 <nRF24_Init+0x2b0>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]

    myGPIO_Init();
 8000f42:	f7ff ff4d 	bl	8000de0 <myGPIO_Init>
    mySPIx_Init();
 8000f46:	f7ff ff13 	bl	8000d70 <mySPIx_Init>

    HAL_Delay(10);
 8000f4a:	200a      	movs	r0, #10
 8000f4c:	f000 fc86 	bl	800185c <HAL_Delay>
    CHECK_INTERNAL(nRF24_Reset());
 8000f50:	f7ff faca 	bl	80004e8 <nRF24_Reset>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <nRF24_Init+0x32>
 8000f5a:	f7ff fac5 	bl	80004e8 <nRF24_Reset>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	e1e3      	b.n	800132a <nRF24_Init+0x3fa>
    HAL_Delay(10);
 8000f62:	200a      	movs	r0, #10
 8000f64:	f000 fc7a 	bl	800185c <HAL_Delay>
    CHECK_INTERNAL(nRF24_UpdateMode(POWER_DOWN));
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f7ff fcab 	bl	80008c4 <nRF24_UpdateMode>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d004      	beq.n	8000f7e <nRF24_Init+0x4e>
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff fca5 	bl	80008c4 <nRF24_UpdateMode>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	e1d5      	b.n	800132a <nRF24_Init+0x3fa>
    HAL_Delay(10);
 8000f7e:	200a      	movs	r0, #10
 8000f80:	f000 fc6c 	bl	800185c <HAL_Delay>
    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | CONFIG, &register_value));
 8000f84:	f107 030f 	add.w	r3, r7, #15
 8000f88:	2201      	movs	r2, #1
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f7ff fd85 	bl	8000a9c <nRF24_SendCmd>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d008      	beq.n	8000faa <nRF24_Init+0x7a>
 8000f98:	f107 030f 	add.w	r3, r7, #15
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f7ff fd7b 	bl	8000a9c <nRF24_SendCmd>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	e1bf      	b.n	800132a <nRF24_Init+0x3fa>
    // Responde 0x08
    //register_value |= hnrf24->Init.CrcEnable ? EN_CRC : 0x00;
    //register_value |= hnrf24->Init.CrcEncodingScheme ? CRCO : 0x00;
    //register_value |= hnrf24->Init.PrimRx ? PRIM_RX : ~PRIM_RX;

    register_value &= ~(EN_CRC | CRCO); // Limpiar los bits EN_CRC y CRCO en register_value
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	f023 030c 	bic.w	r3, r3, #12
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	73fb      	strb	r3, [r7, #15]
    if (hnrf24->Init.CrcEnable) {
 8000fb4:	4b8a      	ldr	r3, [pc, #552]	; (80011e0 <nRF24_Init+0x2b0>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d004      	beq.n	8000fc8 <nRF24_Init+0x98>
        register_value |= EN_CRC; // Establecer el bit EN_CRC si CrcEnable es verdadero
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	f043 0308 	orr.w	r3, r3, #8
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	73fb      	strb	r3, [r7, #15]
    }
    if (hnrf24->Init.CrcEncodingScheme == CRC_ENCODING_2_BYTES) {
 8000fc8:	4b85      	ldr	r3, [pc, #532]	; (80011e0 <nRF24_Init+0x2b0>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	785b      	ldrb	r3, [r3, #1]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d104      	bne.n	8000fdc <nRF24_Init+0xac>
        register_value |= CRCO; // Establecer el bit CRCO si CrcEncodingScheme es CRC_ENCODING_2_BYTES
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	73fb      	strb	r3, [r7, #15]
    }
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | CONFIG, &register_value));
 8000fdc:	f107 030f 	add.w	r3, r7, #15
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	2020      	movs	r0, #32
 8000fe6:	f7ff fd59 	bl	8000a9c <nRF24_SendCmd>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d008      	beq.n	8001002 <nRF24_Init+0xd2>
 8000ff0:	f107 030f 	add.w	r3, r7, #15
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	2020      	movs	r0, #32
 8000ffa:	f7ff fd4f 	bl	8000a9c <nRF24_SendCmd>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e193      	b.n	800132a <nRF24_Init+0x3fa>

    nRF24_SetFeature(EN_ACK_PAY, hnrf24->Init.AutoAckEnable);
 8001002:	4b77      	ldr	r3, [pc, #476]	; (80011e0 <nRF24_Init+0x2b0>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	789b      	ldrb	r3, [r3, #2]
 8001008:	2b00      	cmp	r3, #0
 800100a:	bf14      	ite	ne
 800100c:	2301      	movne	r3, #1
 800100e:	2300      	moveq	r3, #0
 8001010:	b2db      	uxtb	r3, r3
 8001012:	4619      	mov	r1, r3
 8001014:	2002      	movs	r0, #2
 8001016:	f000 f98f 	bl	8001338 <nRF24_SetFeature>
    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | EN_AA, &register_value));
 800101a:	f107 030f 	add.w	r3, r7, #15
 800101e:	2201      	movs	r2, #1
 8001020:	4619      	mov	r1, r3
 8001022:	2001      	movs	r0, #1
 8001024:	f7ff fd3a 	bl	8000a9c <nRF24_SendCmd>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d008      	beq.n	8001040 <nRF24_Init+0x110>
 800102e:	f107 030f 	add.w	r3, r7, #15
 8001032:	2201      	movs	r2, #1
 8001034:	4619      	mov	r1, r3
 8001036:	2001      	movs	r0, #1
 8001038:	f7ff fd30 	bl	8000a9c <nRF24_SendCmd>
 800103c:	4603      	mov	r3, r0
 800103e:	e174      	b.n	800132a <nRF24_Init+0x3fa>
    // Protection for AutoAckDataPipes
    hnrf24->Init.AutoAckDataPipes &= ~(0b11000000);
 8001040:	4b67      	ldr	r3, [pc, #412]	; (80011e0 <nRF24_Init+0x2b0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	78da      	ldrb	r2, [r3, #3]
 8001046:	4b66      	ldr	r3, [pc, #408]	; (80011e0 <nRF24_Init+0x2b0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	70da      	strb	r2, [r3, #3]
    register_value |= hnrf24->Init.AutoAckDataPipes;
 8001052:	4b63      	ldr	r3, [pc, #396]	; (80011e0 <nRF24_Init+0x2b0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	78da      	ldrb	r2, [r3, #3]
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	4313      	orrs	r3, r2
 800105c:	b2db      	uxtb	r3, r3
 800105e:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | EN_AA, &register_value));
 8001060:	f107 030f 	add.w	r3, r7, #15
 8001064:	2201      	movs	r2, #1
 8001066:	4619      	mov	r1, r3
 8001068:	2021      	movs	r0, #33	; 0x21
 800106a:	f7ff fd17 	bl	8000a9c <nRF24_SendCmd>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d008      	beq.n	8001086 <nRF24_Init+0x156>
 8001074:	f107 030f 	add.w	r3, r7, #15
 8001078:	2201      	movs	r2, #1
 800107a:	4619      	mov	r1, r3
 800107c:	2021      	movs	r0, #33	; 0x21
 800107e:	f7ff fd0d 	bl	8000a9c <nRF24_SendCmd>
 8001082:	4603      	mov	r3, r0
 8001084:	e151      	b.n	800132a <nRF24_Init+0x3fa>

    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | EN_RXADDR, &register_value));
 8001086:	f107 030f 	add.w	r3, r7, #15
 800108a:	2201      	movs	r2, #1
 800108c:	4619      	mov	r1, r3
 800108e:	2002      	movs	r0, #2
 8001090:	f7ff fd04 	bl	8000a9c <nRF24_SendCmd>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d008      	beq.n	80010ac <nRF24_Init+0x17c>
 800109a:	f107 030f 	add.w	r3, r7, #15
 800109e:	2201      	movs	r2, #1
 80010a0:	4619      	mov	r1, r3
 80010a2:	2002      	movs	r0, #2
 80010a4:	f7ff fcfa 	bl	8000a9c <nRF24_SendCmd>
 80010a8:	4603      	mov	r3, r0
 80010aa:	e13e      	b.n	800132a <nRF24_Init+0x3fa>
    // Protection for RxDataPipes
    hnrf24->Init.RxDataPipes &= ~(0b11000000);
 80010ac:	4b4c      	ldr	r3, [pc, #304]	; (80011e0 <nRF24_Init+0x2b0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	791a      	ldrb	r2, [r3, #4]
 80010b2:	4b4b      	ldr	r3, [pc, #300]	; (80011e0 <nRF24_Init+0x2b0>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	711a      	strb	r2, [r3, #4]
    register_value &= hnrf24->Init.RxDataPipes;
 80010be:	4b48      	ldr	r3, [pc, #288]	; (80011e0 <nRF24_Init+0x2b0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	791a      	ldrb	r2, [r3, #4]
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	4013      	ands	r3, r2
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | EN_RXADDR, &register_value));
 80010cc:	f107 030f 	add.w	r3, r7, #15
 80010d0:	2201      	movs	r2, #1
 80010d2:	4619      	mov	r1, r3
 80010d4:	2022      	movs	r0, #34	; 0x22
 80010d6:	f7ff fce1 	bl	8000a9c <nRF24_SendCmd>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d008      	beq.n	80010f2 <nRF24_Init+0x1c2>
 80010e0:	f107 030f 	add.w	r3, r7, #15
 80010e4:	2201      	movs	r2, #1
 80010e6:	4619      	mov	r1, r3
 80010e8:	2022      	movs	r0, #34	; 0x22
 80010ea:	f7ff fcd7 	bl	8000a9c <nRF24_SendCmd>
 80010ee:	4603      	mov	r3, r0
 80010f0:	e11b      	b.n	800132a <nRF24_Init+0x3fa>

    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | SETUP_AW, &register_value));
 80010f2:	f107 030f 	add.w	r3, r7, #15
 80010f6:	2201      	movs	r2, #1
 80010f8:	4619      	mov	r1, r3
 80010fa:	2003      	movs	r0, #3
 80010fc:	f7ff fcce 	bl	8000a9c <nRF24_SendCmd>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d008      	beq.n	8001118 <nRF24_Init+0x1e8>
 8001106:	f107 030f 	add.w	r3, r7, #15
 800110a:	2201      	movs	r2, #1
 800110c:	4619      	mov	r1, r3
 800110e:	2003      	movs	r0, #3
 8001110:	f7ff fcc4 	bl	8000a9c <nRF24_SendCmd>
 8001114:	4603      	mov	r3, r0
 8001116:	e108      	b.n	800132a <nRF24_Init+0x3fa>
    register_value |= hnrf24->Init.Aw;
 8001118:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <nRF24_Init+0x2b0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	795a      	ldrb	r2, [r3, #5]
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	4313      	orrs	r3, r2
 8001122:	b2db      	uxtb	r3, r3
 8001124:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | SETUP_AW, &register_value));
 8001126:	f107 030f 	add.w	r3, r7, #15
 800112a:	2201      	movs	r2, #1
 800112c:	4619      	mov	r1, r3
 800112e:	2023      	movs	r0, #35	; 0x23
 8001130:	f7ff fcb4 	bl	8000a9c <nRF24_SendCmd>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d008      	beq.n	800114c <nRF24_Init+0x21c>
 800113a:	f107 030f 	add.w	r3, r7, #15
 800113e:	2201      	movs	r2, #1
 8001140:	4619      	mov	r1, r3
 8001142:	2023      	movs	r0, #35	; 0x23
 8001144:	f7ff fcaa 	bl	8000a9c <nRF24_SendCmd>
 8001148:	4603      	mov	r3, r0
 800114a:	e0ee      	b.n	800132a <nRF24_Init+0x3fa>

    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | RF_CH, &register_value));
 800114c:	f107 030f 	add.w	r3, r7, #15
 8001150:	2201      	movs	r2, #1
 8001152:	4619      	mov	r1, r3
 8001154:	2005      	movs	r0, #5
 8001156:	f7ff fca1 	bl	8000a9c <nRF24_SendCmd>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d008      	beq.n	8001172 <nRF24_Init+0x242>
 8001160:	f107 030f 	add.w	r3, r7, #15
 8001164:	2201      	movs	r2, #1
 8001166:	4619      	mov	r1, r3
 8001168:	2005      	movs	r0, #5
 800116a:	f7ff fc97 	bl	8000a9c <nRF24_SendCmd>
 800116e:	4603      	mov	r3, r0
 8001170:	e0db      	b.n	800132a <nRF24_Init+0x3fa>
    hnrf24->Init.RfChannel &= ~(0b10000000);
 8001172:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <nRF24_Init+0x2b0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	799a      	ldrb	r2, [r3, #6]
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <nRF24_Init+0x2b0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	719a      	strb	r2, [r3, #6]
    register_value |= hnrf24->Init.RfChannel;
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <nRF24_Init+0x2b0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	799a      	ldrb	r2, [r3, #6]
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	4313      	orrs	r3, r2
 800118e:	b2db      	uxtb	r3, r3
 8001190:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RF_CH, &register_value));
 8001192:	f107 030f 	add.w	r3, r7, #15
 8001196:	2201      	movs	r2, #1
 8001198:	4619      	mov	r1, r3
 800119a:	2025      	movs	r0, #37	; 0x25
 800119c:	f7ff fc7e 	bl	8000a9c <nRF24_SendCmd>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d008      	beq.n	80011b8 <nRF24_Init+0x288>
 80011a6:	f107 030f 	add.w	r3, r7, #15
 80011aa:	2201      	movs	r2, #1
 80011ac:	4619      	mov	r1, r3
 80011ae:	2025      	movs	r0, #37	; 0x25
 80011b0:	f7ff fc74 	bl	8000a9c <nRF24_SendCmd>
 80011b4:	4603      	mov	r3, r0
 80011b6:	e0b8      	b.n	800132a <nRF24_Init+0x3fa>

    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | RF_SETUP, &register_value));
 80011b8:	f107 030f 	add.w	r3, r7, #15
 80011bc:	2201      	movs	r2, #1
 80011be:	4619      	mov	r1, r3
 80011c0:	2006      	movs	r0, #6
 80011c2:	f7ff fc6b 	bl	8000a9c <nRF24_SendCmd>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d00b      	beq.n	80011e4 <nRF24_Init+0x2b4>
 80011cc:	f107 030f 	add.w	r3, r7, #15
 80011d0:	2201      	movs	r2, #1
 80011d2:	4619      	mov	r1, r3
 80011d4:	2006      	movs	r0, #6
 80011d6:	f7ff fc61 	bl	8000a9c <nRF24_SendCmd>
 80011da:	4603      	mov	r3, r0
 80011dc:	e0a5      	b.n	800132a <nRF24_Init+0x3fa>
 80011de:	bf00      	nop
 80011e0:	200000ac 	.word	0x200000ac
    register_value &= ~(CONT_WAVE); // Limpiar los bits CONT_WAVE en register_value
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	73fb      	strb	r3, [r7, #15]
    if (hnrf24->Init.ContWave) {
 80011ee:	4b51      	ldr	r3, [pc, #324]	; (8001334 <nRF24_Init+0x404>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	79db      	ldrb	r3, [r3, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d004      	beq.n	8001202 <nRF24_Init+0x2d2>
        register_value |= CONT_WAVE; // Establecer el bit CONT_WAVE si ContWave es verdadero
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	73fb      	strb	r3, [r7, #15]
    }
    //register_value |= hnrf24->Init.ContWave ? CONT_WAVE : ~CONT_WAVE;
    register_value &= ~(RF_DR_LOW | RF_DR_HIGH);
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001208:	b2db      	uxtb	r3, r3
 800120a:	73fb      	strb	r3, [r7, #15]
    register_value |= hnrf24->Init.RfDataRate;
 800120c:	4b49      	ldr	r3, [pc, #292]	; (8001334 <nRF24_Init+0x404>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	7a5a      	ldrb	r2, [r3, #9]
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	4313      	orrs	r3, r2
 8001216:	b2db      	uxtb	r3, r3
 8001218:	73fb      	strb	r3, [r7, #15]
    register_value &= ~(RF_PWR_2 | RF_PWR_1);
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	f023 0306 	bic.w	r3, r3, #6
 8001220:	b2db      	uxtb	r3, r3
 8001222:	73fb      	strb	r3, [r7, #15]
    register_value |= hnrf24->Init.RfPower;
 8001224:	4b43      	ldr	r3, [pc, #268]	; (8001334 <nRF24_Init+0x404>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	7a1a      	ldrb	r2, [r3, #8]
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	4313      	orrs	r3, r2
 800122e:	b2db      	uxtb	r3, r3
 8001230:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | RF_SETUP, &register_value));
 8001232:	f107 030f 	add.w	r3, r7, #15
 8001236:	2201      	movs	r2, #1
 8001238:	4619      	mov	r1, r3
 800123a:	2026      	movs	r0, #38	; 0x26
 800123c:	f7ff fc2e 	bl	8000a9c <nRF24_SendCmd>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d008      	beq.n	8001258 <nRF24_Init+0x328>
 8001246:	f107 030f 	add.w	r3, r7, #15
 800124a:	2201      	movs	r2, #1
 800124c:	4619      	mov	r1, r3
 800124e:	2026      	movs	r0, #38	; 0x26
 8001250:	f7ff fc24 	bl	8000a9c <nRF24_SendCmd>
 8001254:	4603      	mov	r3, r0
 8001256:	e068      	b.n	800132a <nRF24_Init+0x3fa>

    nRF24_SetFeature(EN_DPL, hnrf24->Init.DplEnable);
 8001258:	4b36      	ldr	r3, [pc, #216]	; (8001334 <nRF24_Init+0x404>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	7a9b      	ldrb	r3, [r3, #10]
 800125e:	2b00      	cmp	r3, #0
 8001260:	bf14      	ite	ne
 8001262:	2301      	movne	r3, #1
 8001264:	2300      	moveq	r3, #0
 8001266:	b2db      	uxtb	r3, r3
 8001268:	4619      	mov	r1, r3
 800126a:	2004      	movs	r0, #4
 800126c:	f000 f864 	bl	8001338 <nRF24_SetFeature>
    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | DYNPD, &register_value));
 8001270:	f107 030f 	add.w	r3, r7, #15
 8001274:	2201      	movs	r2, #1
 8001276:	4619      	mov	r1, r3
 8001278:	201c      	movs	r0, #28
 800127a:	f7ff fc0f 	bl	8000a9c <nRF24_SendCmd>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d008      	beq.n	8001296 <nRF24_Init+0x366>
 8001284:	f107 030f 	add.w	r3, r7, #15
 8001288:	2201      	movs	r2, #1
 800128a:	4619      	mov	r1, r3
 800128c:	201c      	movs	r0, #28
 800128e:	f7ff fc05 	bl	8000a9c <nRF24_SendCmd>
 8001292:	4603      	mov	r3, r0
 8001294:	e049      	b.n	800132a <nRF24_Init+0x3fa>
    //Protection for DplEnableDataPipes
    hnrf24->Init.DplEnableDataPipes &= ~(0b11000000);
 8001296:	4b27      	ldr	r3, [pc, #156]	; (8001334 <nRF24_Init+0x404>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	7ada      	ldrb	r2, [r3, #11]
 800129c:	4b25      	ldr	r3, [pc, #148]	; (8001334 <nRF24_Init+0x404>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	72da      	strb	r2, [r3, #11]
    register_value |= hnrf24->Init.DplEnableDataPipes;
 80012a8:	4b22      	ldr	r3, [pc, #136]	; (8001334 <nRF24_Init+0x404>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	7ada      	ldrb	r2, [r3, #11]
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	73fb      	strb	r3, [r7, #15]
    CHECK_INTERNAL(nRF24_SendWriteCmd(W_REGISTER | DYNPD, &register_value));
 80012b6:	f107 030f 	add.w	r3, r7, #15
 80012ba:	2201      	movs	r2, #1
 80012bc:	4619      	mov	r1, r3
 80012be:	203c      	movs	r0, #60	; 0x3c
 80012c0:	f7ff fbec 	bl	8000a9c <nRF24_SendCmd>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d008      	beq.n	80012dc <nRF24_Init+0x3ac>
 80012ca:	f107 030f 	add.w	r3, r7, #15
 80012ce:	2201      	movs	r2, #1
 80012d0:	4619      	mov	r1, r3
 80012d2:	203c      	movs	r0, #60	; 0x3c
 80012d4:	f7ff fbe2 	bl	8000a9c <nRF24_SendCmd>
 80012d8:	4603      	mov	r3, r0
 80012da:	e026      	b.n	800132a <nRF24_Init+0x3fa>

    nRF24_SetFeature(EN_DYN_ACK, hnrf24->Init.DynAckEnable);
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <nRF24_Init+0x404>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	7b1b      	ldrb	r3, [r3, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	bf14      	ite	ne
 80012e6:	2301      	movne	r3, #1
 80012e8:	2300      	moveq	r3, #0
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	4619      	mov	r1, r3
 80012ee:	2001      	movs	r0, #1
 80012f0:	f000 f822 	bl	8001338 <nRF24_SetFeature>
    HAL_Delay(10);
 80012f4:	200a      	movs	r0, #10
 80012f6:	f000 fab1 	bl	800185c <HAL_Delay>
    nRF24_UpdateMode(STANDBYI);
 80012fa:	2001      	movs	r0, #1
 80012fc:	f7ff fae2 	bl	80008c4 <nRF24_UpdateMode>
    HAL_Delay(10);
 8001300:	200a      	movs	r0, #10
 8001302:	f000 faab 	bl	800185c <HAL_Delay>
    if (hnrf24->DeviceMode == TRANSMITTER_MODE) {
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <nRF24_Init+0x404>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	7b9b      	ldrb	r3, [r3, #14]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d103      	bne.n	8001318 <nRF24_Init+0x3e8>
        nRF24_UpdateMode(PTX);
 8001310:	2004      	movs	r0, #4
 8001312:	f7ff fad7 	bl	80008c4 <nRF24_UpdateMode>
 8001316:	e007      	b.n	8001328 <nRF24_Init+0x3f8>
    } else if (hnrf24->DeviceMode == RECEIVER_MODE) {
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <nRF24_Init+0x404>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	7b9b      	ldrb	r3, [r3, #14]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d102      	bne.n	8001328 <nRF24_Init+0x3f8>
        nRF24_UpdateMode(PRX);
 8001322:	2003      	movs	r0, #3
 8001324:	f7ff face 	bl	80008c4 <nRF24_UpdateMode>
    }

    return NRF24_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200000ac 	.word	0x200000ac

08001338 <nRF24_SetFeature>:

    return NRF24_OK;
}

nRF24_Status_t nRF24_SetFeature(const uint8_t bit, const bool_t enable)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	460a      	mov	r2, r1
 8001342:	71fb      	strb	r3, [r7, #7]
 8001344:	4613      	mov	r3, r2
 8001346:	71bb      	strb	r3, [r7, #6]
    if (enable) {
 8001348:	79bb      	ldrb	r3, [r7, #6]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00e      	beq.n	800136c <nRF24_SetFeature+0x34>
        CHECK_INTERNAL(nRF24_SetRegister(FEATURE, bit));
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	4619      	mov	r1, r3
 8001352:	201d      	movs	r0, #29
 8001354:	f7ff fc0c 	bl	8000b70 <nRF24_SetRegister>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d015      	beq.n	800138a <nRF24_SetFeature+0x52>
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	4619      	mov	r1, r3
 8001362:	201d      	movs	r0, #29
 8001364:	f7ff fc04 	bl	8000b70 <nRF24_SetRegister>
 8001368:	4603      	mov	r3, r0
 800136a:	e00f      	b.n	800138c <nRF24_SetFeature+0x54>
    } else {
        CHECK_INTERNAL(nRF24_ResetRegister(FEATURE, bit));
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	4619      	mov	r1, r3
 8001370:	201d      	movs	r0, #29
 8001372:	f7ff fc3d 	bl	8000bf0 <nRF24_ResetRegister>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d006      	beq.n	800138a <nRF24_SetFeature+0x52>
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	4619      	mov	r1, r3
 8001380:	201d      	movs	r0, #29
 8001382:	f7ff fc35 	bl	8000bf0 <nRF24_ResetRegister>
 8001386:	4603      	mov	r3, r0
 8001388:	e000      	b.n	800138c <nRF24_SetFeature+0x54>
    }

    return NRF24_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <nRF24_IsTxFull>:

    return NRF24_OK;
}

bool_t nRF24_IsTxFull()
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
    uint8_t register_fifo_status = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	71fb      	strb	r3, [r7, #7]

    if (nRF24_SendReadCmd(R_REGISTER | FIFO_STATUS, &register_fifo_status) != NRF24_OK) {
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	2201      	movs	r2, #1
 80013a2:	4619      	mov	r1, r3
 80013a4:	2017      	movs	r0, #23
 80013a6:	f7ff fb79 	bl	8000a9c <nRF24_SendCmd>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <nRF24_IsTxFull+0x20>
        return false;
 80013b0:	2300      	movs	r3, #0
 80013b2:	e007      	b.n	80013c4 <nRF24_IsTxFull+0x30>
    }

    if (register_fifo_status & TX_FULL) {
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	f003 0320 	and.w	r3, r3, #32
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <nRF24_IsTxFull+0x2e>
        return true;
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <nRF24_IsTxFull+0x30>
    }

    return false;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <nRF24_IsRxFull>:

    return false;
}

bool_t nRF24_IsRxFull()
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
    uint8_t register_fifo_status = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	71fb      	strb	r3, [r7, #7]

    if (nRF24_SendReadCmd(R_REGISTER | FIFO_STATUS, &register_fifo_status) != NRF24_OK) {
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	2201      	movs	r2, #1
 80013da:	4619      	mov	r1, r3
 80013dc:	2017      	movs	r0, #23
 80013de:	f7ff fb5d 	bl	8000a9c <nRF24_SendCmd>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <nRF24_IsRxFull+0x20>
        return false;
 80013e8:	2300      	movs	r3, #0
 80013ea:	e007      	b.n	80013fc <nRF24_IsRxFull+0x30>
    }

    if (register_fifo_status & RX_FULL) {
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <nRF24_IsRxFull+0x2e>
        return true;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <nRF24_IsRxFull+0x30>
    }

    return false;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <nRF24_GetStatus>:

nRF24_Status_t nRF24_GetStatus(uint8_t *status)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
    CHECK_NULL(status);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <nRF24_GetStatus+0x12>
 8001412:	2301      	movs	r3, #1
 8001414:	e00f      	b.n	8001436 <nRF24_GetStatus+0x32>

    CHECK_INTERNAL(nRF24_SendReadCmd(R_REGISTER | STATUS, status));
 8001416:	2201      	movs	r2, #1
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	2007      	movs	r0, #7
 800141c:	f7ff fb3e 	bl	8000a9c <nRF24_SendCmd>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d006      	beq.n	8001434 <nRF24_GetStatus+0x30>
 8001426:	2201      	movs	r2, #1
 8001428:	6879      	ldr	r1, [r7, #4]
 800142a:	2007      	movs	r0, #7
 800142c:	f7ff fb36 	bl	8000a9c <nRF24_SendCmd>
 8001430:	4603      	mov	r3, r0
 8001432:	e000      	b.n	8001436 <nRF24_GetStatus+0x32>
    return NRF24_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_GPIO_EXTI_Callback>:
    }
    return NRF24_OK;
}

void HAL_GPIO_EXTI_Callback(uint16_t gpio)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08c      	sub	sp, #48	; 0x30
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	80fb      	strh	r3, [r7, #6]
    uint8_t status = 0, event_type = 0, width = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001450:	2300      	movs	r3, #0
 8001452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001456:	2300      	movs	r3, #0
 8001458:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint16_t data_src = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint8_t buf[32];

    memset(buf, 0, sizeof(buf));
 8001460:	f107 0308 	add.w	r3, r7, #8
 8001464:	2220      	movs	r2, #32
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f002 f9ac 	bl	80037c6 <memset>
    if (gpio == nRF24_IRQ_PIN) {
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001474:	f040 8084 	bne.w	8001580 <HAL_GPIO_EXTI_Callback+0x140>
        nRF24_GetStatus(&status);
 8001478:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ffc1 	bl	8001404 <nRF24_GetStatus>
        data_src = (status & 0x0E) >> 1;
 8001482:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001486:	105b      	asrs	r3, r3, #1
 8001488:	b29b      	uxth	r3, r3
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	85bb      	strh	r3, [r7, #44]	; 0x2c
        if ((status & 0x40) >> EVENT_RX_DR) {  // RX_DR
 8001490:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001498:	2b00      	cmp	r3, #0
 800149a:	d03f      	beq.n	800151c <HAL_GPIO_EXTI_Callback+0xdc>
            event_type = EVENT_RX_DR;
 800149c:	2306      	movs	r3, #6
 800149e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            if (nRF24_SendReadRxPlWidthCmd(&width) == NRF24_OK) {
 80014a2:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80014a6:	2201      	movs	r2, #1
 80014a8:	4619      	mov	r1, r3
 80014aa:	2060      	movs	r0, #96	; 0x60
 80014ac:	f7ff faf6 	bl	8000a9c <nRF24_SendCmd>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d132      	bne.n	800151c <HAL_GPIO_EXTI_Callback+0xdc>
                if (width > 32) {
 80014b6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80014ba:	2b20      	cmp	r3, #32
 80014bc:	d919      	bls.n	80014f2 <HAL_GPIO_EXTI_Callback+0xb2>
                    nRF24_UpdateMode(STANDBYI);
 80014be:	2001      	movs	r0, #1
 80014c0:	f7ff fa00 	bl	80008c4 <nRF24_UpdateMode>
                    nRF24_SendFlushRx();
 80014c4:	2201      	movs	r2, #1
 80014c6:	2100      	movs	r1, #0
 80014c8:	20e2      	movs	r0, #226	; 0xe2
 80014ca:	f7ff fae7 	bl	8000a9c <nRF24_SendCmd>
                    if (hnrf24->DeviceMode == TRANSMITTER_MODE) {
 80014ce:	4b34      	ldr	r3, [pc, #208]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x160>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	7b9b      	ldrb	r3, [r3, #14]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d103      	bne.n	80014e0 <HAL_GPIO_EXTI_Callback+0xa0>
                        nRF24_UpdateMode(PTX);
 80014d8:	2004      	movs	r0, #4
 80014da:	f7ff f9f3 	bl	80008c4 <nRF24_UpdateMode>
 80014de:	e019      	b.n	8001514 <HAL_GPIO_EXTI_Callback+0xd4>
                    } else if (hnrf24->DeviceMode == RECEIVER_MODE) {
 80014e0:	4b2f      	ldr	r3, [pc, #188]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x160>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	7b9b      	ldrb	r3, [r3, #14]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d114      	bne.n	8001514 <HAL_GPIO_EXTI_Callback+0xd4>
                        nRF24_UpdateMode(PRX);
 80014ea:	2003      	movs	r0, #3
 80014ec:	f7ff f9ea 	bl	80008c4 <nRF24_UpdateMode>
 80014f0:	e010      	b.n	8001514 <HAL_GPIO_EXTI_Callback+0xd4>
                    }
                }
                else {
                    nRF24_SendReadRxPlCmd(buf, width);
 80014f2:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	4619      	mov	r1, r3
 80014fc:	2061      	movs	r0, #97	; 0x61
 80014fe:	f7ff facd 	bl	8000a9c <nRF24_SendCmd>
                    nRF24_IRQ_Callback(event_type, data_src, buf, width);
 8001502:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001506:	f107 0208 	add.w	r2, r7, #8
 800150a:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800150c:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 8001510:	f002 f858 	bl	80035c4 <nRF24_IRQ_Callback>
                }
                nRF24_SetRegister(STATUS, RX_DR);
 8001514:	2140      	movs	r1, #64	; 0x40
 8001516:	2007      	movs	r0, #7
 8001518:	f7ff fb2a 	bl	8000b70 <nRF24_SetRegister>
            }
        }

        if ((status & 0x20) >> EVENT_TX_DS) {  // TX_DS
 800151c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001520:	f003 0320 	and.w	r3, r3, #32
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00e      	beq.n	8001546 <HAL_GPIO_EXTI_Callback+0x106>
            event_type = EVENT_TX_DS;
 8001528:	2305      	movs	r3, #5
 800152a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            nRF24_IRQ_Callback(event_type, data_src, buf, 0);
 800152e:	f107 0208 	add.w	r2, r7, #8
 8001532:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8001534:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 8001538:	2300      	movs	r3, #0
 800153a:	f002 f843 	bl	80035c4 <nRF24_IRQ_Callback>
            nRF24_SetRegister(STATUS, TX_DS);
 800153e:	2120      	movs	r1, #32
 8001540:	2007      	movs	r0, #7
 8001542:	f7ff fb15 	bl	8000b70 <nRF24_SetRegister>
        }

        if ((status & 0x10) >> EVENT_MAX_RT) {  // MAX_RT
 8001546:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800154a:	f003 0310 	and.w	r3, r3, #16
 800154e:	2b00      	cmp	r3, #0
 8001550:	d022      	beq.n	8001598 <HAL_GPIO_EXTI_Callback+0x158>
            event_type = EVENT_MAX_RT;
 8001552:	2304      	movs	r3, #4
 8001554:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            nRF24_IRQ_Callback(event_type, data_src, buf, 0);
 8001558:	f107 0208 	add.w	r2, r7, #8
 800155c:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800155e:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 8001562:	2300      	movs	r3, #0
 8001564:	f002 f82e 	bl	80035c4 <nRF24_IRQ_Callback>
            nRF24_SetRegister(STATUS, MAX_RT);
 8001568:	2110      	movs	r1, #16
 800156a:	2007      	movs	r0, #7
 800156c:	f7ff fb00 	bl	8000b70 <nRF24_SetRegister>
            nRF24_SendFlushTx();
 8001570:	2201      	movs	r2, #1
 8001572:	2100      	movs	r1, #0
 8001574:	20e1      	movs	r0, #225	; 0xe1
 8001576:	f7ff fa91 	bl	8000a9c <nRF24_SendCmd>
            nRF24_CheckPacketLostCount();
 800157a:	f7ff fc83 	bl	8000e84 <nRF24_CheckPacketLostCount>

    } else {
        event_type = EVENT_GPIO_IRQ;  // STM32 gpio irq except nRF24L01 IRQ
        nRF24_IRQ_Callback(event_type, gpio, buf, width);
    }
}
 800157e:	e00b      	b.n	8001598 <HAL_GPIO_EXTI_Callback+0x158>
        event_type = EVENT_GPIO_IRQ;  // STM32 gpio irq except nRF24L01 IRQ
 8001580:	2307      	movs	r3, #7
 8001582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        nRF24_IRQ_Callback(event_type, gpio, buf, width);
 8001586:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800158a:	f107 0208 	add.w	r2, r7, #8
 800158e:	88f9      	ldrh	r1, [r7, #6]
 8001590:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 8001594:	f002 f816 	bl	80035c4 <nRF24_IRQ_Callback>
}
 8001598:	bf00      	nop
 800159a:	3730      	adds	r7, #48	; 0x30
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	200000ac 	.word	0x200000ac

080015a4 <EXTI15_10_IRQHandler>:
            break;
    }
}

void EXTI15_10_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nRF24_IRQ_PIN);
 80015a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015ac:	f000 fc6c 	bl	8001e88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d10e      	bne.n	80015e2 <BSP_LED_Init+0x2e>
 80015c4:	2300      	movs	r3, #0
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <BSP_LED_Init+0x94>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	4a1e      	ldr	r2, [pc, #120]	; (8001648 <BSP_LED_Init+0x94>)
 80015ce:	f043 0302 	orr.w	r3, r3, #2
 80015d2:	6313      	str	r3, [r2, #48]	; 0x30
 80015d4:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <BSP_LED_Init+0x94>)
 80015d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	e00d      	b.n	80015fe <BSP_LED_Init+0x4a>
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <BSP_LED_Init+0x94>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a17      	ldr	r2, [pc, #92]	; (8001648 <BSP_LED_Init+0x94>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <BSP_LED_Init+0x94>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	4a12      	ldr	r2, [pc, #72]	; (800164c <BSP_LED_Init+0x98>)
 8001602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001608:	2301      	movs	r3, #1
 800160a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001610:	2302      	movs	r3, #2
 8001612:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	4a0e      	ldr	r2, [pc, #56]	; (8001650 <BSP_LED_Init+0x9c>)
 8001618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161c:	f107 0214 	add.w	r2, r7, #20
 8001620:	4611      	mov	r1, r2
 8001622:	4618      	mov	r0, r3
 8001624:	f000 fa50 	bl	8001ac8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	4a09      	ldr	r2, [pc, #36]	; (8001650 <BSP_LED_Init+0x9c>)
 800162c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	4a06      	ldr	r2, [pc, #24]	; (800164c <BSP_LED_Init+0x98>)
 8001634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001638:	2200      	movs	r2, #0
 800163a:	4619      	mov	r1, r3
 800163c:	f000 fbf0 	bl	8001e20 <HAL_GPIO_WritePin>
}
 8001640:	bf00      	nop
 8001642:	3728      	adds	r7, #40	; 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40023800 	.word	0x40023800
 800164c:	08003838 	.word	0x08003838
 8001650:	2000001c 	.word	0x2000001c

08001654 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	4a07      	ldr	r2, [pc, #28]	; (8001680 <BSP_LED_On+0x2c>)
 8001662:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	4a06      	ldr	r2, [pc, #24]	; (8001684 <BSP_LED_On+0x30>)
 800166a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800166e:	2201      	movs	r2, #1
 8001670:	4619      	mov	r1, r3
 8001672:	f000 fbd5 	bl	8001e20 <HAL_GPIO_WritePin>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	2000001c 	.word	0x2000001c
 8001684:	08003838 	.word	0x08003838

08001688 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <BSP_LED_Toggle+0x2c>)
 8001696:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	4906      	ldr	r1, [pc, #24]	; (80016b8 <BSP_LED_Toggle+0x30>)
 800169e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80016a2:	4619      	mov	r1, r3
 80016a4:	4610      	mov	r0, r2
 80016a6:	f000 fbd4 	bl	8001e52 <HAL_GPIO_TogglePin>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000001c 	.word	0x2000001c
 80016b8:	08003838 	.word	0x08003838

080016bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c0:	4b16      	ldr	r3, [pc, #88]	; (800171c <SystemInit+0x60>)
 80016c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016c6:	4a15      	ldr	r2, [pc, #84]	; (800171c <SystemInit+0x60>)
 80016c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <SystemInit+0x64>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a12      	ldr	r2, [pc, #72]	; (8001720 <SystemInit+0x64>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016dc:	4b10      	ldr	r3, [pc, #64]	; (8001720 <SystemInit+0x64>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <SystemInit+0x64>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a0e      	ldr	r2, [pc, #56]	; (8001720 <SystemInit+0x64>)
 80016e8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80016ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <SystemInit+0x64>)
 80016f4:	4a0b      	ldr	r2, [pc, #44]	; (8001724 <SystemInit+0x68>)
 80016f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <SystemInit+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a08      	ldr	r2, [pc, #32]	; (8001720 <SystemInit+0x64>)
 80016fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001702:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <SystemInit+0x64>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800170a:	4b04      	ldr	r3, [pc, #16]	; (800171c <SystemInit+0x60>)
 800170c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001710:	609a      	str	r2, [r3, #8]
#endif
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000ed00 	.word	0xe000ed00
 8001720:	40023800 	.word	0x40023800
 8001724:	24003010 	.word	0x24003010

08001728 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800173a:	e7fe      	b.n	800173a <HardFault_Handler+0x4>

0800173c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001740:	e7fe      	b.n	8001740 <MemManage_Handler+0x4>

08001742 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001746:	e7fe      	b.n	8001746 <BusFault_Handler+0x4>

08001748 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800174c:	e7fe      	b.n	800174c <UsageFault_Handler+0x4>

0800174e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
    HAL_IncTick();
 800177c:	f000 f84e 	bl	800181c <HAL_IncTick>
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <HAL_Init+0x34>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <HAL_Init+0x34>)
 800178e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001792:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <HAL_Init+0x34>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <HAL_Init+0x34>)
 800179a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a0:	2003      	movs	r0, #3
 80017a2:	f000 f94f 	bl	8001a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a6:	200f      	movs	r0, #15
 80017a8:	f000 f808 	bl	80017bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ac:	f000 fb84 	bl	8001eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023c00 	.word	0x40023c00

080017bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_InitTick+0x54>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_InitTick+0x58>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	4619      	mov	r1, r3
 80017ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f967 	bl	8001aae <HAL_SYSTICK_Config>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00e      	b.n	8001808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b0f      	cmp	r3, #15
 80017ee:	d80a      	bhi.n	8001806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f0:	2200      	movs	r2, #0
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017f8:	f000 f92f 	bl	8001a5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017fc:	4a06      	ldr	r2, [pc, #24]	; (8001818 <HAL_InitTick+0x5c>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	e000      	b.n	8001808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000028 	.word	0x20000028
 8001814:	20000030 	.word	0x20000030
 8001818:	2000002c 	.word	0x2000002c

0800181c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_IncTick+0x20>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_IncTick+0x24>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4413      	add	r3, r2
 800182c:	4a04      	ldr	r2, [pc, #16]	; (8001840 <HAL_IncTick+0x24>)
 800182e:	6013      	str	r3, [r2, #0]
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000030 	.word	0x20000030
 8001840:	200000b8 	.word	0x200000b8

08001844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return uwTick;
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <HAL_GetTick+0x14>)
 800184a:	681b      	ldr	r3, [r3, #0]
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	200000b8 	.word	0x200000b8

0800185c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001864:	f7ff ffee 	bl	8001844 <HAL_GetTick>
 8001868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001874:	d005      	beq.n	8001882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001876:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <HAL_Delay+0x44>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4413      	add	r3, r2
 8001880:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001882:	bf00      	nop
 8001884:	f7ff ffde 	bl	8001844 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	429a      	cmp	r2, r3
 8001892:	d8f7      	bhi.n	8001884 <HAL_Delay+0x28>
  {
  }
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000030 	.word	0x20000030

080018a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c0:	4013      	ands	r3, r2
 80018c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d6:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	60d3      	str	r3, [r2, #12]
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <__NVIC_GetPriorityGrouping+0x18>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	0a1b      	lsrs	r3, r3, #8
 80018f6:	f003 0307 	and.w	r3, r3, #7
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	2b00      	cmp	r3, #0
 8001918:	db0b      	blt.n	8001932 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	f003 021f 	and.w	r2, r3, #31
 8001920:	4907      	ldr	r1, [pc, #28]	; (8001940 <__NVIC_EnableIRQ+0x38>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	095b      	lsrs	r3, r3, #5
 8001928:	2001      	movs	r0, #1
 800192a:	fa00 f202 	lsl.w	r2, r0, r2
 800192e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000e100 	.word	0xe000e100

08001944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	6039      	str	r1, [r7, #0]
 800194e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	2b00      	cmp	r3, #0
 8001956:	db0a      	blt.n	800196e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	b2da      	uxtb	r2, r3
 800195c:	490c      	ldr	r1, [pc, #48]	; (8001990 <__NVIC_SetPriority+0x4c>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	0112      	lsls	r2, r2, #4
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	440b      	add	r3, r1
 8001968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800196c:	e00a      	b.n	8001984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	b2da      	uxtb	r2, r3
 8001972:	4908      	ldr	r1, [pc, #32]	; (8001994 <__NVIC_SetPriority+0x50>)
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	3b04      	subs	r3, #4
 800197c:	0112      	lsls	r2, r2, #4
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	440b      	add	r3, r1
 8001982:	761a      	strb	r2, [r3, #24]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000e100 	.word	0xe000e100
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	; 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f1c3 0307 	rsb	r3, r3, #7
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	bf28      	it	cs
 80019b6:	2304      	movcs	r3, #4
 80019b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3304      	adds	r3, #4
 80019be:	2b06      	cmp	r3, #6
 80019c0:	d902      	bls.n	80019c8 <NVIC_EncodePriority+0x30>
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3b03      	subs	r3, #3
 80019c6:	e000      	b.n	80019ca <NVIC_EncodePriority+0x32>
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43da      	mvns	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	401a      	ands	r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	43d9      	mvns	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	4313      	orrs	r3, r2
         );
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3724      	adds	r7, #36	; 0x24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a10:	d301      	bcc.n	8001a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a12:	2301      	movs	r3, #1
 8001a14:	e00f      	b.n	8001a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a16:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <SysTick_Config+0x40>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a1e:	210f      	movs	r1, #15
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a24:	f7ff ff8e 	bl	8001944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <SysTick_Config+0x40>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2e:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <SysTick_Config+0x40>)
 8001a30:	2207      	movs	r2, #7
 8001a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	e000e010 	.word	0xe000e010

08001a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ff29 	bl	80018a4 <__NVIC_SetPriorityGrouping>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b086      	sub	sp, #24
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	4603      	mov	r3, r0
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
 8001a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a6c:	f7ff ff3e 	bl	80018ec <__NVIC_GetPriorityGrouping>
 8001a70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	6978      	ldr	r0, [r7, #20]
 8001a78:	f7ff ff8e 	bl	8001998 <NVIC_EncodePriority>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff5d 	bl	8001944 <__NVIC_SetPriority>
}
 8001a8a:	bf00      	nop
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff31 	bl	8001908 <__NVIC_EnableIRQ>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff ffa2 	bl	8001a00 <SysTick_Config>
 8001abc:	4603      	mov	r3, r0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b089      	sub	sp, #36	; 0x24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
 8001ae2:	e177      	b.n	8001dd4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	f040 8166 	bne.w	8001dce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d005      	beq.n	8001b1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d130      	bne.n	8001b7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	2203      	movs	r2, #3
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b50:	2201      	movs	r2, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f003 0201 	and.w	r2, r3, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d017      	beq.n	8001bb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d123      	bne.n	8001c0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	08da      	lsrs	r2, r3, #3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3208      	adds	r2, #8
 8001bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	220f      	movs	r2, #15
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	08da      	lsrs	r2, r3, #3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3208      	adds	r2, #8
 8001c06:	69b9      	ldr	r1, [r7, #24]
 8001c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	2203      	movs	r2, #3
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0203 	and.w	r2, r3, #3
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80c0 	beq.w	8001dce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	4b66      	ldr	r3, [pc, #408]	; (8001dec <HAL_GPIO_Init+0x324>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	4a65      	ldr	r2, [pc, #404]	; (8001dec <HAL_GPIO_Init+0x324>)
 8001c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5e:	4b63      	ldr	r3, [pc, #396]	; (8001dec <HAL_GPIO_Init+0x324>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c6a:	4a61      	ldr	r2, [pc, #388]	; (8001df0 <HAL_GPIO_Init+0x328>)
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	3302      	adds	r3, #2
 8001c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	220f      	movs	r2, #15
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a58      	ldr	r2, [pc, #352]	; (8001df4 <HAL_GPIO_Init+0x32c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d037      	beq.n	8001d06 <HAL_GPIO_Init+0x23e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a57      	ldr	r2, [pc, #348]	; (8001df8 <HAL_GPIO_Init+0x330>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d031      	beq.n	8001d02 <HAL_GPIO_Init+0x23a>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a56      	ldr	r2, [pc, #344]	; (8001dfc <HAL_GPIO_Init+0x334>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d02b      	beq.n	8001cfe <HAL_GPIO_Init+0x236>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a55      	ldr	r2, [pc, #340]	; (8001e00 <HAL_GPIO_Init+0x338>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d025      	beq.n	8001cfa <HAL_GPIO_Init+0x232>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a54      	ldr	r2, [pc, #336]	; (8001e04 <HAL_GPIO_Init+0x33c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d01f      	beq.n	8001cf6 <HAL_GPIO_Init+0x22e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a53      	ldr	r2, [pc, #332]	; (8001e08 <HAL_GPIO_Init+0x340>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d019      	beq.n	8001cf2 <HAL_GPIO_Init+0x22a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a52      	ldr	r2, [pc, #328]	; (8001e0c <HAL_GPIO_Init+0x344>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d013      	beq.n	8001cee <HAL_GPIO_Init+0x226>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a51      	ldr	r2, [pc, #324]	; (8001e10 <HAL_GPIO_Init+0x348>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00d      	beq.n	8001cea <HAL_GPIO_Init+0x222>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a50      	ldr	r2, [pc, #320]	; (8001e14 <HAL_GPIO_Init+0x34c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d007      	beq.n	8001ce6 <HAL_GPIO_Init+0x21e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4f      	ldr	r2, [pc, #316]	; (8001e18 <HAL_GPIO_Init+0x350>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d101      	bne.n	8001ce2 <HAL_GPIO_Init+0x21a>
 8001cde:	2309      	movs	r3, #9
 8001ce0:	e012      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001ce2:	230a      	movs	r3, #10
 8001ce4:	e010      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001ce6:	2308      	movs	r3, #8
 8001ce8:	e00e      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001cea:	2307      	movs	r3, #7
 8001cec:	e00c      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001cee:	2306      	movs	r3, #6
 8001cf0:	e00a      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001cf2:	2305      	movs	r3, #5
 8001cf4:	e008      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	e006      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e004      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e002      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001d06:	2300      	movs	r3, #0
 8001d08:	69fa      	ldr	r2, [r7, #28]
 8001d0a:	f002 0203 	and.w	r2, r2, #3
 8001d0e:	0092      	lsls	r2, r2, #2
 8001d10:	4093      	lsls	r3, r2
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d18:	4935      	ldr	r1, [pc, #212]	; (8001df0 <HAL_GPIO_Init+0x328>)
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	089b      	lsrs	r3, r3, #2
 8001d1e:	3302      	adds	r3, #2
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d26:	4b3d      	ldr	r3, [pc, #244]	; (8001e1c <HAL_GPIO_Init+0x354>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d4a:	4a34      	ldr	r2, [pc, #208]	; (8001e1c <HAL_GPIO_Init+0x354>)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d50:	4b32      	ldr	r3, [pc, #200]	; (8001e1c <HAL_GPIO_Init+0x354>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d74:	4a29      	ldr	r2, [pc, #164]	; (8001e1c <HAL_GPIO_Init+0x354>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7a:	4b28      	ldr	r3, [pc, #160]	; (8001e1c <HAL_GPIO_Init+0x354>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d9e:	4a1f      	ldr	r2, [pc, #124]	; (8001e1c <HAL_GPIO_Init+0x354>)
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da4:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <HAL_GPIO_Init+0x354>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc8:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <HAL_GPIO_Init+0x354>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	61fb      	str	r3, [r7, #28]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	2b0f      	cmp	r3, #15
 8001dd8:	f67f ae84 	bls.w	8001ae4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3724      	adds	r7, #36	; 0x24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40013800 	.word	0x40013800
 8001df4:	40020000 	.word	0x40020000
 8001df8:	40020400 	.word	0x40020400
 8001dfc:	40020800 	.word	0x40020800
 8001e00:	40020c00 	.word	0x40020c00
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40021400 	.word	0x40021400
 8001e0c:	40021800 	.word	0x40021800
 8001e10:	40021c00 	.word	0x40021c00
 8001e14:	40022000 	.word	0x40022000
 8001e18:	40022400 	.word	0x40022400
 8001e1c:	40013c00 	.word	0x40013c00

08001e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	807b      	strh	r3, [r7, #2]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e30:	787b      	ldrb	r3, [r7, #1]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e36:	887a      	ldrh	r2, [r7, #2]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e3c:	e003      	b.n	8001e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e3e:	887b      	ldrh	r3, [r7, #2]
 8001e40:	041a      	lsls	r2, r3, #16
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	619a      	str	r2, [r3, #24]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b085      	sub	sp, #20
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e64:	887a      	ldrh	r2, [r7, #2]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	041a      	lsls	r2, r3, #16
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	43d9      	mvns	r1, r3
 8001e70:	887b      	ldrh	r3, [r7, #2]
 8001e72:	400b      	ands	r3, r1
 8001e74:	431a      	orrs	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	619a      	str	r2, [r3, #24]
}
 8001e7a:	bf00      	nop
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e92:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e94:	695a      	ldr	r2, [r3, #20]
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d006      	beq.n	8001eac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e9e:	4a05      	ldr	r2, [pc, #20]	; (8001eb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ea0:	88fb      	ldrh	r3, [r7, #6]
 8001ea2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff faca 	bl	8001440 <HAL_GPIO_EXTI_Callback>
  }
}
 8001eac:	bf00      	nop
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40013c00 	.word	0x40013c00

08001eb8 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0

}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	603b      	str	r3, [r7, #0]
 8001ed6:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	4a1f      	ldr	r2, [pc, #124]	; (8001f58 <HAL_PWREx_EnableOverDrive+0x90>)
 8001edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001eee:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <HAL_PWREx_EnableOverDrive+0x94>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ef4:	f7ff fca6 	bl	8001844 <HAL_GetTick>
 8001ef8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001efa:	e009      	b.n	8001f10 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001efc:	f7ff fca2 	bl	8001844 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f0a:	d901      	bls.n	8001f10 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e01f      	b.n	8001f50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f10:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1c:	d1ee      	bne.n	8001efc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f24:	f7ff fc8e 	bl	8001844 <HAL_GetTick>
 8001f28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f2a:	e009      	b.n	8001f40 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f2c:	f7ff fc8a 	bl	8001844 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f3a:	d901      	bls.n	8001f40 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e007      	b.n	8001f50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f40:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f4c:	d1ee      	bne.n	8001f2c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	420e0040 	.word	0x420e0040
 8001f60:	40007000 	.word	0x40007000
 8001f64:	420e0044 	.word	0x420e0044

08001f68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e267      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d075      	beq.n	8002072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f86:	4b88      	ldr	r3, [pc, #544]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d00c      	beq.n	8001fac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f92:	4b85      	ldr	r3, [pc, #532]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d112      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f9e:	4b82      	ldr	r3, [pc, #520]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001faa:	d10b      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fac:	4b7e      	ldr	r3, [pc, #504]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d05b      	beq.n	8002070 <HAL_RCC_OscConfig+0x108>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d157      	bne.n	8002070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e242      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fcc:	d106      	bne.n	8001fdc <HAL_RCC_OscConfig+0x74>
 8001fce:	4b76      	ldr	r3, [pc, #472]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a75      	ldr	r2, [pc, #468]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	e01d      	b.n	8002018 <HAL_RCC_OscConfig+0xb0>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x98>
 8001fe6:	4b70      	ldr	r3, [pc, #448]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a6f      	ldr	r2, [pc, #444]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	4b6d      	ldr	r3, [pc, #436]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a6c      	ldr	r2, [pc, #432]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	e00b      	b.n	8002018 <HAL_RCC_OscConfig+0xb0>
 8002000:	4b69      	ldr	r3, [pc, #420]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a68      	ldr	r2, [pc, #416]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8002006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	4b66      	ldr	r3, [pc, #408]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a65      	ldr	r2, [pc, #404]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8002012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d013      	beq.n	8002048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002020:	f7ff fc10 	bl	8001844 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002028:	f7ff fc0c 	bl	8001844 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b64      	cmp	r3, #100	; 0x64
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e207      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203a:	4b5b      	ldr	r3, [pc, #364]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0xc0>
 8002046:	e014      	b.n	8002072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7ff fbfc 	bl	8001844 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002050:	f7ff fbf8 	bl	8001844 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b64      	cmp	r3, #100	; 0x64
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e1f3      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002062:	4b51      	ldr	r3, [pc, #324]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0xe8>
 800206e:	e000      	b.n	8002072 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d063      	beq.n	8002146 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800207e:	4b4a      	ldr	r3, [pc, #296]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 030c 	and.w	r3, r3, #12
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00b      	beq.n	80020a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800208a:	4b47      	ldr	r3, [pc, #284]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002092:	2b08      	cmp	r3, #8
 8002094:	d11c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002096:	4b44      	ldr	r3, [pc, #272]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d116      	bne.n	80020d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a2:	4b41      	ldr	r3, [pc, #260]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d005      	beq.n	80020ba <HAL_RCC_OscConfig+0x152>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d001      	beq.n	80020ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e1c7      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ba:	4b3b      	ldr	r3, [pc, #236]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4937      	ldr	r1, [pc, #220]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ce:	e03a      	b.n	8002146 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d020      	beq.n	800211a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d8:	4b34      	ldr	r3, [pc, #208]	; (80021ac <HAL_RCC_OscConfig+0x244>)
 80020da:	2201      	movs	r2, #1
 80020dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020de:	f7ff fbb1 	bl	8001844 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020e6:	f7ff fbad 	bl	8001844 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e1a8      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f8:	4b2b      	ldr	r3, [pc, #172]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002104:	4b28      	ldr	r3, [pc, #160]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4925      	ldr	r1, [pc, #148]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8002114:	4313      	orrs	r3, r2
 8002116:	600b      	str	r3, [r1, #0]
 8002118:	e015      	b.n	8002146 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800211a:	4b24      	ldr	r3, [pc, #144]	; (80021ac <HAL_RCC_OscConfig+0x244>)
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002120:	f7ff fb90 	bl	8001844 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002128:	f7ff fb8c 	bl	8001844 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e187      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213a:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d036      	beq.n	80021c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d016      	beq.n	8002188 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <HAL_RCC_OscConfig+0x248>)
 800215c:	2201      	movs	r2, #1
 800215e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002160:	f7ff fb70 	bl	8001844 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002168:	f7ff fb6c 	bl	8001844 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e167      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217a:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 800217c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x200>
 8002186:	e01b      	b.n	80021c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002188:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <HAL_RCC_OscConfig+0x248>)
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218e:	f7ff fb59 	bl	8001844 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002194:	e00e      	b.n	80021b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002196:	f7ff fb55 	bl	8001844 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d907      	bls.n	80021b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e150      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
 80021a8:	40023800 	.word	0x40023800
 80021ac:	42470000 	.word	0x42470000
 80021b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b4:	4b88      	ldr	r3, [pc, #544]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 80021b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1ea      	bne.n	8002196 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 8097 	beq.w	80022fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ce:	2300      	movs	r3, #0
 80021d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d2:	4b81      	ldr	r3, [pc, #516]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10f      	bne.n	80021fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	4b7d      	ldr	r3, [pc, #500]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a7c      	ldr	r2, [pc, #496]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 80021e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b7a      	ldr	r3, [pc, #488]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021fa:	2301      	movs	r3, #1
 80021fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fe:	4b77      	ldr	r3, [pc, #476]	; (80023dc <HAL_RCC_OscConfig+0x474>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d118      	bne.n	800223c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800220a:	4b74      	ldr	r3, [pc, #464]	; (80023dc <HAL_RCC_OscConfig+0x474>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a73      	ldr	r2, [pc, #460]	; (80023dc <HAL_RCC_OscConfig+0x474>)
 8002210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002216:	f7ff fb15 	bl	8001844 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221e:	f7ff fb11 	bl	8001844 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e10c      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002230:	4b6a      	ldr	r3, [pc, #424]	; (80023dc <HAL_RCC_OscConfig+0x474>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d106      	bne.n	8002252 <HAL_RCC_OscConfig+0x2ea>
 8002244:	4b64      	ldr	r3, [pc, #400]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 8002246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002248:	4a63      	ldr	r2, [pc, #396]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	6713      	str	r3, [r2, #112]	; 0x70
 8002250:	e01c      	b.n	800228c <HAL_RCC_OscConfig+0x324>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b05      	cmp	r3, #5
 8002258:	d10c      	bne.n	8002274 <HAL_RCC_OscConfig+0x30c>
 800225a:	4b5f      	ldr	r3, [pc, #380]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 800225c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225e:	4a5e      	ldr	r2, [pc, #376]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 8002260:	f043 0304 	orr.w	r3, r3, #4
 8002264:	6713      	str	r3, [r2, #112]	; 0x70
 8002266:	4b5c      	ldr	r3, [pc, #368]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 8002268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226a:	4a5b      	ldr	r2, [pc, #364]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6713      	str	r3, [r2, #112]	; 0x70
 8002272:	e00b      	b.n	800228c <HAL_RCC_OscConfig+0x324>
 8002274:	4b58      	ldr	r3, [pc, #352]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 8002276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002278:	4a57      	ldr	r2, [pc, #348]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 800227a:	f023 0301 	bic.w	r3, r3, #1
 800227e:	6713      	str	r3, [r2, #112]	; 0x70
 8002280:	4b55      	ldr	r3, [pc, #340]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 8002282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002284:	4a54      	ldr	r2, [pc, #336]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 8002286:	f023 0304 	bic.w	r3, r3, #4
 800228a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d015      	beq.n	80022c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002294:	f7ff fad6 	bl	8001844 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229a:	e00a      	b.n	80022b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800229c:	f7ff fad2 	bl	8001844 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e0cb      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b2:	4b49      	ldr	r3, [pc, #292]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 80022b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0ee      	beq.n	800229c <HAL_RCC_OscConfig+0x334>
 80022be:	e014      	b.n	80022ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c0:	f7ff fac0 	bl	8001844 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c6:	e00a      	b.n	80022de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c8:	f7ff fabc 	bl	8001844 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e0b5      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022de:	4b3e      	ldr	r3, [pc, #248]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 80022e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1ee      	bne.n	80022c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022ea:	7dfb      	ldrb	r3, [r7, #23]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d105      	bne.n	80022fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f0:	4b39      	ldr	r3, [pc, #228]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	4a38      	ldr	r2, [pc, #224]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 80022f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80a1 	beq.w	8002448 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002306:	4b34      	ldr	r3, [pc, #208]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b08      	cmp	r3, #8
 8002310:	d05c      	beq.n	80023cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d141      	bne.n	800239e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231a:	4b31      	ldr	r3, [pc, #196]	; (80023e0 <HAL_RCC_OscConfig+0x478>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7ff fa90 	bl	8001844 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002328:	f7ff fa8c 	bl	8001844 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e087      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233a:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69da      	ldr	r2, [r3, #28]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	019b      	lsls	r3, r3, #6
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235c:	085b      	lsrs	r3, r3, #1
 800235e:	3b01      	subs	r3, #1
 8002360:	041b      	lsls	r3, r3, #16
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002368:	061b      	lsls	r3, r3, #24
 800236a:	491b      	ldr	r1, [pc, #108]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 800236c:	4313      	orrs	r3, r2
 800236e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002370:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <HAL_RCC_OscConfig+0x478>)
 8002372:	2201      	movs	r2, #1
 8002374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002376:	f7ff fa65 	bl	8001844 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237e:	f7ff fa61 	bl	8001844 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e05c      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002390:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f0      	beq.n	800237e <HAL_RCC_OscConfig+0x416>
 800239c:	e054      	b.n	8002448 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <HAL_RCC_OscConfig+0x478>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7ff fa4e 	bl	8001844 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ac:	f7ff fa4a 	bl	8001844 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e045      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0x444>
 80023ca:	e03d      	b.n	8002448 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d107      	bne.n	80023e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e038      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40007000 	.word	0x40007000
 80023e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023e4:	4b1b      	ldr	r3, [pc, #108]	; (8002454 <HAL_RCC_OscConfig+0x4ec>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d028      	beq.n	8002444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d121      	bne.n	8002444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240a:	429a      	cmp	r2, r3
 800240c:	d11a      	bne.n	8002444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002414:	4013      	ands	r3, r2
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800241a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800241c:	4293      	cmp	r3, r2
 800241e:	d111      	bne.n	8002444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	085b      	lsrs	r3, r3, #1
 800242c:	3b01      	subs	r3, #1
 800242e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002430:	429a      	cmp	r2, r3
 8002432:	d107      	bne.n	8002444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800

08002458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e0cc      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800246c:	4b68      	ldr	r3, [pc, #416]	; (8002610 <HAL_RCC_ClockConfig+0x1b8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d90c      	bls.n	8002494 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b65      	ldr	r3, [pc, #404]	; (8002610 <HAL_RCC_ClockConfig+0x1b8>)
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002482:	4b63      	ldr	r3, [pc, #396]	; (8002610 <HAL_RCC_ClockConfig+0x1b8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d001      	beq.n	8002494 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e0b8      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d020      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024ac:	4b59      	ldr	r3, [pc, #356]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4a58      	ldr	r2, [pc, #352]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0308 	and.w	r3, r3, #8
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c4:	4b53      	ldr	r3, [pc, #332]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4a52      	ldr	r2, [pc, #328]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d0:	4b50      	ldr	r3, [pc, #320]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	494d      	ldr	r1, [pc, #308]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d044      	beq.n	8002578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d107      	bne.n	8002506 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f6:	4b47      	ldr	r3, [pc, #284]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d119      	bne.n	8002536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e07f      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d003      	beq.n	8002516 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002512:	2b03      	cmp	r3, #3
 8002514:	d107      	bne.n	8002526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002516:	4b3f      	ldr	r3, [pc, #252]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d109      	bne.n	8002536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e06f      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002526:	4b3b      	ldr	r3, [pc, #236]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e067      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002536:	4b37      	ldr	r3, [pc, #220]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f023 0203 	bic.w	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	4934      	ldr	r1, [pc, #208]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	4313      	orrs	r3, r2
 8002546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002548:	f7ff f97c 	bl	8001844 <HAL_GetTick>
 800254c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254e:	e00a      	b.n	8002566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002550:	f7ff f978 	bl	8001844 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f241 3288 	movw	r2, #5000	; 0x1388
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e04f      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002566:	4b2b      	ldr	r3, [pc, #172]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 020c 	and.w	r2, r3, #12
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	429a      	cmp	r2, r3
 8002576:	d1eb      	bne.n	8002550 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002578:	4b25      	ldr	r3, [pc, #148]	; (8002610 <HAL_RCC_ClockConfig+0x1b8>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 030f 	and.w	r3, r3, #15
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d20c      	bcs.n	80025a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002586:	4b22      	ldr	r3, [pc, #136]	; (8002610 <HAL_RCC_ClockConfig+0x1b8>)
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800258e:	4b20      	ldr	r3, [pc, #128]	; (8002610 <HAL_RCC_ClockConfig+0x1b8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e032      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025ac:	4b19      	ldr	r3, [pc, #100]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4916      	ldr	r1, [pc, #88]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d009      	beq.n	80025de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ca:	4b12      	ldr	r3, [pc, #72]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	490e      	ldr	r1, [pc, #56]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025de:	f000 f821 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 80025e2:	4602      	mov	r2, r0
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	091b      	lsrs	r3, r3, #4
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	490a      	ldr	r1, [pc, #40]	; (8002618 <HAL_RCC_ClockConfig+0x1c0>)
 80025f0:	5ccb      	ldrb	r3, [r1, r3]
 80025f2:	fa22 f303 	lsr.w	r3, r2, r3
 80025f6:	4a09      	ldr	r2, [pc, #36]	; (800261c <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025fa:	4b09      	ldr	r3, [pc, #36]	; (8002620 <HAL_RCC_ClockConfig+0x1c8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff f8dc 	bl	80017bc <HAL_InitTick>

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40023c00 	.word	0x40023c00
 8002614:	40023800 	.word	0x40023800
 8002618:	08003840 	.word	0x08003840
 800261c:	20000028 	.word	0x20000028
 8002620:	2000002c 	.word	0x2000002c

08002624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002628:	b094      	sub	sp, #80	; 0x50
 800262a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	647b      	str	r3, [r7, #68]	; 0x44
 8002630:	2300      	movs	r3, #0
 8002632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002634:	2300      	movs	r3, #0
 8002636:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800263c:	4b79      	ldr	r3, [pc, #484]	; (8002824 <HAL_RCC_GetSysClockFreq+0x200>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 030c 	and.w	r3, r3, #12
 8002644:	2b08      	cmp	r3, #8
 8002646:	d00d      	beq.n	8002664 <HAL_RCC_GetSysClockFreq+0x40>
 8002648:	2b08      	cmp	r3, #8
 800264a:	f200 80e1 	bhi.w	8002810 <HAL_RCC_GetSysClockFreq+0x1ec>
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0x34>
 8002652:	2b04      	cmp	r3, #4
 8002654:	d003      	beq.n	800265e <HAL_RCC_GetSysClockFreq+0x3a>
 8002656:	e0db      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002658:	4b73      	ldr	r3, [pc, #460]	; (8002828 <HAL_RCC_GetSysClockFreq+0x204>)
 800265a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800265c:	e0db      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800265e:	4b73      	ldr	r3, [pc, #460]	; (800282c <HAL_RCC_GetSysClockFreq+0x208>)
 8002660:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002662:	e0d8      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002664:	4b6f      	ldr	r3, [pc, #444]	; (8002824 <HAL_RCC_GetSysClockFreq+0x200>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800266c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800266e:	4b6d      	ldr	r3, [pc, #436]	; (8002824 <HAL_RCC_GetSysClockFreq+0x200>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d063      	beq.n	8002742 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800267a:	4b6a      	ldr	r3, [pc, #424]	; (8002824 <HAL_RCC_GetSysClockFreq+0x200>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	099b      	lsrs	r3, r3, #6
 8002680:	2200      	movs	r2, #0
 8002682:	63bb      	str	r3, [r7, #56]	; 0x38
 8002684:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800268c:	633b      	str	r3, [r7, #48]	; 0x30
 800268e:	2300      	movs	r3, #0
 8002690:	637b      	str	r3, [r7, #52]	; 0x34
 8002692:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002696:	4622      	mov	r2, r4
 8002698:	462b      	mov	r3, r5
 800269a:	f04f 0000 	mov.w	r0, #0
 800269e:	f04f 0100 	mov.w	r1, #0
 80026a2:	0159      	lsls	r1, r3, #5
 80026a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a8:	0150      	lsls	r0, r2, #5
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4621      	mov	r1, r4
 80026b0:	1a51      	subs	r1, r2, r1
 80026b2:	6139      	str	r1, [r7, #16]
 80026b4:	4629      	mov	r1, r5
 80026b6:	eb63 0301 	sbc.w	r3, r3, r1
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026c8:	4659      	mov	r1, fp
 80026ca:	018b      	lsls	r3, r1, #6
 80026cc:	4651      	mov	r1, sl
 80026ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026d2:	4651      	mov	r1, sl
 80026d4:	018a      	lsls	r2, r1, #6
 80026d6:	4651      	mov	r1, sl
 80026d8:	ebb2 0801 	subs.w	r8, r2, r1
 80026dc:	4659      	mov	r1, fp
 80026de:	eb63 0901 	sbc.w	r9, r3, r1
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026f6:	4690      	mov	r8, r2
 80026f8:	4699      	mov	r9, r3
 80026fa:	4623      	mov	r3, r4
 80026fc:	eb18 0303 	adds.w	r3, r8, r3
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	462b      	mov	r3, r5
 8002704:	eb49 0303 	adc.w	r3, r9, r3
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002716:	4629      	mov	r1, r5
 8002718:	024b      	lsls	r3, r1, #9
 800271a:	4621      	mov	r1, r4
 800271c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002720:	4621      	mov	r1, r4
 8002722:	024a      	lsls	r2, r1, #9
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800272a:	2200      	movs	r2, #0
 800272c:	62bb      	str	r3, [r7, #40]	; 0x28
 800272e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002730:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002734:	f7fd fd5a 	bl	80001ec <__aeabi_uldivmod>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4613      	mov	r3, r2
 800273e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002740:	e058      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002742:	4b38      	ldr	r3, [pc, #224]	; (8002824 <HAL_RCC_GetSysClockFreq+0x200>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	099b      	lsrs	r3, r3, #6
 8002748:	2200      	movs	r2, #0
 800274a:	4618      	mov	r0, r3
 800274c:	4611      	mov	r1, r2
 800274e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002752:	623b      	str	r3, [r7, #32]
 8002754:	2300      	movs	r3, #0
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
 8002758:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800275c:	4642      	mov	r2, r8
 800275e:	464b      	mov	r3, r9
 8002760:	f04f 0000 	mov.w	r0, #0
 8002764:	f04f 0100 	mov.w	r1, #0
 8002768:	0159      	lsls	r1, r3, #5
 800276a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800276e:	0150      	lsls	r0, r2, #5
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4641      	mov	r1, r8
 8002776:	ebb2 0a01 	subs.w	sl, r2, r1
 800277a:	4649      	mov	r1, r9
 800277c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800278c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002790:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002794:	ebb2 040a 	subs.w	r4, r2, sl
 8002798:	eb63 050b 	sbc.w	r5, r3, fp
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	f04f 0300 	mov.w	r3, #0
 80027a4:	00eb      	lsls	r3, r5, #3
 80027a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027aa:	00e2      	lsls	r2, r4, #3
 80027ac:	4614      	mov	r4, r2
 80027ae:	461d      	mov	r5, r3
 80027b0:	4643      	mov	r3, r8
 80027b2:	18e3      	adds	r3, r4, r3
 80027b4:	603b      	str	r3, [r7, #0]
 80027b6:	464b      	mov	r3, r9
 80027b8:	eb45 0303 	adc.w	r3, r5, r3
 80027bc:	607b      	str	r3, [r7, #4]
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027ca:	4629      	mov	r1, r5
 80027cc:	028b      	lsls	r3, r1, #10
 80027ce:	4621      	mov	r1, r4
 80027d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027d4:	4621      	mov	r1, r4
 80027d6:	028a      	lsls	r2, r1, #10
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027de:	2200      	movs	r2, #0
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	61fa      	str	r2, [r7, #28]
 80027e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027e8:	f7fd fd00 	bl	80001ec <__aeabi_uldivmod>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4613      	mov	r3, r2
 80027f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <HAL_RCC_GetSysClockFreq+0x200>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	0c1b      	lsrs	r3, r3, #16
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	3301      	adds	r3, #1
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002804:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002808:	fbb2 f3f3 	udiv	r3, r2, r3
 800280c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800280e:	e002      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <HAL_RCC_GetSysClockFreq+0x204>)
 8002812:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002818:	4618      	mov	r0, r3
 800281a:	3750      	adds	r7, #80	; 0x50
 800281c:	46bd      	mov	sp, r7
 800281e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800
 8002828:	00f42400 	.word	0x00f42400
 800282c:	007a1200 	.word	0x007a1200

08002830 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e083      	b.n	800294a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	2b00      	cmp	r3, #0
 8002848:	d108      	bne.n	800285c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002852:	d009      	beq.n	8002868 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	61da      	str	r2, [r3, #28]
 800285a:	e005      	b.n	8002868 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d106      	bne.n	8002882 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7fe f9fd 	bl	8000c7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2202      	movs	r2, #2
 8002886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002898:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028dc:	431a      	orrs	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e6:	ea42 0103 	orr.w	r1, r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	0c1b      	lsrs	r3, r3, #16
 8002900:	f003 0104 	and.w	r1, r3, #4
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	f003 0210 	and.w	r2, r3, #16
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800291c:	d105      	bne.n	800292a <HAL_SPI_Init+0xfa>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	b292      	uxth	r2, r2
 8002928:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	69da      	ldr	r2, [r3, #28]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002938:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b088      	sub	sp, #32
 8002956:	af00      	add	r7, sp, #0
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	603b      	str	r3, [r7, #0]
 800295e:	4613      	mov	r3, r2
 8002960:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_SPI_Transmit+0x22>
 8002970:	2302      	movs	r3, #2
 8002972:	e148      	b.n	8002c06 <HAL_SPI_Transmit+0x2b4>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800297c:	f7fe ff62 	bl	8001844 <HAL_GetTick>
 8002980:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b01      	cmp	r3, #1
 8002990:	d002      	beq.n	8002998 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002992:	2302      	movs	r3, #2
 8002994:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002996:	e12d      	b.n	8002bf4 <HAL_SPI_Transmit+0x2a2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <HAL_SPI_Transmit+0x52>
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d102      	bne.n	80029aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029a8:	e124      	b.n	8002bf4 <HAL_SPI_Transmit+0x2a2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2203      	movs	r2, #3
 80029ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	88fa      	ldrh	r2, [r7, #6]
 80029c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	88fa      	ldrh	r2, [r7, #6]
 80029c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029f0:	d10f      	bne.n	8002a12 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a10:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a1a:	d10f      	bne.n	8002a3c <HAL_SPI_Transmit+0xea>
  {
    SPI_RESET_CRC(hspi);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a3a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a46:	2b40      	cmp	r3, #64	; 0x40
 8002a48:	d007      	beq.n	8002a5a <HAL_SPI_Transmit+0x108>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a62:	d14b      	bne.n	8002afc <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <HAL_SPI_Transmit+0x120>
 8002a6c:	8afb      	ldrh	r3, [r7, #22]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d13e      	bne.n	8002af0 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	881a      	ldrh	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	1c9a      	adds	r2, r3, #2
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a96:	e02b      	b.n	8002af0 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d112      	bne.n	8002acc <HAL_SPI_Transmit+0x17a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	881a      	ldrh	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	1c9a      	adds	r2, r3, #2
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	86da      	strh	r2, [r3, #54]	; 0x36
 8002aca:	e011      	b.n	8002af0 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002acc:	f7fe feba 	bl	8001844 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d803      	bhi.n	8002ae4 <HAL_SPI_Transmit+0x192>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ae2:	d102      	bne.n	8002aea <HAL_SPI_Transmit+0x198>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d102      	bne.n	8002af0 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002aee:	e081      	b.n	8002bf4 <HAL_SPI_Transmit+0x2a2>
    while (hspi->TxXferCount > 0U)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1ce      	bne.n	8002a98 <HAL_SPI_Transmit+0x146>
 8002afa:	e04c      	b.n	8002b96 <HAL_SPI_Transmit+0x244>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <HAL_SPI_Transmit+0x1b8>
 8002b04:	8afb      	ldrh	r3, [r7, #22]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d140      	bne.n	8002b8c <HAL_SPI_Transmit+0x23a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	330c      	adds	r3, #12
 8002b14:	7812      	ldrb	r2, [r2, #0]
 8002b16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b30:	e02c      	b.n	8002b8c <HAL_SPI_Transmit+0x23a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d113      	bne.n	8002b68 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	330c      	adds	r3, #12
 8002b4a:	7812      	ldrb	r2, [r2, #0]
 8002b4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b66:	e011      	b.n	8002b8c <HAL_SPI_Transmit+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b68:	f7fe fe6c 	bl	8001844 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d803      	bhi.n	8002b80 <HAL_SPI_Transmit+0x22e>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b7e:	d102      	bne.n	8002b86 <HAL_SPI_Transmit+0x234>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d102      	bne.n	8002b8c <HAL_SPI_Transmit+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b8a:	e033      	b.n	8002bf4 <HAL_SPI_Transmit+0x2a2>
    while (hspi->TxXferCount > 0U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1cd      	bne.n	8002b32 <HAL_SPI_Transmit+0x1e0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b9e:	d107      	bne.n	8002bb0 <HAL_SPI_Transmit+0x25e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bae:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	6839      	ldr	r1, [r7, #0]
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 fcc3 	bl	8003540 <SPI_EndRxTxTransaction>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <HAL_SPI_Transmit+0x274>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10a      	bne.n	8002be4 <HAL_SPI_Transmit+0x292>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d002      	beq.n	8002bf2 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	77fb      	strb	r3, [r7, #31]
 8002bf0:	e000      	b.n	8002bf4 <HAL_SPI_Transmit+0x2a2>
  }

error:
 8002bf2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c04:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3720      	adds	r7, #32
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b08a      	sub	sp, #40	; 0x28
 8002c12:	af02      	add	r7, sp, #8
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	603b      	str	r3, [r7, #0]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	77fb      	strb	r3, [r7, #31]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c2e:	d112      	bne.n	8002c56 <HAL_SPI_Receive+0x48>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10e      	bne.n	8002c56 <HAL_SPI_Receive+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2204      	movs	r2, #4
 8002c3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c40:	88fa      	ldrh	r2, [r7, #6]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	4613      	mov	r3, r2
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	68b9      	ldr	r1, [r7, #8]
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 f969 	bl	8002f24 <HAL_SPI_TransmitReceive>
 8002c52:	4603      	mov	r3, r0
 8002c54:	e162      	b.n	8002f1c <HAL_SPI_Receive+0x30e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_SPI_Receive+0x56>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e15b      	b.n	8002f1c <HAL_SPI_Receive+0x30e>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c6c:	f7fe fdea 	bl	8001844 <HAL_GetTick>
 8002c70:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d002      	beq.n	8002c84 <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c82:	e142      	b.n	8002f0a <HAL_SPI_Receive+0x2fc>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <HAL_SPI_Receive+0x82>
 8002c8a:	88fb      	ldrh	r3, [r7, #6]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d102      	bne.n	8002c96 <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c94:	e139      	b.n	8002f0a <HAL_SPI_Receive+0x2fc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2204      	movs	r2, #4
 8002c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	88fa      	ldrh	r2, [r7, #6]
 8002cae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	88fa      	ldrh	r2, [r7, #6]
 8002cb4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cdc:	d116      	bne.n	8002d0c <HAL_SPI_Receive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cfc:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d14:	d10f      	bne.n	8002d36 <HAL_SPI_Receive+0x128>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d34:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d40:	2b40      	cmp	r3, #64	; 0x40
 8002d42:	d007      	beq.n	8002d54 <HAL_SPI_Receive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d52:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d162      	bne.n	8002e22 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002d5c:	e02e      	b.n	8002dbc <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d115      	bne.n	8002d98 <HAL_SPI_Receive+0x18a>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f103 020c 	add.w	r2, r3, #12
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d78:	7812      	ldrb	r2, [r2, #0]
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d96:	e011      	b.n	8002dbc <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d98:	f7fe fd54 	bl	8001844 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d803      	bhi.n	8002db0 <HAL_SPI_Receive+0x1a2>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dae:	d102      	bne.n	8002db6 <HAL_SPI_Receive+0x1a8>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d102      	bne.n	8002dbc <HAL_SPI_Receive+0x1ae>
        {
          errorcode = HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002dba:	e0a6      	b.n	8002f0a <HAL_SPI_Receive+0x2fc>
    while (hspi->RxXferCount > 0U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1cb      	bne.n	8002d5e <HAL_SPI_Receive+0x150>
 8002dc6:	e031      	b.n	8002e2c <HAL_SPI_Receive+0x21e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d113      	bne.n	8002dfe <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de0:	b292      	uxth	r2, r2
 8002de2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de8:	1c9a      	adds	r2, r3, #2
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dfc:	e011      	b.n	8002e22 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dfe:	f7fe fd21 	bl	8001844 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d803      	bhi.n	8002e16 <HAL_SPI_Receive+0x208>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e14:	d102      	bne.n	8002e1c <HAL_SPI_Receive+0x20e>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d102      	bne.n	8002e22 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e20:	e073      	b.n	8002f0a <HAL_SPI_Receive+0x2fc>
    while (hspi->RxXferCount > 0U)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1cd      	bne.n	8002dc8 <HAL_SPI_Receive+0x1ba>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e34:	d144      	bne.n	8002ec0 <HAL_SPI_Receive+0x2b2>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e44:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	2101      	movs	r1, #1
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 fa87 	bl	8003364 <SPI_WaitFlagStateUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <HAL_SPI_Receive+0x254>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	77fb      	strb	r3, [r7, #31]
      goto error;
 8002e60:	e053      	b.n	8002f0a <HAL_SPI_Receive+0x2fc>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e6a:	d107      	bne.n	8002e7c <HAL_SPI_Receive+0x26e>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e76:	b292      	uxth	r2, r2
 8002e78:	801a      	strh	r2, [r3, #0]
 8002e7a:	e008      	b.n	8002e8e <HAL_SPI_Receive+0x280>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f103 020c 	add.w	r2, r3, #12
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e88:	7812      	ldrb	r2, [r2, #0]
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2201      	movs	r2, #1
 8002e96:	2101      	movs	r1, #1
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 fa63 	bl	8003364 <SPI_WaitFlagStateUntilTimeout>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_SPI_Receive+0x2a8>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea8:	f043 0202 	orr.w	r2, r3, #2
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	77fb      	strb	r3, [r7, #31]
      goto error;
 8002eb4:	e029      	b.n	8002f0a <HAL_SPI_Receive+0x2fc>
    }

    /* Read CRC to Flush DR and RXNE flag */
    tmpreg = READ_REG(hspi->Instance->DR);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 8002ebe:	697b      	ldr	r3, [r7, #20]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	6839      	ldr	r1, [r7, #0]
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 fad5 	bl	8003474 <SPI_EndRxTransaction>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <HAL_SPI_Receive+0x2c8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	2b10      	cmp	r3, #16
 8002ee2:	d10a      	bne.n	8002efa <HAL_SPI_Receive+0x2ec>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee8:	f043 0202 	orr.w	r2, r3, #2
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002ef8:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <HAL_SPI_Receive+0x2fa>
  {
    errorcode = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	77fb      	strb	r3, [r7, #31]
 8002f06:	e000      	b.n	8002f0a <HAL_SPI_Receive+0x2fc>
  }

error :
 8002f08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3720      	adds	r7, #32
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08e      	sub	sp, #56	; 0x38
 8002f28:	af02      	add	r7, sp, #8
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
 8002f30:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_TxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f36:	2301      	movs	r3, #1
 8002f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_SPI_TransmitReceive+0x2a>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e1f8      	b.n	8003340 <HAL_SPI_TransmitReceive+0x41c>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f56:	f7fe fc75 	bl	8001844 <HAL_GetTick>
 8002f5a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002f6c:	887b      	ldrh	r3, [r7, #2]
 8002f6e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d00f      	beq.n	8002f98 <HAL_SPI_TransmitReceive+0x74>
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f7e:	d107      	bne.n	8002f90 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d103      	bne.n	8002f90 <HAL_SPI_TransmitReceive+0x6c>
 8002f88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d003      	beq.n	8002f98 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8002f90:	2302      	movs	r3, #2
 8002f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f96:	e1c9      	b.n	800332c <HAL_SPI_TransmitReceive+0x408>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d005      	beq.n	8002faa <HAL_SPI_TransmitReceive+0x86>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d002      	beq.n	8002faa <HAL_SPI_TransmitReceive+0x86>
 8002fa4:	887b      	ldrh	r3, [r7, #2]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d103      	bne.n	8002fb2 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002fb0:	e1bc      	b.n	800332c <HAL_SPI_TransmitReceive+0x408>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d003      	beq.n	8002fc6 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2205      	movs	r2, #5
 8002fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	887a      	ldrh	r2, [r7, #2]
 8002fd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	887a      	ldrh	r2, [r7, #2]
 8002fdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	887a      	ldrh	r2, [r7, #2]
 8002fe8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	887a      	ldrh	r2, [r7, #2]
 8002fee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003004:	d10f      	bne.n	8003026 <HAL_SPI_TransmitReceive+0x102>
  {
    SPI_RESET_CRC(hspi);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003024:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003030:	2b40      	cmp	r3, #64	; 0x40
 8003032:	d007      	beq.n	8003044 <HAL_SPI_TransmitReceive+0x120>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003042:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800304c:	f040 808b 	bne.w	8003166 <HAL_SPI_TransmitReceive+0x242>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d002      	beq.n	800305e <HAL_SPI_TransmitReceive+0x13a>
 8003058:	8b7b      	ldrh	r3, [r7, #26]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d178      	bne.n	8003150 <HAL_SPI_TransmitReceive+0x22c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	881a      	ldrh	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	1c9a      	adds	r2, r3, #2
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003078:	b29b      	uxth	r3, r3
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003082:	e065      	b.n	8003150 <HAL_SPI_TransmitReceive+0x22c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b02      	cmp	r3, #2
 8003090:	d12d      	bne.n	80030ee <HAL_SPI_TransmitReceive+0x1ca>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003096:	b29b      	uxth	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d028      	beq.n	80030ee <HAL_SPI_TransmitReceive+0x1ca>
 800309c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d125      	bne.n	80030ee <HAL_SPI_TransmitReceive+0x1ca>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	881a      	ldrh	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	1c9a      	adds	r2, r3, #2
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030bc:	b29b      	uxth	r3, r3
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10c      	bne.n	80030ee <HAL_SPI_TransmitReceive+0x1ca>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030dc:	d107      	bne.n	80030ee <HAL_SPI_TransmitReceive+0x1ca>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030ec:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d119      	bne.n	8003130 <HAL_SPI_TransmitReceive+0x20c>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003100:	b29b      	uxth	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d014      	beq.n	8003130 <HAL_SPI_TransmitReceive+0x20c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	b292      	uxth	r2, r2
 8003112:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003118:	1c9a      	adds	r2, r3, #2
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800312c:	2301      	movs	r3, #1
 800312e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003130:	f7fe fb88 	bl	8001844 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800313c:	429a      	cmp	r2, r3
 800313e:	d807      	bhi.n	8003150 <HAL_SPI_TransmitReceive+0x22c>
 8003140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003142:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003146:	d003      	beq.n	8003150 <HAL_SPI_TransmitReceive+0x22c>
      {
        errorcode = HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800314e:	e0ed      	b.n	800332c <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003154:	b29b      	uxth	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d194      	bne.n	8003084 <HAL_SPI_TransmitReceive+0x160>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d18f      	bne.n	8003084 <HAL_SPI_TransmitReceive+0x160>
 8003164:	e08e      	b.n	8003284 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <HAL_SPI_TransmitReceive+0x250>
 800316e:	8b7b      	ldrh	r3, [r7, #26]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d17d      	bne.n	8003270 <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	330c      	adds	r3, #12
 800317e:	7812      	ldrb	r2, [r2, #0]
 8003180:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800319a:	e069      	b.n	8003270 <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d12e      	bne.n	8003208 <HAL_SPI_TransmitReceive+0x2e4>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d029      	beq.n	8003208 <HAL_SPI_TransmitReceive+0x2e4>
 80031b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d126      	bne.n	8003208 <HAL_SPI_TransmitReceive+0x2e4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	330c      	adds	r3, #12
 80031c4:	7812      	ldrb	r2, [r2, #0]
 80031c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10c      	bne.n	8003208 <HAL_SPI_TransmitReceive+0x2e4>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f6:	d107      	bne.n	8003208 <HAL_SPI_TransmitReceive+0x2e4>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003206:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b01      	cmp	r3, #1
 8003214:	d119      	bne.n	800324a <HAL_SPI_TransmitReceive+0x326>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d014      	beq.n	800324a <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800323c:	b29b      	uxth	r3, r3
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003246:	2301      	movs	r3, #1
 8003248:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800324a:	f7fe fafb 	bl	8001844 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003256:	429a      	cmp	r2, r3
 8003258:	d803      	bhi.n	8003262 <HAL_SPI_TransmitReceive+0x33e>
 800325a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003260:	d102      	bne.n	8003268 <HAL_SPI_TransmitReceive+0x344>
 8003262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003264:	2b00      	cmp	r3, #0
 8003266:	d103      	bne.n	8003270 <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800326e:	e05d      	b.n	800332c <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d190      	bne.n	800319c <HAL_SPI_TransmitReceive+0x278>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800327e:	b29b      	uxth	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d18b      	bne.n	800319c <HAL_SPI_TransmitReceive+0x278>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800328c:	d119      	bne.n	80032c2 <HAL_SPI_TransmitReceive+0x39e>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003294:	2201      	movs	r2, #1
 8003296:	2101      	movs	r1, #1
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f863 	bl	8003364 <SPI_WaitFlagStateUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d009      	beq.n	80032b8 <HAL_SPI_TransmitReceive+0x394>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a8:	f043 0202 	orr.w	r2, r3, #2
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 80032b6:	e039      	b.n	800332c <HAL_SPI_TransmitReceive+0x408>
    }
    /* Read CRC */
    tmpreg = READ_REG(hspi->Instance->DR);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 80032c0:	697b      	ldr	r3, [r7, #20]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 0310 	and.w	r3, r3, #16
 80032cc:	2b10      	cmp	r3, #16
 80032ce:	d10d      	bne.n	80032ec <HAL_SPI_TransmitReceive+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d4:	f043 0202 	orr.w	r2, r3, #2
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80032e4:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 f925 	bl	8003540 <SPI_EndRxTxTransaction>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d006      	beq.n	800330a <HAL_SPI_TransmitReceive+0x3e6>
  {
    errorcode = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2220      	movs	r2, #32
 8003306:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003308:	e010      	b.n	800332c <HAL_SPI_TransmitReceive+0x408>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10b      	bne.n	800332a <HAL_SPI_TransmitReceive+0x406>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003312:	2300      	movs	r3, #0
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	e000      	b.n	800332c <HAL_SPI_TransmitReceive+0x408>
  }

error :
 800332a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800333c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003340:	4618      	mov	r0, r3
 8003342:	3730      	adds	r7, #48	; 0x30
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003356:	b2db      	uxtb	r3, r3
}
 8003358:	4618      	mov	r0, r3
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	4613      	mov	r3, r2
 8003372:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003374:	f7fe fa66 	bl	8001844 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	4413      	add	r3, r2
 8003382:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003384:	f7fe fa5e 	bl	8001844 <HAL_GetTick>
 8003388:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800338a:	4b39      	ldr	r3, [pc, #228]	; (8003470 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	015b      	lsls	r3, r3, #5
 8003390:	0d1b      	lsrs	r3, r3, #20
 8003392:	69fa      	ldr	r2, [r7, #28]
 8003394:	fb02 f303 	mul.w	r3, r2, r3
 8003398:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800339a:	e054      	b.n	8003446 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033a2:	d050      	beq.n	8003446 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033a4:	f7fe fa4e 	bl	8001844 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	69fa      	ldr	r2, [r7, #28]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d902      	bls.n	80033ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d13d      	bne.n	8003436 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033d2:	d111      	bne.n	80033f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033dc:	d004      	beq.n	80033e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e6:	d107      	bne.n	80033f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003400:	d10f      	bne.n	8003422 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003420:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e017      	b.n	8003466 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	3b01      	subs	r3, #1
 8003444:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4013      	ands	r3, r2
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	429a      	cmp	r2, r3
 8003454:	bf0c      	ite	eq
 8003456:	2301      	moveq	r3, #1
 8003458:	2300      	movne	r3, #0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	461a      	mov	r2, r3
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	429a      	cmp	r2, r3
 8003462:	d19b      	bne.n	800339c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3720      	adds	r7, #32
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20000028 	.word	0x20000028

08003474 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af02      	add	r7, sp, #8
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003488:	d111      	bne.n	80034ae <SPI_EndRxTransaction+0x3a>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003492:	d004      	beq.n	800349e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800349c:	d107      	bne.n	80034ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034b6:	d12a      	bne.n	800350e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c0:	d012      	beq.n	80034e8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2200      	movs	r2, #0
 80034ca:	2180      	movs	r1, #128	; 0x80
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f7ff ff49 	bl	8003364 <SPI_WaitFlagStateUntilTimeout>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d02d      	beq.n	8003534 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034dc:	f043 0220 	orr.w	r2, r3, #32
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e026      	b.n	8003536 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2200      	movs	r2, #0
 80034f0:	2101      	movs	r1, #1
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f7ff ff36 	bl	8003364 <SPI_WaitFlagStateUntilTimeout>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d01a      	beq.n	8003534 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003502:	f043 0220 	orr.w	r2, r3, #32
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e013      	b.n	8003536 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2200      	movs	r2, #0
 8003516:	2101      	movs	r1, #1
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f7ff ff23 	bl	8003364 <SPI_WaitFlagStateUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d007      	beq.n	8003534 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003528:	f043 0220 	orr.w	r2, r3, #32
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e000      	b.n	8003536 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af02      	add	r7, sp, #8
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800354c:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <SPI_EndRxTxTransaction+0x7c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1b      	ldr	r2, [pc, #108]	; (80035c0 <SPI_EndRxTxTransaction+0x80>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	0d5b      	lsrs	r3, r3, #21
 8003558:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800355c:	fb02 f303 	mul.w	r3, r2, r3
 8003560:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800356a:	d112      	bne.n	8003592 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2200      	movs	r2, #0
 8003574:	2180      	movs	r1, #128	; 0x80
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f7ff fef4 	bl	8003364 <SPI_WaitFlagStateUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d016      	beq.n	80035b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003586:	f043 0220 	orr.w	r2, r3, #32
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e00f      	b.n	80035b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	3b01      	subs	r3, #1
 800359c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a8:	2b80      	cmp	r3, #128	; 0x80
 80035aa:	d0f2      	beq.n	8003592 <SPI_EndRxTxTransaction+0x52>
 80035ac:	e000      	b.n	80035b0 <SPI_EndRxTxTransaction+0x70>
        break;
 80035ae:	bf00      	nop
  }

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	20000028 	.word	0x20000028
 80035c0:	165e9f81 	.word	0x165e9f81

080035c4 <nRF24_IRQ_Callback>:
static void SystemClock_Config(void);
static void Error_Handler(void);

/* Private functions ---------------------------------------------------------*/
void nRF24_IRQ_Callback(uint8_t event_type, uint16_t data_src, uint8_t* data, uint8_t width)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	603a      	str	r2, [r7, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	4603      	mov	r3, r0
 80035d0:	71fb      	strb	r3, [r7, #7]
 80035d2:	460b      	mov	r3, r1
 80035d4:	80bb      	strh	r3, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	71bb      	strb	r3, [r7, #6]
	switch(event_type) {
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	3b04      	subs	r3, #4
 80035de:	2b03      	cmp	r3, #3
 80035e0:	d80f      	bhi.n	8003602 <nRF24_IRQ_Callback+0x3e>
 80035e2:	a201      	add	r2, pc, #4	; (adr r2, 80035e8 <nRF24_IRQ_Callback+0x24>)
 80035e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e8:	08003601 	.word	0x08003601
 80035ec:	08003601 	.word	0x08003601
 80035f0:	080035f9 	.word	0x080035f9
 80035f4:	08003601 	.word	0x08003601
		case EVENT_RX_DR:
			BSP_LED_Toggle(LED2);
 80035f8:	2001      	movs	r0, #1
 80035fa:	f7fe f845 	bl	8001688 <BSP_LED_Toggle>
			break;
 80035fe:	e000      	b.n	8003602 <nRF24_IRQ_Callback+0x3e>
		case EVENT_TX_DS:
			break;
		case EVENT_MAX_RT:
			break;
 8003600:	bf00      	nop
		case EVENT_GPIO_IRQ:
			break;
	}
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop

0800360c <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
	/* STM32F4xx HAL library initialization */
	HAL_Init();
 8003610:	f7fe f8b8 	bl	8001784 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8003614:	f000 f846 	bl	80036a4 <SystemClock_Config>

	/* Initialize BSP LED1 */
	BSP_LED_Init(LED1);
 8003618:	2000      	movs	r0, #0
 800361a:	f7fd ffcb 	bl	80015b4 <BSP_LED_Init>
	BSP_LED_Init(LED2);
 800361e:	2001      	movs	r0, #1
 8003620:	f7fd ffc8 	bl	80015b4 <BSP_LED_Init>

	/* CONFIG */
	hnrf24.Init.CrcEnable = 1;
 8003624:	4b1e      	ldr	r3, [pc, #120]	; (80036a0 <main+0x94>)
 8003626:	2201      	movs	r2, #1
 8003628:	701a      	strb	r2, [r3, #0]
	hnrf24.Init.CrcEncodingScheme = CRC_ENCODING_1_BYTE;
 800362a:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <main+0x94>)
 800362c:	2200      	movs	r2, #0
 800362e:	705a      	strb	r2, [r3, #1]
	/* EN_AA */
	hnrf24.Init.AutoAckEnable = 1;
 8003630:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <main+0x94>)
 8003632:	2201      	movs	r2, #1
 8003634:	709a      	strb	r2, [r3, #2]
	hnrf24.Init.AutoAckDataPipes = 0b00000001;
 8003636:	4b1a      	ldr	r3, [pc, #104]	; (80036a0 <main+0x94>)
 8003638:	2201      	movs	r2, #1
 800363a:	70da      	strb	r2, [r3, #3]
	/* EN_RXADDR */
	hnrf24.Init.RxDataPipes = 0b00000001;
 800363c:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <main+0x94>)
 800363e:	2201      	movs	r2, #1
 8003640:	711a      	strb	r2, [r3, #4]
	/* SETUP_AW */
	hnrf24.Init.Aw = AW_3_BYTES;
 8003642:	4b17      	ldr	r3, [pc, #92]	; (80036a0 <main+0x94>)
 8003644:	2201      	movs	r2, #1
 8003646:	715a      	strb	r2, [r3, #5]
	/* RF_CH */
	hnrf24.Init.RfChannel = 0b00000010;
 8003648:	4b15      	ldr	r3, [pc, #84]	; (80036a0 <main+0x94>)
 800364a:	2202      	movs	r2, #2
 800364c:	719a      	strb	r2, [r3, #6]
	/* RF_SETUP */
	hnrf24.Init.ContWave = 0;
 800364e:	4b14      	ldr	r3, [pc, #80]	; (80036a0 <main+0x94>)
 8003650:	2200      	movs	r2, #0
 8003652:	71da      	strb	r2, [r3, #7]
	hnrf24.Init.RfPower = RF_POWER_0DBM;
 8003654:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <main+0x94>)
 8003656:	2206      	movs	r2, #6
 8003658:	721a      	strb	r2, [r3, #8]
	hnrf24.Init.RfDataRate = RF_DR_2MBPS;
 800365a:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <main+0x94>)
 800365c:	2208      	movs	r2, #8
 800365e:	725a      	strb	r2, [r3, #9]
	/* DPL */
	hnrf24.Init.DplEnable = 1;
 8003660:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <main+0x94>)
 8003662:	2201      	movs	r2, #1
 8003664:	729a      	strb	r2, [r3, #10]
	hnrf24.Init.DplEnableDataPipes = 0b00000001;
 8003666:	4b0e      	ldr	r3, [pc, #56]	; (80036a0 <main+0x94>)
 8003668:	2201      	movs	r2, #1
 800366a:	72da      	strb	r2, [r3, #11]
	/* EN_DYN_ACK */
	hnrf24.Init.DynAckEnable = 0;
 800366c:	4b0c      	ldr	r3, [pc, #48]	; (80036a0 <main+0x94>)
 800366e:	2200      	movs	r2, #0
 8003670:	731a      	strb	r2, [r3, #12]

	hnrf24.StatusRegister = 0;
 8003672:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <main+0x94>)
 8003674:	2200      	movs	r2, #0
 8003676:	735a      	strb	r2, [r3, #13]
	hnrf24.DeviceMode = RECEIVER_MODE;
 8003678:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <main+0x94>)
 800367a:	2202      	movs	r2, #2
 800367c:	739a      	strb	r2, [r3, #14]

	if (nRF24_Init(&hnrf24) != NRF24_OK) {
 800367e:	4808      	ldr	r0, [pc, #32]	; (80036a0 <main+0x94>)
 8003680:	f7fd fc56 	bl	8000f30 <nRF24_Init>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <main+0x82>
		Error_Handler();
 800368a:	f000 f86d 	bl	8003768 <Error_Handler>
	}

	/* Infinite loop */
	while (1)
	{
		BSP_LED_Toggle(LED1);
 800368e:	2000      	movs	r0, #0
 8003690:	f7fd fffa 	bl	8001688 <BSP_LED_Toggle>
		HAL_Delay(1000);
 8003694:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003698:	f7fe f8e0 	bl	800185c <HAL_Delay>
		BSP_LED_Toggle(LED1);
 800369c:	e7f7      	b.n	800368e <main+0x82>
 800369e:	bf00      	nop
 80036a0:	200000bc 	.word	0x200000bc

080036a4 <SystemClock_Config>:
	}
}

static void SystemClock_Config(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b094      	sub	sp, #80	; 0x50
 80036a8:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	4b2c      	ldr	r3, [pc, #176]	; (8003760 <SystemClock_Config+0xbc>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	4a2b      	ldr	r2, [pc, #172]	; (8003760 <SystemClock_Config+0xbc>)
 80036b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ba:	4b29      	ldr	r3, [pc, #164]	; (8003760 <SystemClock_Config+0xbc>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c2:	60bb      	str	r3, [r7, #8]
 80036c4:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036c6:	2300      	movs	r3, #0
 80036c8:	607b      	str	r3, [r7, #4]
 80036ca:	4b26      	ldr	r3, [pc, #152]	; (8003764 <SystemClock_Config+0xc0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a25      	ldr	r2, [pc, #148]	; (8003764 <SystemClock_Config+0xc0>)
 80036d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	4b23      	ldr	r3, [pc, #140]	; (8003764 <SystemClock_Config+0xc0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80036de:	607b      	str	r3, [r7, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80036e2:	2301      	movs	r3, #1
 80036e4:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80036e6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80036ea:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036ec:	2302      	movs	r3, #2
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80036f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036f4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 80036f6:	2308      	movs	r3, #8
 80036f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 80036fa:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80036fe:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003700:	2302      	movs	r3, #2
 8003702:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8003704:	2307      	movs	r3, #7
 8003706:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003708:	f107 030c 	add.w	r3, r7, #12
 800370c:	4618      	mov	r0, r3
 800370e:	f7fe fc2b 	bl	8001f68 <HAL_RCC_OscConfig>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 8003718:	f000 f826 	bl	8003768 <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 800371c:	f7fe fbd4 	bl	8001ec8 <HAL_PWREx_EnableOverDrive>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 8003726:	f000 f81f 	bl	8003768 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800372a:	230f      	movs	r3, #15
 800372c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800372e:	2302      	movs	r3, #2
 8003730:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003732:	2300      	movs	r3, #0
 8003734:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003736:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800373a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800373c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003740:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003742:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003746:	2105      	movs	r1, #5
 8003748:	4618      	mov	r0, r3
 800374a:	f7fe fe85 	bl	8002458 <HAL_RCC_ClockConfig>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 8003754:	f000 f808 	bl	8003768 <Error_Handler>
	}
}
 8003758:	bf00      	nop
 800375a:	3750      	adds	r7, #80	; 0x50
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40023800 	.word	0x40023800
 8003764:	40007000 	.word	0x40007000

08003768 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 800376c:	2001      	movs	r0, #1
 800376e:	f7fd ff71 	bl	8001654 <BSP_LED_On>
	while (1)
 8003772:	e7fe      	b.n	8003772 <Error_Handler+0xa>

08003774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037ac <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003778:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800377a:	e003      	b.n	8003784 <LoopCopyDataInit>

0800377c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800377c:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800377e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003780:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003782:	3104      	adds	r1, #4

08003784 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003784:	480b      	ldr	r0, [pc, #44]	; (80037b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003786:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003788:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800378a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800378c:	d3f6      	bcc.n	800377c <CopyDataInit>
  ldr  r2, =_sbss
 800378e:	4a0b      	ldr	r2, [pc, #44]	; (80037bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003790:	e002      	b.n	8003798 <LoopFillZerobss>

08003792 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003792:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003794:	f842 3b04 	str.w	r3, [r2], #4

08003798 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003798:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800379a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800379c:	d3f9      	bcc.n	8003792 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800379e:	f7fd ff8d 	bl	80016bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037a2:	f000 f819 	bl	80037d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037a6:	f7ff ff31 	bl	800360c <main>
  bx  lr    
 80037aa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80037ac:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80037b0:	08003860 	.word	0x08003860
  ldr  r0, =_sdata
 80037b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80037b8:	20000034 	.word	0x20000034
  ldr  r2, =_sbss
 80037bc:	20000034 	.word	0x20000034
  ldr  r3, = _ebss
 80037c0:	200000cc 	.word	0x200000cc

080037c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037c4:	e7fe      	b.n	80037c4 <ADC_IRQHandler>

080037c6 <memset>:
 80037c6:	4402      	add	r2, r0
 80037c8:	4603      	mov	r3, r0
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d100      	bne.n	80037d0 <memset+0xa>
 80037ce:	4770      	bx	lr
 80037d0:	f803 1b01 	strb.w	r1, [r3], #1
 80037d4:	e7f9      	b.n	80037ca <memset+0x4>
	...

080037d8 <__libc_init_array>:
 80037d8:	b570      	push	{r4, r5, r6, lr}
 80037da:	4d0d      	ldr	r5, [pc, #52]	; (8003810 <__libc_init_array+0x38>)
 80037dc:	4c0d      	ldr	r4, [pc, #52]	; (8003814 <__libc_init_array+0x3c>)
 80037de:	1b64      	subs	r4, r4, r5
 80037e0:	10a4      	asrs	r4, r4, #2
 80037e2:	2600      	movs	r6, #0
 80037e4:	42a6      	cmp	r6, r4
 80037e6:	d109      	bne.n	80037fc <__libc_init_array+0x24>
 80037e8:	4d0b      	ldr	r5, [pc, #44]	; (8003818 <__libc_init_array+0x40>)
 80037ea:	4c0c      	ldr	r4, [pc, #48]	; (800381c <__libc_init_array+0x44>)
 80037ec:	f000 f818 	bl	8003820 <_init>
 80037f0:	1b64      	subs	r4, r4, r5
 80037f2:	10a4      	asrs	r4, r4, #2
 80037f4:	2600      	movs	r6, #0
 80037f6:	42a6      	cmp	r6, r4
 80037f8:	d105      	bne.n	8003806 <__libc_init_array+0x2e>
 80037fa:	bd70      	pop	{r4, r5, r6, pc}
 80037fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003800:	4798      	blx	r3
 8003802:	3601      	adds	r6, #1
 8003804:	e7ee      	b.n	80037e4 <__libc_init_array+0xc>
 8003806:	f855 3b04 	ldr.w	r3, [r5], #4
 800380a:	4798      	blx	r3
 800380c:	3601      	adds	r6, #1
 800380e:	e7f2      	b.n	80037f6 <__libc_init_array+0x1e>
 8003810:	08003858 	.word	0x08003858
 8003814:	08003858 	.word	0x08003858
 8003818:	08003858 	.word	0x08003858
 800381c:	0800385c 	.word	0x0800385c

08003820 <_init>:
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	bf00      	nop
 8003824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003826:	bc08      	pop	{r3}
 8003828:	469e      	mov	lr, r3
 800382a:	4770      	bx	lr

0800382c <_fini>:
 800382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382e:	bf00      	nop
 8003830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003832:	bc08      	pop	{r3}
 8003834:	469e      	mov	lr, r3
 8003836:	4770      	bx	lr
